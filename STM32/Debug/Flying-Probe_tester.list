
Flying-Probe_tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c288  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e4  0800c458  0800c458  0000d458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb3c  0800cb3c  0000e0c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb3c  0800cb3c  0000db3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb44  0800cb44  0000e0c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb44  0800cb44  0000db44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cb48  0800cb48  0000db48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  0800cb4c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001034  200000c0  0800cc0c  0000e0c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010f4  0800cc0c  0000e0f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e0c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024002  00000000  00000000  0000e0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d04  00000000  00000000  000320f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ba8  00000000  00000000  00036df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001560  00000000  00000000  000389a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b72f  00000000  00000000  00039f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027520  00000000  00000000  0006562f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9a3c  00000000  00000000  0008cb4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018658b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007900  00000000  00000000  001865d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0018ded0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c440 	.word	0x0800c440

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c4 	.word	0x200000c4
 800020c:	0800c440 	.word	0x0800c440

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <__lcd_delay_us>:
 * @param[in] htim     : LCD timer handler
 * @param[in] delay_us : Delay period in microseconds
 * @return None
 */
void __lcd_delay_us(LCD_TimerType htim, uint16_t delay_us)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	460b      	mov	r3, r1
 80005ba:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COUNTER(htim, 0);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2200      	movs	r2, #0
 80005c2:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(htim);
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f007 fa05 	bl	80079d4 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(htim) < delay_us);
 80005ca:	bf00      	nop
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005d2:	887b      	ldrh	r3, [r7, #2]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d3f9      	bcc.n	80005cc <__lcd_delay_us+0x1c>
  HAL_TIM_Base_Stop(htim);
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f007 fa6b 	bl	8007ab4 <HAL_TIM_Base_Stop>
}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <__lcd_i2c_write>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write(LCD_I2C_HandleTypeDef* hlcd, uint8_t rsRwBits, uint8_t data)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af02      	add	r7, sp, #8
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	70fb      	strb	r3, [r7, #3]
 80005f4:	4613      	mov	r3, r2
 80005f6:	70bb      	strb	r3, [r7, #2]
    /* most significant nibble */
    __lcd_i2c_buffer[0] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 80005f8:	78bb      	ldrb	r3, [r7, #2]
 80005fa:	f023 030f 	bic.w	r3, r3, #15
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	78fb      	ldrb	r3, [r7, #3]
 8000602:	4313      	orrs	r3, r2
 8000604:	b2db      	uxtb	r3, r3
 8000606:	f043 030c 	orr.w	r3, r3, #12
 800060a:	b2da      	uxtb	r2, r3
 800060c:	4b21      	ldr	r3, [pc, #132]	@ (8000694 <__lcd_i2c_write+0xac>)
 800060e:	701a      	strb	r2, [r3, #0]
    __lcd_i2c_buffer[1] = __lcd_i2c_buffer[0];
 8000610:	4b20      	ldr	r3, [pc, #128]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000612:	781a      	ldrb	r2, [r3, #0]
 8000614:	4b1f      	ldr	r3, [pc, #124]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000616:	705a      	strb	r2, [r3, #1]
    __lcd_i2c_buffer[2] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 8000618:	78bb      	ldrb	r3, [r7, #2]
 800061a:	f023 030f 	bic.w	r3, r3, #15
 800061e:	b2da      	uxtb	r2, r3
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	4313      	orrs	r3, r2
 8000624:	b2db      	uxtb	r3, r3
 8000626:	f043 0308 	orr.w	r3, r3, #8
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4b19      	ldr	r3, [pc, #100]	@ (8000694 <__lcd_i2c_write+0xac>)
 800062e:	709a      	strb	r2, [r3, #2]

    /* least significant nibble */
    __lcd_i2c_buffer[3] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 8000630:	78bb      	ldrb	r3, [r7, #2]
 8000632:	011b      	lsls	r3, r3, #4
 8000634:	b2da      	uxtb	r2, r3
 8000636:	78fb      	ldrb	r3, [r7, #3]
 8000638:	4313      	orrs	r3, r2
 800063a:	b2db      	uxtb	r3, r3
 800063c:	f043 030c 	orr.w	r3, r3, #12
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4b14      	ldr	r3, [pc, #80]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000644:	70da      	strb	r2, [r3, #3]
    __lcd_i2c_buffer[4] = __lcd_i2c_buffer[3];
 8000646:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000648:	78da      	ldrb	r2, [r3, #3]
 800064a:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <__lcd_i2c_write+0xac>)
 800064c:	711a      	strb	r2, [r3, #4]
    __lcd_i2c_buffer[5] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 800064e:	78bb      	ldrb	r3, [r7, #2]
 8000650:	011b      	lsls	r3, r3, #4
 8000652:	b2da      	uxtb	r2, r3
 8000654:	78fb      	ldrb	r3, [r7, #3]
 8000656:	4313      	orrs	r3, r2
 8000658:	b2db      	uxtb	r3, r3
 800065a:	f043 0308 	orr.w	r3, r3, #8
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000662:	715a      	strb	r2, [r3, #5]

    HAL_I2C_Master_Transmit(hlcd->I2C, (hlcd->Address << 1), (uint8_t*)__lcd_i2c_buffer, 6, hlcd->Timeout);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6818      	ldr	r0, [r3, #0]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	889b      	ldrh	r3, [r3, #4]
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	b299      	uxth	r1, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2306      	movs	r3, #6
 8000678:	4a06      	ldr	r2, [pc, #24]	@ (8000694 <__lcd_i2c_write+0xac>)
 800067a:	f004 fd6b 	bl	8005154 <HAL_I2C_Master_Transmit>

    __lcd_delay(hlcd->Timer, 0.05);  // > 41 us
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	2132      	movs	r1, #50	@ 0x32
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff ff93 	bl	80005b0 <__lcd_delay_us>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	200000dc 	.word	0x200000dc

08000698 <__lcd_i2c_write_command>:
 * @param[in] hlcd    : LCD handler with I2C interface
 * @param[in] command : Display command @see lcd.h/Define
 * @return None
 */
void __lcd_i2c_write_command(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_COMMAND_REG, data);
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	461a      	mov	r2, r3
 80006a8:	2100      	movs	r1, #0
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f7ff ff9c 	bl	80005e8 <__lcd_i2c_write>
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <__lcd_i2c_write_data>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write_data(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_DATA_REG, data);
 80006c4:	78fb      	ldrb	r3, [r7, #3]
 80006c6:	461a      	mov	r2, r3
 80006c8:	2101      	movs	r1, #1
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f7ff ff8c 	bl	80005e8 <__lcd_i2c_write>
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <LCD_I2C_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Init(LCD_I2C_HandleTypeDef* hlcd)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
    // Step 1: Initial delay after power-on
    __lcd_delay(hlcd->Timer, 50); // Wait at least 40 ms after power-on
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff61 	bl	80005b0 <__lcd_delay_us>

    // Step 2: Force LCD into 4-bit mode
    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 80006ee:	2103      	movs	r1, #3
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f7ff ffd1 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 5);          // Wait > 4.1 ms
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	f241 3188 	movw	r1, #5000	@ 0x1388
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ff56 	bl	80005b0 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 8000704:	2103      	movs	r1, #3
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f7ff ffc6 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Wait > 100 µs
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff4b 	bl	80005b0 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 800071a:	2103      	movs	r1, #3
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff ffbb 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Short delay
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	68db      	ldr	r3, [r3, #12]
 8000726:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff40 	bl	80005b0 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x02);  // Function set: 4-bit mode
 8000730:	2102      	movs	r1, #2
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f7ff ffb0 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Short delay
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff35 	bl	80005b0 <__lcd_delay_us>

    // Step 3: Configure display
    __lcd_i2c_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);        // Function set: 4-bit, 2-line, 5x8 dots
 8000746:	2128      	movs	r1, #40	@ 0x28
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff ffa5 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_i2c_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D); // Display on, cursor off, blink off
 800074e:	210c      	movs	r1, #12
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff ffa1 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);                   // Clear display
 8000756:	2101      	movs	r1, #1
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff ff9d 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 2);                                        // Wait > 1.52 ms
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff22 	bl	80005b0 <__lcd_delay_us>
    __lcd_i2c_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);    // Entry mode: increment cursor, no shift
 800076c:	2106      	movs	r1, #6
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ff92 	bl	8000698 <__lcd_i2c_write_command>

    // Mark as initialized
    hlcd->IsInitialized = 1;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2201      	movs	r2, #1
 8000778:	741a      	strb	r2, [r3, #16]
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <LCD_I2C_printCustomChar>:
 * @param[in] hlcd   : LCD custom character handler with I2C interface
 * @return None
 */


void LCD_I2C_printCustomChar(LCD_I2C_HandleTypeDef* hlcd, uint8_t code) {
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	460b      	mov	r3, r1
 800078c:	70fb      	strb	r3, [r7, #3]
  // Assuming __lcd_i2c_write_data allows sending custom character code directly
  __lcd_i2c_write_data(hlcd, code);
 800078e:	78fb      	ldrb	r3, [r7, #3]
 8000790:	4619      	mov	r1, r3
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff ff90 	bl	80006b8 <__lcd_i2c_write_data>
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <LCD_I2C_Cursor>:
 * @param[in] row  : Display row (line): 0 to N
 * @param[in] col  : Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None
 */
void LCD_I2C_Cursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	70fb      	strb	r3, [r7, #3]
 80007ac:	4613      	mov	r3, r2
 80007ae:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	4a07      	ldr	r2, [pc, #28]	@ (80007d0 <LCD_I2C_Cursor+0x30>)
 80007b4:	5cd2      	ldrb	r2, [r2, r3]
 80007b6:	78bb      	ldrb	r3, [r7, #2]
 80007b8:	4413      	add	r3, r2
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	3b80      	subs	r3, #128	@ 0x80
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	4619      	mov	r1, r3
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f7ff ff68 	bl	8000698 <__lcd_i2c_write_command>
  #endif
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	0800cae4 	.word	0x0800cae4

080007d4 <LCD_I2C_SetCursor>:
void LCD_I2C_SetCursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	70fb      	strb	r3, [r7, #3]
 80007e0:	4613      	mov	r3, r2
 80007e2:	70bb      	strb	r3, [r7, #2]
	if(row >=2){
 80007e4:	78fb      	ldrb	r3, [r7, #3]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d90a      	bls.n	8000800 <LCD_I2C_SetCursor+0x2c>
		LCD_I2C_Cursor(hlcd,row-2,col+20);
 80007ea:	78fb      	ldrb	r3, [r7, #3]
 80007ec:	3b02      	subs	r3, #2
 80007ee:	b2d9      	uxtb	r1, r3
 80007f0:	78bb      	ldrb	r3, [r7, #2]
 80007f2:	3314      	adds	r3, #20
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	461a      	mov	r2, r3
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff ffd1 	bl	80007a0 <LCD_I2C_Cursor>
}
	else{
		LCD_I2C_Cursor(hlcd,row,col);
	}
}
 80007fe:	e005      	b.n	800080c <LCD_I2C_SetCursor+0x38>
		LCD_I2C_Cursor(hlcd,row,col);
 8000800:	78ba      	ldrb	r2, [r7, #2]
 8000802:	78fb      	ldrb	r3, [r7, #3]
 8000804:	4619      	mov	r1, r3
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff ffca 	bl	80007a0 <LCD_I2C_Cursor>
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <LCD_I2C_Clear>:
 * @brief Clear the screen.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Clear(LCD_I2C_HandleTypeDef * hlcd)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);
 800081c:	2101      	movs	r1, #1
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff ff3a 	bl	8000698 <__lcd_i2c_write_command>
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <LCD_I2C_DefineChar>:
 * @param[in] code   : Defined character code in display memory @see HD44780 technical note.
 * @param[in] bitmap : Defined character array @see HD44780 technical note.
 * @return None
 */
void LCD_I2C_DefineChar(LCD_I2C_HandleTypeDef* hlcd, uint8_t code, uint8_t bitmap[])
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	460b      	mov	r3, r1
 8000836:	607a      	str	r2, [r7, #4]
 8000838:	72fb      	strb	r3, [r7, #11]
  __lcd_i2c_write_command(hlcd, LCD_SETCGRAM_ADDR + (code << 3));
 800083a:	7afb      	ldrb	r3, [r7, #11]
 800083c:	00db      	lsls	r3, r3, #3
 800083e:	b2db      	uxtb	r3, r3
 8000840:	3340      	adds	r3, #64	@ 0x40
 8000842:	b2db      	uxtb	r3, r3
 8000844:	4619      	mov	r1, r3
 8000846:	68f8      	ldr	r0, [r7, #12]
 8000848:	f7ff ff26 	bl	8000698 <__lcd_i2c_write_command>

  for(uint8_t i=0; i < 8; ++i)
 800084c:	2300      	movs	r3, #0
 800084e:	75fb      	strb	r3, [r7, #23]
 8000850:	e00a      	b.n	8000868 <LCD_I2C_DefineChar+0x3c>
    __lcd_i2c_write_data(hlcd, bitmap[i]);
 8000852:	7dfb      	ldrb	r3, [r7, #23]
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	4413      	add	r3, r2
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	4619      	mov	r1, r3
 800085c:	68f8      	ldr	r0, [r7, #12]
 800085e:	f7ff ff2b 	bl	80006b8 <__lcd_i2c_write_data>
  for(uint8_t i=0; i < 8; ++i)
 8000862:	7dfb      	ldrb	r3, [r7, #23]
 8000864:	3301      	adds	r3, #1
 8000866:	75fb      	strb	r3, [r7, #23]
 8000868:	7dfb      	ldrb	r3, [r7, #23]
 800086a:	2b07      	cmp	r3, #7
 800086c:	d9f1      	bls.n	8000852 <LCD_I2C_DefineChar+0x26>
}
 800086e:	bf00      	nop
 8000870:	bf00      	nop
 8000872:	3718      	adds	r7, #24
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <LCD_I2C_DisplaySequentialGlossyText>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] row  : Row number to display the text
 * @return None
 */
void LCD_I2C_DisplaySequentialGlossyText(LCD_I2C_HandleTypeDef* hlcd, uint8_t row)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	460b      	mov	r3, r1
 8000882:	70fb      	strb	r3, [r7, #3]
    // Ensure row is valid (0 or 1 for a 2x16 LCD)


    const char* text = "BONGO BONG";
 8000884:	4b23      	ldr	r3, [pc, #140]	@ (8000914 <LCD_I2C_DisplaySequentialGlossyText+0x9c>)
 8000886:	61bb      	str	r3, [r7, #24]
    uint8_t len = strlen(text);
 8000888:	69b8      	ldr	r0, [r7, #24]
 800088a:	f7ff fcc1 	bl	8000210 <strlen>
 800088e:	4603      	mov	r3, r0
 8000890:	75fb      	strb	r3, [r7, #23]

    // Create a highlight custom character
    uint8_t highlight_char[8] = {
 8000892:	4a21      	ldr	r2, [pc, #132]	@ (8000918 <LCD_I2C_DisplaySequentialGlossyText+0xa0>)
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	e892 0003 	ldmia.w	r2, {r0, r1}
 800089c:	e883 0003 	stmia.w	r3, {r0, r1}
        0b11111,
        0b11111
    };

    // Define the custom character in CGRAM
    LCD_I2C_DefineChar(hlcd, 0, highlight_char);
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	461a      	mov	r2, r3
 80008a6:	2100      	movs	r1, #0
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff ffbf 	bl	800082c <LCD_I2C_DefineChar>

    // Start from the first character
    for (uint8_t i = 0; i < len; i++) {
 80008ae:	2300      	movs	r3, #0
 80008b0:	77fb      	strb	r3, [r7, #31]
 80008b2:	e025      	b.n	8000900 <LCD_I2C_DisplaySequentialGlossyText+0x88>
        // Highlight the current character
        LCD_I2C_SetCursor(hlcd, row, i+3);
 80008b4:	7ffb      	ldrb	r3, [r7, #31]
 80008b6:	3303      	adds	r3, #3
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	78fb      	ldrb	r3, [r7, #3]
 80008bc:	4619      	mov	r1, r3
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ff88 	bl	80007d4 <LCD_I2C_SetCursor>
        LCD_I2C_printCustomChar(hlcd, 0);
 80008c4:	2100      	movs	r1, #0
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f7ff ff5b 	bl	8000782 <LCD_I2C_printCustomChar>

        // Wait to create the glossy effect
        __lcd_delay(hlcd->Timer, 200); // Adjust delay for visual preference
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fe6b 	bl	80005b0 <__lcd_delay_us>

        // Replace the highlighted character with the original character
        LCD_I2C_SetCursor(hlcd, row, i+3);
 80008da:	7ffb      	ldrb	r3, [r7, #31]
 80008dc:	3303      	adds	r3, #3
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	78fb      	ldrb	r3, [r7, #3]
 80008e2:	4619      	mov	r1, r3
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f7ff ff75 	bl	80007d4 <LCD_I2C_SetCursor>
        __lcd_i2c_write_data(hlcd, text[i]);
 80008ea:	7ffb      	ldrb	r3, [r7, #31]
 80008ec:	69ba      	ldr	r2, [r7, #24]
 80008ee:	4413      	add	r3, r2
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	4619      	mov	r1, r3
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff fedf 	bl	80006b8 <__lcd_i2c_write_data>
    for (uint8_t i = 0; i < len; i++) {
 80008fa:	7ffb      	ldrb	r3, [r7, #31]
 80008fc:	3301      	adds	r3, #1
 80008fe:	77fb      	strb	r3, [r7, #31]
 8000900:	7ffa      	ldrb	r2, [r7, #31]
 8000902:	7dfb      	ldrb	r3, [r7, #23]
 8000904:	429a      	cmp	r2, r3
 8000906:	d3d5      	bcc.n	80008b4 <LCD_I2C_DisplaySequentialGlossyText+0x3c>
    }
}
 8000908:	bf00      	nop
 800090a:	bf00      	nop
 800090c:	3720      	adds	r7, #32
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	0800c464 	.word	0x0800c464
 8000918:	0800c470 	.word	0x0800c470

0800091c <HAL_TIM_PWM_PulseFinishedCallback>:
uint32_t CurrentPosition;
////////// HAL FUNCTIONS //////////

// PWM callback for step counting
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < MAX_MOTORS; i++){
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	e087      	b.n	8000a3a <HAL_TIM_PWM_PulseFinishedCallback+0x11e>
	  if (htim->Instance == motors[i].driver.htim->Instance){ // Check which motor's timer called back
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6819      	ldr	r1, [r3, #0]
 800092e:	4847      	ldr	r0, [pc, #284]	@ (8000a4c <HAL_TIM_PWM_PulseFinishedCallback+0x130>)
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	4613      	mov	r3, r2
 8000934:	011b      	lsls	r3, r3, #4
 8000936:	1a9b      	subs	r3, r3, r2
 8000938:	00db      	lsls	r3, r3, #3
 800093a:	4403      	add	r3, r0
 800093c:	3310      	adds	r3, #16
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4299      	cmp	r1, r3
 8000944:	d176      	bne.n	8000a34 <HAL_TIM_PWM_PulseFinishedCallback+0x118>
		  motors[i].stepsTaken++;
 8000946:	4941      	ldr	r1, [pc, #260]	@ (8000a4c <HAL_TIM_PWM_PulseFinishedCallback+0x130>)
 8000948:	68fa      	ldr	r2, [r7, #12]
 800094a:	4613      	mov	r3, r2
 800094c:	011b      	lsls	r3, r3, #4
 800094e:	1a9b      	subs	r3, r3, r2
 8000950:	00db      	lsls	r3, r3, #3
 8000952:	440b      	add	r3, r1
 8000954:	3358      	adds	r3, #88	@ 0x58
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	1c59      	adds	r1, r3, #1
 800095a:	483c      	ldr	r0, [pc, #240]	@ (8000a4c <HAL_TIM_PWM_PulseFinishedCallback+0x130>)
 800095c:	68fa      	ldr	r2, [r7, #12]
 800095e:	4613      	mov	r3, r2
 8000960:	011b      	lsls	r3, r3, #4
 8000962:	1a9b      	subs	r3, r3, r2
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	4403      	add	r3, r0
 8000968:	3358      	adds	r3, #88	@ 0x58
 800096a:	6019      	str	r1, [r3, #0]
		  stepsTaken[i] = motors[i].stepsTaken;
 800096c:	4937      	ldr	r1, [pc, #220]	@ (8000a4c <HAL_TIM_PWM_PulseFinishedCallback+0x130>)
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	4613      	mov	r3, r2
 8000972:	011b      	lsls	r3, r3, #4
 8000974:	1a9b      	subs	r3, r3, r2
 8000976:	00db      	lsls	r3, r3, #3
 8000978:	440b      	add	r3, r1
 800097a:	3358      	adds	r3, #88	@ 0x58
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	4934      	ldr	r1, [pc, #208]	@ (8000a50 <HAL_TIM_PWM_PulseFinishedCallback+0x134>)
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  if(HAL_GPIO_ReadPin(motors[i].driver.dir_port, motors[i].driver.dir_pin) == GPIO_PIN_SET){
 8000986:	4931      	ldr	r1, [pc, #196]	@ (8000a4c <HAL_TIM_PWM_PulseFinishedCallback+0x130>)
 8000988:	68fa      	ldr	r2, [r7, #12]
 800098a:	4613      	mov	r3, r2
 800098c:	011b      	lsls	r3, r3, #4
 800098e:	1a9b      	subs	r3, r3, r2
 8000990:	00db      	lsls	r3, r3, #3
 8000992:	440b      	add	r3, r1
 8000994:	3330      	adds	r3, #48	@ 0x30
 8000996:	6818      	ldr	r0, [r3, #0]
 8000998:	492c      	ldr	r1, [pc, #176]	@ (8000a4c <HAL_TIM_PWM_PulseFinishedCallback+0x130>)
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	4613      	mov	r3, r2
 800099e:	011b      	lsls	r3, r3, #4
 80009a0:	1a9b      	subs	r3, r3, r2
 80009a2:	00db      	lsls	r3, r3, #3
 80009a4:	440b      	add	r3, r1
 80009a6:	3334      	adds	r3, #52	@ 0x34
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	4619      	mov	r1, r3
 80009ac:	f004 faec 	bl	8004f88 <HAL_GPIO_ReadPin>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d113      	bne.n	80009de <HAL_TIM_PWM_PulseFinishedCallback+0xc2>
		  motors[i].StepsFront++;
 80009b6:	4925      	ldr	r1, [pc, #148]	@ (8000a4c <HAL_TIM_PWM_PulseFinishedCallback+0x130>)
 80009b8:	68fa      	ldr	r2, [r7, #12]
 80009ba:	4613      	mov	r3, r2
 80009bc:	011b      	lsls	r3, r3, #4
 80009be:	1a9b      	subs	r3, r3, r2
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	440b      	add	r3, r1
 80009c4:	336c      	adds	r3, #108	@ 0x6c
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	1c59      	adds	r1, r3, #1
 80009ca:	4820      	ldr	r0, [pc, #128]	@ (8000a4c <HAL_TIM_PWM_PulseFinishedCallback+0x130>)
 80009cc:	68fa      	ldr	r2, [r7, #12]
 80009ce:	4613      	mov	r3, r2
 80009d0:	011b      	lsls	r3, r3, #4
 80009d2:	1a9b      	subs	r3, r3, r2
 80009d4:	00db      	lsls	r3, r3, #3
 80009d6:	4403      	add	r3, r0
 80009d8:	336c      	adds	r3, #108	@ 0x6c
 80009da:	6019      	str	r1, [r3, #0]
 80009dc:	e02a      	b.n	8000a34 <HAL_TIM_PWM_PulseFinishedCallback+0x118>
		  }
		  else if(HAL_GPIO_ReadPin(motors[i].driver.dir_port, motors[i].driver.dir_pin) == GPIO_PIN_RESET){
 80009de:	491b      	ldr	r1, [pc, #108]	@ (8000a4c <HAL_TIM_PWM_PulseFinishedCallback+0x130>)
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	4613      	mov	r3, r2
 80009e4:	011b      	lsls	r3, r3, #4
 80009e6:	1a9b      	subs	r3, r3, r2
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	440b      	add	r3, r1
 80009ec:	3330      	adds	r3, #48	@ 0x30
 80009ee:	6818      	ldr	r0, [r3, #0]
 80009f0:	4916      	ldr	r1, [pc, #88]	@ (8000a4c <HAL_TIM_PWM_PulseFinishedCallback+0x130>)
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	4613      	mov	r3, r2
 80009f6:	011b      	lsls	r3, r3, #4
 80009f8:	1a9b      	subs	r3, r3, r2
 80009fa:	00db      	lsls	r3, r3, #3
 80009fc:	440b      	add	r3, r1
 80009fe:	3334      	adds	r3, #52	@ 0x34
 8000a00:	881b      	ldrh	r3, [r3, #0]
 8000a02:	4619      	mov	r1, r3
 8000a04:	f004 fac0 	bl	8004f88 <HAL_GPIO_ReadPin>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d112      	bne.n	8000a34 <HAL_TIM_PWM_PulseFinishedCallback+0x118>

			  		  motors[i].StepsBack++;
 8000a0e:	490f      	ldr	r1, [pc, #60]	@ (8000a4c <HAL_TIM_PWM_PulseFinishedCallback+0x130>)
 8000a10:	68fa      	ldr	r2, [r7, #12]
 8000a12:	4613      	mov	r3, r2
 8000a14:	011b      	lsls	r3, r3, #4
 8000a16:	1a9b      	subs	r3, r3, r2
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	440b      	add	r3, r1
 8000a1c:	3370      	adds	r3, #112	@ 0x70
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	1c59      	adds	r1, r3, #1
 8000a22:	480a      	ldr	r0, [pc, #40]	@ (8000a4c <HAL_TIM_PWM_PulseFinishedCallback+0x130>)
 8000a24:	68fa      	ldr	r2, [r7, #12]
 8000a26:	4613      	mov	r3, r2
 8000a28:	011b      	lsls	r3, r3, #4
 8000a2a:	1a9b      	subs	r3, r3, r2
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	4403      	add	r3, r0
 8000a30:	3370      	adds	r3, #112	@ 0x70
 8000a32:	6019      	str	r1, [r3, #0]
  for(int i = 0; i < MAX_MOTORS; i++){
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	3301      	adds	r3, #1
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	2b03      	cmp	r3, #3
 8000a3e:	f77f af74 	ble.w	800092a <HAL_TIM_PWM_PulseFinishedCallback+0xe>
		 }
      }

    }
}
 8000a42:	bf00      	nop
 8000a44:	bf00      	nop
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000d44 	.word	0x20000d44
 8000a50:	200000e4 	.word	0x200000e4

08000a54 <TMC2209_SetDirection>:


// Set the direction of the motor
void TMC2209_SetDirection(Motor *motor, GPIO_PinState state) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(motor->driver.dir_port, motor->driver.dir_pin, state);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000a68:	78fa      	ldrb	r2, [r7, #3]
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	f004 faa4 	bl	8004fb8 <HAL_GPIO_WritePin>
    direction = state;
 8000a70:	4a03      	ldr	r2, [pc, #12]	@ (8000a80 <TMC2209_SetDirection+0x2c>)
 8000a72:	78fb      	ldrb	r3, [r7, #3]
 8000a74:	7013      	strb	r3, [r2, #0]
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200000e3 	.word	0x200000e3

08000a84 <TMC2209_EnableDriver>:

// Enable or disable the driver
void TMC2209_EnableDriver(Motor *motor, GPIO_PinState state) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(motor->driver.enn_port, motor->driver.enn_pin, state); // LOW = motor enabled, HIGH = motor disabled
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8000a98:	78fa      	ldrb	r2, [r7, #3]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	f004 fa8c 	bl	8004fb8 <HAL_GPIO_WritePin>
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <TMC2209_SetSpeed>:
    return HAL_GPIO_ReadPin(motor->driver.index_port, motor->driver.index_pin); // Returns the INDEX pin state
}


// Start stepping with PWM
void TMC2209_SetSpeed(Motor *motor, uint32_t StepFrequency) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
	uint32_t prescaler = motor->driver.htim->Init.Prescaler;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	691b      	ldr	r3, [r3, #16]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	617b      	str	r3, [r7, #20]
    uint32_t timerClock = HAL_RCC_GetHCLKFreq() / prescaler ;
 8000aba:	f005 fd45 	bl	8006548 <HAL_RCC_GetHCLKFreq>
 8000abe:	4602      	mov	r2, r0
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac6:	613b      	str	r3, [r7, #16]
    uint32_t ARR = (timerClock / StepFrequency) - 1; // Auto-reload value
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(motor->driver.htim, ARR); // Period
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	691b      	ldr	r3, [r3, #16]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	691b      	ldr	r3, [r3, #16]
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d106      	bne.n	8000afc <TMC2209_SetSpeed+0x54>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	691b      	ldr	r3, [r3, #16]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	68fa      	ldr	r2, [r7, #12]
 8000af6:	0852      	lsrs	r2, r2, #1
 8000af8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000afa:	e031      	b.n	8000b60 <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	695b      	ldr	r3, [r3, #20]
 8000b00:	2b04      	cmp	r3, #4
 8000b02:	d106      	bne.n	8000b12 <TMC2209_SetSpeed+0x6a>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	691b      	ldr	r3, [r3, #16]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	085b      	lsrs	r3, r3, #1
 8000b0e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000b10:	e026      	b.n	8000b60 <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	2b08      	cmp	r3, #8
 8000b18:	d106      	bne.n	8000b28 <TMC2209_SetSpeed+0x80>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	691b      	ldr	r3, [r3, #16]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	085b      	lsrs	r3, r3, #1
 8000b24:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000b26:	e01b      	b.n	8000b60 <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	695b      	ldr	r3, [r3, #20]
 8000b2c:	2b0c      	cmp	r3, #12
 8000b2e:	d106      	bne.n	8000b3e <TMC2209_SetSpeed+0x96>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	691b      	ldr	r3, [r3, #16]
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	085b      	lsrs	r3, r3, #1
 8000b3a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b3c:	e010      	b.n	8000b60 <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	2b10      	cmp	r3, #16
 8000b44:	d106      	bne.n	8000b54 <TMC2209_SetSpeed+0xac>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	691b      	ldr	r3, [r3, #16]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	085b      	lsrs	r3, r3, #1
 8000b50:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000b52:	e005      	b.n	8000b60 <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	691b      	ldr	r3, [r3, #16]
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	085b      	lsrs	r3, r3, #1
 8000b5e:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000b60:	bf00      	nop
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <TMC2209_Stop>:


// Stop stepping
void TMC2209_Stop(Motor *motor) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = motor->driver.htim;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	691b      	ldr	r3, [r3, #16]
 8000b74:	60fb      	str	r3, [r7, #12]
	uint32_t channel = motor->driver.step_channel;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	60bb      	str	r3, [r7, #8]
	TMC2209_EnableDriver(motor, GPIO_PIN_SET);
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ff80 	bl	8000a84 <TMC2209_EnableDriver>
    HAL_TIM_PWM_Stop_IT(htim, channel);
 8000b84:	68b9      	ldr	r1, [r7, #8]
 8000b86:	68f8      	ldr	r0, [r7, #12]
 8000b88:	f007 fa54 	bl	8008034 <HAL_TIM_PWM_Stop_IT>
}
 8000b8c:	bf00      	nop
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <TMC2209_Start>:

void TMC2209_Start(Motor *motor) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = motor->driver.htim;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	691b      	ldr	r3, [r3, #16]
 8000ba0:	60fb      	str	r3, [r7, #12]
	uint32_t channel = motor->driver.step_channel;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	695b      	ldr	r3, [r3, #20]
 8000ba6:	60bb      	str	r3, [r7, #8]

	TMC2209_EnableDriver(motor, GPIO_PIN_RESET);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff ff6a 	bl	8000a84 <TMC2209_EnableDriver>
    HAL_TIM_PWM_Start_IT(htim, channel);
 8000bb0:	68b9      	ldr	r1, [r7, #8]
 8000bb2:	68f8      	ldr	r0, [r7, #12]
 8000bb4:	f007 f8f6 	bl	8007da4 <HAL_TIM_PWM_Start_IT>
    motor->isStepping = true;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2201      	movs	r2, #1
 8000bbc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
}
 8000bc0:	bf00      	nop
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <debug_print>:
    }
    (void)dummy;
}


void debug_print(const char* msg) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff fb1d 	bl	8000210 <strlen>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
 8000bde:	6879      	ldr	r1, [r7, #4]
 8000be0:	4803      	ldr	r0, [pc, #12]	@ (8000bf0 <debug_print+0x28>)
 8000be2:	f008 fc79 	bl	80094d8 <HAL_UART_Transmit>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200005d4 	.word	0x200005d4

08000bf4 <debug_print_hex>:

 void debug_print_hex(uint8_t* data, uint8_t length) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b0c4      	sub	sp, #272	@ 0x110
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000bfe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000c02:	6018      	str	r0, [r3, #0]
 8000c04:	460a      	mov	r2, r1
 8000c06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c0a:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8000c0e:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    char* ptr = buffer;
 8000c10:	f107 0308 	add.w	r3, r7, #8
 8000c14:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

    ptr += sprintf(ptr, "[");
 8000c18:	4924      	ldr	r1, [pc, #144]	@ (8000cac <debug_print_hex+0xb8>)
 8000c1a:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8000c1e:	f00a ff19 	bl	800ba54 <siprintf>
 8000c22:	4603      	mov	r3, r0
 8000c24:	461a      	mov	r2, r3
 8000c26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000c2a:	4413      	add	r3, r2
 8000c2c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    for(uint8_t i = 0; i < length; i++) {
 8000c30:	2300      	movs	r3, #0
 8000c32:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
 8000c36:	e01a      	b.n	8000c6e <debug_print_hex+0x7a>
        ptr += sprintf(ptr, "%02X ", data[i]);
 8000c38:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8000c3c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c40:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000c44:	6812      	ldr	r2, [r2, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	4918      	ldr	r1, [pc, #96]	@ (8000cb0 <debug_print_hex+0xbc>)
 8000c4e:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8000c52:	f00a feff 	bl	800ba54 <siprintf>
 8000c56:	4603      	mov	r3, r0
 8000c58:	461a      	mov	r2, r3
 8000c5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000c5e:	4413      	add	r3, r2
 8000c60:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    for(uint8_t i = 0; i < length; i++) {
 8000c64:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8000c68:	3301      	adds	r3, #1
 8000c6a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
 8000c6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c72:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8000c76:	f897 210b 	ldrb.w	r2, [r7, #267]	@ 0x10b
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d3db      	bcc.n	8000c38 <debug_print_hex+0x44>
    }
    ptr += sprintf(ptr, "]\r\n");
 8000c80:	490c      	ldr	r1, [pc, #48]	@ (8000cb4 <debug_print_hex+0xc0>)
 8000c82:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8000c86:	f00a fee5 	bl	800ba54 <siprintf>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000c92:	4413      	add	r3, r2
 8000c94:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

    debug_print(buffer);
 8000c98:	f107 0308 	add.w	r3, r7, #8
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ff93 	bl	8000bc8 <debug_print>
}
 8000ca2:	bf00      	nop
 8000ca4:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	0800c590 	.word	0x0800c590
 8000cb0:	0800c594 	.word	0x0800c594
 8000cb4:	0800c59c 	.word	0x0800c59c

08000cb8 <calculate_CRC>:

uint8_t calculate_CRC(uint8_t *datagram, uint8_t length) {
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < length; i++) {
 8000cc8:	2300      	movs	r3, #0
 8000cca:	73bb      	strb	r3, [r7, #14]
 8000ccc:	e027      	b.n	8000d1e <calculate_CRC+0x66>
        uint8_t currentByte = datagram[i];
 8000cce:	7bbb      	ldrb	r3, [r7, #14]
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	737b      	strb	r3, [r7, #13]
        for(uint8_t j = 0; j < 8; j++) {
 8000cd8:	2300      	movs	r3, #0
 8000cda:	733b      	strb	r3, [r7, #12]
 8000cdc:	e019      	b.n	8000d12 <calculate_CRC+0x5a>
            if((crc >> 7) ^ (currentByte & 0x01)) {
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	09db      	lsrs	r3, r3, #7
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	7b7b      	ldrb	r3, [r7, #13]
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d007      	beq.n	8000d00 <calculate_CRC+0x48>
                crc = (crc << 1) ^ 0x07;
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	b25b      	sxtb	r3, r3
 8000cf6:	f083 0307 	eor.w	r3, r3, #7
 8000cfa:	b25b      	sxtb	r3, r3
 8000cfc:	73fb      	strb	r3, [r7, #15]
 8000cfe:	e002      	b.n	8000d06 <calculate_CRC+0x4e>
            } else {
                crc = crc << 1;
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	73fb      	strb	r3, [r7, #15]
            }
            currentByte >>= 1;
 8000d06:	7b7b      	ldrb	r3, [r7, #13]
 8000d08:	085b      	lsrs	r3, r3, #1
 8000d0a:	737b      	strb	r3, [r7, #13]
        for(uint8_t j = 0; j < 8; j++) {
 8000d0c:	7b3b      	ldrb	r3, [r7, #12]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	733b      	strb	r3, [r7, #12]
 8000d12:	7b3b      	ldrb	r3, [r7, #12]
 8000d14:	2b07      	cmp	r3, #7
 8000d16:	d9e2      	bls.n	8000cde <calculate_CRC+0x26>
    for(uint8_t i = 0; i < length; i++) {
 8000d18:	7bbb      	ldrb	r3, [r7, #14]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	73bb      	strb	r3, [r7, #14]
 8000d1e:	7bba      	ldrb	r2, [r7, #14]
 8000d20:	78fb      	ldrb	r3, [r7, #3]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d3d3      	bcc.n	8000cce <calculate_CRC+0x16>
        }
    }
    return crc;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <TMC2209_WaitForReply>:




uint8_t TMC2209_WaitForReply(uint32_t timeout) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
     uint32_t startTime = HAL_GetTick();
 8000d3c:	f003 fa2c 	bl	8004198 <HAL_GetTick>
 8000d40:	60f8      	str	r0, [r7, #12]
     while (!rxBufferReady) {
 8000d42:	e00c      	b.n	8000d5e <TMC2209_WaitForReply+0x2a>
         if ((HAL_GetTick() - startTime) > timeout) {
 8000d44:	f003 fa28 	bl	8004198 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d204      	bcs.n	8000d5e <TMC2209_WaitForReply+0x2a>
             debug_print("Timeout waiting for reply.\r\n");
 8000d54:	4808      	ldr	r0, [pc, #32]	@ (8000d78 <TMC2209_WaitForReply+0x44>)
 8000d56:	f7ff ff37 	bl	8000bc8 <debug_print>
             return 0; // Timeout
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	e008      	b.n	8000d70 <TMC2209_WaitForReply+0x3c>
     while (!rxBufferReady) {
 8000d5e:	4b07      	ldr	r3, [pc, #28]	@ (8000d7c <TMC2209_WaitForReply+0x48>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d0ed      	beq.n	8000d44 <TMC2209_WaitForReply+0x10>
         }
     }
     rxBufferReady = 0; // Clear flag for next use
 8000d68:	4b04      	ldr	r3, [pc, #16]	@ (8000d7c <TMC2209_WaitForReply+0x48>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
     return 1; // Success
 8000d6e:	2301      	movs	r3, #1
 }
 8000d70:	4618      	mov	r0, r3
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	0800c5a0 	.word	0x0800c5a0
 8000d7c:	20000108 	.word	0x20000108

08000d80 <TMC2209_sendCommand>:


uint8_t *TMC2209_sendCommand(uint8_t *command, size_t writeLength, size_t readLength, Motor *tmc2209) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	603b      	str	r3, [r7, #0]
	//clear_UART_buffers(&huart2);
     // Send the command
     if (HAL_UART_Transmit(tmc2209->driver.huart, command, writeLength, HAL_MAX_DELAY) != HAL_OK) {
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	6858      	ldr	r0, [r3, #4]
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9a:	68f9      	ldr	r1, [r7, #12]
 8000d9c:	f008 fb9c 	bl	80094d8 <HAL_UART_Transmit>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d007      	beq.n	8000db6 <TMC2209_sendCommand+0x36>
         if(ENABLE_DEBUG) debug_print("Failed to send command to driver.\r\n");
 8000da6:	481e      	ldr	r0, [pc, #120]	@ (8000e20 <TMC2209_sendCommand+0xa0>)
 8000da8:	f7ff ff0e 	bl	8000bc8 <debug_print>
         tmc2209->driver.STATUS = TMC_SEND_ERROR;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	2214      	movs	r2, #20
 8000db0:	60da      	str	r2, [r3, #12]
         return	NULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	e030      	b.n	8000e18 <TMC2209_sendCommand+0x98>
     }

     if(readLength && (tmc2209->driver.STATUS == TMC_OK)){
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d02d      	beq.n	8000e18 <TMC2209_sendCommand+0x98>
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d129      	bne.n	8000e18 <TMC2209_sendCommand+0x98>

     // Wait for reply
     HAL_UART_Receive_DMA(tmc2209->driver.huart, rxData, readLength + 1);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	6858      	ldr	r0, [r3, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	3301      	adds	r3, #1
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4914      	ldr	r1, [pc, #80]	@ (8000e24 <TMC2209_sendCommand+0xa4>)
 8000dd4:	f008 fc09 	bl	80095ea <HAL_UART_Receive_DMA>
     if (!TMC2209_WaitForReply(200)) { // Wait 200ms if no reply, timeout
 8000dd8:	20c8      	movs	r0, #200	@ 0xc8
 8000dda:	f7ff ffab 	bl	8000d34 <TMC2209_WaitForReply>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d107      	bne.n	8000df4 <TMC2209_sendCommand+0x74>
    	 if(ENABLE_DEBUG) debug_print("No reply received from driver.\r\n");
 8000de4:	4810      	ldr	r0, [pc, #64]	@ (8000e28 <TMC2209_sendCommand+0xa8>)
 8000de6:	f7ff feef 	bl	8000bc8 <debug_print>
    	 tmc2209->driver.STATUS = TMC_NOREPLY_ERROR;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	221e      	movs	r2, #30
 8000dee:	60da      	str	r2, [r3, #12]
         return NULL; // command failed
 8000df0:	2300      	movs	r3, #0
 8000df2:	e011      	b.n	8000e18 <TMC2209_sendCommand+0x98>
     }

     // Send transmitted data -- Note: this can't be called before receiving or else it will interfere with huart2
     if(ENABLE_DEBUG){
     debug_print("Data Transmitted: ");
 8000df4:	480d      	ldr	r0, [pc, #52]	@ (8000e2c <TMC2209_sendCommand+0xac>)
 8000df6:	f7ff fee7 	bl	8000bc8 <debug_print>
     debug_print_hex(command, writeLength);
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	4619      	mov	r1, r3
 8000e00:	68f8      	ldr	r0, [r7, #12]
 8000e02:	f7ff fef7 	bl	8000bf4 <debug_print_hex>
     // Process received data in rxBuffer
     debug_print("Reply received:\r\n");
 8000e06:	480a      	ldr	r0, [pc, #40]	@ (8000e30 <TMC2209_sendCommand+0xb0>)
 8000e08:	f7ff fede 	bl	8000bc8 <debug_print>
     debug_print_hex(rxBuffer, TMC_REPLY_SIZE);
 8000e0c:	2108      	movs	r1, #8
 8000e0e:	4809      	ldr	r0, [pc, #36]	@ (8000e34 <TMC2209_sendCommand+0xb4>)
 8000e10:	f7ff fef0 	bl	8000bf4 <debug_print_hex>
     }
     return rxBuffer; // Success
 8000e14:	4b07      	ldr	r3, [pc, #28]	@ (8000e34 <TMC2209_sendCommand+0xb4>)
 8000e16:	e7ff      	b.n	8000e18 <TMC2209_sendCommand+0x98>
     }
 }
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	0800c5c0 	.word	0x0800c5c0
 8000e24:	200000f4 	.word	0x200000f4
 8000e28:	0800c5e4 	.word	0x0800c5e4
 8000e2c:	0800c608 	.word	0x0800c608
 8000e30:	0800c61c 	.word	0x0800c61c
 8000e34:	20000100 	.word	0x20000100

08000e38 <TMC2209_writeInit>:


void TMC2209_writeInit(Motor *tmc2209, uint8_t regAddress, int32_t value){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	460b      	mov	r3, r1
 8000e42:	607a      	str	r2, [r7, #4]
 8000e44:	72fb      	strb	r3, [r7, #11]
 	uint8_t write_request_command[8];
 	write_request_command[0] = SYNC; // SYNC Byte for TMC2209
 8000e46:	2305      	movs	r3, #5
 8000e48:	743b      	strb	r3, [r7, #16]
 	write_request_command[1] = tmc2209->driver.address; // Driver address configure it using MS1(LSB) AND MS2
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	7a1b      	ldrb	r3, [r3, #8]
 8000e4e:	747b      	strb	r3, [r7, #17]
 	write_request_command[2] = regAddress | 0x80; // Register address to write 0x80 for writing
 8000e50:	7afb      	ldrb	r3, [r7, #11]
 8000e52:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	74bb      	strb	r3, [r7, #18]
 	write_request_command[3] = (value >> 24) & 0xFF;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	0e1b      	lsrs	r3, r3, #24
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	74fb      	strb	r3, [r7, #19]
 	write_request_command[4] = (value >> 16) & 0xFF;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	141b      	asrs	r3, r3, #16
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	753b      	strb	r3, [r7, #20]
 	write_request_command[5] = (value >> 8 ) & 0xFF;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	121b      	asrs	r3, r3, #8
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	757b      	strb	r3, [r7, #21]
 	write_request_command[6] = (value      ) & 0xFF;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	75bb      	strb	r3, [r7, #22]
 	write_request_command[7] = calculate_CRC(write_request_command, 7); // checksum
 8000e78:	f107 0310 	add.w	r3, r7, #16
 8000e7c:	2107      	movs	r1, #7
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ff1a 	bl	8000cb8 <calculate_CRC>
 8000e84:	4603      	mov	r3, r0
 8000e86:	75fb      	strb	r3, [r7, #23]
 	TMC2209_sendCommand(&write_request_command[0], TMC_WRITE_DATAGRAM_SIZE, 0, tmc2209); // We don't actually need receive buffer here when we call ReadWrite so we just pass data
 8000e88:	f107 0010 	add.w	r0, r7, #16
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2108      	movs	r1, #8
 8000e92:	f7ff ff75 	bl	8000d80 <TMC2209_sendCommand>

 }
 8000e96:	bf00      	nop
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <TMC2209_readInit>:

int32_t TMC2209_readInit(Motor *tmc2209, uint8_t regAddress){
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b087      	sub	sp, #28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	70fb      	strb	r3, [r7, #3]
	if(tmc2209->driver.STATUS != TMC_OK) return tmc2209->driver.STATUS;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d002      	beq.n	8000eba <TMC2209_readInit+0x1a>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	e065      	b.n	8000f86 <TMC2209_readInit+0xe6>
 	uint8_t read_request_command[8] = { 0 };
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
 	read_request_command[0] = SYNC;
 8000ec2:	2305      	movs	r3, #5
 8000ec4:	733b      	strb	r3, [r7, #12]
 	read_request_command[1] = tmc2209->driver.address;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7a1b      	ldrb	r3, [r3, #8]
 8000eca:	737b      	strb	r3, [r7, #13]
 	read_request_command[2] = regAddress;
 8000ecc:	78fb      	ldrb	r3, [r7, #3]
 8000ece:	73bb      	strb	r3, [r7, #14]
 	read_request_command[3] = calculate_CRC(read_request_command, 3);
 8000ed0:	f107 030c 	add.w	r3, r7, #12
 8000ed4:	2103      	movs	r1, #3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff feee 	bl	8000cb8 <calculate_CRC>
 8000edc:	4603      	mov	r3, r0
 8000ede:	73fb      	strb	r3, [r7, #15]

 	uint8_t *verifyBuffer = TMC2209_sendCommand(read_request_command, TMC_READ_REQUEST_DATAGRAM_SIZE, TMC_REPLY_SIZE, tmc2209);
 8000ee0:	f107 000c 	add.w	r0, r7, #12
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2208      	movs	r2, #8
 8000ee8:	2104      	movs	r1, #4
 8000eea:	f7ff ff49 	bl	8000d80 <TMC2209_sendCommand>
 8000eee:	6178      	str	r0, [r7, #20]
 	// Byte 0: Sync nibble correct?
 	if (verifyBuffer[0] != 0x05){
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b05      	cmp	r3, #5
 8000ef6:	d007      	beq.n	8000f08 <TMC2209_readInit+0x68>
 		// If first byte equals 0 then it means no reply so return
 		if(ENABLE_DEBUG) debug_print("Invalid data received!(SYNC Byte)\r\n");
 8000ef8:	4825      	ldr	r0, [pc, #148]	@ (8000f90 <TMC2209_readInit+0xf0>)
 8000efa:	f7ff fe65 	bl	8000bc8 <debug_print>
 		return tmc2209->driver.STATUS = TMC_SYNC_REPLY_ERROR;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2228      	movs	r2, #40	@ 0x28
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	2328      	movs	r3, #40	@ 0x28
 8000f06:	e03e      	b.n	8000f86 <TMC2209_readInit+0xe6>
 	}
 	// Byte 1: Master address correct?
 	if (verifyBuffer[1] != 0xFF){
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2bff      	cmp	r3, #255	@ 0xff
 8000f10:	d007      	beq.n	8000f22 <TMC2209_readInit+0x82>
 		if(ENABLE_DEBUG) debug_print("Invalid data received!(MCU Address)\r\n");
 8000f12:	4820      	ldr	r0, [pc, #128]	@ (8000f94 <TMC2209_readInit+0xf4>)
 8000f14:	f7ff fe58 	bl	8000bc8 <debug_print>
 		return tmc2209->driver.STATUS = TMC_MCU_REPLY_ERROR;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2232      	movs	r2, #50	@ 0x32
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	2332      	movs	r3, #50	@ 0x32
 8000f20:	e031      	b.n	8000f86 <TMC2209_readInit+0xe6>
 	}
 	// Byte 2: Register address correct?
 	if (verifyBuffer[2] != regAddress){
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	3302      	adds	r3, #2
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	78fa      	ldrb	r2, [r7, #3]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d007      	beq.n	8000f3e <TMC2209_readInit+0x9e>
 		if(ENABLE_DEBUG) debug_print("Invalid data received!(Register Address)\r\n");
 8000f2e:	481a      	ldr	r0, [pc, #104]	@ (8000f98 <TMC2209_readInit+0xf8>)
 8000f30:	f7ff fe4a 	bl	8000bc8 <debug_print>
 		return tmc2209->driver.STATUS = TMC_REG_REPLY_ERROR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	223c      	movs	r2, #60	@ 0x3c
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	233c      	movs	r3, #60	@ 0x3c
 8000f3c:	e023      	b.n	8000f86 <TMC2209_readInit+0xe6>
 	}
 	// Byte 7: CRC correct?
 	if (verifyBuffer[7] != calculate_CRC(verifyBuffer, 7)){
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3307      	adds	r3, #7
 8000f42:	781c      	ldrb	r4, [r3, #0]
 8000f44:	2107      	movs	r1, #7
 8000f46:	6978      	ldr	r0, [r7, #20]
 8000f48:	f7ff feb6 	bl	8000cb8 <calculate_CRC>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	429c      	cmp	r4, r3
 8000f50:	d007      	beq.n	8000f62 <TMC2209_readInit+0xc2>
 		if(ENABLE_DEBUG) debug_print("Invalid data received!(CRC)\r\n");
 8000f52:	4812      	ldr	r0, [pc, #72]	@ (8000f9c <TMC2209_readInit+0xfc>)
 8000f54:	f7ff fe38 	bl	8000bc8 <debug_print>
 		return tmc2209->driver.STATUS = TMC_CRC_REPLY_ERROR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2246      	movs	r2, #70	@ 0x46
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	2346      	movs	r3, #70	@ 0x46
 8000f60:	e011      	b.n	8000f86 <TMC2209_readInit+0xe6>
 	}
 	return (verifyBuffer[3] << 24) | (verifyBuffer[4] << 16) | (verifyBuffer[5] << 8) | verifyBuffer[6];
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	3303      	adds	r3, #3
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	061a      	lsls	r2, r3, #24
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	041b      	lsls	r3, r3, #16
 8000f72:	431a      	orrs	r2, r3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	3305      	adds	r3, #5
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	021b      	lsls	r3, r3, #8
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	3206      	adds	r2, #6
 8000f82:	7812      	ldrb	r2, [r2, #0]
 8000f84:	4313      	orrs	r3, r2
 }
 8000f86:	4618      	mov	r0, r3
 8000f88:	371c      	adds	r7, #28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd90      	pop	{r4, r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	0800c630 	.word	0x0800c630
 8000f94:	0800c654 	.word	0x0800c654
 8000f98:	0800c67c 	.word	0x0800c67c
 8000f9c:	0800c6a8 	.word	0x0800c6a8

08000fa0 <TMC2209_read_ifcnt>:
	 }
	 return true;
}


void TMC2209_read_ifcnt(Motor *tmc2209) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b09c      	sub	sp, #112	@ 0x70
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
     int32_t ifcnt_value = TMC2209_readInit(tmc2209, TMC2209_REG_IFCNT); // IFCNT register address is 0x02
 8000fa8:	2102      	movs	r1, #2
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff ff78 	bl	8000ea0 <TMC2209_readInit>
 8000fb0:	66f8      	str	r0, [r7, #108]	@ 0x6c
     if (ifcnt_value >= 0) { // This value gets incremented with every sucessful UART write access 0 to 255 then wraps around.
 8000fb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db0f      	blt.n	8000fd8 <TMC2209_read_ifcnt+0x38>
    	 if(ENABLE_DEBUG){
         char debug_msg[100];
         sprintf(debug_msg, "IFCNT Value: %d\r\n",  (int)ifcnt_value);
 8000fb8:	f107 0308 	add.w	r3, r7, #8
 8000fbc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000fbe:	490c      	ldr	r1, [pc, #48]	@ (8000ff0 <TMC2209_read_ifcnt+0x50>)
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f00a fd47 	bl	800ba54 <siprintf>
         debug_print(debug_msg);
 8000fc6:	f107 0308 	add.w	r3, r7, #8
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fdfc 	bl	8000bc8 <debug_print>
    	 }
         tmc2209->driver.IFCNT = ifcnt_value;
 8000fd0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	61da      	str	r2, [r3, #28]
    	 if (ENABLE_DEBUG)
         debug_print("Failed to read IFCNT register!\r\n");
         tmc2209->driver.IFCNT = TMC_IFCNT_ERROR;
     }

 }
 8000fd6:	e006      	b.n	8000fe6 <TMC2209_read_ifcnt+0x46>
         debug_print("Failed to read IFCNT register!\r\n");
 8000fd8:	4806      	ldr	r0, [pc, #24]	@ (8000ff4 <TMC2209_read_ifcnt+0x54>)
 8000fda:	f7ff fdf5 	bl	8000bc8 <debug_print>
         tmc2209->driver.IFCNT = TMC_IFCNT_ERROR;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f06f 024f 	mvn.w	r2, #79	@ 0x4f
 8000fe4:	61da      	str	r2, [r3, #28]
 }
 8000fe6:	bf00      	nop
 8000fe8:	3770      	adds	r7, #112	@ 0x70
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	0800c6f8 	.word	0x0800c6f8
 8000ff4:	0800c70c 	.word	0x0800c70c

08000ff8 <configureGCONF>:

bool configureGCONF(Motor *tmc2209) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	int ifcntCheck = tmc2209->driver.IFCNT;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69db      	ldr	r3, [r3, #28]
 8001004:	60fb      	str	r3, [r7, #12]
	if (ifcntCheck == TMC_IFCNT_ERROR){
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f113 0f50 	cmn.w	r3, #80	@ 0x50
 800100c:	d104      	bne.n	8001018 <configureGCONF+0x20>
        if (ENABLE_DEBUG) debug_print("Failed to configure GCONF! (Failed to read IFCNT register)\r\n");
 800100e:	4813      	ldr	r0, [pc, #76]	@ (800105c <configureGCONF+0x64>)
 8001010:	f7ff fdda 	bl	8000bc8 <debug_print>
		return 0;
 8001014:	2300      	movs	r3, #0
 8001016:	e01d      	b.n	8001054 <configureGCONF+0x5c>
	}
    uint32_t gconf = 0x000000C0; // pdn_disable = 1, mstep_reg_select = 1
 8001018:	23c0      	movs	r3, #192	@ 0xc0
 800101a:	60bb      	str	r3, [r7, #8]
    TMC2209_writeInit(tmc2209, TMC2209_REG_GCONF, gconf);
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	461a      	mov	r2, r3
 8001020:	2100      	movs	r1, #0
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ff08 	bl	8000e38 <TMC2209_writeInit>
    TMC2209_read_ifcnt(tmc2209);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ffb9 	bl	8000fa0 <TMC2209_read_ifcnt>
    if (tmc2209->driver.IFCNT <= ifcntCheck){
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69da      	ldr	r2, [r3, #28]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	429a      	cmp	r2, r3
 8001036:	d808      	bhi.n	800104a <configureGCONF+0x52>
    	if (ENABLE_DEBUG) debug_print("Failed to configure GCONF!(IFCNT DID NOT INCREMENT CHECK TMC_STATUS)\r\n");
 8001038:	4809      	ldr	r0, [pc, #36]	@ (8001060 <configureGCONF+0x68>)
 800103a:	f7ff fdc5 	bl	8000bc8 <debug_print>
    	tmc2209->driver.GCONF = TMC_GCONF_ERROR;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	225a      	movs	r2, #90	@ 0x5a
 8001042:	f883 2020 	strb.w	r2, [r3, #32]
		return 0;
 8001046:	2300      	movs	r3, #0
 8001048:	e004      	b.n	8001054 <configureGCONF+0x5c>
    }
    return (tmc2209->driver.GCONF = true);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2201      	movs	r2, #1
 800104e:	f883 2020 	strb.w	r2, [r3, #32]
 8001052:	2301      	movs	r3, #1
}
 8001054:	4618      	mov	r0, r3
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	0800c730 	.word	0x0800c730
 8001060:	0800c770 	.word	0x0800c770

08001064 <setMicrosteppingResolution>:
    tmc2209->driver.chopperMode = spreadCycleEnabled; // Return 1 if SpreadCycle is enabled, 0 otherwise
}


// Function to set the microstepping resolution through UART
uint32_t setMicrosteppingResolution(Motor *tmc2209, uint16_t resolution) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b0ae      	sub	sp, #184	@ 0xb8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	807b      	strh	r3, [r7, #2]
    uint8_t driverID = tmc2209->driver.id;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
    int32_t IFCNT = tmc2209->driver.IFCNT;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69db      	ldr	r3, [r3, #28]
 800107c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    char debug_msg[150];

    if (ENABLE_DEBUG){
    snprintf(debug_msg, sizeof(debug_msg), "----- Setting Microstepping For Driver ID: %u -----\r\n", driverID);
 8001080:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8001084:	f107 0008 	add.w	r0, r7, #8
 8001088:	4a78      	ldr	r2, [pc, #480]	@ (800126c <setMicrosteppingResolution+0x208>)
 800108a:	2196      	movs	r1, #150	@ 0x96
 800108c:	f00a fcae 	bl	800b9ec <sniprintf>
    debug_print(debug_msg);
 8001090:	f107 0308 	add.w	r3, r7, #8
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fd97 	bl	8000bc8 <debug_print>
    memset(debug_msg, 0, sizeof(debug_msg)); // clear buffer
 800109a:	f107 0308 	add.w	r3, r7, #8
 800109e:	2296      	movs	r2, #150	@ 0x96
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f00a fcf6 	bl	800ba94 <memset>
    }
    // Ensure GCONF is set to enable UART control for microstepping resolution
    uint8_t gconf = 0x80; // Bit 7 (mstep_reg_select) set to 1. This to change the option to control mstepping using UART instead of MS1 & MS2 pins
 80010a8:	2380      	movs	r3, #128	@ 0x80
 80010aa:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
    TMC2209_writeInit(tmc2209, TMC2209_REG_GCONF, gconf);
 80010ae:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80010b2:	461a      	mov	r2, r3
 80010b4:	2100      	movs	r1, #0
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff febe 	bl	8000e38 <TMC2209_writeInit>

    HAL_Delay(2);
 80010bc:	2002      	movs	r0, #2
 80010be:	f003 f877 	bl	80041b0 <HAL_Delay>
    // Read the current CHOPCONF register value
    uint32_t currentCHOPCONF = TMC2209_readInit(tmc2209, TMC2209_REG_CHOPCONF);
 80010c2:	216c      	movs	r1, #108	@ 0x6c
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff feeb 	bl	8000ea0 <TMC2209_readInit>
 80010ca:	4603      	mov	r3, r0
 80010cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8


    // Extract the current microstepping resolution (MRES) bits [24:27]
    uint8_t currentMRES = (currentCHOPCONF >> 24) & 0x0F;
 80010d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80010d4:	0e1b      	lsrs	r3, r3, #24
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	f003 030f 	and.w	r3, r3, #15
 80010dc:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

    // Determine the MRES value for the new resolution
    uint8_t newMRES;
    switch (resolution) {
 80010e0:	887b      	ldrh	r3, [r7, #2]
 80010e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010e6:	d054      	beq.n	8001192 <setMicrosteppingResolution+0x12e>
 80010e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010ec:	dc75      	bgt.n	80011da <setMicrosteppingResolution+0x176>
 80010ee:	2b80      	cmp	r3, #128	@ 0x80
 80010f0:	d053      	beq.n	800119a <setMicrosteppingResolution+0x136>
 80010f2:	2b80      	cmp	r3, #128	@ 0x80
 80010f4:	dc71      	bgt.n	80011da <setMicrosteppingResolution+0x176>
 80010f6:	2b20      	cmp	r3, #32
 80010f8:	dc48      	bgt.n	800118c <setMicrosteppingResolution+0x128>
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	dd6d      	ble.n	80011da <setMicrosteppingResolution+0x176>
 80010fe:	3b01      	subs	r3, #1
 8001100:	2b1f      	cmp	r3, #31
 8001102:	d86a      	bhi.n	80011da <setMicrosteppingResolution+0x176>
 8001104:	a201      	add	r2, pc, #4	@ (adr r2, 800110c <setMicrosteppingResolution+0xa8>)
 8001106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110a:	bf00      	nop
 800110c:	080011d3 	.word	0x080011d3
 8001110:	080011cb 	.word	0x080011cb
 8001114:	080011db 	.word	0x080011db
 8001118:	080011c3 	.word	0x080011c3
 800111c:	080011db 	.word	0x080011db
 8001120:	080011db 	.word	0x080011db
 8001124:	080011db 	.word	0x080011db
 8001128:	080011bb 	.word	0x080011bb
 800112c:	080011db 	.word	0x080011db
 8001130:	080011db 	.word	0x080011db
 8001134:	080011db 	.word	0x080011db
 8001138:	080011db 	.word	0x080011db
 800113c:	080011db 	.word	0x080011db
 8001140:	080011db 	.word	0x080011db
 8001144:	080011db 	.word	0x080011db
 8001148:	080011b3 	.word	0x080011b3
 800114c:	080011db 	.word	0x080011db
 8001150:	080011db 	.word	0x080011db
 8001154:	080011db 	.word	0x080011db
 8001158:	080011db 	.word	0x080011db
 800115c:	080011db 	.word	0x080011db
 8001160:	080011db 	.word	0x080011db
 8001164:	080011db 	.word	0x080011db
 8001168:	080011db 	.word	0x080011db
 800116c:	080011db 	.word	0x080011db
 8001170:	080011db 	.word	0x080011db
 8001174:	080011db 	.word	0x080011db
 8001178:	080011db 	.word	0x080011db
 800117c:	080011db 	.word	0x080011db
 8001180:	080011db 	.word	0x080011db
 8001184:	080011db 	.word	0x080011db
 8001188:	080011ab 	.word	0x080011ab
 800118c:	2b40      	cmp	r3, #64	@ 0x40
 800118e:	d008      	beq.n	80011a2 <setMicrosteppingResolution+0x13e>
 8001190:	e023      	b.n	80011da <setMicrosteppingResolution+0x176>
        case 256:
            newMRES = 0x00; // %0000 -> 256 microsteps
 8001192:	2300      	movs	r3, #0
 8001194:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8001198:	e024      	b.n	80011e4 <setMicrosteppingResolution+0x180>
        case 128:
            newMRES = 0x01; // %0001 -> 128 microsteps
 800119a:	2301      	movs	r3, #1
 800119c:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 80011a0:	e020      	b.n	80011e4 <setMicrosteppingResolution+0x180>
        case 64:
            newMRES = 0x02; // %0010 -> 64 microsteps
 80011a2:	2302      	movs	r3, #2
 80011a4:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 80011a8:	e01c      	b.n	80011e4 <setMicrosteppingResolution+0x180>
        case 32:
            newMRES = 0x03; // %0011 -> 32 microsteps
 80011aa:	2303      	movs	r3, #3
 80011ac:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 80011b0:	e018      	b.n	80011e4 <setMicrosteppingResolution+0x180>
        case 16:
            newMRES = 0x04; // %0100 -> 16 microsteps
 80011b2:	2304      	movs	r3, #4
 80011b4:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 80011b8:	e014      	b.n	80011e4 <setMicrosteppingResolution+0x180>
        case 8:
            newMRES = 0x05; // %0101 -> 8 microsteps
 80011ba:	2305      	movs	r3, #5
 80011bc:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 80011c0:	e010      	b.n	80011e4 <setMicrosteppingResolution+0x180>
        case 4:
            newMRES = 0x06; // %0110 -> 4 microsteps
 80011c2:	2306      	movs	r3, #6
 80011c4:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 80011c8:	e00c      	b.n	80011e4 <setMicrosteppingResolution+0x180>
        case 2:
            newMRES = 0x07; // %0111 -> 2 microsteps
 80011ca:	2307      	movs	r3, #7
 80011cc:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 80011d0:	e008      	b.n	80011e4 <setMicrosteppingResolution+0x180>
        case 1:
            newMRES = 0x08; // %1000 -> Full step
 80011d2:	2308      	movs	r3, #8
 80011d4:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 80011d8:	e004      	b.n	80011e4 <setMicrosteppingResolution+0x180>
        default:
            newMRES = currentMRES; // Keep the current resolution if invalid value is provided
 80011da:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80011de:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 80011e2:	bf00      	nop
    }

    // If the resolution has not changed, do nothing
    if (newMRES == currentMRES) {
 80011e4:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 80011e8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d104      	bne.n	80011fa <setMicrosteppingResolution+0x196>
    	if (ENABLE_DEBUG) debug_print("Resolution unchanged, no update needed.\r\n");
 80011f0:	481f      	ldr	r0, [pc, #124]	@ (8001270 <setMicrosteppingResolution+0x20c>)
 80011f2:	f7ff fce9 	bl	8000bc8 <debug_print>
        return resolution;
 80011f6:	887b      	ldrh	r3, [r7, #2]
 80011f8:	e034      	b.n	8001264 <setMicrosteppingResolution+0x200>
    }
    HAL_Delay(2);
 80011fa:	2002      	movs	r0, #2
 80011fc:	f002 ffd8 	bl	80041b0 <HAL_Delay>
    // Update the CHOPCONF register with the new MRES value
    uint32_t updatedCHOPCONF = (currentCHOPCONF & ~(0x0F << 24)) | (newMRES << 24);
 8001200:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001204:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8001208:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 800120c:	061b      	lsls	r3, r3, #24
 800120e:	4313      	orrs	r3, r2
 8001210:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    TMC2209_writeInit(tmc2209, TMC2209_REG_CHOPCONF, updatedCHOPCONF);
 8001214:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001218:	461a      	mov	r2, r3
 800121a:	216c      	movs	r1, #108	@ 0x6c
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff fe0b 	bl	8000e38 <TMC2209_writeInit>
    TMC2209_read_ifcnt(tmc2209);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff febc 	bl	8000fa0 <TMC2209_read_ifcnt>

    if(tmc2209->driver.IFCNT <= IFCNT){
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	69da      	ldr	r2, [r3, #28]
 800122c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001230:	429a      	cmp	r2, r3
 8001232:	d807      	bhi.n	8001244 <setMicrosteppingResolution+0x1e0>
    	if (ENABLE_DEBUG) debug_print("Failed to set microstepping.\r\n");
 8001234:	480f      	ldr	r0, [pc, #60]	@ (8001274 <setMicrosteppingResolution+0x210>)
 8001236:	f7ff fcc7 	bl	8000bc8 <debug_print>
    	return tmc2209->driver.mstep = TMC_SET_MSTEP_ERROR;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	226e      	movs	r2, #110	@ 0x6e
 800123e:	831a      	strh	r2, [r3, #24]
 8001240:	236e      	movs	r3, #110	@ 0x6e
 8001242:	e00f      	b.n	8001264 <setMicrosteppingResolution+0x200>
    }
    // Debug
    tmc2209->driver.mstep = resolution;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	887a      	ldrh	r2, [r7, #2]
 8001248:	831a      	strh	r2, [r3, #24]
    sprintf(debug_msg, "Updated microstepping resolution to: %d\r\n", resolution);
 800124a:	887a      	ldrh	r2, [r7, #2]
 800124c:	f107 0308 	add.w	r3, r7, #8
 8001250:	4909      	ldr	r1, [pc, #36]	@ (8001278 <setMicrosteppingResolution+0x214>)
 8001252:	4618      	mov	r0, r3
 8001254:	f00a fbfe 	bl	800ba54 <siprintf>
    if (ENABLE_DEBUG) debug_print(debug_msg);
 8001258:	f107 0308 	add.w	r3, r7, #8
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fcb3 	bl	8000bc8 <debug_print>
    return TMC_OK;
 8001262:	2300      	movs	r3, #0

}
 8001264:	4618      	mov	r0, r3
 8001266:	37b8      	adds	r7, #184	@ 0xb8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	0800c910 	.word	0x0800c910
 8001270:	0800c948 	.word	0x0800c948
 8001274:	0800c974 	.word	0x0800c974
 8001278:	0800c994 	.word	0x0800c994

0800127c <TMC2209_setMotorsConfiguration>:
    return TMC_OK;

}

void TMC2209_setMotorsConfiguration(Motor *motors, uint8_t sendDelay, bool enableSpreadCycle)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	70fb      	strb	r3, [r7, #3]
 8001288:	4613      	mov	r3, r2
 800128a:	70bb      	strb	r3, [r7, #2]
    for (uint8_t i = 0; i < MAX_MOTORS; i++) {
 800128c:	2300      	movs	r3, #0
 800128e:	73fb      	strb	r3, [r7, #15]
 8001290:	e047      	b.n	8001322 <TMC2209_setMotorsConfiguration+0xa6>
    	HAL_Delay(2000);
 8001292:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001296:	f002 ff8b 	bl	80041b0 <HAL_Delay>
    	configureGCONF(&motors[i]);
 800129a:	7bfa      	ldrb	r2, [r7, #15]
 800129c:	4613      	mov	r3, r2
 800129e:	011b      	lsls	r3, r3, #4
 80012a0:	1a9b      	subs	r3, r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	461a      	mov	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fea4 	bl	8000ff8 <configureGCONF>
    	HAL_Delay(1000);
 80012b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012b4:	f002 ff7c 	bl	80041b0 <HAL_Delay>
    	uint16_t mstep = motors[i].driver.mstep;
 80012b8:	7bfa      	ldrb	r2, [r7, #15]
 80012ba:	4613      	mov	r3, r2
 80012bc:	011b      	lsls	r3, r3, #4
 80012be:	1a9b      	subs	r3, r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	461a      	mov	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4413      	add	r3, r2
 80012c8:	8b1b      	ldrh	r3, [r3, #24]
 80012ca:	81bb      	strh	r3, [r7, #12]
        setMicrosteppingResolution(&motors[i], mstep);
 80012cc:	7bfa      	ldrb	r2, [r7, #15]
 80012ce:	4613      	mov	r3, r2
 80012d0:	011b      	lsls	r3, r3, #4
 80012d2:	1a9b      	subs	r3, r3, r2
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	461a      	mov	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4413      	add	r3, r2
 80012dc:	89ba      	ldrh	r2, [r7, #12]
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff febf 	bl	8001064 <setMicrosteppingResolution>

        TMC2209_SetSpeed(&motors[0], 15000);
 80012e6:	f643 2198 	movw	r1, #15000	@ 0x3a98
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff fbdc 	bl	8000aa8 <TMC2209_SetSpeed>
        TMC2209_SetSpeed(&motors[1], 15000);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3378      	adds	r3, #120	@ 0x78
 80012f4:	f643 2198 	movw	r1, #15000	@ 0x3a98
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fbd5 	bl	8000aa8 <TMC2209_SetSpeed>
        TMC2209_SetSpeed(&motors[2], 15000);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	33f0      	adds	r3, #240	@ 0xf0
 8001302:	f643 2198 	movw	r1, #15000	@ 0x3a98
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fbce 	bl	8000aa8 <TMC2209_SetSpeed>
        TMC2209_SetSpeed(&motors[3], 15000);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001312:	f643 2198 	movw	r1, #15000	@ 0x3a98
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fbc6 	bl	8000aa8 <TMC2209_SetSpeed>
    for (uint8_t i = 0; i < MAX_MOTORS; i++) {
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	3301      	adds	r3, #1
 8001320:	73fb      	strb	r3, [r7, #15]
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	2b03      	cmp	r3, #3
 8001326:	d9b4      	bls.n	8001292 <TMC2209_setMotorsConfiguration+0x16>
       // HAL_Delay(1000);
       // checkMicrosteppingResolution(&motors[i]);
       // HAL_Delay(1000);
       // TMC2209_SetSpreadCycle(&motors[i], enableSpreadCycle);
    }
}
 8001328:	bf00      	nop
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <initializeMotors>:
// Motors & axis
extern Motor motors[MAX_MOTORS];
extern Axis axes[MAX_MOTORS_PER_AXIS];


void initializeMotors() {
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
    // Initialize each motor in the array
    for (int i = 0; i < MAX_MOTORS; i++) {
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	e22f      	b.n	80017a0 <initializeMotors+0x46c>
    	// Setting all for all drivers/motors
    	 // UART handler
    	motors[i].driver.address = 0x00; // Address : 0x00, 0x01 ... Depends on MS1 AND MS2
 8001340:	49be      	ldr	r1, [pc, #760]	@ (800163c <initializeMotors+0x308>)
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	4613      	mov	r3, r2
 8001346:	011b      	lsls	r3, r3, #4
 8001348:	1a9b      	subs	r3, r3, r2
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	440b      	add	r3, r1
 800134e:	3308      	adds	r3, #8
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]

    	// Motor Parameters
    	motors[i].driver.id = i ;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	b2d8      	uxtb	r0, r3
 8001358:	49b8      	ldr	r1, [pc, #736]	@ (800163c <initializeMotors+0x308>)
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	4613      	mov	r3, r2
 800135e:	011b      	lsls	r3, r3, #4
 8001360:	1a9b      	subs	r3, r3, r2
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	440b      	add	r3, r1
 8001366:	4602      	mov	r2, r0
 8001368:	701a      	strb	r2, [r3, #0]

        motors[i].stepsTaken = 0;
 800136a:	49b4      	ldr	r1, [pc, #720]	@ (800163c <initializeMotors+0x308>)
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	4613      	mov	r3, r2
 8001370:	011b      	lsls	r3, r3, #4
 8001372:	1a9b      	subs	r3, r3, r2
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	440b      	add	r3, r1
 8001378:	3358      	adds	r3, #88	@ 0x58
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
        motors[i].nextTotalSteps = 0;
 800137e:	49af      	ldr	r1, [pc, #700]	@ (800163c <initializeMotors+0x308>)
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	4613      	mov	r3, r2
 8001384:	011b      	lsls	r3, r3, #4
 8001386:	1a9b      	subs	r3, r3, r2
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	440b      	add	r3, r1
 800138c:	335c      	adds	r3, #92	@ 0x5c
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
        motors[i].currentPositionMM = 0;
 8001392:	49aa      	ldr	r1, [pc, #680]	@ (800163c <initializeMotors+0x308>)
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	011b      	lsls	r3, r3, #4
 800139a:	1a9b      	subs	r3, r3, r2
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	440b      	add	r3, r1
 80013a0:	3360      	adds	r3, #96	@ 0x60
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
        motors[i].nextPositionMM = 0;
 80013a8:	49a4      	ldr	r1, [pc, #656]	@ (800163c <initializeMotors+0x308>)
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	4613      	mov	r3, r2
 80013ae:	011b      	lsls	r3, r3, #4
 80013b0:	1a9b      	subs	r3, r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	440b      	add	r3, r1
 80013b6:	3364      	adds	r3, #100	@ 0x64
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
        motors[i].isStepping = false;
 80013be:	499f      	ldr	r1, [pc, #636]	@ (800163c <initializeMotors+0x308>)
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	4613      	mov	r3, r2
 80013c4:	011b      	lsls	r3, r3, #4
 80013c6:	1a9b      	subs	r3, r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	440b      	add	r3, r1
 80013cc:	3368      	adds	r3, #104	@ 0x68
 80013ce:	2200      	movs	r2, #0
 80013d0:	701a      	strb	r2, [r3, #0]



        if(i == 0){
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d171      	bne.n	80014bc <initializeMotors+0x188>
         // Configure motor 1 X-axis

        // TIMER configurations
        motors[i].driver.htim = &htim2;				 // TIMER HANDLER
 80013d8:	4998      	ldr	r1, [pc, #608]	@ (800163c <initializeMotors+0x308>)
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	4613      	mov	r3, r2
 80013de:	011b      	lsls	r3, r3, #4
 80013e0:	1a9b      	subs	r3, r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	440b      	add	r3, r1
 80013e6:	3310      	adds	r3, #16
 80013e8:	4a95      	ldr	r2, [pc, #596]	@ (8001640 <initializeMotors+0x30c>)
 80013ea:	601a      	str	r2, [r3, #0]
        motors[i].driver.step_channel = TIM_CHANNEL_3; // PWM channel for motor 1
 80013ec:	4993      	ldr	r1, [pc, #588]	@ (800163c <initializeMotors+0x308>)
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	4613      	mov	r3, r2
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	1a9b      	subs	r3, r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	440b      	add	r3, r1
 80013fa:	3314      	adds	r3, #20
 80013fc:	2208      	movs	r2, #8
 80013fe:	601a      	str	r2, [r3, #0]
        motors[i].driver.mstep = 16;
 8001400:	498e      	ldr	r1, [pc, #568]	@ (800163c <initializeMotors+0x308>)
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	011b      	lsls	r3, r3, #4
 8001408:	1a9b      	subs	r3, r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	440b      	add	r3, r1
 800140e:	3318      	adds	r3, #24
 8001410:	2210      	movs	r2, #16
 8001412:	801a      	strh	r2, [r3, #0]
        motors[i].driver.huart = &huart2;
 8001414:	4989      	ldr	r1, [pc, #548]	@ (800163c <initializeMotors+0x308>)
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	011b      	lsls	r3, r3, #4
 800141c:	1a9b      	subs	r3, r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	440b      	add	r3, r1
 8001422:	3304      	adds	r3, #4
 8001424:	4a87      	ldr	r2, [pc, #540]	@ (8001644 <initializeMotors+0x310>)
 8001426:	601a      	str	r2, [r3, #0]
        motors[i].stepsPerRevolution = 400;
 8001428:	4984      	ldr	r1, [pc, #528]	@ (800163c <initializeMotors+0x308>)
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	4613      	mov	r3, r2
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	1a9b      	subs	r3, r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	440b      	add	r3, r1
 8001436:	3350      	adds	r3, #80	@ 0x50
 8001438:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800143c:	601a      	str	r2, [r3, #0]
        // GPIO PINS
        motors[i].driver.step_port = STEP1_GPIO_Port;
 800143e:	497f      	ldr	r1, [pc, #508]	@ (800163c <initializeMotors+0x308>)
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	011b      	lsls	r3, r3, #4
 8001446:	1a9b      	subs	r3, r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	440b      	add	r3, r1
 800144c:	3328      	adds	r3, #40	@ 0x28
 800144e:	4a7e      	ldr	r2, [pc, #504]	@ (8001648 <initializeMotors+0x314>)
 8001450:	601a      	str	r2, [r3, #0]
        motors[i].driver.step_pin = STEP1_Pin;
 8001452:	497a      	ldr	r1, [pc, #488]	@ (800163c <initializeMotors+0x308>)
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	011b      	lsls	r3, r3, #4
 800145a:	1a9b      	subs	r3, r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	440b      	add	r3, r1
 8001460:	332c      	adds	r3, #44	@ 0x2c
 8001462:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001466:	801a      	strh	r2, [r3, #0]
        motors[i].driver.dir_port = DIR1_GPIO_Port;
 8001468:	4974      	ldr	r1, [pc, #464]	@ (800163c <initializeMotors+0x308>)
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	011b      	lsls	r3, r3, #4
 8001470:	1a9b      	subs	r3, r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	440b      	add	r3, r1
 8001476:	3330      	adds	r3, #48	@ 0x30
 8001478:	4a74      	ldr	r2, [pc, #464]	@ (800164c <initializeMotors+0x318>)
 800147a:	601a      	str	r2, [r3, #0]
        motors[i].driver.dir_pin = DIR1_Pin;
 800147c:	496f      	ldr	r1, [pc, #444]	@ (800163c <initializeMotors+0x308>)
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	011b      	lsls	r3, r3, #4
 8001484:	1a9b      	subs	r3, r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	440b      	add	r3, r1
 800148a:	3334      	adds	r3, #52	@ 0x34
 800148c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001490:	801a      	strh	r2, [r3, #0]
        motors[i].driver.enn_port = ENN1_GPIO_Port;
 8001492:	496a      	ldr	r1, [pc, #424]	@ (800163c <initializeMotors+0x308>)
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	4613      	mov	r3, r2
 8001498:	011b      	lsls	r3, r3, #4
 800149a:	1a9b      	subs	r3, r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	440b      	add	r3, r1
 80014a0:	3338      	adds	r3, #56	@ 0x38
 80014a2:	4a69      	ldr	r2, [pc, #420]	@ (8001648 <initializeMotors+0x314>)
 80014a4:	601a      	str	r2, [r3, #0]
        motors[i].driver.enn_pin = ENN1_Pin;
 80014a6:	4965      	ldr	r1, [pc, #404]	@ (800163c <initializeMotors+0x308>)
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	1a9b      	subs	r3, r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	440b      	add	r3, r1
 80014b4:	333c      	adds	r3, #60	@ 0x3c
 80014b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014ba:	801a      	strh	r2, [r3, #0]

        }


        if(i == 1){
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d170      	bne.n	80015a4 <initializeMotors+0x270>
        	// Configure motor 2 X-axis
            // TIMER configurations
            motors[i].driver.htim = &htim1;				 // TIMER HANDLER
 80014c2:	495e      	ldr	r1, [pc, #376]	@ (800163c <initializeMotors+0x308>)
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	011b      	lsls	r3, r3, #4
 80014ca:	1a9b      	subs	r3, r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	440b      	add	r3, r1
 80014d0:	3310      	adds	r3, #16
 80014d2:	4a5f      	ldr	r2, [pc, #380]	@ (8001650 <initializeMotors+0x31c>)
 80014d4:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_channel = TIM_CHANNEL_4; // PWM channel for motor 1
 80014d6:	4959      	ldr	r1, [pc, #356]	@ (800163c <initializeMotors+0x308>)
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	011b      	lsls	r3, r3, #4
 80014de:	1a9b      	subs	r3, r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	440b      	add	r3, r1
 80014e4:	3314      	adds	r3, #20
 80014e6:	220c      	movs	r2, #12
 80014e8:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 16;
 80014ea:	4954      	ldr	r1, [pc, #336]	@ (800163c <initializeMotors+0x308>)
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	4613      	mov	r3, r2
 80014f0:	011b      	lsls	r3, r3, #4
 80014f2:	1a9b      	subs	r3, r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	440b      	add	r3, r1
 80014f8:	3318      	adds	r3, #24
 80014fa:	2210      	movs	r2, #16
 80014fc:	801a      	strh	r2, [r3, #0]
            motors[i].driver.huart = &huart4;
 80014fe:	494f      	ldr	r1, [pc, #316]	@ (800163c <initializeMotors+0x308>)
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	011b      	lsls	r3, r3, #4
 8001506:	1a9b      	subs	r3, r3, r2
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	440b      	add	r3, r1
 800150c:	3304      	adds	r3, #4
 800150e:	4a51      	ldr	r2, [pc, #324]	@ (8001654 <initializeMotors+0x320>)
 8001510:	601a      	str	r2, [r3, #0]
            motors[i].stepsPerRevolution = 200;
 8001512:	494a      	ldr	r1, [pc, #296]	@ (800163c <initializeMotors+0x308>)
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	4613      	mov	r3, r2
 8001518:	011b      	lsls	r3, r3, #4
 800151a:	1a9b      	subs	r3, r3, r2
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	440b      	add	r3, r1
 8001520:	3350      	adds	r3, #80	@ 0x50
 8001522:	22c8      	movs	r2, #200	@ 0xc8
 8001524:	601a      	str	r2, [r3, #0]
            // GPIO PINS
            motors[i].driver.step_port = STEP2_GPIO_Port;
 8001526:	4945      	ldr	r1, [pc, #276]	@ (800163c <initializeMotors+0x308>)
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	4613      	mov	r3, r2
 800152c:	011b      	lsls	r3, r3, #4
 800152e:	1a9b      	subs	r3, r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	440b      	add	r3, r1
 8001534:	3328      	adds	r3, #40	@ 0x28
 8001536:	4a45      	ldr	r2, [pc, #276]	@ (800164c <initializeMotors+0x318>)
 8001538:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = STEP2_Pin;
 800153a:	4940      	ldr	r1, [pc, #256]	@ (800163c <initializeMotors+0x308>)
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	011b      	lsls	r3, r3, #4
 8001542:	1a9b      	subs	r3, r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	440b      	add	r3, r1
 8001548:	332c      	adds	r3, #44	@ 0x2c
 800154a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800154e:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = DIR2_GPIO_Port;
 8001550:	493a      	ldr	r1, [pc, #232]	@ (800163c <initializeMotors+0x308>)
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	4613      	mov	r3, r2
 8001556:	011b      	lsls	r3, r3, #4
 8001558:	1a9b      	subs	r3, r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	440b      	add	r3, r1
 800155e:	3330      	adds	r3, #48	@ 0x30
 8001560:	4a3a      	ldr	r2, [pc, #232]	@ (800164c <initializeMotors+0x318>)
 8001562:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = DIR2_Pin;
 8001564:	4935      	ldr	r1, [pc, #212]	@ (800163c <initializeMotors+0x308>)
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	4613      	mov	r3, r2
 800156a:	011b      	lsls	r3, r3, #4
 800156c:	1a9b      	subs	r3, r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	440b      	add	r3, r1
 8001572:	3334      	adds	r3, #52	@ 0x34
 8001574:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001578:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = ENN2_GPIO_Port;
 800157a:	4930      	ldr	r1, [pc, #192]	@ (800163c <initializeMotors+0x308>)
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	4613      	mov	r3, r2
 8001580:	011b      	lsls	r3, r3, #4
 8001582:	1a9b      	subs	r3, r3, r2
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	440b      	add	r3, r1
 8001588:	3338      	adds	r3, #56	@ 0x38
 800158a:	4a30      	ldr	r2, [pc, #192]	@ (800164c <initializeMotors+0x318>)
 800158c:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = ENN2_Pin;
 800158e:	492b      	ldr	r1, [pc, #172]	@ (800163c <initializeMotors+0x308>)
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	011b      	lsls	r3, r3, #4
 8001596:	1a9b      	subs	r3, r3, r2
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	440b      	add	r3, r1
 800159c:	333c      	adds	r3, #60	@ 0x3c
 800159e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015a2:	801a      	strh	r2, [r3, #0]


        }
        if(i == 2){
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	f040 8085 	bne.w	80016b6 <initializeMotors+0x382>
        	        	// Configure motor 3 Y-axis
        	            // TIMER configurations
            motors[i].driver.htim = &htim5;				 // TIMER HANDLER
 80015ac:	4923      	ldr	r1, [pc, #140]	@ (800163c <initializeMotors+0x308>)
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	4613      	mov	r3, r2
 80015b2:	011b      	lsls	r3, r3, #4
 80015b4:	1a9b      	subs	r3, r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	440b      	add	r3, r1
 80015ba:	3310      	adds	r3, #16
 80015bc:	4a26      	ldr	r2, [pc, #152]	@ (8001658 <initializeMotors+0x324>)
 80015be:	601a      	str	r2, [r3, #0]
        	motors[i].driver.step_channel = TIM_CHANNEL_1; // PWM channel for motor 1
 80015c0:	491e      	ldr	r1, [pc, #120]	@ (800163c <initializeMotors+0x308>)
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	4613      	mov	r3, r2
 80015c6:	011b      	lsls	r3, r3, #4
 80015c8:	1a9b      	subs	r3, r3, r2
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	440b      	add	r3, r1
 80015ce:	3314      	adds	r3, #20
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 16;
 80015d4:	4919      	ldr	r1, [pc, #100]	@ (800163c <initializeMotors+0x308>)
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	4613      	mov	r3, r2
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	1a9b      	subs	r3, r3, r2
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	440b      	add	r3, r1
 80015e2:	3318      	adds	r3, #24
 80015e4:	2210      	movs	r2, #16
 80015e6:	801a      	strh	r2, [r3, #0]
            motors[i].driver.huart = &huart5;
 80015e8:	4914      	ldr	r1, [pc, #80]	@ (800163c <initializeMotors+0x308>)
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	011b      	lsls	r3, r3, #4
 80015f0:	1a9b      	subs	r3, r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	440b      	add	r3, r1
 80015f6:	3304      	adds	r3, #4
 80015f8:	4a18      	ldr	r2, [pc, #96]	@ (800165c <initializeMotors+0x328>)
 80015fa:	601a      	str	r2, [r3, #0]
        	motors[i].stepsPerRevolution = 400;
 80015fc:	490f      	ldr	r1, [pc, #60]	@ (800163c <initializeMotors+0x308>)
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	1a9b      	subs	r3, r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	440b      	add	r3, r1
 800160a:	3350      	adds	r3, #80	@ 0x50
 800160c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001610:	601a      	str	r2, [r3, #0]
        	            // GPIO PINS
            motors[i].driver.step_port = STEP3_GPIO_Port;
 8001612:	490a      	ldr	r1, [pc, #40]	@ (800163c <initializeMotors+0x308>)
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	4613      	mov	r3, r2
 8001618:	011b      	lsls	r3, r3, #4
 800161a:	1a9b      	subs	r3, r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	440b      	add	r3, r1
 8001620:	3328      	adds	r3, #40	@ 0x28
 8001622:	4a0f      	ldr	r2, [pc, #60]	@ (8001660 <initializeMotors+0x32c>)
 8001624:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = STEP3_Pin;
 8001626:	4905      	ldr	r1, [pc, #20]	@ (800163c <initializeMotors+0x308>)
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	011b      	lsls	r3, r3, #4
 800162e:	1a9b      	subs	r3, r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	440b      	add	r3, r1
 8001634:	332c      	adds	r3, #44	@ 0x2c
 8001636:	2201      	movs	r2, #1
 8001638:	e014      	b.n	8001664 <initializeMotors+0x330>
 800163a:	bf00      	nop
 800163c:	20000d44 	.word	0x20000d44
 8001640:	20000228 	.word	0x20000228
 8001644:	2000054c 	.word	0x2000054c
 8001648:	40020400 	.word	0x40020400
 800164c:	40021000 	.word	0x40021000
 8001650:	200001dc 	.word	0x200001dc
 8001654:	2000043c 	.word	0x2000043c
 8001658:	2000030c 	.word	0x2000030c
 800165c:	200004c4 	.word	0x200004c4
 8001660:	40020000 	.word	0x40020000
 8001664:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = DIR3_GPIO_Port;
 8001666:	4954      	ldr	r1, [pc, #336]	@ (80017b8 <initializeMotors+0x484>)
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	4613      	mov	r3, r2
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	1a9b      	subs	r3, r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	440b      	add	r3, r1
 8001674:	3330      	adds	r3, #48	@ 0x30
 8001676:	4a51      	ldr	r2, [pc, #324]	@ (80017bc <initializeMotors+0x488>)
 8001678:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = DIR3_Pin;
 800167a:	494f      	ldr	r1, [pc, #316]	@ (80017b8 <initializeMotors+0x484>)
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	011b      	lsls	r3, r3, #4
 8001682:	1a9b      	subs	r3, r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	440b      	add	r3, r1
 8001688:	3334      	adds	r3, #52	@ 0x34
 800168a:	2204      	movs	r2, #4
 800168c:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = ENN3_GPIO_Port;
 800168e:	494a      	ldr	r1, [pc, #296]	@ (80017b8 <initializeMotors+0x484>)
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	011b      	lsls	r3, r3, #4
 8001696:	1a9b      	subs	r3, r3, r2
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	440b      	add	r3, r1
 800169c:	3338      	adds	r3, #56	@ 0x38
 800169e:	4a47      	ldr	r2, [pc, #284]	@ (80017bc <initializeMotors+0x488>)
 80016a0:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = ENN3_Pin;
 80016a2:	4945      	ldr	r1, [pc, #276]	@ (80017b8 <initializeMotors+0x484>)
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	011b      	lsls	r3, r3, #4
 80016aa:	1a9b      	subs	r3, r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	440b      	add	r3, r1
 80016b0:	333c      	adds	r3, #60	@ 0x3c
 80016b2:	2280      	movs	r2, #128	@ 0x80
 80016b4:	801a      	strh	r2, [r3, #0]


        }

        if(i == 3){
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d16e      	bne.n	800179a <initializeMotors+0x466>
        	// Configure motor 4 Y-axis
            // TIMER configurations
            motors[i].driver.htim = &htim3;				 // TIMER HANDLER
 80016bc:	493e      	ldr	r1, [pc, #248]	@ (80017b8 <initializeMotors+0x484>)
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	011b      	lsls	r3, r3, #4
 80016c4:	1a9b      	subs	r3, r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	440b      	add	r3, r1
 80016ca:	3310      	adds	r3, #16
 80016cc:	4a3c      	ldr	r2, [pc, #240]	@ (80017c0 <initializeMotors+0x48c>)
 80016ce:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_channel = TIM_CHANNEL_3; // PWM channel for motor 1
 80016d0:	4939      	ldr	r1, [pc, #228]	@ (80017b8 <initializeMotors+0x484>)
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	011b      	lsls	r3, r3, #4
 80016d8:	1a9b      	subs	r3, r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	440b      	add	r3, r1
 80016de:	3314      	adds	r3, #20
 80016e0:	2208      	movs	r2, #8
 80016e2:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 16;
 80016e4:	4934      	ldr	r1, [pc, #208]	@ (80017b8 <initializeMotors+0x484>)
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	4613      	mov	r3, r2
 80016ea:	011b      	lsls	r3, r3, #4
 80016ec:	1a9b      	subs	r3, r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	440b      	add	r3, r1
 80016f2:	3318      	adds	r3, #24
 80016f4:	2210      	movs	r2, #16
 80016f6:	801a      	strh	r2, [r3, #0]
            motors[i].driver.huart = &huart6;
 80016f8:	492f      	ldr	r1, [pc, #188]	@ (80017b8 <initializeMotors+0x484>)
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	011b      	lsls	r3, r3, #4
 8001700:	1a9b      	subs	r3, r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	440b      	add	r3, r1
 8001706:	3304      	adds	r3, #4
 8001708:	4a2e      	ldr	r2, [pc, #184]	@ (80017c4 <initializeMotors+0x490>)
 800170a:	601a      	str	r2, [r3, #0]
            motors[i].stepsPerRevolution = 200;
 800170c:	492a      	ldr	r1, [pc, #168]	@ (80017b8 <initializeMotors+0x484>)
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	4613      	mov	r3, r2
 8001712:	011b      	lsls	r3, r3, #4
 8001714:	1a9b      	subs	r3, r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	440b      	add	r3, r1
 800171a:	3350      	adds	r3, #80	@ 0x50
 800171c:	22c8      	movs	r2, #200	@ 0xc8
 800171e:	601a      	str	r2, [r3, #0]
            // GPIO PINS
            motors[i].driver.step_port = STEP4_GPIO_Port;
 8001720:	4925      	ldr	r1, [pc, #148]	@ (80017b8 <initializeMotors+0x484>)
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	4613      	mov	r3, r2
 8001726:	011b      	lsls	r3, r3, #4
 8001728:	1a9b      	subs	r3, r3, r2
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	440b      	add	r3, r1
 800172e:	3328      	adds	r3, #40	@ 0x28
 8001730:	4a25      	ldr	r2, [pc, #148]	@ (80017c8 <initializeMotors+0x494>)
 8001732:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = STEP4_Pin;
 8001734:	4920      	ldr	r1, [pc, #128]	@ (80017b8 <initializeMotors+0x484>)
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	4613      	mov	r3, r2
 800173a:	011b      	lsls	r3, r3, #4
 800173c:	1a9b      	subs	r3, r3, r2
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	440b      	add	r3, r1
 8001742:	332c      	adds	r3, #44	@ 0x2c
 8001744:	2201      	movs	r2, #1
 8001746:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = DIR4_GPIO_Port;
 8001748:	491b      	ldr	r1, [pc, #108]	@ (80017b8 <initializeMotors+0x484>)
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	4613      	mov	r3, r2
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	1a9b      	subs	r3, r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	440b      	add	r3, r1
 8001756:	3330      	adds	r3, #48	@ 0x30
 8001758:	4a18      	ldr	r2, [pc, #96]	@ (80017bc <initializeMotors+0x488>)
 800175a:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = DIR4_Pin;
 800175c:	4916      	ldr	r1, [pc, #88]	@ (80017b8 <initializeMotors+0x484>)
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	4613      	mov	r3, r2
 8001762:	011b      	lsls	r3, r3, #4
 8001764:	1a9b      	subs	r3, r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	440b      	add	r3, r1
 800176a:	3334      	adds	r3, #52	@ 0x34
 800176c:	2201      	movs	r2, #1
 800176e:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = ENN4_GPIO_Port;
 8001770:	4911      	ldr	r1, [pc, #68]	@ (80017b8 <initializeMotors+0x484>)
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	4613      	mov	r3, r2
 8001776:	011b      	lsls	r3, r3, #4
 8001778:	1a9b      	subs	r3, r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	440b      	add	r3, r1
 800177e:	3338      	adds	r3, #56	@ 0x38
 8001780:	4a0e      	ldr	r2, [pc, #56]	@ (80017bc <initializeMotors+0x488>)
 8001782:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = ENN4_Pin;
 8001784:	490c      	ldr	r1, [pc, #48]	@ (80017b8 <initializeMotors+0x484>)
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	4613      	mov	r3, r2
 800178a:	011b      	lsls	r3, r3, #4
 800178c:	1a9b      	subs	r3, r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	440b      	add	r3, r1
 8001792:	333c      	adds	r3, #60	@ 0x3c
 8001794:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001798:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < MAX_MOTORS; i++) {
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3301      	adds	r3, #1
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	f77f adcc 	ble.w	8001340 <initializeMotors+0xc>


    }


}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	20000d44 	.word	0x20000d44
 80017bc:	40021000 	.word	0x40021000
 80017c0:	20000274 	.word	0x20000274
 80017c4:	2000065c 	.word	0x2000065c
 80017c8:	40020400 	.word	0x40020400

080017cc <initializeAxis>:


void initializeAxis(Axis *axis, Motor *motor1, Motor *motor2, uint8_t circumference, const char *axisName) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	70fb      	strb	r3, [r7, #3]
    // Assign motors to the axis
    axis->motors[0] = motor1;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	68ba      	ldr	r2, [r7, #8]
 80017de:	601a      	str	r2, [r3, #0]
    axis->motors[1] = motor2;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	605a      	str	r2, [r3, #4]
    // The circumference variable is calculated based on the physical setup. For example: GT2 20-tooth pulley with 2mm pitch(Pulley Circumference = Number of Teeth * Belt Pitch)

    // Axis dimensions and step calculations
    axis->motors[0]->currentPositionMM = 0;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	661a      	str	r2, [r3, #96]	@ 0x60
    axis->motors[1]->currentPositionMM = 0;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	661a      	str	r2, [r3, #96]	@ 0x60
    uint32_t totalStepsPerRevolution = motor1->stepsPerRevolution * motor1->driver.mstep; // Both motors use the same microstepping
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	8b12      	ldrh	r2, [r2, #24]
 8001802:	fb02 f303 	mul.w	r3, r2, r3
 8001806:	617b      	str	r3, [r7, #20]
    motor1->totalStepsPerRevolution = totalStepsPerRevolution;
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	655a      	str	r2, [r3, #84]	@ 0x54
    motor2->totalStepsPerRevolution = totalStepsPerRevolution;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	655a      	str	r2, [r3, #84]	@ 0x54
    axis->stepPerUnit = totalStepsPerRevolution / circumference;;
 8001814:	78fb      	ldrb	r3, [r7, #3]
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	fbb2 f3f3 	udiv	r3, r2, r3
 800181c:	ee07 3a90 	vmov	s15, r3
 8001820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	edc3 7a04 	vstr	s15, [r3, #16]

    // IDs for motors controlling the axis, eg. X1, X2
    snprintf(axis->id[0], sizeof(axis->id[0]), "%s%d", axisName, motor1->driver.id);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f103 0014 	add.w	r0, r3, #20
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	6a3b      	ldr	r3, [r7, #32]
 8001838:	4a0a      	ldr	r2, [pc, #40]	@ (8001864 <initializeAxis+0x98>)
 800183a:	210a      	movs	r1, #10
 800183c:	f00a f8d6 	bl	800b9ec <sniprintf>
    if (motor2 != NULL) {
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00a      	beq.n	800185c <initializeAxis+0x90>
        snprintf(axis->id[1], sizeof(axis->id[1]), "%s%d", axisName, motor2->driver.id);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f103 001e 	add.w	r0, r3, #30
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	6a3b      	ldr	r3, [r7, #32]
 8001854:	4a03      	ldr	r2, [pc, #12]	@ (8001864 <initializeAxis+0x98>)
 8001856:	210a      	movs	r1, #10
 8001858:	f00a f8c8 	bl	800b9ec <sniprintf>
    }
}
 800185c:	bf00      	nop
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	0800cad4 	.word	0x0800cad4

08001868 <initializeSystem>:

void initializeSystem(){
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af02      	add	r7, sp, #8
    // X-axis
    initializeAxis(&axes[0], &motors[0],&motors[2], 40, "Y");
 800186e:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <initializeSystem+0x2c>)
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	2328      	movs	r3, #40	@ 0x28
 8001874:	4a08      	ldr	r2, [pc, #32]	@ (8001898 <initializeSystem+0x30>)
 8001876:	4909      	ldr	r1, [pc, #36]	@ (800189c <initializeSystem+0x34>)
 8001878:	4809      	ldr	r0, [pc, #36]	@ (80018a0 <initializeSystem+0x38>)
 800187a:	f7ff ffa7 	bl	80017cc <initializeAxis>
    initializeAxis(&axes[1], &motors[1],&motors[3], 8, "X");
 800187e:	4b09      	ldr	r3, [pc, #36]	@ (80018a4 <initializeSystem+0x3c>)
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	2308      	movs	r3, #8
 8001884:	4a08      	ldr	r2, [pc, #32]	@ (80018a8 <initializeSystem+0x40>)
 8001886:	4909      	ldr	r1, [pc, #36]	@ (80018ac <initializeSystem+0x44>)
 8001888:	4809      	ldr	r0, [pc, #36]	@ (80018b0 <initializeSystem+0x48>)
 800188a:	f7ff ff9f 	bl	80017cc <initializeAxis>

    // Y-axis
   // initializeAxis(&axes[1], &motors[1], &motors[3], Y_AXIS_LENGTH, "Y");
    // TODO: ADD Z-AXIS should be a servo
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	0800cadc 	.word	0x0800cadc
 8001898:	20000e34 	.word	0x20000e34
 800189c:	20000d44 	.word	0x20000d44
 80018a0:	20000f24 	.word	0x20000f24
 80018a4:	0800cae0 	.word	0x0800cae0
 80018a8:	20000eac 	.word	0x20000eac
 80018ac:	20000dbc 	.word	0x20000dbc
 80018b0:	20000f4c 	.word	0x20000f4c

080018b4 <ENC_Init>:
 * @brief Rotary quadrature encoder hardware initialization.
 * @param[in] henc : Encoder handler
 * @return None
 */
void ENC_Init(ENC_Handle_TypeDef* henc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(henc->Timer, TIM_CHANNEL_ALL); // Start Timer 4 in encoder mode with interrupts enabled
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	213c      	movs	r1, #60	@ 0x3c
 80018c2:	4618      	mov	r0, r3
 80018c4:	f006 fd2a 	bl	800831c <HAL_TIM_Encoder_Start>
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <IsSensorTriggered>:
	SERVO_WritePosition(hservo, 90);
	SERVO_WritePosition(hservo1, 92);
	return x;
}
bool IsSensorTriggered(GPIO_TypeDef *sensorPort, uint16_t sensorPin)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]
    // Read the sensor state
    GPIO_PinState sensor_state = HAL_GPIO_ReadPin(sensorPort, sensorPin);
 80018dc:	887b      	ldrh	r3, [r7, #2]
 80018de:	4619      	mov	r1, r3
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f003 fb51 	bl	8004f88 <HAL_GPIO_ReadPin>
 80018e6:	4603      	mov	r3, r0
 80018e8:	73fb      	strb	r3, [r7, #15]

    // Small delay to avoid button bounce or noise
    if(sensor_state == GPIO_PIN_SET){
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d101      	bne.n	80018f4 <IsSensorTriggered+0x24>
    	return false;
 80018f0:	2300      	movs	r3, #0
 80018f2:	e000      	b.n	80018f6 <IsSensorTriggered+0x26>

    }
    else{
    	return true;
 80018f4:	2301      	movs	r3, #1
    }
    // Return true if the sensor is triggered (GPIO_PIN_SET), false otherwise

}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <PWM_Init>:
  * @param[in/out] hpwm   : PWM output handler
  * @retval None
  */

void PWM_Init(PWM_Handle_TypeDef* hpwm)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  PWM_WriteDuty(hpwm, hpwm->Duty);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	edd3 7a02 	vldr	s15, [r3, #8]
 800190c:	eeb0 0a67 	vmov.f32	s0, s15
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 f80d 	bl	8001930 <PWM_WriteDuty>
  HAL_TIM_PWM_Start(hpwm->Timer, hpwm->Channel);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	4619      	mov	r1, r3
 8001920:	4610      	mov	r0, r2
 8001922:	f006 f945 	bl	8007bb0 <HAL_TIM_PWM_Start>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <PWM_WriteDuty>:
  * @param[in/out] hpwm   : PWM output handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void PWM_WriteDuty(PWM_Handle_TypeDef* hpwm, float duty)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	ed87 0a00 	vstr	s0, [r7]
  // Saturate duty cycle value
  if(duty < 0.0f)
 800193c:	edd7 7a00 	vldr	s15, [r7]
 8001940:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001948:	d503      	bpl.n	8001952 <PWM_WriteDuty+0x22>
    duty = 0.0;
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	e00a      	b.n	8001968 <PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 8001952:	edd7 7a00 	vldr	s15, [r7]
 8001956:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001a14 <PWM_WriteDuty+0xe4>
 800195a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800195e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001962:	dd01      	ble.n	8001968 <PWM_WriteDuty+0x38>
    duty = 100.0f;
 8001964:	4b2c      	ldr	r3, [pc, #176]	@ (8001a18 <PWM_WriteDuty+0xe8>)
 8001966:	603b      	str	r3, [r7, #0]
  // Write duty to handle field
  hpwm->Duty = duty;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	609a      	str	r2, [r3, #8]
  // Compute Capture/Compare Register value
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hpwm->Timer)+1)) / 100;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001976:	3301      	adds	r3, #1
 8001978:	ee07 3a90 	vmov	s15, r3
 800197c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001980:	edd7 7a00 	vldr	s15, [r7]
 8001984:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001988:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8001a14 <PWM_WriteDuty+0xe4>
 800198c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001994:	ee17 3a90 	vmov	r3, s15
 8001998:	60fb      	str	r3, [r7, #12]
  // Write value to register
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d105      	bne.n	80019ae <PWM_WriteDuty+0x7e>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80019ac:	e02c      	b.n	8001a08 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d105      	bne.n	80019c2 <PWM_WriteDuty+0x92>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80019c0:	e022      	b.n	8001a08 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d105      	bne.n	80019d6 <PWM_WriteDuty+0xa6>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80019d4:	e018      	b.n	8001a08 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b0c      	cmp	r3, #12
 80019dc:	d105      	bne.n	80019ea <PWM_WriteDuty+0xba>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80019e8:	e00e      	b.n	8001a08 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b10      	cmp	r3, #16
 80019f0:	d105      	bne.n	80019fe <PWM_WriteDuty+0xce>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80019fc:	e004      	b.n	8001a08 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	42c80000 	.word	0x42c80000
 8001a18:	42c80000 	.word	0x42c80000

08001a1c <SERVO_Init>:
float PWM_ReadDuty(const PWM_Handle_TypeDef* hpwm)
{
  return hpwm->Duty;
}
void SERVO_Init(SERVO_Handle_TypeDef* hservo)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	SERVO_WritePosition(hservo, 70.0f);
 8001a24:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001a40 <SERVO_Init+0x24>
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 f80b 	bl	8001a44 <SERVO_WritePosition>
	PWM_Init(&(hservo->PwmOut));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff64 	bl	80018fe <PWM_Init>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	428c0000 	.word	0x428c0000

08001a44 <SERVO_WritePosition>:

void SERVO_WritePosition(SERVO_Handle_TypeDef* hservo, float pos)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	ed87 0a00 	vstr	s0, [r7]
	hservo->Position = __SATURATION(pos, 0.0f, 180.0f);
 8001a50:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8001aac <SERVO_WritePosition+0x68>
 8001a54:	ed97 0a00 	vldr	s0, [r7]
 8001a58:	f00a fcb9 	bl	800c3ce <fminf>
 8001a5c:	eef0 7a40 	vmov.f32	s15, s0
 8001a60:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8001ab0 <SERVO_WritePosition+0x6c>
 8001a64:	eeb0 0a67 	vmov.f32	s0, s15
 8001a68:	f00a fc94 	bl	800c394 <fmaxf>
 8001a6c:	eef0 7a40 	vmov.f32	s15, s0
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	edc3 7a03 	vstr	s15, [r3, #12]
	float duty = __LINEAR_TRANSFORM(hservo->Position, 0.0f, 180.0f, SERVO_MIN_DUTY, SERVO_MAX_DUTY);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a7c:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001aac <SERVO_WritePosition+0x68>
 8001a80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a84:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001a88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a8c:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8001a90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a94:	edc7 7a03 	vstr	s15, [r7, #12]
	PWM_WriteDuty(&(hservo->PwmOut), duty);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	ed97 0a03 	vldr	s0, [r7, #12]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff ff46 	bl	8001930 <PWM_WriteDuty>
}
 8001aa4:	bf00      	nop
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	43340000 	.word	0x43340000
 8001ab0:	00000000 	.word	0x00000000

08001ab4 <HAL_UART_RxCpltCallback>:

uint8_t uart3_rxData[PCB2GCODE_REPLY_SIZE];
volatile bool uart3_commandReceived = false;

// UART Receive Complete Callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	// UART callback for read from TMC2209
    if (huart->Instance == USART2 || huart->Instance == USART6 || huart->Instance == UART4 || huart->Instance == UART5) {
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0f      	ldr	r2, [pc, #60]	@ (8001b00 <HAL_UART_RxCpltCallback+0x4c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d00e      	beq.n	8001ae4 <HAL_UART_RxCpltCallback+0x30>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a0e      	ldr	r2, [pc, #56]	@ (8001b04 <HAL_UART_RxCpltCallback+0x50>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d009      	beq.n	8001ae4 <HAL_UART_RxCpltCallback+0x30>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0c      	ldr	r2, [pc, #48]	@ (8001b08 <HAL_UART_RxCpltCallback+0x54>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d004      	beq.n	8001ae4 <HAL_UART_RxCpltCallback+0x30>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a0b      	ldr	r2, [pc, #44]	@ (8001b0c <HAL_UART_RxCpltCallback+0x58>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d108      	bne.n	8001af6 <HAL_UART_RxCpltCallback+0x42>
        // Prevent buffer overflow by iterating only up to TMC_REPLY_SIZE
        memcpy(rxBuffer, rxData + 1, TMC_REPLY_SIZE+1);
 8001ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8001b10 <HAL_UART_RxCpltCallback+0x5c>)
 8001ae6:	2209      	movs	r2, #9
 8001ae8:	4619      	mov	r1, r3
 8001aea:	480a      	ldr	r0, [pc, #40]	@ (8001b14 <HAL_UART_RxCpltCallback+0x60>)
 8001aec:	f00a f806 	bl	800bafc <memcpy>
        rxBufferReady = 1;
 8001af0:	4b09      	ldr	r3, [pc, #36]	@ (8001b18 <HAL_UART_RxCpltCallback+0x64>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]

    }

    // TODO: UART callback for read from PCB2Gcode

}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40004400 	.word	0x40004400
 8001b04:	40011400 	.word	0x40011400
 8001b08:	40004c00 	.word	0x40004c00
 8001b0c:	40005000 	.word	0x40005000
 8001b10:	200000f5 	.word	0x200000f5
 8001b14:	20000100 	.word	0x20000100
 8001b18:	20000108 	.word	0x20000108

08001b1c <MotorsHoming>:
uint32_t StepsFront[4]={0,0,0,0};
int32_t StepsBack[4]={0,0};
uint32_t LastSteps[3] = {0,0,0,0};


bool MotorsHoming(Motor *motor){
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
	for(int i = 0; i<4; i++){
 8001b24:	2300      	movs	r3, #0
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	e16c      	b.n	8001e04 <MotorsHoming+0x2e8>
		if(i == 0){
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d141      	bne.n	8001bb4 <MotorsHoming+0x98>
			TMC2209_SetDirection(&motor[0],1);
 8001b30:	2101      	movs	r1, #1
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7fe ff8e 	bl	8000a54 <TMC2209_SetDirection>
			TMC2209_SetSpeed(&motor[0],16000);
 8001b38:	f44f 517a 	mov.w	r1, #16000	@ 0x3e80
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7fe ffb3 	bl	8000aa8 <TMC2209_SetSpeed>
			if(IsSensorTriggered(EndStop1_GPIO_Port,EndStop1_Pin) == 0){
 8001b42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b46:	48b4      	ldr	r0, [pc, #720]	@ (8001e18 <MotorsHoming+0x2fc>)
 8001b48:	f7ff fec2 	bl	80018d0 <IsSensorTriggered>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f083 0301 	eor.w	r3, r3, #1
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d02a      	beq.n	8001bae <MotorsHoming+0x92>
					TMC2209_Start(&motor[0]);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff f81b 	bl	8000b94 <TMC2209_Start>
					while(IsSensorTriggered(EndStop1_GPIO_Port,EndStop1_Pin) == 0);
 8001b5e:	bf00      	nop
 8001b60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b64:	48ac      	ldr	r0, [pc, #688]	@ (8001e18 <MotorsHoming+0x2fc>)
 8001b66:	f7ff feb3 	bl	80018d0 <IsSensorTriggered>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	f083 0301 	eor.w	r3, r3, #1
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f4      	bne.n	8001b60 <MotorsHoming+0x44>
					if((IsSensorTriggered(EndStop1_GPIO_Port,EndStop1_Pin) == 1)){
 8001b76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b7a:	48a7      	ldr	r0, [pc, #668]	@ (8001e18 <MotorsHoming+0x2fc>)
 8001b7c:	f7ff fea8 	bl	80018d0 <IsSensorTriggered>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d013      	beq.n	8001bae <MotorsHoming+0x92>
						TMC2209_Stop(&motor[0]);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7fe ffee 	bl	8000b68 <TMC2209_Stop>
						motor[0].currentPositionMM = 0;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	661a      	str	r2, [r3, #96]	@ 0x60
						motor[0].stepsTaken = 0;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	659a      	str	r2, [r3, #88]	@ 0x58
						motor[i].StepsBack = 0;
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	011b      	lsls	r3, r3, #4
 8001ba0:	1a9b      	subs	r3, r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	2200      	movs	r2, #0
 8001bac:	671a      	str	r2, [r3, #112]	@ 0x70

					}

				}
			TMC2209_Stop(&motor[0]);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7fe ffda 	bl	8000b68 <TMC2209_Stop>

		}
		if(i == 1){
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d159      	bne.n	8001c6e <MotorsHoming+0x152>
			TMC2209_SetDirection(&motor[1],0);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3378      	adds	r3, #120	@ 0x78
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe ff47 	bl	8000a54 <TMC2209_SetDirection>
			TMC2209_SetSpeed(&motor[1],10000);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3378      	adds	r3, #120	@ 0x78
 8001bca:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe ff6a 	bl	8000aa8 <TMC2209_SetSpeed>
			if(IsSensorTriggered(EndStop2_GPIO_Port,EndStop2_Pin) == 0){
 8001bd4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bd8:	4890      	ldr	r0, [pc, #576]	@ (8001e1c <MotorsHoming+0x300>)
 8001bda:	f7ff fe79 	bl	80018d0 <IsSensorTriggered>
 8001bde:	4603      	mov	r3, r0
 8001be0:	f083 0301 	eor.w	r3, r3, #1
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d03c      	beq.n	8001c64 <MotorsHoming+0x148>
				TMC2209_Start(&motor[1]);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3378      	adds	r3, #120	@ 0x78
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe ffd0 	bl	8000b94 <TMC2209_Start>
				while(IsSensorTriggered(EndStop2_GPIO_Port,EndStop2_Pin) == 0);
 8001bf4:	bf00      	nop
 8001bf6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bfa:	4888      	ldr	r0, [pc, #544]	@ (8001e1c <MotorsHoming+0x300>)
 8001bfc:	f7ff fe68 	bl	80018d0 <IsSensorTriggered>
 8001c00:	4603      	mov	r3, r0
 8001c02:	f083 0301 	eor.w	r3, r3, #1
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1f4      	bne.n	8001bf6 <MotorsHoming+0xda>
				if((IsSensorTriggered(EndStop2_GPIO_Port,EndStop2_Pin) == 1)){
 8001c0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c10:	4882      	ldr	r0, [pc, #520]	@ (8001e1c <MotorsHoming+0x300>)
 8001c12:	f7ff fe5d 	bl	80018d0 <IsSensorTriggered>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d023      	beq.n	8001c64 <MotorsHoming+0x148>
					TMC2209_Stop(&motor[1]);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3378      	adds	r3, #120	@ 0x78
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7fe ffa1 	bl	8000b68 <TMC2209_Stop>
					motor[i].currentPositionMM = 0;
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	1a9b      	subs	r3, r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	461a      	mov	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	661a      	str	r2, [r3, #96]	@ 0x60
					motor[i].stepsTaken = 0;
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	011b      	lsls	r3, r3, #4
 8001c42:	1a9b      	subs	r3, r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	461a      	mov	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	659a      	str	r2, [r3, #88]	@ 0x58
	                motor[i].StepsFront = 0;
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	4613      	mov	r3, r2
 8001c54:	011b      	lsls	r3, r3, #4
 8001c56:	1a9b      	subs	r3, r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4413      	add	r3, r2
 8001c60:	2200      	movs	r2, #0
 8001c62:	66da      	str	r2, [r3, #108]	@ 0x6c
				}
			}
			TMC2209_Stop(&motor[1]);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3378      	adds	r3, #120	@ 0x78
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe ff7d 	bl	8000b68 <TMC2209_Stop>
		}
		if(i == 2){
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d163      	bne.n	8001d3c <MotorsHoming+0x220>
			TMC2209_SetDirection(&motor[2],0);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	33f0      	adds	r3, #240	@ 0xf0
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe feea 	bl	8000a54 <TMC2209_SetDirection>
			TMC2209_SetSpeed(&motor[2],16000);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	33f0      	adds	r3, #240	@ 0xf0
 8001c84:	f44f 517a 	mov.w	r1, #16000	@ 0x3e80
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7fe ff0d 	bl	8000aa8 <TMC2209_SetSpeed>
			if(IsSensorTriggered(EndStop3_GPIO_Port,EndStop3_Pin) == 0){
 8001c8e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c92:	4862      	ldr	r0, [pc, #392]	@ (8001e1c <MotorsHoming+0x300>)
 8001c94:	f7ff fe1c 	bl	80018d0 <IsSensorTriggered>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f083 0301 	eor.w	r3, r3, #1
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d046      	beq.n	8001d32 <MotorsHoming+0x216>
				TMC2209_Start(&motor[2]);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	33f0      	adds	r3, #240	@ 0xf0
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe ff73 	bl	8000b94 <TMC2209_Start>
				while(IsSensorTriggered(EndStop3_GPIO_Port,EndStop3_Pin) == 0);
 8001cae:	bf00      	nop
 8001cb0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001cb4:	4859      	ldr	r0, [pc, #356]	@ (8001e1c <MotorsHoming+0x300>)
 8001cb6:	f7ff fe0b 	bl	80018d0 <IsSensorTriggered>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	f083 0301 	eor.w	r3, r3, #1
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f4      	bne.n	8001cb0 <MotorsHoming+0x194>
				if((IsSensorTriggered(EndStop3_GPIO_Port,EndStop3_Pin) == 1)){
 8001cc6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001cca:	4854      	ldr	r0, [pc, #336]	@ (8001e1c <MotorsHoming+0x300>)
 8001ccc:	f7ff fe00 	bl	80018d0 <IsSensorTriggered>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d02d      	beq.n	8001d32 <MotorsHoming+0x216>
					TMC2209_Stop(&motor[2]);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	33f0      	adds	r3, #240	@ 0xf0
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe ff44 	bl	8000b68 <TMC2209_Stop>
					motor[i].currentPositionMM = 0;
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	1a9b      	subs	r3, r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	461a      	mov	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4413      	add	r3, r2
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	661a      	str	r2, [r3, #96]	@ 0x60
					motor[i].stepsTaken = 0;
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	1a9b      	subs	r3, r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	461a      	mov	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	2200      	movs	r2, #0
 8001d08:	659a      	str	r2, [r3, #88]	@ 0x58
				    motor[i].StepsFront = 0;
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	011b      	lsls	r3, r3, #4
 8001d10:	1a9b      	subs	r3, r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	461a      	mov	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	66da      	str	r2, [r3, #108]	@ 0x6c
				    motor[i].StepsBack = 0;
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	4613      	mov	r3, r2
 8001d22:	011b      	lsls	r3, r3, #4
 8001d24:	1a9b      	subs	r3, r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	461a      	mov	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	2200      	movs	r2, #0
 8001d30:	671a      	str	r2, [r3, #112]	@ 0x70

				}

			}
			TMC2209_Stop(&motor[2]);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	33f0      	adds	r3, #240	@ 0xf0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe ff16 	bl	8000b68 <TMC2209_Stop>
	}
		if(i == 3){
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d15d      	bne.n	8001dfe <MotorsHoming+0x2e2>
			TMC2209_SetDirection(&motor[3],0);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fe82 	bl	8000a54 <TMC2209_SetDirection>
			TMC2209_SetSpeed(&motor[3],10000);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001d56:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fea4 	bl	8000aa8 <TMC2209_SetSpeed>
			if(IsSensorTriggered(EndStop4_GPIO_Port,EndStop4_Pin) == 0){
 8001d60:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d64:	482c      	ldr	r0, [pc, #176]	@ (8001e18 <MotorsHoming+0x2fc>)
 8001d66:	f7ff fdb3 	bl	80018d0 <IsSensorTriggered>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f083 0301 	eor.w	r3, r3, #1
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d03d      	beq.n	8001df2 <MotorsHoming+0x2d6>
				TMC2209_Start(&motor[3]);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe ff09 	bl	8000b94 <TMC2209_Start>
				while(IsSensorTriggered(EndStop4_GPIO_Port,EndStop4_Pin) == 0);
 8001d82:	bf00      	nop
 8001d84:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d88:	4823      	ldr	r0, [pc, #140]	@ (8001e18 <MotorsHoming+0x2fc>)
 8001d8a:	f7ff fda1 	bl	80018d0 <IsSensorTriggered>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	f083 0301 	eor.w	r3, r3, #1
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f4      	bne.n	8001d84 <MotorsHoming+0x268>
				if((IsSensorTriggered(EndStop4_GPIO_Port,EndStop4_Pin) == 1)){
 8001d9a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d9e:	481e      	ldr	r0, [pc, #120]	@ (8001e18 <MotorsHoming+0x2fc>)
 8001da0:	f7ff fd96 	bl	80018d0 <IsSensorTriggered>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d023      	beq.n	8001df2 <MotorsHoming+0x2d6>
					TMC2209_Stop(&motor[3]);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7fe fed9 	bl	8000b68 <TMC2209_Stop>
					motor[i].currentPositionMM = 450;
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	4613      	mov	r3, r2
 8001dba:	011b      	lsls	r3, r3, #4
 8001dbc:	1a9b      	subs	r3, r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	4a16      	ldr	r2, [pc, #88]	@ (8001e20 <MotorsHoming+0x304>)
 8001dc8:	661a      	str	r2, [r3, #96]	@ 0x60
					motor[i].stepsTaken = 0;
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	1a9b      	subs	r3, r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	2200      	movs	r2, #0
 8001ddc:	659a      	str	r2, [r3, #88]	@ 0x58
				    motor[i].StepsBack = 0;
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	4613      	mov	r3, r2
 8001de2:	011b      	lsls	r3, r3, #4
 8001de4:	1a9b      	subs	r3, r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	461a      	mov	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	2200      	movs	r2, #0
 8001df0:	671a      	str	r2, [r3, #112]	@ 0x70
				}

			}
			TMC2209_Stop(&motor[3]);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe feb5 	bl	8000b68 <TMC2209_Stop>
	for(int i = 0; i<4; i++){
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	3301      	adds	r3, #1
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2b03      	cmp	r3, #3
 8001e08:	f77f ae8f 	ble.w	8001b2a <MotorsHoming+0xe>
		}

	}

	return true;
 8001e0c:	2301      	movs	r3, #1
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40021400 	.word	0x40021400
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	43e10000 	.word	0x43e10000

08001e24 <MotorControl_ButtonHandler>:


void MotorControl_ButtonHandler(Motor *motors) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
	static uint8_t CtrPressedFlag = 0; // Flag to detect button press edge
	    // StepsFront[0] = 0;
	    uint32_t pressStartTime = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]
	    uint32_t debounceTime = 50;
 8001e30:	2332      	movs	r3, #50	@ 0x32
 8001e32:	613b      	str	r3, [r7, #16]
	    uint32_t currentTime = HAL_GetTick();
 8001e34:	f002 f9b0 	bl	8004198 <HAL_GetTick>
 8001e38:	60f8      	str	r0, [r7, #12]
	    static uint32_t lastPressTime = 0; // Last valid press timestamp

	    if (HAL_GPIO_ReadPin(BtnCtr_GPIO_Port, BtnCtr_Pin) == GPIO_PIN_SET) {
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	4872      	ldr	r0, [pc, #456]	@ (8002008 <MotorControl_ButtonHandler+0x1e4>)
 8001e3e:	f003 f8a3 	bl	8004f88 <HAL_GPIO_ReadPin>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d10a      	bne.n	8001e5e <MotorControl_ButtonHandler+0x3a>
	        if (CtrPressedFlag == 0) { // Only increment on first press
 8001e48:	4b70      	ldr	r3, [pc, #448]	@ (800200c <MotorControl_ButtonHandler+0x1e8>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f040 81a1 	bne.w	8002194 <MotorControl_ButtonHandler+0x370>
	            pressStartTime = currentTime;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	617b      	str	r3, [r7, #20]
	            CtrPressedFlag = 1; // Set flag to avoid multiple increments
 8001e56:	4b6d      	ldr	r3, [pc, #436]	@ (800200c <MotorControl_ButtonHandler+0x1e8>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	701a      	strb	r2, [r3, #0]
 8001e5c:	e19a      	b.n	8002194 <MotorControl_ButtonHandler+0x370>
	        }
	    } else {
	        if (CtrPressedFlag == 1 && (currentTime - pressStartTime) >= debounceTime) {
 8001e5e:	4b6b      	ldr	r3, [pc, #428]	@ (800200c <MotorControl_ButtonHandler+0x1e8>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d10e      	bne.n	8001e84 <MotorControl_ButtonHandler+0x60>
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d808      	bhi.n	8001e84 <MotorControl_ButtonHandler+0x60>
	            Pressed += 1;
 8001e72:	4b67      	ldr	r3, [pc, #412]	@ (8002010 <MotorControl_ButtonHandler+0x1ec>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	3301      	adds	r3, #1
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	4b65      	ldr	r3, [pc, #404]	@ (8002010 <MotorControl_ButtonHandler+0x1ec>)
 8001e7c:	701a      	strb	r2, [r3, #0]
	            lastPressTime = currentTime; // Update the last valid press time
 8001e7e:	4a65      	ldr	r2, [pc, #404]	@ (8002014 <MotorControl_ButtonHandler+0x1f0>)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6013      	str	r3, [r2, #0]
	              }
	        CtrPressedFlag = 0; // Reset flag when button is released
 8001e84:	4b61      	ldr	r3, [pc, #388]	@ (800200c <MotorControl_ButtonHandler+0x1e8>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	701a      	strb	r2, [r3, #0]
        switch (Pressed) {
 8001e8a:	4b61      	ldr	r3, [pc, #388]	@ (8002010 <MotorControl_ButtonHandler+0x1ec>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d003      	beq.n	8001e9a <MotorControl_ButtonHandler+0x76>
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	f000 80c6 	beq.w	8002024 <MotorControl_ButtonHandler+0x200>
 8001e98:	e178      	b.n	800218c <MotorControl_ButtonHandler+0x368>
            case 1:
                // Save calibration for first press
                motors[motorGroup * 2].currentPositionMM =
                    abs(motors[motorGroup * 2].StepsFront - motors[motorGroup * 2].StepsBack) / 160;
 8001e9a:	4b5f      	ldr	r3, [pc, #380]	@ (8002018 <MotorControl_ButtonHandler+0x1f4>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	011b      	lsls	r3, r3, #4
 8001ea4:	1a9b      	subs	r3, r3, r2
 8001ea6:	011b      	lsls	r3, r3, #4
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001eb0:	4b59      	ldr	r3, [pc, #356]	@ (8002018 <MotorControl_ButtonHandler+0x1f4>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	011b      	lsls	r3, r3, #4
 8001eba:	1a5b      	subs	r3, r3, r1
 8001ebc:	011b      	lsls	r3, r3, #4
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	440b      	add	r3, r1
 8001ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	bfb8      	it	lt
 8001ecc:	425b      	neglt	r3, r3
 8001ece:	4a53      	ldr	r2, [pc, #332]	@ (800201c <MotorControl_ButtonHandler+0x1f8>)
 8001ed0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ed4:	1192      	asrs	r2, r2, #6
 8001ed6:	17db      	asrs	r3, r3, #31
 8001ed8:	1ad1      	subs	r1, r2, r3
                motors[motorGroup * 2].currentPositionMM =
 8001eda:	4b4f      	ldr	r3, [pc, #316]	@ (8002018 <MotorControl_ButtonHandler+0x1f4>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	011b      	lsls	r3, r3, #4
 8001ee4:	1a9b      	subs	r3, r3, r2
 8001ee6:	011b      	lsls	r3, r3, #4
 8001ee8:	461a      	mov	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	ee07 1a90 	vmov	s15, r1
 8001ef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ef6:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
                motors[motorGroup * 2 + 1].currentPositionMM =
                    abs(motors[motorGroup * 2 + 1].StepsBack - motors[motorGroup * 2 + 1].StepsFront) / 400;
 8001efa:	4b47      	ldr	r3, [pc, #284]	@ (8002018 <MotorControl_ButtonHandler+0x1f4>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	4613      	mov	r3, r2
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	1a9b      	subs	r3, r3, r2
 8001f06:	011b      	lsls	r3, r3, #4
 8001f08:	3378      	adds	r3, #120	@ 0x78
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f10:	4619      	mov	r1, r3
 8001f12:	4b41      	ldr	r3, [pc, #260]	@ (8002018 <MotorControl_ButtonHandler+0x1f4>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	4613      	mov	r3, r2
 8001f1a:	011b      	lsls	r3, r3, #4
 8001f1c:	1a9b      	subs	r3, r3, r2
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	3378      	adds	r3, #120	@ 0x78
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f28:	1acb      	subs	r3, r1, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	bfb8      	it	lt
 8001f2e:	425b      	neglt	r3, r3
 8001f30:	4a3b      	ldr	r2, [pc, #236]	@ (8002020 <MotorControl_ButtonHandler+0x1fc>)
 8001f32:	fb82 1203 	smull	r1, r2, r2, r3
 8001f36:	11d2      	asrs	r2, r2, #7
 8001f38:	17db      	asrs	r3, r3, #31
 8001f3a:	1ad1      	subs	r1, r2, r3
                motors[motorGroup * 2 + 1].currentPositionMM =
 8001f3c:	4b36      	ldr	r3, [pc, #216]	@ (8002018 <MotorControl_ButtonHandler+0x1f4>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	461a      	mov	r2, r3
 8001f42:	4613      	mov	r3, r2
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	1a9b      	subs	r3, r3, r2
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	3378      	adds	r3, #120	@ 0x78
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	4413      	add	r3, r2
 8001f50:	ee07 1a90 	vmov	s15, r1
 8001f54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f58:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60

                motors[motorGroup * 2].calib[0] = motors[motorGroup * 2].currentPositionMM;
 8001f5c:	4b2e      	ldr	r3, [pc, #184]	@ (8002018 <MotorControl_ButtonHandler+0x1f4>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	461a      	mov	r2, r3
 8001f62:	4613      	mov	r3, r2
 8001f64:	011b      	lsls	r3, r3, #4
 8001f66:	1a9b      	subs	r3, r3, r2
 8001f68:	011b      	lsls	r3, r3, #4
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4413      	add	r3, r2
 8001f70:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8001f74:	4b28      	ldr	r3, [pc, #160]	@ (8002018 <MotorControl_ButtonHandler+0x1f4>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	1a9b      	subs	r3, r3, r2
 8001f80:	011b      	lsls	r3, r3, #4
 8001f82:	461a      	mov	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4413      	add	r3, r2
 8001f88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f8c:	ee17 2a90 	vmov	r2, s15
 8001f90:	b292      	uxth	r2, r2
 8001f92:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
                motors[motorGroup * 2 + 1].calib[0] = motors[motorGroup * 2 + 1].currentPositionMM;
 8001f96:	4b20      	ldr	r3, [pc, #128]	@ (8002018 <MotorControl_ButtonHandler+0x1f4>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	011b      	lsls	r3, r3, #4
 8001fa4:	3378      	adds	r3, #120	@ 0x78
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8001fae:	4b1a      	ldr	r3, [pc, #104]	@ (8002018 <MotorControl_ButtonHandler+0x1f4>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	011b      	lsls	r3, r3, #4
 8001fb8:	1a9b      	subs	r3, r3, r2
 8001fba:	011b      	lsls	r3, r3, #4
 8001fbc:	3378      	adds	r3, #120	@ 0x78
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fc6:	ee17 2a90 	vmov	r2, s15
 8001fca:	b292      	uxth	r2, r2
 8001fcc:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74

                motors[motorGroup * 2].currentPositionMM = 0;
 8001fd0:	4b11      	ldr	r3, [pc, #68]	@ (8002018 <MotorControl_ButtonHandler+0x1f4>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	1a9b      	subs	r3, r3, r2
 8001fdc:	011b      	lsls	r3, r3, #4
 8001fde:	461a      	mov	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	661a      	str	r2, [r3, #96]	@ 0x60
                motors[motorGroup * 2 + 1].currentPositionMM = 0;
 8001fea:	4b0b      	ldr	r3, [pc, #44]	@ (8002018 <MotorControl_ButtonHandler+0x1f4>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	3378      	adds	r3, #120	@ 0x78
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f04f 0200 	mov.w	r2, #0
 8002002:	661a      	str	r2, [r3, #96]	@ 0x60
                break;
 8002004:	e0c6      	b.n	8002194 <MotorControl_ButtonHandler+0x370>
 8002006:	bf00      	nop
 8002008:	40020c00 	.word	0x40020c00
 800200c:	2000011c 	.word	0x2000011c
 8002010:	200000e2 	.word	0x200000e2
 8002014:	20000120 	.word	0x20000120
 8002018:	20000109 	.word	0x20000109
 800201c:	66666667 	.word	0x66666667
 8002020:	51eb851f 	.word	0x51eb851f

            case 2:
                // Save calibration for second press
                motors[motorGroup * 2].currentPositionMM =
                    abs(motors[motorGroup * 2].StepsFront - motors[motorGroup * 2].StepsBack) / 160.0f;
 8002024:	4b55      	ldr	r3, [pc, #340]	@ (800217c <MotorControl_ButtonHandler+0x358>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	461a      	mov	r2, r3
 800202a:	4613      	mov	r3, r2
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	1a9b      	subs	r3, r3, r2
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	461a      	mov	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4413      	add	r3, r2
 8002038:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800203a:	4b50      	ldr	r3, [pc, #320]	@ (800217c <MotorControl_ButtonHandler+0x358>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	4619      	mov	r1, r3
 8002040:	460b      	mov	r3, r1
 8002042:	011b      	lsls	r3, r3, #4
 8002044:	1a5b      	subs	r3, r3, r1
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	4619      	mov	r1, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	440b      	add	r3, r1
 800204e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	bfb8      	it	lt
 8002056:	425b      	neglt	r3, r3
 8002058:	ee07 3a90 	vmov	s15, r3
 800205c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                motors[motorGroup * 2].currentPositionMM =
 8002060:	4b46      	ldr	r3, [pc, #280]	@ (800217c <MotorControl_ButtonHandler+0x358>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	461a      	mov	r2, r3
 8002066:	4613      	mov	r3, r2
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	1a9b      	subs	r3, r3, r2
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	461a      	mov	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4413      	add	r3, r2
                    abs(motors[motorGroup * 2].StepsFront - motors[motorGroup * 2].StepsBack) / 160.0f;
 8002074:	eddf 6a42 	vldr	s13, [pc, #264]	@ 8002180 <MotorControl_ButtonHandler+0x35c>
 8002078:	eec7 7a26 	vdiv.f32	s15, s14, s13
                motors[motorGroup * 2].currentPositionMM =
 800207c:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
                motors[motorGroup * 2 + 1].currentPositionMM =
                    abs(motors[motorGroup * 2 + 1].StepsBack - motors[motorGroup * 2 + 1].StepsFront) / 400.0f;
 8002080:	4b3e      	ldr	r3, [pc, #248]	@ (800217c <MotorControl_ButtonHandler+0x358>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	4613      	mov	r3, r2
 8002088:	011b      	lsls	r3, r3, #4
 800208a:	1a9b      	subs	r3, r3, r2
 800208c:	011b      	lsls	r3, r3, #4
 800208e:	3378      	adds	r3, #120	@ 0x78
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	4413      	add	r3, r2
 8002094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002096:	4619      	mov	r1, r3
 8002098:	4b38      	ldr	r3, [pc, #224]	@ (800217c <MotorControl_ButtonHandler+0x358>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	461a      	mov	r2, r3
 800209e:	4613      	mov	r3, r2
 80020a0:	011b      	lsls	r3, r3, #4
 80020a2:	1a9b      	subs	r3, r3, r2
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	3378      	adds	r3, #120	@ 0x78
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	4413      	add	r3, r2
 80020ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020ae:	1acb      	subs	r3, r1, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	bfb8      	it	lt
 80020b4:	425b      	neglt	r3, r3
 80020b6:	ee07 3a90 	vmov	s15, r3
 80020ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                motors[motorGroup * 2 + 1].currentPositionMM =
 80020be:	4b2f      	ldr	r3, [pc, #188]	@ (800217c <MotorControl_ButtonHandler+0x358>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	4613      	mov	r3, r2
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	1a9b      	subs	r3, r3, r2
 80020ca:	011b      	lsls	r3, r3, #4
 80020cc:	3378      	adds	r3, #120	@ 0x78
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	4413      	add	r3, r2
                    abs(motors[motorGroup * 2 + 1].StepsBack - motors[motorGroup * 2 + 1].StepsFront) / 400.0f;
 80020d2:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8002184 <MotorControl_ButtonHandler+0x360>
 80020d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
                motors[motorGroup * 2 + 1].currentPositionMM =
 80020da:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60

                motors[motorGroup * 2].calib[1] = motors[motorGroup * 2].currentPositionMM;
 80020de:	4b27      	ldr	r3, [pc, #156]	@ (800217c <MotorControl_ButtonHandler+0x358>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	461a      	mov	r2, r3
 80020e4:	4613      	mov	r3, r2
 80020e6:	011b      	lsls	r3, r3, #4
 80020e8:	1a9b      	subs	r3, r3, r2
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	461a      	mov	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4413      	add	r3, r2
 80020f2:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80020f6:	4b21      	ldr	r3, [pc, #132]	@ (800217c <MotorControl_ButtonHandler+0x358>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	4613      	mov	r3, r2
 80020fe:	011b      	lsls	r3, r3, #4
 8002100:	1a9b      	subs	r3, r3, r2
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	461a      	mov	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800210e:	ee17 2a90 	vmov	r2, s15
 8002112:	b292      	uxth	r2, r2
 8002114:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76
                motors[motorGroup * 2 + 1].calib[1] = motors[motorGroup * 2 + 1].currentPositionMM;
 8002118:	4b18      	ldr	r3, [pc, #96]	@ (800217c <MotorControl_ButtonHandler+0x358>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	4613      	mov	r3, r2
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	1a9b      	subs	r3, r3, r2
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	3378      	adds	r3, #120	@ 0x78
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	4413      	add	r3, r2
 800212c:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8002130:	4b12      	ldr	r3, [pc, #72]	@ (800217c <MotorControl_ButtonHandler+0x358>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	4613      	mov	r3, r2
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	1a9b      	subs	r3, r3, r2
 800213c:	011b      	lsls	r3, r3, #4
 800213e:	3378      	adds	r3, #120	@ 0x78
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	4413      	add	r3, r2
 8002144:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002148:	ee17 2a90 	vmov	r2, s15
 800214c:	b292      	uxth	r2, r2
 800214e:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76
                motorGroup += 1;
 8002152:	4b0a      	ldr	r3, [pc, #40]	@ (800217c <MotorControl_ButtonHandler+0x358>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	3301      	adds	r3, #1
 8002158:	b2da      	uxtb	r2, r3
 800215a:	4b08      	ldr	r3, [pc, #32]	@ (800217c <MotorControl_ButtonHandler+0x358>)
 800215c:	701a      	strb	r2, [r3, #0]
                if (motorGroup >= 2) {
 800215e:	4b07      	ldr	r3, [pc, #28]	@ (800217c <MotorControl_ButtonHandler+0x358>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d902      	bls.n	800216c <MotorControl_ButtonHandler+0x348>
                       motorGroup = 0;  // Reset or handle as per your system's requirement
 8002166:	4b05      	ldr	r3, [pc, #20]	@ (800217c <MotorControl_ButtonHandler+0x358>)
 8002168:	2200      	movs	r2, #0
 800216a:	701a      	strb	r2, [r3, #0]
                  }
                // Perform homing for all motors
                  MotorsHoming(motors);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff fcd5 	bl	8001b1c <MotorsHoming>
//                for(int i = 0; i < 4; i++) {
//                TMC2209_MoveTo(axis,motorIndex,targetPositionMM);
//              }

           // Reset Pressed counter to prevent further calibration steps
                Pressed = 0;
 8002172:	4b05      	ldr	r3, [pc, #20]	@ (8002188 <MotorControl_ButtonHandler+0x364>)
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
                    break;
 8002178:	e00c      	b.n	8002194 <MotorControl_ButtonHandler+0x370>
 800217a:	bf00      	nop
 800217c:	20000109 	.word	0x20000109
 8002180:	43200000 	.word	0x43200000
 8002184:	43c80000 	.word	0x43c80000
 8002188:	200000e2 	.word	0x200000e2

                 default:
                                // Handle unexpected Pressed value
                   Pressed = 0;
 800218c:	4b82      	ldr	r3, [pc, #520]	@ (8002398 <MotorControl_ButtonHandler+0x574>)
 800218e:	2200      	movs	r2, #0
 8002190:	701a      	strb	r2, [r3, #0]
                   break;
 8002192:	bf00      	nop

    }



	if(HAL_GPIO_ReadPin(BtnUp_GPIO_Port, BtnUp_Pin) == GPIO_PIN_RESET){
 8002194:	2102      	movs	r1, #2
 8002196:	4881      	ldr	r0, [pc, #516]	@ (800239c <MotorControl_ButtonHandler+0x578>)
 8002198:	f002 fef6 	bl	8004f88 <HAL_GPIO_ReadPin>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d122      	bne.n	80021e8 <MotorControl_ButtonHandler+0x3c4>
		    // Send one step for each millisecond the button is pressed
	    //setMicrosteppingResolution(&motors[motorGroup *2], 16);
		//TMC2209_SetSpeed(&motors[motorGroup *2+1],16000);
			//StepsFront[0] = 0;
            //LastSteps[0] += StepsFront[0];
			TMC2209_SetDirection(&motors[motorGroup * 2], GPIO_PIN_SET);
 80021a2:	4b7f      	ldr	r3, [pc, #508]	@ (80023a0 <MotorControl_ButtonHandler+0x57c>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	4613      	mov	r3, r2
 80021aa:	011b      	lsls	r3, r3, #4
 80021ac:	1a9b      	subs	r3, r3, r2
 80021ae:	011b      	lsls	r3, r3, #4
 80021b0:	461a      	mov	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	2101      	movs	r1, #1
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe fc4b 	bl	8000a54 <TMC2209_SetDirection>
		    TMC2209_Start(&motors[motorGroup * 2]);
 80021be:	4b78      	ldr	r3, [pc, #480]	@ (80023a0 <MotorControl_ButtonHandler+0x57c>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	461a      	mov	r2, r3
 80021c4:	4613      	mov	r3, r2
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	1a9b      	subs	r3, r3, r2
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	461a      	mov	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fe fcde 	bl	8000b94 <TMC2209_Start>
		    while(HAL_GPIO_ReadPin(BtnUp_GPIO_Port, BtnUp_Pin) == GPIO_PIN_RESET){
 80021d8:	bf00      	nop
 80021da:	2102      	movs	r1, #2
 80021dc:	486f      	ldr	r0, [pc, #444]	@ (800239c <MotorControl_ButtonHandler+0x578>)
 80021de:	f002 fed3 	bl	8004f88 <HAL_GPIO_ReadPin>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0f8      	beq.n	80021da <MotorControl_ButtonHandler+0x3b6>
//        	TMC2209_Stop(&motors[motorGroup * 2]);
//        	StepsFront[0] = 0;

    	//}
}
    if (HAL_GPIO_ReadPin(BtnUp_GPIO_Port, BtnUp_Pin) == GPIO_PIN_SET ) {
 80021e8:	2102      	movs	r1, #2
 80021ea:	486c      	ldr	r0, [pc, #432]	@ (800239c <MotorControl_ButtonHandler+0x578>)
 80021ec:	f002 fecc 	bl	8004f88 <HAL_GPIO_ReadPin>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d10c      	bne.n	8002210 <MotorControl_ButtonHandler+0x3ec>
    	TMC2209_Stop(&motors[motorGroup * 2]);
 80021f6:	4b6a      	ldr	r3, [pc, #424]	@ (80023a0 <MotorControl_ButtonHandler+0x57c>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	461a      	mov	r2, r3
 80021fc:	4613      	mov	r3, r2
 80021fe:	011b      	lsls	r3, r3, #4
 8002200:	1a9b      	subs	r3, r3, r2
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	461a      	mov	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe fcac 	bl	8000b68 <TMC2209_Stop>
    }


	if(HAL_GPIO_ReadPin(BtnDown_GPIO_Port, BtnDown_Pin) == GPIO_PIN_RESET){
 8002210:	2101      	movs	r1, #1
 8002212:	4862      	ldr	r0, [pc, #392]	@ (800239c <MotorControl_ButtonHandler+0x578>)
 8002214:	f002 feb8 	bl	8004f88 <HAL_GPIO_ReadPin>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d122      	bne.n	8002264 <MotorControl_ButtonHandler+0x440>
		//motors[motorGroup*2].stepsTaken = 0;
		//StepsBack[0] = 0;
		//StepsBack[0] += motors[motorGroup*2].stepsTaken;
		TMC2209_SetDirection(&motors[motorGroup * 2], GPIO_PIN_RESET);
 800221e:	4b60      	ldr	r3, [pc, #384]	@ (80023a0 <MotorControl_ButtonHandler+0x57c>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	4613      	mov	r3, r2
 8002226:	011b      	lsls	r3, r3, #4
 8002228:	1a9b      	subs	r3, r3, r2
 800222a:	011b      	lsls	r3, r3, #4
 800222c:	461a      	mov	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	2100      	movs	r1, #0
 8002234:	4618      	mov	r0, r3
 8002236:	f7fe fc0d 	bl	8000a54 <TMC2209_SetDirection>
		TMC2209_Start(&motors[motorGroup * 2]);
 800223a:	4b59      	ldr	r3, [pc, #356]	@ (80023a0 <MotorControl_ButtonHandler+0x57c>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	4613      	mov	r3, r2
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	1a9b      	subs	r3, r3, r2
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	461a      	mov	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe fca0 	bl	8000b94 <TMC2209_Start>
		while(HAL_GPIO_ReadPin(BtnDown_GPIO_Port, BtnDown_Pin) == GPIO_PIN_RESET){
 8002254:	bf00      	nop
 8002256:	2101      	movs	r1, #1
 8002258:	4850      	ldr	r0, [pc, #320]	@ (800239c <MotorControl_ButtonHandler+0x578>)
 800225a:	f002 fe95 	bl	8004f88 <HAL_GPIO_ReadPin>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f8      	beq.n	8002256 <MotorControl_ButtonHandler+0x432>
//
//    	}


}
    if (HAL_GPIO_ReadPin(BtnDown_GPIO_Port, BtnDown_Pin) == GPIO_PIN_SET || StepsBack[0] > 28000) {
 8002264:	2101      	movs	r1, #1
 8002266:	484d      	ldr	r0, [pc, #308]	@ (800239c <MotorControl_ButtonHandler+0x578>)
 8002268:	f002 fe8e 	bl	8004f88 <HAL_GPIO_ReadPin>
 800226c:	4603      	mov	r3, r0
 800226e:	2b01      	cmp	r3, #1
 8002270:	d005      	beq.n	800227e <MotorControl_ButtonHandler+0x45a>
 8002272:	4b4c      	ldr	r3, [pc, #304]	@ (80023a4 <MotorControl_ButtonHandler+0x580>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f646 5260 	movw	r2, #28000	@ 0x6d60
 800227a:	4293      	cmp	r3, r2
 800227c:	dd0c      	ble.n	8002298 <MotorControl_ButtonHandler+0x474>
        // Button 1 pressed (Step Motor in one direction)
    	TMC2209_Stop(&motors[motorGroup * 2]);
 800227e:	4b48      	ldr	r3, [pc, #288]	@ (80023a0 <MotorControl_ButtonHandler+0x57c>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	4613      	mov	r3, r2
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	461a      	mov	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe fc68 	bl	8000b68 <TMC2209_Stop>

        //TMC2209_CountSteps_C(&motors[motorGroup * 2],StepsBack[0]);
    }


	if(HAL_GPIO_ReadPin(BtnRight_GPIO_Port, BtnRight_Pin) == GPIO_PIN_RESET){
 8002298:	2102      	movs	r1, #2
 800229a:	4843      	ldr	r0, [pc, #268]	@ (80023a8 <MotorControl_ButtonHandler+0x584>)
 800229c:	f002 fe74 	bl	8004f88 <HAL_GPIO_ReadPin>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d122      	bne.n	80022ec <MotorControl_ButtonHandler+0x4c8>
        TMC2209_SetDirection(&motors[motorGroup * 2+1], GPIO_PIN_SET);
 80022a6:	4b3e      	ldr	r3, [pc, #248]	@ (80023a0 <MotorControl_ButtonHandler+0x57c>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	4613      	mov	r3, r2
 80022ae:	011b      	lsls	r3, r3, #4
 80022b0:	1a9b      	subs	r3, r3, r2
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	3378      	adds	r3, #120	@ 0x78
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	4413      	add	r3, r2
 80022ba:	2101      	movs	r1, #1
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe fbc9 	bl	8000a54 <TMC2209_SetDirection>
        TMC2209_Start(&motors[motorGroup * 2+1]);
 80022c2:	4b37      	ldr	r3, [pc, #220]	@ (80023a0 <MotorControl_ButtonHandler+0x57c>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	4613      	mov	r3, r2
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	3378      	adds	r3, #120	@ 0x78
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	4413      	add	r3, r2
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe fc5c 	bl	8000b94 <TMC2209_Start>
        while(HAL_GPIO_ReadPin(BtnRight_GPIO_Port, BtnRight_Pin) == GPIO_PIN_RESET);
 80022dc:	bf00      	nop
 80022de:	2102      	movs	r1, #2
 80022e0:	4831      	ldr	r0, [pc, #196]	@ (80023a8 <MotorControl_ButtonHandler+0x584>)
 80022e2:	f002 fe51 	bl	8004f88 <HAL_GPIO_ReadPin>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f8      	beq.n	80022de <MotorControl_ButtonHandler+0x4ba>
}
    if (HAL_GPIO_ReadPin(BtnRight_GPIO_Port, BtnRight_Pin) == GPIO_PIN_SET) {
 80022ec:	2102      	movs	r1, #2
 80022ee:	482e      	ldr	r0, [pc, #184]	@ (80023a8 <MotorControl_ButtonHandler+0x584>)
 80022f0:	f002 fe4a 	bl	8004f88 <HAL_GPIO_ReadPin>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d10c      	bne.n	8002314 <MotorControl_ButtonHandler+0x4f0>
        // Button 1 pressed (Step Motor in one direction)
        TMC2209_Stop(&motors[motorGroup * 2 + 1]);
 80022fa:	4b29      	ldr	r3, [pc, #164]	@ (80023a0 <MotorControl_ButtonHandler+0x57c>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	4613      	mov	r3, r2
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	3378      	adds	r3, #120	@ 0x78
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	4413      	add	r3, r2
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe fc2a 	bl	8000b68 <TMC2209_Stop>
    }


	if(HAL_GPIO_ReadPin(BtnLeft_GPIO_Port, BtnLeft_Pin) == GPIO_PIN_RESET){
 8002314:	2101      	movs	r1, #1
 8002316:	4825      	ldr	r0, [pc, #148]	@ (80023ac <MotorControl_ButtonHandler+0x588>)
 8002318:	f002 fe36 	bl	8004f88 <HAL_GPIO_ReadPin>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d122      	bne.n	8002368 <MotorControl_ButtonHandler+0x544>
        TMC2209_SetDirection(&motors[motorGroup * 2+1], GPIO_PIN_RESET);
 8002322:	4b1f      	ldr	r3, [pc, #124]	@ (80023a0 <MotorControl_ButtonHandler+0x57c>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	4613      	mov	r3, r2
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	1a9b      	subs	r3, r3, r2
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	3378      	adds	r3, #120	@ 0x78
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	2100      	movs	r1, #0
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe fb8b 	bl	8000a54 <TMC2209_SetDirection>
        TMC2209_Start(&motors[motorGroup * 2+1]);
 800233e:	4b18      	ldr	r3, [pc, #96]	@ (80023a0 <MotorControl_ButtonHandler+0x57c>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	4613      	mov	r3, r2
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	1a9b      	subs	r3, r3, r2
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	3378      	adds	r3, #120	@ 0x78
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe fc1e 	bl	8000b94 <TMC2209_Start>
        while(HAL_GPIO_ReadPin(BtnLeft_GPIO_Port, BtnLeft_Pin) == GPIO_PIN_RESET);
 8002358:	bf00      	nop
 800235a:	2101      	movs	r1, #1
 800235c:	4813      	ldr	r0, [pc, #76]	@ (80023ac <MotorControl_ButtonHandler+0x588>)
 800235e:	f002 fe13 	bl	8004f88 <HAL_GPIO_ReadPin>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0f8      	beq.n	800235a <MotorControl_ButtonHandler+0x536>
}
    if (HAL_GPIO_ReadPin(BtnLeft_GPIO_Port, BtnLeft_Pin) == GPIO_PIN_SET) {
 8002368:	2101      	movs	r1, #1
 800236a:	4810      	ldr	r0, [pc, #64]	@ (80023ac <MotorControl_ButtonHandler+0x588>)
 800236c:	f002 fe0c 	bl	8004f88 <HAL_GPIO_ReadPin>
 8002370:	4603      	mov	r3, r0
 8002372:	2b01      	cmp	r3, #1
 8002374:	d10c      	bne.n	8002390 <MotorControl_ButtonHandler+0x56c>
        // Button 1 pressed (Step Motor in one direction)
        TMC2209_Stop(&motors[motorGroup * 2+1]);
 8002376:	4b0a      	ldr	r3, [pc, #40]	@ (80023a0 <MotorControl_ButtonHandler+0x57c>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	4613      	mov	r3, r2
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	3378      	adds	r3, #120	@ 0x78
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	4413      	add	r3, r2
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe fbec 	bl	8000b68 <TMC2209_Stop>
    }
}
 8002390:	bf00      	nop
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	200000e2 	.word	0x200000e2
 800239c:	40021400 	.word	0x40021400
 80023a0:	20000109 	.word	0x20000109
 80023a4:	2000010c 	.word	0x2000010c
 80023a8:	40020c00 	.word	0x40020c00
 80023ac:	40021800 	.word	0x40021800

080023b0 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == USER_Btn_Pin) // Check if the interrupt is for the correct button
 80023ba:	88fb      	ldrh	r3, [r7, #6]
 80023bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023c0:	d102      	bne.n	80023c8 <HAL_GPIO_EXTI_Callback+0x18>
    {

    flagUserBtn = 1;
 80023c2:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <HAL_GPIO_EXTI_Callback+0x24>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	701a      	strb	r2, [r3, #0]
    }

}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	20000f74 	.word	0x20000f74

080023d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023dc:	f001 fe8b 	bl	80040f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023e0:	f000 f8ce 	bl	8002580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023e4:	f000 fe4c 	bl	8003080 <MX_GPIO_Init>
  MX_DMA_Init();
 80023e8:	f000 fe08 	bl	8002ffc <MX_DMA_Init>
  MX_USART3_UART_Init();
 80023ec:	f000 fd78 	bl	8002ee0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80023f0:	f000 fdd6 	bl	8002fa0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 80023f4:	f000 fbfe 	bl	8002bf4 <MX_TIM7_Init>
  MX_TIM4_Init();
 80023f8:	f000 fb4a 	bl	8002a90 <MX_TIM4_Init>
  MX_TIM2_Init();
 80023fc:	f000 fa58 	bl	80028b0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002400:	f000 fd3e 	bl	8002e80 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8002404:	f008 fd48 	bl	800ae98 <MX_FATFS_Init>
  MX_SPI2_Init();
 8002408:	f000 f968 	bl	80026dc <MX_SPI2_Init>
  MX_TIM3_Init();
 800240c:	f000 fac8 	bl	80029a0 <MX_TIM3_Init>
  MX_TIM14_Init();
 8002410:	f000 fc88 	bl	8002d24 <MX_TIM14_Init>
  MX_TIM5_Init();
 8002414:	f000 fb92 	bl	8002b3c <MX_TIM5_Init>
  MX_TIM9_Init();
 8002418:	f000 fc22 	bl	8002c60 <MX_TIM9_Init>
  MX_I2C1_Init();
 800241c:	f000 f91e 	bl	800265c <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8002420:	f000 fd8e 	bl	8002f40 <MX_USART6_UART_Init>
  MX_UART4_Init();
 8002424:	f000 fccc 	bl	8002dc0 <MX_UART4_Init>
  MX_UART5_Init();
 8002428:	f000 fcfa 	bl	8002e20 <MX_UART5_Init>
  MX_TIM1_Init();
 800242c:	f000 f994 	bl	8002758 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  LCD_I2C_Init(&hlcd3);
 8002430:	483f      	ldr	r0, [pc, #252]	@ (8002530 <main+0x158>)
 8002432:	f7fe f951 	bl	80006d8 <LCD_I2C_Init>
  LCD_I2C_Clear(&hlcd3);
 8002436:	483e      	ldr	r0, [pc, #248]	@ (8002530 <main+0x158>)
 8002438:	f7fe f9ec 	bl	8000814 <LCD_I2C_Clear>
  LCD_I2C_DisplaySequentialGlossyText(&hlcd3,2);
 800243c:	2102      	movs	r1, #2
 800243e:	483c      	ldr	r0, [pc, #240]	@ (8002530 <main+0x158>)
 8002440:	f7fe fa1a 	bl	8000878 <LCD_I2C_DisplaySequentialGlossyText>

  SERVO_Init(&hservo1);
 8002444:	483b      	ldr	r0, [pc, #236]	@ (8002534 <main+0x15c>)
 8002446:	f7ff fae9 	bl	8001a1c <SERVO_Init>
  SERVO_Init(&hservo2);
 800244a:	483b      	ldr	r0, [pc, #236]	@ (8002538 <main+0x160>)
 800244c:	f7ff fae6 	bl	8001a1c <SERVO_Init>

  initializeMotors();
 8002450:	f7fe ff70 	bl	8001334 <initializeMotors>
  initializeSystem();
 8002454:	f7ff fa08 	bl	8001868 <initializeSystem>
  ENC_Init(&henc1);
 8002458:	4838      	ldr	r0, [pc, #224]	@ (800253c <main+0x164>)
 800245a:	f7ff fa2b 	bl	80018b4 <ENC_Init>

  TMC2209_setMotorsConfiguration(motors,8,1);
 800245e:	2201      	movs	r2, #1
 8002460:	2108      	movs	r1, #8
 8002462:	4837      	ldr	r0, [pc, #220]	@ (8002540 <main+0x168>)
 8002464:	f7fe ff0a 	bl	800127c <TMC2209_setMotorsConfiguration>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1){

	   /// DEBUG ///
	      ES1 =IsSensorTriggered(EndStop1_GPIO_Port, EndStop1_Pin);
 8002468:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800246c:	4835      	ldr	r0, [pc, #212]	@ (8002544 <main+0x16c>)
 800246e:	f7ff fa2f 	bl	80018d0 <IsSensorTriggered>
 8002472:	4603      	mov	r3, r0
 8002474:	461a      	mov	r2, r3
 8002476:	4b34      	ldr	r3, [pc, #208]	@ (8002548 <main+0x170>)
 8002478:	701a      	strb	r2, [r3, #0]
	      ES2 =IsSensorTriggered(EndStop2_GPIO_Port, EndStop2_Pin);
 800247a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800247e:	4833      	ldr	r0, [pc, #204]	@ (800254c <main+0x174>)
 8002480:	f7ff fa26 	bl	80018d0 <IsSensorTriggered>
 8002484:	4603      	mov	r3, r0
 8002486:	461a      	mov	r2, r3
 8002488:	4b31      	ldr	r3, [pc, #196]	@ (8002550 <main+0x178>)
 800248a:	701a      	strb	r2, [r3, #0]
	      ES3= IsSensorTriggered(EndStop3_GPIO_Port,EndStop3_Pin);
 800248c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002490:	482e      	ldr	r0, [pc, #184]	@ (800254c <main+0x174>)
 8002492:	f7ff fa1d 	bl	80018d0 <IsSensorTriggered>
 8002496:	4603      	mov	r3, r0
 8002498:	461a      	mov	r2, r3
 800249a:	4b2e      	ldr	r3, [pc, #184]	@ (8002554 <main+0x17c>)
 800249c:	701a      	strb	r2, [r3, #0]
	      ES4 = IsSensorTriggered(EndStop4_GPIO_Port,EndStop4_Pin);
 800249e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80024a2:	4828      	ldr	r0, [pc, #160]	@ (8002544 <main+0x16c>)
 80024a4:	f7ff fa14 	bl	80018d0 <IsSensorTriggered>
 80024a8:	4603      	mov	r3, r0
 80024aa:	461a      	mov	r2, r3
 80024ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002558 <main+0x180>)
 80024ae:	701a      	strb	r2, [r3, #0]

	      Btn1 = IsSensorTriggered(BtnLeft_GPIO_Port, BtnLeft_Pin);
 80024b0:	2101      	movs	r1, #1
 80024b2:	482a      	ldr	r0, [pc, #168]	@ (800255c <main+0x184>)
 80024b4:	f7ff fa0c 	bl	80018d0 <IsSensorTriggered>
 80024b8:	4603      	mov	r3, r0
 80024ba:	461a      	mov	r2, r3
 80024bc:	4b28      	ldr	r3, [pc, #160]	@ (8002560 <main+0x188>)
 80024be:	701a      	strb	r2, [r3, #0]
	      Btn2 = IsSensorTriggered(BtnRight_GPIO_Port, BtnRight_Pin);
 80024c0:	2102      	movs	r1, #2
 80024c2:	4828      	ldr	r0, [pc, #160]	@ (8002564 <main+0x18c>)
 80024c4:	f7ff fa04 	bl	80018d0 <IsSensorTriggered>
 80024c8:	4603      	mov	r3, r0
 80024ca:	461a      	mov	r2, r3
 80024cc:	4b26      	ldr	r3, [pc, #152]	@ (8002568 <main+0x190>)
 80024ce:	701a      	strb	r2, [r3, #0]
	      Btn3 = IsSensorTriggered(BtnDown_GPIO_Port, BtnDown_Pin);
 80024d0:	2101      	movs	r1, #1
 80024d2:	481c      	ldr	r0, [pc, #112]	@ (8002544 <main+0x16c>)
 80024d4:	f7ff f9fc 	bl	80018d0 <IsSensorTriggered>
 80024d8:	4603      	mov	r3, r0
 80024da:	461a      	mov	r2, r3
 80024dc:	4b23      	ldr	r3, [pc, #140]	@ (800256c <main+0x194>)
 80024de:	701a      	strb	r2, [r3, #0]
	      Btn4 = IsSensorTriggered(BtnUp_GPIO_Port, BtnUp_Pin);
 80024e0:	2102      	movs	r1, #2
 80024e2:	4818      	ldr	r0, [pc, #96]	@ (8002544 <main+0x16c>)
 80024e4:	f7ff f9f4 	bl	80018d0 <IsSensorTriggered>
 80024e8:	4603      	mov	r3, r0
 80024ea:	461a      	mov	r2, r3
 80024ec:	4b20      	ldr	r3, [pc, #128]	@ (8002570 <main+0x198>)
 80024ee:	701a      	strb	r2, [r3, #0]
	      Btn5 = IsSensorTriggered(BtnCtr_GPIO_Port, BtnCtr_Pin);
 80024f0:	2101      	movs	r1, #1
 80024f2:	481c      	ldr	r0, [pc, #112]	@ (8002564 <main+0x18c>)
 80024f4:	f7ff f9ec 	bl	80018d0 <IsSensorTriggered>
 80024f8:	4603      	mov	r3, r0
 80024fa:	461a      	mov	r2, r3
 80024fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002574 <main+0x19c>)
 80024fe:	701a      	strb	r2, [r3, #0]
	   /// DEBUG ///

      if (flagUserBtn)	{
 8002500:	4b1d      	ldr	r3, [pc, #116]	@ (8002578 <main+0x1a0>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d009      	beq.n	800251e <main+0x146>
    	homingFlag = MotorsHoming(&motors);
 800250a:	480d      	ldr	r0, [pc, #52]	@ (8002540 <main+0x168>)
 800250c:	f7ff fb06 	bl	8001b1c <MotorsHoming>
 8002510:	4603      	mov	r3, r0
 8002512:	461a      	mov	r2, r3
 8002514:	4b19      	ldr	r3, [pc, #100]	@ (800257c <main+0x1a4>)
 8002516:	701a      	strb	r2, [r3, #0]

    	flagUserBtn = 0;
 8002518:	4b17      	ldr	r3, [pc, #92]	@ (8002578 <main+0x1a0>)
 800251a:	2200      	movs	r2, #0
 800251c:	701a      	strb	r2, [r3, #0]
      }
  	if (homingFlag){
 800251e:	4b17      	ldr	r3, [pc, #92]	@ (800257c <main+0x1a4>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d09f      	beq.n	8002468 <main+0x90>
    	  MotorControl_ButtonHandler(&motors);
 8002528:	4805      	ldr	r0, [pc, #20]	@ (8002540 <main+0x168>)
 800252a:	f7ff fc7b 	bl	8001e24 <MotorControl_ButtonHandler>
	      ES1 =IsSensorTriggered(EndStop1_GPIO_Port, EndStop1_Pin);
 800252e:	e79b      	b.n	8002468 <main+0x90>
 8002530:	20000018 	.word	0x20000018
 8002534:	2000002c 	.word	0x2000002c
 8002538:	2000003c 	.word	0x2000003c
 800253c:	20000000 	.word	0x20000000
 8002540:	20000d44 	.word	0x20000d44
 8002544:	40021400 	.word	0x40021400
 8002548:	20000f75 	.word	0x20000f75
 800254c:	40021000 	.word	0x40021000
 8002550:	20000f76 	.word	0x20000f76
 8002554:	20000f77 	.word	0x20000f77
 8002558:	20000f78 	.word	0x20000f78
 800255c:	40021800 	.word	0x40021800
 8002560:	20000f79 	.word	0x20000f79
 8002564:	40020c00 	.word	0x40020c00
 8002568:	20000f7a 	.word	0x20000f7a
 800256c:	20000f7b 	.word	0x20000f7b
 8002570:	20000f7c 	.word	0x20000f7c
 8002574:	20000f7d 	.word	0x20000f7d
 8002578:	20000f74 	.word	0x20000f74
 800257c:	20000f7e 	.word	0x20000f7e

08002580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b094      	sub	sp, #80	@ 0x50
 8002584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002586:	f107 0320 	add.w	r3, r7, #32
 800258a:	2230      	movs	r2, #48	@ 0x30
 800258c:	2100      	movs	r1, #0
 800258e:	4618      	mov	r0, r3
 8002590:	f009 fa80 	bl	800ba94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002594:	f107 030c 	add.w	r3, r7, #12
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	60da      	str	r2, [r3, #12]
 80025a2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80025a4:	f003 fada 	bl	8005b5c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002654 <SystemClock_Config+0xd4>)
 80025aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ac:	4a29      	ldr	r2, [pc, #164]	@ (8002654 <SystemClock_Config+0xd4>)
 80025ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80025b4:	4b27      	ldr	r3, [pc, #156]	@ (8002654 <SystemClock_Config+0xd4>)
 80025b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025c0:	4b25      	ldr	r3, [pc, #148]	@ (8002658 <SystemClock_Config+0xd8>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a24      	ldr	r2, [pc, #144]	@ (8002658 <SystemClock_Config+0xd8>)
 80025c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	4b22      	ldr	r3, [pc, #136]	@ (8002658 <SystemClock_Config+0xd8>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80025d4:	607b      	str	r3, [r7, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025d8:	2301      	movs	r3, #1
 80025da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80025dc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80025e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025e2:	2302      	movs	r3, #2
 80025e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80025ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80025ec:	2304      	movs	r3, #4
 80025ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80025f0:	23d8      	movs	r3, #216	@ 0xd8
 80025f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025f4:	2302      	movs	r3, #2
 80025f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80025f8:	2309      	movs	r3, #9
 80025fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025fc:	f107 0320 	add.w	r3, r7, #32
 8002600:	4618      	mov	r0, r3
 8002602:	f003 fb0b 	bl	8005c1c <HAL_RCC_OscConfig>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800260c:	f000 fe60 	bl	80032d0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002610:	f003 fab4 	bl	8005b7c <HAL_PWREx_EnableOverDrive>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800261a:	f000 fe59 	bl	80032d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800261e:	230f      	movs	r3, #15
 8002620:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002622:	2302      	movs	r3, #2
 8002624:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800262a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800262e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002630:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002634:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002636:	f107 030c 	add.w	r3, r7, #12
 800263a:	2107      	movs	r1, #7
 800263c:	4618      	mov	r0, r3
 800263e:	f003 fd91 	bl	8006164 <HAL_RCC_ClockConfig>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002648:	f000 fe42 	bl	80032d0 <Error_Handler>
  }
}
 800264c:	bf00      	nop
 800264e:	3750      	adds	r7, #80	@ 0x50
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40023800 	.word	0x40023800
 8002658:	40007000 	.word	0x40007000

0800265c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002660:	4b1b      	ldr	r3, [pc, #108]	@ (80026d0 <MX_I2C1_Init+0x74>)
 8002662:	4a1c      	ldr	r2, [pc, #112]	@ (80026d4 <MX_I2C1_Init+0x78>)
 8002664:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8002666:	4b1a      	ldr	r3, [pc, #104]	@ (80026d0 <MX_I2C1_Init+0x74>)
 8002668:	4a1b      	ldr	r2, [pc, #108]	@ (80026d8 <MX_I2C1_Init+0x7c>)
 800266a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800266c:	4b18      	ldr	r3, [pc, #96]	@ (80026d0 <MX_I2C1_Init+0x74>)
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002672:	4b17      	ldr	r3, [pc, #92]	@ (80026d0 <MX_I2C1_Init+0x74>)
 8002674:	2201      	movs	r2, #1
 8002676:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002678:	4b15      	ldr	r3, [pc, #84]	@ (80026d0 <MX_I2C1_Init+0x74>)
 800267a:	2200      	movs	r2, #0
 800267c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800267e:	4b14      	ldr	r3, [pc, #80]	@ (80026d0 <MX_I2C1_Init+0x74>)
 8002680:	2200      	movs	r2, #0
 8002682:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002684:	4b12      	ldr	r3, [pc, #72]	@ (80026d0 <MX_I2C1_Init+0x74>)
 8002686:	2200      	movs	r2, #0
 8002688:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800268a:	4b11      	ldr	r3, [pc, #68]	@ (80026d0 <MX_I2C1_Init+0x74>)
 800268c:	2200      	movs	r2, #0
 800268e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002690:	4b0f      	ldr	r3, [pc, #60]	@ (80026d0 <MX_I2C1_Init+0x74>)
 8002692:	2200      	movs	r2, #0
 8002694:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002696:	480e      	ldr	r0, [pc, #56]	@ (80026d0 <MX_I2C1_Init+0x74>)
 8002698:	f002 fcc0 	bl	800501c <HAL_I2C_Init>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80026a2:	f000 fe15 	bl	80032d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026a6:	2100      	movs	r1, #0
 80026a8:	4809      	ldr	r0, [pc, #36]	@ (80026d0 <MX_I2C1_Init+0x74>)
 80026aa:	f003 f885 	bl	80057b8 <HAL_I2CEx_ConfigAnalogFilter>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80026b4:	f000 fe0c 	bl	80032d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80026b8:	2100      	movs	r1, #0
 80026ba:	4805      	ldr	r0, [pc, #20]	@ (80026d0 <MX_I2C1_Init+0x74>)
 80026bc:	f003 f8c7 	bl	800584e <HAL_I2CEx_ConfigDigitalFilter>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80026c6:	f000 fe03 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20000124 	.word	0x20000124
 80026d4:	40005400 	.word	0x40005400
 80026d8:	20404768 	.word	0x20404768

080026dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80026e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002750 <MX_SPI2_Init+0x74>)
 80026e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002754 <MX_SPI2_Init+0x78>)
 80026e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80026e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002750 <MX_SPI2_Init+0x74>)
 80026e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80026ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80026ee:	4b18      	ldr	r3, [pc, #96]	@ (8002750 <MX_SPI2_Init+0x74>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80026f4:	4b16      	ldr	r3, [pc, #88]	@ (8002750 <MX_SPI2_Init+0x74>)
 80026f6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80026fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026fc:	4b14      	ldr	r3, [pc, #80]	@ (8002750 <MX_SPI2_Init+0x74>)
 80026fe:	2200      	movs	r2, #0
 8002700:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002702:	4b13      	ldr	r3, [pc, #76]	@ (8002750 <MX_SPI2_Init+0x74>)
 8002704:	2200      	movs	r2, #0
 8002706:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002708:	4b11      	ldr	r3, [pc, #68]	@ (8002750 <MX_SPI2_Init+0x74>)
 800270a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800270e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002710:	4b0f      	ldr	r3, [pc, #60]	@ (8002750 <MX_SPI2_Init+0x74>)
 8002712:	2238      	movs	r2, #56	@ 0x38
 8002714:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002716:	4b0e      	ldr	r3, [pc, #56]	@ (8002750 <MX_SPI2_Init+0x74>)
 8002718:	2200      	movs	r2, #0
 800271a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800271c:	4b0c      	ldr	r3, [pc, #48]	@ (8002750 <MX_SPI2_Init+0x74>)
 800271e:	2200      	movs	r2, #0
 8002720:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002722:	4b0b      	ldr	r3, [pc, #44]	@ (8002750 <MX_SPI2_Init+0x74>)
 8002724:	2200      	movs	r2, #0
 8002726:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002728:	4b09      	ldr	r3, [pc, #36]	@ (8002750 <MX_SPI2_Init+0x74>)
 800272a:	2207      	movs	r2, #7
 800272c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800272e:	4b08      	ldr	r3, [pc, #32]	@ (8002750 <MX_SPI2_Init+0x74>)
 8002730:	2200      	movs	r2, #0
 8002732:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002734:	4b06      	ldr	r3, [pc, #24]	@ (8002750 <MX_SPI2_Init+0x74>)
 8002736:	2208      	movs	r2, #8
 8002738:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800273a:	4805      	ldr	r0, [pc, #20]	@ (8002750 <MX_SPI2_Init+0x74>)
 800273c:	f004 fb28 	bl	8006d90 <HAL_SPI_Init>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002746:	f000 fdc3 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000178 	.word	0x20000178
 8002754:	40003800 	.word	0x40003800

08002758 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b09a      	sub	sp, #104	@ 0x68
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800275e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	605a      	str	r2, [r3, #4]
 8002768:	609a      	str	r2, [r3, #8]
 800276a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800276c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002778:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	60da      	str	r2, [r3, #12]
 8002786:	611a      	str	r2, [r3, #16]
 8002788:	615a      	str	r2, [r3, #20]
 800278a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800278c:	1d3b      	adds	r3, r7, #4
 800278e:	222c      	movs	r2, #44	@ 0x2c
 8002790:	2100      	movs	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f009 f97e 	bl	800ba94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002798:	4b43      	ldr	r3, [pc, #268]	@ (80028a8 <MX_TIM1_Init+0x150>)
 800279a:	4a44      	ldr	r2, [pc, #272]	@ (80028ac <MX_TIM1_Init+0x154>)
 800279c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 215;
 800279e:	4b42      	ldr	r3, [pc, #264]	@ (80028a8 <MX_TIM1_Init+0x150>)
 80027a0:	22d7      	movs	r2, #215	@ 0xd7
 80027a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027a4:	4b40      	ldr	r3, [pc, #256]	@ (80028a8 <MX_TIM1_Init+0x150>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80027aa:	4b3f      	ldr	r3, [pc, #252]	@ (80028a8 <MX_TIM1_Init+0x150>)
 80027ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80027b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027b2:	4b3d      	ldr	r3, [pc, #244]	@ (80028a8 <MX_TIM1_Init+0x150>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027b8:	4b3b      	ldr	r3, [pc, #236]	@ (80028a8 <MX_TIM1_Init+0x150>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027be:	4b3a      	ldr	r3, [pc, #232]	@ (80028a8 <MX_TIM1_Init+0x150>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80027c4:	4838      	ldr	r0, [pc, #224]	@ (80028a8 <MX_TIM1_Init+0x150>)
 80027c6:	f005 f8ad 	bl	8007924 <HAL_TIM_Base_Init>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80027d0:	f000 fd7e 	bl	80032d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027d8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80027da:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80027de:	4619      	mov	r1, r3
 80027e0:	4831      	ldr	r0, [pc, #196]	@ (80028a8 <MX_TIM1_Init+0x150>)
 80027e2:	f006 f845 	bl	8008870 <HAL_TIM_ConfigClockSource>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80027ec:	f000 fd70 	bl	80032d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80027f0:	482d      	ldr	r0, [pc, #180]	@ (80028a8 <MX_TIM1_Init+0x150>)
 80027f2:	f005 f986 	bl	8007b02 <HAL_TIM_PWM_Init>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80027fc:	f000 fd68 	bl	80032d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002800:	2300      	movs	r3, #0
 8002802:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002804:	2300      	movs	r3, #0
 8002806:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002808:	2300      	movs	r3, #0
 800280a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800280c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002810:	4619      	mov	r1, r3
 8002812:	4825      	ldr	r0, [pc, #148]	@ (80028a8 <MX_TIM1_Init+0x150>)
 8002814:	f006 fce8 	bl	80091e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800281e:	f000 fd57 	bl	80032d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002822:	2360      	movs	r3, #96	@ 0x60
 8002824:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 500;
 8002826:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800282a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800282c:	2300      	movs	r3, #0
 800282e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002830:	2300      	movs	r3, #0
 8002832:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002834:	2300      	movs	r3, #0
 8002836:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002838:	2300      	movs	r3, #0
 800283a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800283c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002840:	220c      	movs	r2, #12
 8002842:	4619      	mov	r1, r3
 8002844:	4818      	ldr	r0, [pc, #96]	@ (80028a8 <MX_TIM1_Init+0x150>)
 8002846:	f005 feff 	bl	8008648 <HAL_TIM_PWM_ConfigChannel>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002850:	f000 fd3e 	bl	80032d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002854:	2300      	movs	r3, #0
 8002856:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002858:	2300      	movs	r3, #0
 800285a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800285c:	2300      	movs	r3, #0
 800285e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002868:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800286c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002872:	2300      	movs	r3, #0
 8002874:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002876:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800287a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800287c:	2300      	movs	r3, #0
 800287e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002880:	2300      	movs	r3, #0
 8002882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002884:	1d3b      	adds	r3, r7, #4
 8002886:	4619      	mov	r1, r3
 8002888:	4807      	ldr	r0, [pc, #28]	@ (80028a8 <MX_TIM1_Init+0x150>)
 800288a:	f006 fd3b 	bl	8009304 <HAL_TIMEx_ConfigBreakDeadTime>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002894:	f000 fd1c 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002898:	4803      	ldr	r0, [pc, #12]	@ (80028a8 <MX_TIM1_Init+0x150>)
 800289a:	f000 ff0f 	bl	80036bc <HAL_TIM_MspPostInit>

}
 800289e:	bf00      	nop
 80028a0:	3768      	adds	r7, #104	@ 0x68
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	200001dc 	.word	0x200001dc
 80028ac:	40010000 	.word	0x40010000

080028b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08e      	sub	sp, #56	@ 0x38
 80028b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	605a      	str	r2, [r3, #4]
 80028c0:	609a      	str	r2, [r3, #8]
 80028c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028c4:	f107 031c 	add.w	r3, r7, #28
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028d0:	463b      	mov	r3, r7
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	605a      	str	r2, [r3, #4]
 80028d8:	609a      	str	r2, [r3, #8]
 80028da:	60da      	str	r2, [r3, #12]
 80028dc:	611a      	str	r2, [r3, #16]
 80028de:	615a      	str	r2, [r3, #20]
 80028e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028e2:	4b2e      	ldr	r3, [pc, #184]	@ (800299c <MX_TIM2_Init+0xec>)
 80028e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80028e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 215;
 80028ea:	4b2c      	ldr	r3, [pc, #176]	@ (800299c <MX_TIM2_Init+0xec>)
 80028ec:	22d7      	movs	r2, #215	@ 0xd7
 80028ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028f0:	4b2a      	ldr	r3, [pc, #168]	@ (800299c <MX_TIM2_Init+0xec>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80028f6:	4b29      	ldr	r3, [pc, #164]	@ (800299c <MX_TIM2_Init+0xec>)
 80028f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80028fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028fe:	4b27      	ldr	r3, [pc, #156]	@ (800299c <MX_TIM2_Init+0xec>)
 8002900:	2200      	movs	r2, #0
 8002902:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002904:	4b25      	ldr	r3, [pc, #148]	@ (800299c <MX_TIM2_Init+0xec>)
 8002906:	2200      	movs	r2, #0
 8002908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800290a:	4824      	ldr	r0, [pc, #144]	@ (800299c <MX_TIM2_Init+0xec>)
 800290c:	f005 f80a 	bl	8007924 <HAL_TIM_Base_Init>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002916:	f000 fcdb 	bl	80032d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800291a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800291e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002920:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002924:	4619      	mov	r1, r3
 8002926:	481d      	ldr	r0, [pc, #116]	@ (800299c <MX_TIM2_Init+0xec>)
 8002928:	f005 ffa2 	bl	8008870 <HAL_TIM_ConfigClockSource>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002932:	f000 fccd 	bl	80032d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002936:	4819      	ldr	r0, [pc, #100]	@ (800299c <MX_TIM2_Init+0xec>)
 8002938:	f005 f8e3 	bl	8007b02 <HAL_TIM_PWM_Init>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002942:	f000 fcc5 	bl	80032d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800294a:	2300      	movs	r3, #0
 800294c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800294e:	f107 031c 	add.w	r3, r7, #28
 8002952:	4619      	mov	r1, r3
 8002954:	4811      	ldr	r0, [pc, #68]	@ (800299c <MX_TIM2_Init+0xec>)
 8002956:	f006 fc47 	bl	80091e8 <HAL_TIMEx_MasterConfigSynchronization>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002960:	f000 fcb6 	bl	80032d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002964:	2360      	movs	r3, #96	@ 0x60
 8002966:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8002968:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800296c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800296e:	2300      	movs	r3, #0
 8002970:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002972:	2300      	movs	r3, #0
 8002974:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002976:	463b      	mov	r3, r7
 8002978:	2208      	movs	r2, #8
 800297a:	4619      	mov	r1, r3
 800297c:	4807      	ldr	r0, [pc, #28]	@ (800299c <MX_TIM2_Init+0xec>)
 800297e:	f005 fe63 	bl	8008648 <HAL_TIM_PWM_ConfigChannel>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8002988:	f000 fca2 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800298c:	4803      	ldr	r0, [pc, #12]	@ (800299c <MX_TIM2_Init+0xec>)
 800298e:	f000 fe95 	bl	80036bc <HAL_TIM_MspPostInit>

}
 8002992:	bf00      	nop
 8002994:	3738      	adds	r7, #56	@ 0x38
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20000228 	.word	0x20000228

080029a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08e      	sub	sp, #56	@ 0x38
 80029a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	605a      	str	r2, [r3, #4]
 80029b0:	609a      	str	r2, [r3, #8]
 80029b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b4:	f107 031c 	add.w	r3, r7, #28
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029c0:	463b      	mov	r3, r7
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	605a      	str	r2, [r3, #4]
 80029c8:	609a      	str	r2, [r3, #8]
 80029ca:	60da      	str	r2, [r3, #12]
 80029cc:	611a      	str	r2, [r3, #16]
 80029ce:	615a      	str	r2, [r3, #20]
 80029d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002a88 <MX_TIM3_Init+0xe8>)
 80029d4:	4a2d      	ldr	r2, [pc, #180]	@ (8002a8c <MX_TIM3_Init+0xec>)
 80029d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 215;
 80029d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002a88 <MX_TIM3_Init+0xe8>)
 80029da:	22d7      	movs	r2, #215	@ 0xd7
 80029dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029de:	4b2a      	ldr	r3, [pc, #168]	@ (8002a88 <MX_TIM3_Init+0xe8>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80029e4:	4b28      	ldr	r3, [pc, #160]	@ (8002a88 <MX_TIM3_Init+0xe8>)
 80029e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80029ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ec:	4b26      	ldr	r3, [pc, #152]	@ (8002a88 <MX_TIM3_Init+0xe8>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029f2:	4b25      	ldr	r3, [pc, #148]	@ (8002a88 <MX_TIM3_Init+0xe8>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80029f8:	4823      	ldr	r0, [pc, #140]	@ (8002a88 <MX_TIM3_Init+0xe8>)
 80029fa:	f004 ff93 	bl	8007924 <HAL_TIM_Base_Init>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002a04:	f000 fc64 	bl	80032d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a12:	4619      	mov	r1, r3
 8002a14:	481c      	ldr	r0, [pc, #112]	@ (8002a88 <MX_TIM3_Init+0xe8>)
 8002a16:	f005 ff2b 	bl	8008870 <HAL_TIM_ConfigClockSource>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002a20:	f000 fc56 	bl	80032d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a24:	4818      	ldr	r0, [pc, #96]	@ (8002a88 <MX_TIM3_Init+0xe8>)
 8002a26:	f005 f86c 	bl	8007b02 <HAL_TIM_PWM_Init>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002a30:	f000 fc4e 	bl	80032d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a34:	2300      	movs	r3, #0
 8002a36:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a3c:	f107 031c 	add.w	r3, r7, #28
 8002a40:	4619      	mov	r1, r3
 8002a42:	4811      	ldr	r0, [pc, #68]	@ (8002a88 <MX_TIM3_Init+0xe8>)
 8002a44:	f006 fbd0 	bl	80091e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002a4e:	f000 fc3f 	bl	80032d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a52:	2360      	movs	r3, #96	@ 0x60
 8002a54:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8002a56:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002a5a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a60:	2300      	movs	r3, #0
 8002a62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a64:	463b      	mov	r3, r7
 8002a66:	2208      	movs	r2, #8
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4807      	ldr	r0, [pc, #28]	@ (8002a88 <MX_TIM3_Init+0xe8>)
 8002a6c:	f005 fdec 	bl	8008648 <HAL_TIM_PWM_ConfigChannel>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8002a76:	f000 fc2b 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002a7a:	4803      	ldr	r0, [pc, #12]	@ (8002a88 <MX_TIM3_Init+0xe8>)
 8002a7c:	f000 fe1e 	bl	80036bc <HAL_TIM_MspPostInit>

}
 8002a80:	bf00      	nop
 8002a82:	3738      	adds	r7, #56	@ 0x38
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20000274 	.word	0x20000274
 8002a8c:	40000400 	.word	0x40000400

08002a90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08c      	sub	sp, #48	@ 0x30
 8002a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a96:	f107 030c 	add.w	r3, r7, #12
 8002a9a:	2224      	movs	r2, #36	@ 0x24
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f008 fff8 	bl	800ba94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aa4:	463b      	mov	r3, r7
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	605a      	str	r2, [r3, #4]
 8002aac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002aae:	4b21      	ldr	r3, [pc, #132]	@ (8002b34 <MX_TIM4_Init+0xa4>)
 8002ab0:	4a21      	ldr	r2, [pc, #132]	@ (8002b38 <MX_TIM4_Init+0xa8>)
 8002ab2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b34 <MX_TIM4_Init+0xa4>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aba:	4b1e      	ldr	r3, [pc, #120]	@ (8002b34 <MX_TIM4_Init+0xa4>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 400;
 8002ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8002b34 <MX_TIM4_Init+0xa4>)
 8002ac2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002ac6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b34 <MX_TIM4_Init+0xa4>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ace:	4b19      	ldr	r3, [pc, #100]	@ (8002b34 <MX_TIM4_Init+0xa4>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002adc:	2301      	movs	r3, #1
 8002ade:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002ae4:	230f      	movs	r3, #15
 8002ae6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002aec:	2301      	movs	r3, #1
 8002aee:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002af0:	2300      	movs	r3, #0
 8002af2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8002af4:	230f      	movs	r3, #15
 8002af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002af8:	f107 030c 	add.w	r3, r7, #12
 8002afc:	4619      	mov	r1, r3
 8002afe:	480d      	ldr	r0, [pc, #52]	@ (8002b34 <MX_TIM4_Init+0xa4>)
 8002b00:	f005 fb66 	bl	80081d0 <HAL_TIM_Encoder_Init>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002b0a:	f000 fbe1 	bl	80032d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b12:	2300      	movs	r3, #0
 8002b14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b16:	463b      	mov	r3, r7
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4806      	ldr	r0, [pc, #24]	@ (8002b34 <MX_TIM4_Init+0xa4>)
 8002b1c:	f006 fb64 	bl	80091e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002b26:	f000 fbd3 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002b2a:	bf00      	nop
 8002b2c:	3730      	adds	r7, #48	@ 0x30
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	200002c0 	.word	0x200002c0
 8002b38:	40000800 	.word	0x40000800

08002b3c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08a      	sub	sp, #40	@ 0x28
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b42:	f107 031c 	add.w	r3, r7, #28
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	605a      	str	r2, [r3, #4]
 8002b4c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b4e:	463b      	mov	r3, r7
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
 8002b5c:	615a      	str	r2, [r3, #20]
 8002b5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002b60:	4b22      	ldr	r3, [pc, #136]	@ (8002bec <MX_TIM5_Init+0xb0>)
 8002b62:	4a23      	ldr	r2, [pc, #140]	@ (8002bf0 <MX_TIM5_Init+0xb4>)
 8002b64:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 216-1;
 8002b66:	4b21      	ldr	r3, [pc, #132]	@ (8002bec <MX_TIM5_Init+0xb0>)
 8002b68:	22d7      	movs	r2, #215	@ 0xd7
 8002b6a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bec <MX_TIM5_Init+0xb0>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8002b72:	4b1e      	ldr	r3, [pc, #120]	@ (8002bec <MX_TIM5_Init+0xb0>)
 8002b74:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002b78:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8002bec <MX_TIM5_Init+0xb0>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b80:	4b1a      	ldr	r3, [pc, #104]	@ (8002bec <MX_TIM5_Init+0xb0>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002b86:	4819      	ldr	r0, [pc, #100]	@ (8002bec <MX_TIM5_Init+0xb0>)
 8002b88:	f004 ffbb 	bl	8007b02 <HAL_TIM_PWM_Init>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8002b92:	f000 fb9d 	bl	80032d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002b9e:	f107 031c 	add.w	r3, r7, #28
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4811      	ldr	r0, [pc, #68]	@ (8002bec <MX_TIM5_Init+0xb0>)
 8002ba6:	f006 fb1f 	bl	80091e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8002bb0:	f000 fb8e 	bl	80032d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bb4:	2360      	movs	r3, #96	@ 0x60
 8002bb6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8002bb8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002bbc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bc6:	463b      	mov	r3, r7
 8002bc8:	2200      	movs	r2, #0
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4807      	ldr	r0, [pc, #28]	@ (8002bec <MX_TIM5_Init+0xb0>)
 8002bce:	f005 fd3b 	bl	8008648 <HAL_TIM_PWM_ConfigChannel>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8002bd8:	f000 fb7a 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002bdc:	4803      	ldr	r0, [pc, #12]	@ (8002bec <MX_TIM5_Init+0xb0>)
 8002bde:	f000 fd6d 	bl	80036bc <HAL_TIM_MspPostInit>

}
 8002be2:	bf00      	nop
 8002be4:	3728      	adds	r7, #40	@ 0x28
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	2000030c 	.word	0x2000030c
 8002bf0:	40000c00 	.word	0x40000c00

08002bf4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bfa:	1d3b      	adds	r3, r7, #4
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	605a      	str	r2, [r3, #4]
 8002c02:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002c04:	4b14      	ldr	r3, [pc, #80]	@ (8002c58 <MX_TIM7_Init+0x64>)
 8002c06:	4a15      	ldr	r2, [pc, #84]	@ (8002c5c <MX_TIM7_Init+0x68>)
 8002c08:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 215;
 8002c0a:	4b13      	ldr	r3, [pc, #76]	@ (8002c58 <MX_TIM7_Init+0x64>)
 8002c0c:	22d7      	movs	r2, #215	@ 0xd7
 8002c0e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c10:	4b11      	ldr	r3, [pc, #68]	@ (8002c58 <MX_TIM7_Init+0x64>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002c16:	4b10      	ldr	r3, [pc, #64]	@ (8002c58 <MX_TIM7_Init+0x64>)
 8002c18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c1c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c58 <MX_TIM7_Init+0x64>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002c24:	480c      	ldr	r0, [pc, #48]	@ (8002c58 <MX_TIM7_Init+0x64>)
 8002c26:	f004 fe7d 	bl	8007924 <HAL_TIM_Base_Init>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002c30:	f000 fb4e 	bl	80032d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c34:	2300      	movs	r3, #0
 8002c36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002c3c:	1d3b      	adds	r3, r7, #4
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4805      	ldr	r0, [pc, #20]	@ (8002c58 <MX_TIM7_Init+0x64>)
 8002c42:	f006 fad1 	bl	80091e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002c4c:	f000 fb40 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002c50:	bf00      	nop
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	20000358 	.word	0x20000358
 8002c5c:	40001400 	.word	0x40001400

08002c60 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08c      	sub	sp, #48	@ 0x30
 8002c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c66:	f107 0320 	add.w	r3, r7, #32
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	605a      	str	r2, [r3, #4]
 8002c70:	609a      	str	r2, [r3, #8]
 8002c72:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c74:	1d3b      	adds	r3, r7, #4
 8002c76:	2200      	movs	r2, #0
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	605a      	str	r2, [r3, #4]
 8002c7c:	609a      	str	r2, [r3, #8]
 8002c7e:	60da      	str	r2, [r3, #12]
 8002c80:	611a      	str	r2, [r3, #16]
 8002c82:	615a      	str	r2, [r3, #20]
 8002c84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002c86:	4b25      	ldr	r3, [pc, #148]	@ (8002d1c <MX_TIM9_Init+0xbc>)
 8002c88:	4a25      	ldr	r2, [pc, #148]	@ (8002d20 <MX_TIM9_Init+0xc0>)
 8002c8a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 107;
 8002c8c:	4b23      	ldr	r3, [pc, #140]	@ (8002d1c <MX_TIM9_Init+0xbc>)
 8002c8e:	226b      	movs	r2, #107	@ 0x6b
 8002c90:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c92:	4b22      	ldr	r3, [pc, #136]	@ (8002d1c <MX_TIM9_Init+0xbc>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 20000-1;
 8002c98:	4b20      	ldr	r3, [pc, #128]	@ (8002d1c <MX_TIM9_Init+0xbc>)
 8002c9a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002c9e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8002d1c <MX_TIM9_Init+0xbc>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ca6:	4b1d      	ldr	r3, [pc, #116]	@ (8002d1c <MX_TIM9_Init+0xbc>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002cac:	481b      	ldr	r0, [pc, #108]	@ (8002d1c <MX_TIM9_Init+0xbc>)
 8002cae:	f004 fe39 	bl	8007924 <HAL_TIM_Base_Init>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8002cb8:	f000 fb0a 	bl	80032d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cc0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002cc2:	f107 0320 	add.w	r3, r7, #32
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4814      	ldr	r0, [pc, #80]	@ (8002d1c <MX_TIM9_Init+0xbc>)
 8002cca:	f005 fdd1 	bl	8008870 <HAL_TIM_ConfigClockSource>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8002cd4:	f000 fafc 	bl	80032d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002cd8:	4810      	ldr	r0, [pc, #64]	@ (8002d1c <MX_TIM9_Init+0xbc>)
 8002cda:	f004 ff12 	bl	8007b02 <HAL_TIM_PWM_Init>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8002ce4:	f000 faf4 	bl	80032d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ce8:	2360      	movs	r3, #96	@ 0x60
 8002cea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 8002cec:	230a      	movs	r3, #10
 8002cee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cf8:	1d3b      	adds	r3, r7, #4
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4807      	ldr	r0, [pc, #28]	@ (8002d1c <MX_TIM9_Init+0xbc>)
 8002d00:	f005 fca2 	bl	8008648 <HAL_TIM_PWM_ConfigChannel>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8002d0a:	f000 fae1 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002d0e:	4803      	ldr	r0, [pc, #12]	@ (8002d1c <MX_TIM9_Init+0xbc>)
 8002d10:	f000 fcd4 	bl	80036bc <HAL_TIM_MspPostInit>

}
 8002d14:	bf00      	nop
 8002d16:	3730      	adds	r7, #48	@ 0x30
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	200003a4 	.word	0x200003a4
 8002d20:	40014000 	.word	0x40014000

08002d24 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b088      	sub	sp, #32
 8002d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d2a:	1d3b      	adds	r3, r7, #4
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	60da      	str	r2, [r3, #12]
 8002d36:	611a      	str	r2, [r3, #16]
 8002d38:	615a      	str	r2, [r3, #20]
 8002d3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8002db8 <MX_TIM14_Init+0x94>)
 8002d3e:	4a1f      	ldr	r2, [pc, #124]	@ (8002dbc <MX_TIM14_Init+0x98>)
 8002d40:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 107;
 8002d42:	4b1d      	ldr	r3, [pc, #116]	@ (8002db8 <MX_TIM14_Init+0x94>)
 8002d44:	226b      	movs	r2, #107	@ 0x6b
 8002d46:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d48:	4b1b      	ldr	r3, [pc, #108]	@ (8002db8 <MX_TIM14_Init+0x94>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 20000-1;
 8002d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002db8 <MX_TIM14_Init+0x94>)
 8002d50:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002d54:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d56:	4b18      	ldr	r3, [pc, #96]	@ (8002db8 <MX_TIM14_Init+0x94>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d5c:	4b16      	ldr	r3, [pc, #88]	@ (8002db8 <MX_TIM14_Init+0x94>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002d62:	4815      	ldr	r0, [pc, #84]	@ (8002db8 <MX_TIM14_Init+0x94>)
 8002d64:	f004 fdde 	bl	8007924 <HAL_TIM_Base_Init>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8002d6e:	f000 faaf 	bl	80032d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8002d72:	4811      	ldr	r0, [pc, #68]	@ (8002db8 <MX_TIM14_Init+0x94>)
 8002d74:	f004 fec5 	bl	8007b02 <HAL_TIM_PWM_Init>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8002d7e:	f000 faa7 	bl	80032d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d82:	2360      	movs	r3, #96	@ 0x60
 8002d84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 8002d86:	230a      	movs	r3, #10
 8002d88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d92:	1d3b      	adds	r3, r7, #4
 8002d94:	2200      	movs	r2, #0
 8002d96:	4619      	mov	r1, r3
 8002d98:	4807      	ldr	r0, [pc, #28]	@ (8002db8 <MX_TIM14_Init+0x94>)
 8002d9a:	f005 fc55 	bl	8008648 <HAL_TIM_PWM_ConfigChannel>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8002da4:	f000 fa94 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8002da8:	4803      	ldr	r0, [pc, #12]	@ (8002db8 <MX_TIM14_Init+0x94>)
 8002daa:	f000 fc87 	bl	80036bc <HAL_TIM_MspPostInit>

}
 8002dae:	bf00      	nop
 8002db0:	3720      	adds	r7, #32
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	200003f0 	.word	0x200003f0
 8002dbc:	40002000 	.word	0x40002000

08002dc0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002dc4:	4b14      	ldr	r3, [pc, #80]	@ (8002e18 <MX_UART4_Init+0x58>)
 8002dc6:	4a15      	ldr	r2, [pc, #84]	@ (8002e1c <MX_UART4_Init+0x5c>)
 8002dc8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002dca:	4b13      	ldr	r3, [pc, #76]	@ (8002e18 <MX_UART4_Init+0x58>)
 8002dcc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002dd0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002dd2:	4b11      	ldr	r3, [pc, #68]	@ (8002e18 <MX_UART4_Init+0x58>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8002e18 <MX_UART4_Init+0x58>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002dde:	4b0e      	ldr	r3, [pc, #56]	@ (8002e18 <MX_UART4_Init+0x58>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002de4:	4b0c      	ldr	r3, [pc, #48]	@ (8002e18 <MX_UART4_Init+0x58>)
 8002de6:	220c      	movs	r2, #12
 8002de8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dea:	4b0b      	ldr	r3, [pc, #44]	@ (8002e18 <MX_UART4_Init+0x58>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002df0:	4b09      	ldr	r3, [pc, #36]	@ (8002e18 <MX_UART4_Init+0x58>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002df6:	4b08      	ldr	r3, [pc, #32]	@ (8002e18 <MX_UART4_Init+0x58>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dfc:	4b06      	ldr	r3, [pc, #24]	@ (8002e18 <MX_UART4_Init+0x58>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002e02:	4805      	ldr	r0, [pc, #20]	@ (8002e18 <MX_UART4_Init+0x58>)
 8002e04:	f006 fb1a 	bl	800943c <HAL_UART_Init>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002e0e:	f000 fa5f 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	2000043c 	.word	0x2000043c
 8002e1c:	40004c00 	.word	0x40004c00

08002e20 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002e24:	4b14      	ldr	r3, [pc, #80]	@ (8002e78 <MX_UART5_Init+0x58>)
 8002e26:	4a15      	ldr	r2, [pc, #84]	@ (8002e7c <MX_UART5_Init+0x5c>)
 8002e28:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002e2a:	4b13      	ldr	r3, [pc, #76]	@ (8002e78 <MX_UART5_Init+0x58>)
 8002e2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e30:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002e32:	4b11      	ldr	r3, [pc, #68]	@ (8002e78 <MX_UART5_Init+0x58>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002e38:	4b0f      	ldr	r3, [pc, #60]	@ (8002e78 <MX_UART5_Init+0x58>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e78 <MX_UART5_Init+0x58>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002e44:	4b0c      	ldr	r3, [pc, #48]	@ (8002e78 <MX_UART5_Init+0x58>)
 8002e46:	220c      	movs	r2, #12
 8002e48:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e78 <MX_UART5_Init+0x58>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e50:	4b09      	ldr	r3, [pc, #36]	@ (8002e78 <MX_UART5_Init+0x58>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e56:	4b08      	ldr	r3, [pc, #32]	@ (8002e78 <MX_UART5_Init+0x58>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e5c:	4b06      	ldr	r3, [pc, #24]	@ (8002e78 <MX_UART5_Init+0x58>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002e62:	4805      	ldr	r0, [pc, #20]	@ (8002e78 <MX_UART5_Init+0x58>)
 8002e64:	f006 faea 	bl	800943c <HAL_UART_Init>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8002e6e:	f000 fa2f 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	200004c4 	.word	0x200004c4
 8002e7c:	40005000 	.word	0x40005000

08002e80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e84:	4b14      	ldr	r3, [pc, #80]	@ (8002ed8 <MX_USART2_UART_Init+0x58>)
 8002e86:	4a15      	ldr	r2, [pc, #84]	@ (8002edc <MX_USART2_UART_Init+0x5c>)
 8002e88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e8a:	4b13      	ldr	r3, [pc, #76]	@ (8002ed8 <MX_USART2_UART_Init+0x58>)
 8002e8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e92:	4b11      	ldr	r3, [pc, #68]	@ (8002ed8 <MX_USART2_UART_Init+0x58>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e98:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed8 <MX_USART2_UART_Init+0x58>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed8 <MX_USART2_UART_Init+0x58>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed8 <MX_USART2_UART_Init+0x58>)
 8002ea6:	220c      	movs	r2, #12
 8002ea8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed8 <MX_USART2_UART_Init+0x58>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eb0:	4b09      	ldr	r3, [pc, #36]	@ (8002ed8 <MX_USART2_UART_Init+0x58>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002eb6:	4b08      	ldr	r3, [pc, #32]	@ (8002ed8 <MX_USART2_UART_Init+0x58>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ebc:	4b06      	ldr	r3, [pc, #24]	@ (8002ed8 <MX_USART2_UART_Init+0x58>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ec2:	4805      	ldr	r0, [pc, #20]	@ (8002ed8 <MX_USART2_UART_Init+0x58>)
 8002ec4:	f006 faba 	bl	800943c <HAL_UART_Init>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002ece:	f000 f9ff 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ed2:	bf00      	nop
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	2000054c 	.word	0x2000054c
 8002edc:	40004400 	.word	0x40004400

08002ee0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ee4:	4b14      	ldr	r3, [pc, #80]	@ (8002f38 <MX_USART3_UART_Init+0x58>)
 8002ee6:	4a15      	ldr	r2, [pc, #84]	@ (8002f3c <MX_USART3_UART_Init+0x5c>)
 8002ee8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 256000;
 8002eea:	4b13      	ldr	r3, [pc, #76]	@ (8002f38 <MX_USART3_UART_Init+0x58>)
 8002eec:	f44f 327a 	mov.w	r2, #256000	@ 0x3e800
 8002ef0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ef2:	4b11      	ldr	r3, [pc, #68]	@ (8002f38 <MX_USART3_UART_Init+0x58>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8002f38 <MX_USART3_UART_Init+0x58>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002efe:	4b0e      	ldr	r3, [pc, #56]	@ (8002f38 <MX_USART3_UART_Init+0x58>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f04:	4b0c      	ldr	r3, [pc, #48]	@ (8002f38 <MX_USART3_UART_Init+0x58>)
 8002f06:	220c      	movs	r2, #12
 8002f08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f38 <MX_USART3_UART_Init+0x58>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f10:	4b09      	ldr	r3, [pc, #36]	@ (8002f38 <MX_USART3_UART_Init+0x58>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f16:	4b08      	ldr	r3, [pc, #32]	@ (8002f38 <MX_USART3_UART_Init+0x58>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f1c:	4b06      	ldr	r3, [pc, #24]	@ (8002f38 <MX_USART3_UART_Init+0x58>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f22:	4805      	ldr	r0, [pc, #20]	@ (8002f38 <MX_USART3_UART_Init+0x58>)
 8002f24:	f006 fa8a 	bl	800943c <HAL_UART_Init>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002f2e:	f000 f9cf 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f32:	bf00      	nop
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	200005d4 	.word	0x200005d4
 8002f3c:	40004800 	.word	0x40004800

08002f40 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002f44:	4b14      	ldr	r3, [pc, #80]	@ (8002f98 <MX_USART6_UART_Init+0x58>)
 8002f46:	4a15      	ldr	r2, [pc, #84]	@ (8002f9c <MX_USART6_UART_Init+0x5c>)
 8002f48:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002f4a:	4b13      	ldr	r3, [pc, #76]	@ (8002f98 <MX_USART6_UART_Init+0x58>)
 8002f4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f50:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002f52:	4b11      	ldr	r3, [pc, #68]	@ (8002f98 <MX_USART6_UART_Init+0x58>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002f58:	4b0f      	ldr	r3, [pc, #60]	@ (8002f98 <MX_USART6_UART_Init+0x58>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f98 <MX_USART6_UART_Init+0x58>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002f64:	4b0c      	ldr	r3, [pc, #48]	@ (8002f98 <MX_USART6_UART_Init+0x58>)
 8002f66:	220c      	movs	r2, #12
 8002f68:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f98 <MX_USART6_UART_Init+0x58>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f70:	4b09      	ldr	r3, [pc, #36]	@ (8002f98 <MX_USART6_UART_Init+0x58>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f76:	4b08      	ldr	r3, [pc, #32]	@ (8002f98 <MX_USART6_UART_Init+0x58>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f7c:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <MX_USART6_UART_Init+0x58>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002f82:	4805      	ldr	r0, [pc, #20]	@ (8002f98 <MX_USART6_UART_Init+0x58>)
 8002f84:	f006 fa5a 	bl	800943c <HAL_UART_Init>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002f8e:	f000 f99f 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	2000065c 	.word	0x2000065c
 8002f9c:	40011400 	.word	0x40011400

08002fa0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002fa4:	4b14      	ldr	r3, [pc, #80]	@ (8002ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002fa6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002faa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002fac:	4b12      	ldr	r3, [pc, #72]	@ (8002ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002fae:	2206      	movs	r2, #6
 8002fb0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002fb2:	4b11      	ldr	r3, [pc, #68]	@ (8002ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8002ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8002ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002fca:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002fd0:	4b09      	ldr	r3, [pc, #36]	@ (8002ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002fd6:	4b08      	ldr	r3, [pc, #32]	@ (8002ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002fdc:	4b06      	ldr	r3, [pc, #24]	@ (8002ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002fe2:	4805      	ldr	r0, [pc, #20]	@ (8002ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002fe4:	f002 fc7f 	bl	80058e6 <HAL_PCD_Init>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002fee:	f000 f96f 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20000864 	.word	0x20000864

08002ffc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003002:	4b1e      	ldr	r3, [pc, #120]	@ (800307c <MX_DMA_Init+0x80>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003006:	4a1d      	ldr	r2, [pc, #116]	@ (800307c <MX_DMA_Init+0x80>)
 8003008:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800300c:	6313      	str	r3, [r2, #48]	@ 0x30
 800300e:	4b1b      	ldr	r3, [pc, #108]	@ (800307c <MX_DMA_Init+0x80>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003012:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003016:	607b      	str	r3, [r7, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800301a:	4b18      	ldr	r3, [pc, #96]	@ (800307c <MX_DMA_Init+0x80>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301e:	4a17      	ldr	r2, [pc, #92]	@ (800307c <MX_DMA_Init+0x80>)
 8003020:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003024:	6313      	str	r3, [r2, #48]	@ 0x30
 8003026:	4b15      	ldr	r3, [pc, #84]	@ (800307c <MX_DMA_Init+0x80>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003032:	2200      	movs	r2, #0
 8003034:	2100      	movs	r1, #0
 8003036:	200b      	movs	r0, #11
 8003038:	f001 f9b9 	bl	80043ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800303c:	200b      	movs	r0, #11
 800303e:	f001 f9d2 	bl	80043e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8003042:	2200      	movs	r2, #0
 8003044:	2100      	movs	r1, #0
 8003046:	200d      	movs	r0, #13
 8003048:	f001 f9b1 	bl	80043ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800304c:	200d      	movs	r0, #13
 800304e:	f001 f9ca 	bl	80043e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003052:	2200      	movs	r2, #0
 8003054:	2100      	movs	r1, #0
 8003056:	2010      	movs	r0, #16
 8003058:	f001 f9a9 	bl	80043ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800305c:	2010      	movs	r0, #16
 800305e:	f001 f9c2 	bl	80043e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8003062:	2200      	movs	r2, #0
 8003064:	2100      	movs	r1, #0
 8003066:	2039      	movs	r0, #57	@ 0x39
 8003068:	f001 f9a1 	bl	80043ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800306c:	2039      	movs	r0, #57	@ 0x39
 800306e:	f001 f9ba 	bl	80043e6 <HAL_NVIC_EnableIRQ>

}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	40023800 	.word	0x40023800

08003080 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b08e      	sub	sp, #56	@ 0x38
 8003084:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003086:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	605a      	str	r2, [r3, #4]
 8003090:	609a      	str	r2, [r3, #8]
 8003092:	60da      	str	r2, [r3, #12]
 8003094:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003096:	4b87      	ldr	r3, [pc, #540]	@ (80032b4 <MX_GPIO_Init+0x234>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309a:	4a86      	ldr	r2, [pc, #536]	@ (80032b4 <MX_GPIO_Init+0x234>)
 800309c:	f043 0310 	orr.w	r3, r3, #16
 80030a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030a2:	4b84      	ldr	r3, [pc, #528]	@ (80032b4 <MX_GPIO_Init+0x234>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a6:	f003 0310 	and.w	r3, r3, #16
 80030aa:	623b      	str	r3, [r7, #32]
 80030ac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ae:	4b81      	ldr	r3, [pc, #516]	@ (80032b4 <MX_GPIO_Init+0x234>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b2:	4a80      	ldr	r2, [pc, #512]	@ (80032b4 <MX_GPIO_Init+0x234>)
 80030b4:	f043 0304 	orr.w	r3, r3, #4
 80030b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ba:	4b7e      	ldr	r3, [pc, #504]	@ (80032b4 <MX_GPIO_Init+0x234>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	61fb      	str	r3, [r7, #28]
 80030c4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80030c6:	4b7b      	ldr	r3, [pc, #492]	@ (80032b4 <MX_GPIO_Init+0x234>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ca:	4a7a      	ldr	r2, [pc, #488]	@ (80032b4 <MX_GPIO_Init+0x234>)
 80030cc:	f043 0320 	orr.w	r3, r3, #32
 80030d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030d2:	4b78      	ldr	r3, [pc, #480]	@ (80032b4 <MX_GPIO_Init+0x234>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d6:	f003 0320 	and.w	r3, r3, #32
 80030da:	61bb      	str	r3, [r7, #24]
 80030dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030de:	4b75      	ldr	r3, [pc, #468]	@ (80032b4 <MX_GPIO_Init+0x234>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e2:	4a74      	ldr	r2, [pc, #464]	@ (80032b4 <MX_GPIO_Init+0x234>)
 80030e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ea:	4b72      	ldr	r3, [pc, #456]	@ (80032b4 <MX_GPIO_Init+0x234>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f6:	4b6f      	ldr	r3, [pc, #444]	@ (80032b4 <MX_GPIO_Init+0x234>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fa:	4a6e      	ldr	r2, [pc, #440]	@ (80032b4 <MX_GPIO_Init+0x234>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	6313      	str	r3, [r2, #48]	@ 0x30
 8003102:	4b6c      	ldr	r3, [pc, #432]	@ (80032b4 <MX_GPIO_Init+0x234>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800310e:	4b69      	ldr	r3, [pc, #420]	@ (80032b4 <MX_GPIO_Init+0x234>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003112:	4a68      	ldr	r2, [pc, #416]	@ (80032b4 <MX_GPIO_Init+0x234>)
 8003114:	f043 0302 	orr.w	r3, r3, #2
 8003118:	6313      	str	r3, [r2, #48]	@ 0x30
 800311a:	4b66      	ldr	r3, [pc, #408]	@ (80032b4 <MX_GPIO_Init+0x234>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003126:	4b63      	ldr	r3, [pc, #396]	@ (80032b4 <MX_GPIO_Init+0x234>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312a:	4a62      	ldr	r2, [pc, #392]	@ (80032b4 <MX_GPIO_Init+0x234>)
 800312c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003130:	6313      	str	r3, [r2, #48]	@ 0x30
 8003132:	4b60      	ldr	r3, [pc, #384]	@ (80032b4 <MX_GPIO_Init+0x234>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800313e:	4b5d      	ldr	r3, [pc, #372]	@ (80032b4 <MX_GPIO_Init+0x234>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003142:	4a5c      	ldr	r2, [pc, #368]	@ (80032b4 <MX_GPIO_Init+0x234>)
 8003144:	f043 0308 	orr.w	r3, r3, #8
 8003148:	6313      	str	r3, [r2, #48]	@ 0x30
 800314a:	4b5a      	ldr	r3, [pc, #360]	@ (80032b4 <MX_GPIO_Init+0x234>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	607b      	str	r3, [r7, #4]
 8003154:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|ENN3_Pin|ENN4_Pin|ENN2_Pin
 8003156:	2200      	movs	r2, #0
 8003158:	f249 5185 	movw	r1, #38277	@ 0x9585
 800315c:	4856      	ldr	r0, [pc, #344]	@ (80032b8 <MX_GPIO_Init+0x238>)
 800315e:	f001 ff2b 	bl	8004fb8 <HAL_GPIO_WritePin>
                          |DIR2_Pin|DIR1_Pin|DIR4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENN1_Pin|SPI_cs_Pin, GPIO_PIN_RESET);
 8003162:	2200      	movs	r2, #0
 8003164:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003168:	4854      	ldr	r0, [pc, #336]	@ (80032bc <MX_GPIO_Init+0x23c>)
 800316a:	f001 ff25 	bl	8004fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800316e:	2200      	movs	r2, #0
 8003170:	2140      	movs	r1, #64	@ 0x40
 8003172:	4853      	ldr	r0, [pc, #332]	@ (80032c0 <MX_GPIO_Init+0x240>)
 8003174:	f001 ff20 	bl	8004fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIR3_Pin ENN3_Pin ENN4_Pin ENN2_Pin
                           DIR2_Pin DIR1_Pin DIR4_Pin */
  GPIO_InitStruct.Pin = DIR3_Pin|ENN3_Pin|ENN4_Pin|ENN2_Pin
 8003178:	f249 5385 	movw	r3, #38277	@ 0x9585
 800317c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DIR2_Pin|DIR1_Pin|DIR4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800317e:	2301      	movs	r3, #1
 8003180:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003182:	2300      	movs	r3, #0
 8003184:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003186:	2300      	movs	r3, #0
 8003188:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800318a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800318e:	4619      	mov	r1, r3
 8003190:	4849      	ldr	r0, [pc, #292]	@ (80032b8 <MX_GPIO_Init+0x238>)
 8003192:	f001 fd4d 	bl	8004c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003196:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800319a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800319c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80031a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80031a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031aa:	4619      	mov	r1, r3
 80031ac:	4845      	ldr	r0, [pc, #276]	@ (80032c4 <MX_GPIO_Init+0x244>)
 80031ae:	f001 fd3f 	bl	8004c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : BtnDown_Pin BtnUp_Pin EndStop1_Pin EndStop4_Pin
                           BtnDownF15_Pin */
  GPIO_InitStruct.Pin = BtnDown_Pin|BtnUp_Pin|EndStop1_Pin|EndStop4_Pin
 80031b2:	f24e 0303 	movw	r3, #57347	@ 0xe003
 80031b6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |BtnDownF15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031b8:	2300      	movs	r3, #0
 80031ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031bc:	2301      	movs	r3, #1
 80031be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80031c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031c4:	4619      	mov	r1, r3
 80031c6:	4840      	ldr	r0, [pc, #256]	@ (80032c8 <MX_GPIO_Init+0x248>)
 80031c8:	f001 fd32 	bl	8004c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : BtnLeft_Pin */
  GPIO_InitStruct.Pin = BtnLeft_Pin;
 80031cc:	2301      	movs	r3, #1
 80031ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031d0:	2300      	movs	r3, #0
 80031d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031d4:	2301      	movs	r3, #1
 80031d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BtnLeft_GPIO_Port, &GPIO_InitStruct);
 80031d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031dc:	4619      	mov	r1, r3
 80031de:	4838      	ldr	r0, [pc, #224]	@ (80032c0 <MX_GPIO_Init+0x240>)
 80031e0:	f001 fd26 	bl	8004c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : EndStop2_Pin EndStop3_Pin */
  GPIO_InitStruct.Pin = EndStop2_Pin|EndStop3_Pin;
 80031e4:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80031e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031ea:	2300      	movs	r3, #0
 80031ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031ee:	2301      	movs	r3, #1
 80031f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031f6:	4619      	mov	r1, r3
 80031f8:	482f      	ldr	r0, [pc, #188]	@ (80032b8 <MX_GPIO_Init+0x238>)
 80031fa:	f001 fd19 	bl	8004c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : Probe_Pin */
  GPIO_InitStruct.Pin = Probe_Pin;
 80031fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003202:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003204:	2300      	movs	r3, #0
 8003206:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003208:	2300      	movs	r3, #0
 800320a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Probe_GPIO_Port, &GPIO_InitStruct);
 800320c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003210:	4619      	mov	r1, r3
 8003212:	4829      	ldr	r0, [pc, #164]	@ (80032b8 <MX_GPIO_Init+0x238>)
 8003214:	f001 fd0c 	bl	8004c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENN1_Pin SPI_cs_Pin */
  GPIO_InitStruct.Pin = ENN1_Pin|SPI_cs_Pin;
 8003218:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800321c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800321e:	2301      	movs	r3, #1
 8003220:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003222:	2300      	movs	r3, #0
 8003224:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003226:	2300      	movs	r3, #0
 8003228:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800322a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800322e:	4619      	mov	r1, r3
 8003230:	4822      	ldr	r0, [pc, #136]	@ (80032bc <MX_GPIO_Init+0x23c>)
 8003232:	f001 fcfd 	bl	8004c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : EncoderBtn_Pin */
  GPIO_InitStruct.Pin = EncoderBtn_Pin;
 8003236:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800323a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800323c:	2300      	movs	r3, #0
 800323e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003240:	2300      	movs	r3, #0
 8003242:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(EncoderBtn_GPIO_Port, &GPIO_InitStruct);
 8003244:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003248:	4619      	mov	r1, r3
 800324a:	4820      	ldr	r0, [pc, #128]	@ (80032cc <MX_GPIO_Init+0x24c>)
 800324c:	f001 fcf0 	bl	8004c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003250:	2340      	movs	r3, #64	@ 0x40
 8003252:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003254:	2301      	movs	r3, #1
 8003256:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003258:	2300      	movs	r3, #0
 800325a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800325c:	2300      	movs	r3, #0
 800325e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003260:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003264:	4619      	mov	r1, r3
 8003266:	4816      	ldr	r0, [pc, #88]	@ (80032c0 <MX_GPIO_Init+0x240>)
 8003268:	f001 fce2 	bl	8004c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800326c:	2380      	movs	r3, #128	@ 0x80
 800326e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003270:	2300      	movs	r3, #0
 8003272:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003274:	2300      	movs	r3, #0
 8003276:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003278:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800327c:	4619      	mov	r1, r3
 800327e:	4810      	ldr	r0, [pc, #64]	@ (80032c0 <MX_GPIO_Init+0x240>)
 8003280:	f001 fcd6 	bl	8004c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : BtnCtr_Pin BtnRight_Pin */
  GPIO_InitStruct.Pin = BtnCtr_Pin|BtnRight_Pin;
 8003284:	2303      	movs	r3, #3
 8003286:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003288:	2300      	movs	r3, #0
 800328a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800328c:	2301      	movs	r3, #1
 800328e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003290:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003294:	4619      	mov	r1, r3
 8003296:	480d      	ldr	r0, [pc, #52]	@ (80032cc <MX_GPIO_Init+0x24c>)
 8003298:	f001 fcca 	bl	8004c30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800329c:	2200      	movs	r2, #0
 800329e:	2100      	movs	r1, #0
 80032a0:	2028      	movs	r0, #40	@ 0x28
 80032a2:	f001 f884 	bl	80043ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80032a6:	2028      	movs	r0, #40	@ 0x28
 80032a8:	f001 f89d 	bl	80043e6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80032ac:	bf00      	nop
 80032ae:	3738      	adds	r7, #56	@ 0x38
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40023800 	.word	0x40023800
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40020400 	.word	0x40020400
 80032c0:	40021800 	.word	0x40021800
 80032c4:	40020800 	.word	0x40020800
 80032c8:	40021400 	.word	0x40021400
 80032cc:	40020c00 	.word	0x40020c00

080032d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032d4:	b672      	cpsid	i
}
 80032d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032d8:	bf00      	nop
 80032da:	e7fd      	b.n	80032d8 <Error_Handler+0x8>

080032dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80032e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003320 <HAL_MspInit+0x44>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e6:	4a0e      	ldr	r2, [pc, #56]	@ (8003320 <HAL_MspInit+0x44>)
 80032e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80032ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003320 <HAL_MspInit+0x44>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f6:	607b      	str	r3, [r7, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032fa:	4b09      	ldr	r3, [pc, #36]	@ (8003320 <HAL_MspInit+0x44>)
 80032fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fe:	4a08      	ldr	r2, [pc, #32]	@ (8003320 <HAL_MspInit+0x44>)
 8003300:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003304:	6453      	str	r3, [r2, #68]	@ 0x44
 8003306:	4b06      	ldr	r3, [pc, #24]	@ (8003320 <HAL_MspInit+0x44>)
 8003308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800330e:	603b      	str	r3, [r7, #0]
 8003310:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40023800 	.word	0x40023800

08003324 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b0aa      	sub	sp, #168	@ 0xa8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800332c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	60da      	str	r2, [r3, #12]
 800333a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800333c:	f107 0310 	add.w	r3, r7, #16
 8003340:	2284      	movs	r2, #132	@ 0x84
 8003342:	2100      	movs	r1, #0
 8003344:	4618      	mov	r0, r3
 8003346:	f008 fba5 	bl	800ba94 <memset>
  if(hi2c->Instance==I2C1)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a22      	ldr	r2, [pc, #136]	@ (80033d8 <HAL_I2C_MspInit+0xb4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d13c      	bne.n	80033ce <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003354:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003358:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800335a:	2300      	movs	r3, #0
 800335c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800335e:	f107 0310 	add.w	r3, r7, #16
 8003362:	4618      	mov	r0, r3
 8003364:	f003 f924 	bl	80065b0 <HAL_RCCEx_PeriphCLKConfig>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800336e:	f7ff ffaf 	bl	80032d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003372:	4b1a      	ldr	r3, [pc, #104]	@ (80033dc <HAL_I2C_MspInit+0xb8>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003376:	4a19      	ldr	r2, [pc, #100]	@ (80033dc <HAL_I2C_MspInit+0xb8>)
 8003378:	f043 0302 	orr.w	r3, r3, #2
 800337c:	6313      	str	r3, [r2, #48]	@ 0x30
 800337e:	4b17      	ldr	r3, [pc, #92]	@ (80033dc <HAL_I2C_MspInit+0xb8>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800338a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800338e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003392:	2312      	movs	r3, #18
 8003394:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	2300      	movs	r3, #0
 800339a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800339e:	2303      	movs	r3, #3
 80033a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80033a4:	2304      	movs	r3, #4
 80033a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033aa:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80033ae:	4619      	mov	r1, r3
 80033b0:	480b      	ldr	r0, [pc, #44]	@ (80033e0 <HAL_I2C_MspInit+0xbc>)
 80033b2:	f001 fc3d 	bl	8004c30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033b6:	4b09      	ldr	r3, [pc, #36]	@ (80033dc <HAL_I2C_MspInit+0xb8>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ba:	4a08      	ldr	r2, [pc, #32]	@ (80033dc <HAL_I2C_MspInit+0xb8>)
 80033bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80033c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033c2:	4b06      	ldr	r3, [pc, #24]	@ (80033dc <HAL_I2C_MspInit+0xb8>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033ca:	60bb      	str	r3, [r7, #8]
 80033cc:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80033ce:	bf00      	nop
 80033d0:	37a8      	adds	r7, #168	@ 0xa8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40005400 	.word	0x40005400
 80033dc:	40023800 	.word	0x40023800
 80033e0:	40020400 	.word	0x40020400

080033e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b08a      	sub	sp, #40	@ 0x28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ec:	f107 0314 	add.w	r3, r7, #20
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	605a      	str	r2, [r3, #4]
 80033f6:	609a      	str	r2, [r3, #8]
 80033f8:	60da      	str	r2, [r3, #12]
 80033fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a25      	ldr	r2, [pc, #148]	@ (8003498 <HAL_SPI_MspInit+0xb4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d144      	bne.n	8003490 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003406:	4b25      	ldr	r3, [pc, #148]	@ (800349c <HAL_SPI_MspInit+0xb8>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340a:	4a24      	ldr	r2, [pc, #144]	@ (800349c <HAL_SPI_MspInit+0xb8>)
 800340c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003410:	6413      	str	r3, [r2, #64]	@ 0x40
 8003412:	4b22      	ldr	r3, [pc, #136]	@ (800349c <HAL_SPI_MspInit+0xb8>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003416:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800341a:	613b      	str	r3, [r7, #16]
 800341c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800341e:	4b1f      	ldr	r3, [pc, #124]	@ (800349c <HAL_SPI_MspInit+0xb8>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003422:	4a1e      	ldr	r2, [pc, #120]	@ (800349c <HAL_SPI_MspInit+0xb8>)
 8003424:	f043 0304 	orr.w	r3, r3, #4
 8003428:	6313      	str	r3, [r2, #48]	@ 0x30
 800342a:	4b1c      	ldr	r3, [pc, #112]	@ (800349c <HAL_SPI_MspInit+0xb8>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003436:	4b19      	ldr	r3, [pc, #100]	@ (800349c <HAL_SPI_MspInit+0xb8>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343a:	4a18      	ldr	r2, [pc, #96]	@ (800349c <HAL_SPI_MspInit+0xb8>)
 800343c:	f043 0302 	orr.w	r3, r3, #2
 8003440:	6313      	str	r3, [r2, #48]	@ 0x30
 8003442:	4b16      	ldr	r3, [pc, #88]	@ (800349c <HAL_SPI_MspInit+0xb8>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	60bb      	str	r3, [r7, #8]
 800344c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800344e:	2304      	movs	r3, #4
 8003450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003452:	2302      	movs	r3, #2
 8003454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003456:	2300      	movs	r3, #0
 8003458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800345a:	2303      	movs	r3, #3
 800345c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800345e:	2305      	movs	r3, #5
 8003460:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003462:	f107 0314 	add.w	r3, r7, #20
 8003466:	4619      	mov	r1, r3
 8003468:	480d      	ldr	r0, [pc, #52]	@ (80034a0 <HAL_SPI_MspInit+0xbc>)
 800346a:	f001 fbe1 	bl	8004c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800346e:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8003472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003474:	2302      	movs	r3, #2
 8003476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003478:	2300      	movs	r3, #0
 800347a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800347c:	2303      	movs	r3, #3
 800347e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003480:	2305      	movs	r3, #5
 8003482:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003484:	f107 0314 	add.w	r3, r7, #20
 8003488:	4619      	mov	r1, r3
 800348a:	4806      	ldr	r0, [pc, #24]	@ (80034a4 <HAL_SPI_MspInit+0xc0>)
 800348c:	f001 fbd0 	bl	8004c30 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003490:	bf00      	nop
 8003492:	3728      	adds	r7, #40	@ 0x28
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40003800 	.word	0x40003800
 800349c:	40023800 	.word	0x40023800
 80034a0:	40020800 	.word	0x40020800
 80034a4:	40020400 	.word	0x40020400

080034a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b088      	sub	sp, #32
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a42      	ldr	r2, [pc, #264]	@ (80035c0 <HAL_TIM_Base_MspInit+0x118>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d114      	bne.n	80034e4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034ba:	4b42      	ldr	r3, [pc, #264]	@ (80035c4 <HAL_TIM_Base_MspInit+0x11c>)
 80034bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034be:	4a41      	ldr	r2, [pc, #260]	@ (80035c4 <HAL_TIM_Base_MspInit+0x11c>)
 80034c0:	f043 0301 	orr.w	r3, r3, #1
 80034c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80034c6:	4b3f      	ldr	r3, [pc, #252]	@ (80035c4 <HAL_TIM_Base_MspInit+0x11c>)
 80034c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	61fb      	str	r3, [r7, #28]
 80034d0:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80034d2:	2200      	movs	r2, #0
 80034d4:	2100      	movs	r1, #0
 80034d6:	201b      	movs	r0, #27
 80034d8:	f000 ff69 	bl	80043ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80034dc:	201b      	movs	r0, #27
 80034de:	f000 ff82 	bl	80043e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80034e2:	e068      	b.n	80035b6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM2)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034ec:	d114      	bne.n	8003518 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034ee:	4b35      	ldr	r3, [pc, #212]	@ (80035c4 <HAL_TIM_Base_MspInit+0x11c>)
 80034f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f2:	4a34      	ldr	r2, [pc, #208]	@ (80035c4 <HAL_TIM_Base_MspInit+0x11c>)
 80034f4:	f043 0301 	orr.w	r3, r3, #1
 80034f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034fa:	4b32      	ldr	r3, [pc, #200]	@ (80035c4 <HAL_TIM_Base_MspInit+0x11c>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	61bb      	str	r3, [r7, #24]
 8003504:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003506:	2200      	movs	r2, #0
 8003508:	2100      	movs	r1, #0
 800350a:	201c      	movs	r0, #28
 800350c:	f000 ff4f 	bl	80043ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003510:	201c      	movs	r0, #28
 8003512:	f000 ff68 	bl	80043e6 <HAL_NVIC_EnableIRQ>
}
 8003516:	e04e      	b.n	80035b6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM3)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a2a      	ldr	r2, [pc, #168]	@ (80035c8 <HAL_TIM_Base_MspInit+0x120>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d114      	bne.n	800354c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003522:	4b28      	ldr	r3, [pc, #160]	@ (80035c4 <HAL_TIM_Base_MspInit+0x11c>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	4a27      	ldr	r2, [pc, #156]	@ (80035c4 <HAL_TIM_Base_MspInit+0x11c>)
 8003528:	f043 0302 	orr.w	r3, r3, #2
 800352c:	6413      	str	r3, [r2, #64]	@ 0x40
 800352e:	4b25      	ldr	r3, [pc, #148]	@ (80035c4 <HAL_TIM_Base_MspInit+0x11c>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800353a:	2200      	movs	r2, #0
 800353c:	2100      	movs	r1, #0
 800353e:	201d      	movs	r0, #29
 8003540:	f000 ff35 	bl	80043ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003544:	201d      	movs	r0, #29
 8003546:	f000 ff4e 	bl	80043e6 <HAL_NVIC_EnableIRQ>
}
 800354a:	e034      	b.n	80035b6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a1e      	ldr	r2, [pc, #120]	@ (80035cc <HAL_TIM_Base_MspInit+0x124>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d10c      	bne.n	8003570 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003556:	4b1b      	ldr	r3, [pc, #108]	@ (80035c4 <HAL_TIM_Base_MspInit+0x11c>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355a:	4a1a      	ldr	r2, [pc, #104]	@ (80035c4 <HAL_TIM_Base_MspInit+0x11c>)
 800355c:	f043 0320 	orr.w	r3, r3, #32
 8003560:	6413      	str	r3, [r2, #64]	@ 0x40
 8003562:	4b18      	ldr	r3, [pc, #96]	@ (80035c4 <HAL_TIM_Base_MspInit+0x11c>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	613b      	str	r3, [r7, #16]
 800356c:	693b      	ldr	r3, [r7, #16]
}
 800356e:	e022      	b.n	80035b6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM9)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a16      	ldr	r2, [pc, #88]	@ (80035d0 <HAL_TIM_Base_MspInit+0x128>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d10c      	bne.n	8003594 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800357a:	4b12      	ldr	r3, [pc, #72]	@ (80035c4 <HAL_TIM_Base_MspInit+0x11c>)
 800357c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357e:	4a11      	ldr	r2, [pc, #68]	@ (80035c4 <HAL_TIM_Base_MspInit+0x11c>)
 8003580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003584:	6453      	str	r3, [r2, #68]	@ 0x44
 8003586:	4b0f      	ldr	r3, [pc, #60]	@ (80035c4 <HAL_TIM_Base_MspInit+0x11c>)
 8003588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]
}
 8003592:	e010      	b.n	80035b6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM14)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a0e      	ldr	r2, [pc, #56]	@ (80035d4 <HAL_TIM_Base_MspInit+0x12c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d10b      	bne.n	80035b6 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800359e:	4b09      	ldr	r3, [pc, #36]	@ (80035c4 <HAL_TIM_Base_MspInit+0x11c>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a2:	4a08      	ldr	r2, [pc, #32]	@ (80035c4 <HAL_TIM_Base_MspInit+0x11c>)
 80035a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80035aa:	4b06      	ldr	r3, [pc, #24]	@ (80035c4 <HAL_TIM_Base_MspInit+0x11c>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	68bb      	ldr	r3, [r7, #8]
}
 80035b6:	bf00      	nop
 80035b8:	3720      	adds	r7, #32
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40010000 	.word	0x40010000
 80035c4:	40023800 	.word	0x40023800
 80035c8:	40000400 	.word	0x40000400
 80035cc:	40001400 	.word	0x40001400
 80035d0:	40014000 	.word	0x40014000
 80035d4:	40002000 	.word	0x40002000

080035d8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08a      	sub	sp, #40	@ 0x28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e0:	f107 0314 	add.w	r3, r7, #20
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	605a      	str	r2, [r3, #4]
 80035ea:	609a      	str	r2, [r3, #8]
 80035ec:	60da      	str	r2, [r3, #12]
 80035ee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003664 <HAL_TIM_Encoder_MspInit+0x8c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d130      	bne.n	800365c <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80035fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003668 <HAL_TIM_Encoder_MspInit+0x90>)
 80035fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fe:	4a1a      	ldr	r2, [pc, #104]	@ (8003668 <HAL_TIM_Encoder_MspInit+0x90>)
 8003600:	f043 0304 	orr.w	r3, r3, #4
 8003604:	6413      	str	r3, [r2, #64]	@ 0x40
 8003606:	4b18      	ldr	r3, [pc, #96]	@ (8003668 <HAL_TIM_Encoder_MspInit+0x90>)
 8003608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003612:	4b15      	ldr	r3, [pc, #84]	@ (8003668 <HAL_TIM_Encoder_MspInit+0x90>)
 8003614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003616:	4a14      	ldr	r2, [pc, #80]	@ (8003668 <HAL_TIM_Encoder_MspInit+0x90>)
 8003618:	f043 0308 	orr.w	r3, r3, #8
 800361c:	6313      	str	r3, [r2, #48]	@ 0x30
 800361e:	4b12      	ldr	r3, [pc, #72]	@ (8003668 <HAL_TIM_Encoder_MspInit+0x90>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC_DT_Pin|ENC_CLK_Pin;
 800362a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800362e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003630:	2302      	movs	r3, #2
 8003632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003634:	2300      	movs	r3, #0
 8003636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003638:	2300      	movs	r3, #0
 800363a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800363c:	2302      	movs	r3, #2
 800363e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003640:	f107 0314 	add.w	r3, r7, #20
 8003644:	4619      	mov	r1, r3
 8003646:	4809      	ldr	r0, [pc, #36]	@ (800366c <HAL_TIM_Encoder_MspInit+0x94>)
 8003648:	f001 faf2 	bl	8004c30 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800364c:	2200      	movs	r2, #0
 800364e:	2100      	movs	r1, #0
 8003650:	201e      	movs	r0, #30
 8003652:	f000 feac 	bl	80043ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003656:	201e      	movs	r0, #30
 8003658:	f000 fec5 	bl	80043e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 800365c:	bf00      	nop
 800365e:	3728      	adds	r7, #40	@ 0x28
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40000800 	.word	0x40000800
 8003668:	40023800 	.word	0x40023800
 800366c:	40020c00 	.word	0x40020c00

08003670 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a0d      	ldr	r2, [pc, #52]	@ (80036b4 <HAL_TIM_PWM_MspInit+0x44>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d113      	bne.n	80036aa <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003682:	4b0d      	ldr	r3, [pc, #52]	@ (80036b8 <HAL_TIM_PWM_MspInit+0x48>)
 8003684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003686:	4a0c      	ldr	r2, [pc, #48]	@ (80036b8 <HAL_TIM_PWM_MspInit+0x48>)
 8003688:	f043 0308 	orr.w	r3, r3, #8
 800368c:	6413      	str	r3, [r2, #64]	@ 0x40
 800368e:	4b0a      	ldr	r3, [pc, #40]	@ (80036b8 <HAL_TIM_PWM_MspInit+0x48>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800369a:	2200      	movs	r2, #0
 800369c:	2100      	movs	r1, #0
 800369e:	2032      	movs	r0, #50	@ 0x32
 80036a0:	f000 fe85 	bl	80043ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80036a4:	2032      	movs	r0, #50	@ 0x32
 80036a6:	f000 fe9e 	bl	80043e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM5_MspInit 1 */

  }

}
 80036aa:	bf00      	nop
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40000c00 	.word	0x40000c00
 80036b8:	40023800 	.word	0x40023800

080036bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08e      	sub	sp, #56	@ 0x38
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	605a      	str	r2, [r3, #4]
 80036ce:	609a      	str	r2, [r3, #8]
 80036d0:	60da      	str	r2, [r3, #12]
 80036d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a67      	ldr	r2, [pc, #412]	@ (8003878 <HAL_TIM_MspPostInit+0x1bc>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d11d      	bne.n	800371a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80036de:	4b67      	ldr	r3, [pc, #412]	@ (800387c <HAL_TIM_MspPostInit+0x1c0>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e2:	4a66      	ldr	r2, [pc, #408]	@ (800387c <HAL_TIM_MspPostInit+0x1c0>)
 80036e4:	f043 0310 	orr.w	r3, r3, #16
 80036e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80036ea:	4b64      	ldr	r3, [pc, #400]	@ (800387c <HAL_TIM_MspPostInit+0x1c0>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	623b      	str	r3, [r7, #32]
 80036f4:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = STEP2_Pin;
 80036f6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80036fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fc:	2302      	movs	r3, #2
 80036fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003700:	2300      	movs	r3, #0
 8003702:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003704:	2300      	movs	r3, #0
 8003706:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003708:	2301      	movs	r3, #1
 800370a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 800370c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003710:	4619      	mov	r1, r3
 8003712:	485b      	ldr	r0, [pc, #364]	@ (8003880 <HAL_TIM_MspPostInit+0x1c4>)
 8003714:	f001 fa8c 	bl	8004c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8003718:	e0a9      	b.n	800386e <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM2)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003722:	d11d      	bne.n	8003760 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003724:	4b55      	ldr	r3, [pc, #340]	@ (800387c <HAL_TIM_MspPostInit+0x1c0>)
 8003726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003728:	4a54      	ldr	r2, [pc, #336]	@ (800387c <HAL_TIM_MspPostInit+0x1c0>)
 800372a:	f043 0302 	orr.w	r3, r3, #2
 800372e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003730:	4b52      	ldr	r3, [pc, #328]	@ (800387c <HAL_TIM_MspPostInit+0x1c0>)
 8003732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	61fb      	str	r3, [r7, #28]
 800373a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = STEP1_Pin;
 800373c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003740:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003742:	2302      	movs	r3, #2
 8003744:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003746:	2300      	movs	r3, #0
 8003748:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800374a:	2300      	movs	r3, #0
 800374c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800374e:	2301      	movs	r3, #1
 8003750:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 8003752:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003756:	4619      	mov	r1, r3
 8003758:	484a      	ldr	r0, [pc, #296]	@ (8003884 <HAL_TIM_MspPostInit+0x1c8>)
 800375a:	f001 fa69 	bl	8004c30 <HAL_GPIO_Init>
}
 800375e:	e086      	b.n	800386e <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM3)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a48      	ldr	r2, [pc, #288]	@ (8003888 <HAL_TIM_MspPostInit+0x1cc>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d11c      	bne.n	80037a4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800376a:	4b44      	ldr	r3, [pc, #272]	@ (800387c <HAL_TIM_MspPostInit+0x1c0>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800376e:	4a43      	ldr	r2, [pc, #268]	@ (800387c <HAL_TIM_MspPostInit+0x1c0>)
 8003770:	f043 0302 	orr.w	r3, r3, #2
 8003774:	6313      	str	r3, [r2, #48]	@ 0x30
 8003776:	4b41      	ldr	r3, [pc, #260]	@ (800387c <HAL_TIM_MspPostInit+0x1c0>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	61bb      	str	r3, [r7, #24]
 8003780:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = STEP4_Pin;
 8003782:	2301      	movs	r3, #1
 8003784:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003786:	2302      	movs	r3, #2
 8003788:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378a:	2300      	movs	r3, #0
 800378c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800378e:	2300      	movs	r3, #0
 8003790:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003792:	2302      	movs	r3, #2
 8003794:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP4_GPIO_Port, &GPIO_InitStruct);
 8003796:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800379a:	4619      	mov	r1, r3
 800379c:	4839      	ldr	r0, [pc, #228]	@ (8003884 <HAL_TIM_MspPostInit+0x1c8>)
 800379e:	f001 fa47 	bl	8004c30 <HAL_GPIO_Init>
}
 80037a2:	e064      	b.n	800386e <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM5)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a38      	ldr	r2, [pc, #224]	@ (800388c <HAL_TIM_MspPostInit+0x1d0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d11c      	bne.n	80037e8 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ae:	4b33      	ldr	r3, [pc, #204]	@ (800387c <HAL_TIM_MspPostInit+0x1c0>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b2:	4a32      	ldr	r2, [pc, #200]	@ (800387c <HAL_TIM_MspPostInit+0x1c0>)
 80037b4:	f043 0301 	orr.w	r3, r3, #1
 80037b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80037ba:	4b30      	ldr	r3, [pc, #192]	@ (800387c <HAL_TIM_MspPostInit+0x1c0>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP3_Pin;
 80037c6:	2301      	movs	r3, #1
 80037c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ca:	2302      	movs	r3, #2
 80037cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ce:	2300      	movs	r3, #0
 80037d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037d2:	2300      	movs	r3, #0
 80037d4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80037d6:	2302      	movs	r3, #2
 80037d8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP3_GPIO_Port, &GPIO_InitStruct);
 80037da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037de:	4619      	mov	r1, r3
 80037e0:	482b      	ldr	r0, [pc, #172]	@ (8003890 <HAL_TIM_MspPostInit+0x1d4>)
 80037e2:	f001 fa25 	bl	8004c30 <HAL_GPIO_Init>
}
 80037e6:	e042      	b.n	800386e <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM9)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a29      	ldr	r2, [pc, #164]	@ (8003894 <HAL_TIM_MspPostInit+0x1d8>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d11c      	bne.n	800382c <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80037f2:	4b22      	ldr	r3, [pc, #136]	@ (800387c <HAL_TIM_MspPostInit+0x1c0>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f6:	4a21      	ldr	r2, [pc, #132]	@ (800387c <HAL_TIM_MspPostInit+0x1c0>)
 80037f8:	f043 0310 	orr.w	r3, r3, #16
 80037fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80037fe:	4b1f      	ldr	r3, [pc, #124]	@ (800387c <HAL_TIM_MspPostInit+0x1c0>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Servo2PWM_Pin;
 800380a:	2320      	movs	r3, #32
 800380c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800380e:	2302      	movs	r3, #2
 8003810:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003812:	2300      	movs	r3, #0
 8003814:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003816:	2300      	movs	r3, #0
 8003818:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800381a:	2303      	movs	r3, #3
 800381c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Servo2PWM_GPIO_Port, &GPIO_InitStruct);
 800381e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003822:	4619      	mov	r1, r3
 8003824:	4816      	ldr	r0, [pc, #88]	@ (8003880 <HAL_TIM_MspPostInit+0x1c4>)
 8003826:	f001 fa03 	bl	8004c30 <HAL_GPIO_Init>
}
 800382a:	e020      	b.n	800386e <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM14)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a19      	ldr	r2, [pc, #100]	@ (8003898 <HAL_TIM_MspPostInit+0x1dc>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d11b      	bne.n	800386e <HAL_TIM_MspPostInit+0x1b2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003836:	4b11      	ldr	r3, [pc, #68]	@ (800387c <HAL_TIM_MspPostInit+0x1c0>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383a:	4a10      	ldr	r2, [pc, #64]	@ (800387c <HAL_TIM_MspPostInit+0x1c0>)
 800383c:	f043 0301 	orr.w	r3, r3, #1
 8003840:	6313      	str	r3, [r2, #48]	@ 0x30
 8003842:	4b0e      	ldr	r3, [pc, #56]	@ (800387c <HAL_TIM_MspPostInit+0x1c0>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo1PWM_Pin;
 800384e:	2380      	movs	r3, #128	@ 0x80
 8003850:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003852:	2302      	movs	r3, #2
 8003854:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003856:	2300      	movs	r3, #0
 8003858:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800385a:	2300      	movs	r3, #0
 800385c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800385e:	2309      	movs	r3, #9
 8003860:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Servo1PWM_GPIO_Port, &GPIO_InitStruct);
 8003862:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003866:	4619      	mov	r1, r3
 8003868:	4809      	ldr	r0, [pc, #36]	@ (8003890 <HAL_TIM_MspPostInit+0x1d4>)
 800386a:	f001 f9e1 	bl	8004c30 <HAL_GPIO_Init>
}
 800386e:	bf00      	nop
 8003870:	3738      	adds	r7, #56	@ 0x38
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40010000 	.word	0x40010000
 800387c:	40023800 	.word	0x40023800
 8003880:	40021000 	.word	0x40021000
 8003884:	40020400 	.word	0x40020400
 8003888:	40000400 	.word	0x40000400
 800388c:	40000c00 	.word	0x40000c00
 8003890:	40020000 	.word	0x40020000
 8003894:	40014000 	.word	0x40014000
 8003898:	40002000 	.word	0x40002000

0800389c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b0b4      	sub	sp, #208	@ 0xd0
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038a4:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	605a      	str	r2, [r3, #4]
 80038ae:	609a      	str	r2, [r3, #8]
 80038b0:	60da      	str	r2, [r3, #12]
 80038b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80038b8:	2284      	movs	r2, #132	@ 0x84
 80038ba:	2100      	movs	r1, #0
 80038bc:	4618      	mov	r0, r3
 80038be:	f008 f8e9 	bl	800ba94 <memset>
  if(huart->Instance==UART4)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a8a      	ldr	r2, [pc, #552]	@ (8003af0 <HAL_UART_MspInit+0x254>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d174      	bne.n	80039b6 <HAL_UART_MspInit+0x11a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80038cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038d0:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80038d2:	2300      	movs	r3, #0
 80038d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038d8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80038dc:	4618      	mov	r0, r3
 80038de:	f002 fe67 	bl	80065b0 <HAL_RCCEx_PeriphCLKConfig>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80038e8:	f7ff fcf2 	bl	80032d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80038ec:	4b81      	ldr	r3, [pc, #516]	@ (8003af4 <HAL_UART_MspInit+0x258>)
 80038ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f0:	4a80      	ldr	r2, [pc, #512]	@ (8003af4 <HAL_UART_MspInit+0x258>)
 80038f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80038f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80038f8:	4b7e      	ldr	r3, [pc, #504]	@ (8003af4 <HAL_UART_MspInit+0x258>)
 80038fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003900:	637b      	str	r3, [r7, #52]	@ 0x34
 8003902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003904:	4b7b      	ldr	r3, [pc, #492]	@ (8003af4 <HAL_UART_MspInit+0x258>)
 8003906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003908:	4a7a      	ldr	r2, [pc, #488]	@ (8003af4 <HAL_UART_MspInit+0x258>)
 800390a:	f043 0304 	orr.w	r3, r3, #4
 800390e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003910:	4b78      	ldr	r3, [pc, #480]	@ (8003af4 <HAL_UART_MspInit+0x258>)
 8003912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	633b      	str	r3, [r7, #48]	@ 0x30
 800391a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800391c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003920:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003924:	2302      	movs	r3, #2
 8003926:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392a:	2300      	movs	r3, #0
 800392c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003930:	2303      	movs	r3, #3
 8003932:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003936:	2308      	movs	r3, #8
 8003938:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800393c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8003940:	4619      	mov	r1, r3
 8003942:	486d      	ldr	r0, [pc, #436]	@ (8003af8 <HAL_UART_MspInit+0x25c>)
 8003944:	f001 f974 	bl	8004c30 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8003948:	4b6c      	ldr	r3, [pc, #432]	@ (8003afc <HAL_UART_MspInit+0x260>)
 800394a:	4a6d      	ldr	r2, [pc, #436]	@ (8003b00 <HAL_UART_MspInit+0x264>)
 800394c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800394e:	4b6b      	ldr	r3, [pc, #428]	@ (8003afc <HAL_UART_MspInit+0x260>)
 8003950:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003954:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003956:	4b69      	ldr	r3, [pc, #420]	@ (8003afc <HAL_UART_MspInit+0x260>)
 8003958:	2200      	movs	r2, #0
 800395a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800395c:	4b67      	ldr	r3, [pc, #412]	@ (8003afc <HAL_UART_MspInit+0x260>)
 800395e:	2200      	movs	r2, #0
 8003960:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003962:	4b66      	ldr	r3, [pc, #408]	@ (8003afc <HAL_UART_MspInit+0x260>)
 8003964:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003968:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800396a:	4b64      	ldr	r3, [pc, #400]	@ (8003afc <HAL_UART_MspInit+0x260>)
 800396c:	2200      	movs	r2, #0
 800396e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003970:	4b62      	ldr	r3, [pc, #392]	@ (8003afc <HAL_UART_MspInit+0x260>)
 8003972:	2200      	movs	r2, #0
 8003974:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8003976:	4b61      	ldr	r3, [pc, #388]	@ (8003afc <HAL_UART_MspInit+0x260>)
 8003978:	2200      	movs	r2, #0
 800397a:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800397c:	4b5f      	ldr	r3, [pc, #380]	@ (8003afc <HAL_UART_MspInit+0x260>)
 800397e:	2200      	movs	r2, #0
 8003980:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003982:	4b5e      	ldr	r3, [pc, #376]	@ (8003afc <HAL_UART_MspInit+0x260>)
 8003984:	2200      	movs	r2, #0
 8003986:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003988:	485c      	ldr	r0, [pc, #368]	@ (8003afc <HAL_UART_MspInit+0x260>)
 800398a:	f000 fd47 	bl	800441c <HAL_DMA_Init>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 8003994:	f7ff fc9c 	bl	80032d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a58      	ldr	r2, [pc, #352]	@ (8003afc <HAL_UART_MspInit+0x260>)
 800399c:	675a      	str	r2, [r3, #116]	@ 0x74
 800399e:	4a57      	ldr	r2, [pc, #348]	@ (8003afc <HAL_UART_MspInit+0x260>)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80039a4:	2200      	movs	r2, #0
 80039a6:	2100      	movs	r1, #0
 80039a8:	2034      	movs	r0, #52	@ 0x34
 80039aa:	f000 fd00 	bl	80043ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80039ae:	2034      	movs	r0, #52	@ 0x34
 80039b0:	f000 fd19 	bl	80043e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80039b4:	e1e2      	b.n	8003d7c <HAL_UART_MspInit+0x4e0>
  else if(huart->Instance==UART5)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a52      	ldr	r2, [pc, #328]	@ (8003b04 <HAL_UART_MspInit+0x268>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	f040 80a9 	bne.w	8003b14 <HAL_UART_MspInit+0x278>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80039c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039c6:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80039c8:	2300      	movs	r3, #0
 80039ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039ce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80039d2:	4618      	mov	r0, r3
 80039d4:	f002 fdec 	bl	80065b0 <HAL_RCCEx_PeriphCLKConfig>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_UART_MspInit+0x146>
      Error_Handler();
 80039de:	f7ff fc77 	bl	80032d0 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80039e2:	4b44      	ldr	r3, [pc, #272]	@ (8003af4 <HAL_UART_MspInit+0x258>)
 80039e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e6:	4a43      	ldr	r2, [pc, #268]	@ (8003af4 <HAL_UART_MspInit+0x258>)
 80039e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80039ee:	4b41      	ldr	r3, [pc, #260]	@ (8003af4 <HAL_UART_MspInit+0x258>)
 80039f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039fa:	4b3e      	ldr	r3, [pc, #248]	@ (8003af4 <HAL_UART_MspInit+0x258>)
 80039fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fe:	4a3d      	ldr	r2, [pc, #244]	@ (8003af4 <HAL_UART_MspInit+0x258>)
 8003a00:	f043 0304 	orr.w	r3, r3, #4
 8003a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a06:	4b3b      	ldr	r3, [pc, #236]	@ (8003af4 <HAL_UART_MspInit+0x258>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0a:	f003 0304 	and.w	r3, r3, #4
 8003a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a12:	4b38      	ldr	r3, [pc, #224]	@ (8003af4 <HAL_UART_MspInit+0x258>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a16:	4a37      	ldr	r2, [pc, #220]	@ (8003af4 <HAL_UART_MspInit+0x258>)
 8003a18:	f043 0308 	orr.w	r3, r3, #8
 8003a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a1e:	4b35      	ldr	r3, [pc, #212]	@ (8003af4 <HAL_UART_MspInit+0x258>)
 8003a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003a2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a2e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a32:	2302      	movs	r3, #2
 8003a34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003a44:	2308      	movs	r3, #8
 8003a46:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a4a:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8003a4e:	4619      	mov	r1, r3
 8003a50:	4829      	ldr	r0, [pc, #164]	@ (8003af8 <HAL_UART_MspInit+0x25c>)
 8003a52:	f001 f8ed 	bl	8004c30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003a56:	2304      	movs	r3, #4
 8003a58:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a62:	2300      	movs	r3, #0
 8003a64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003a6e:	2308      	movs	r3, #8
 8003a70:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a74:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4823      	ldr	r0, [pc, #140]	@ (8003b08 <HAL_UART_MspInit+0x26c>)
 8003a7c:	f001 f8d8 	bl	8004c30 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8003a80:	4b22      	ldr	r3, [pc, #136]	@ (8003b0c <HAL_UART_MspInit+0x270>)
 8003a82:	4a23      	ldr	r2, [pc, #140]	@ (8003b10 <HAL_UART_MspInit+0x274>)
 8003a84:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8003a86:	4b21      	ldr	r3, [pc, #132]	@ (8003b0c <HAL_UART_MspInit+0x270>)
 8003a88:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003a8c:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a8e:	4b1f      	ldr	r3, [pc, #124]	@ (8003b0c <HAL_UART_MspInit+0x270>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a94:	4b1d      	ldr	r3, [pc, #116]	@ (8003b0c <HAL_UART_MspInit+0x270>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8003b0c <HAL_UART_MspInit+0x270>)
 8003a9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003aa0:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8003b0c <HAL_UART_MspInit+0x270>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003aa8:	4b18      	ldr	r3, [pc, #96]	@ (8003b0c <HAL_UART_MspInit+0x270>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8003aae:	4b17      	ldr	r3, [pc, #92]	@ (8003b0c <HAL_UART_MspInit+0x270>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003ab4:	4b15      	ldr	r3, [pc, #84]	@ (8003b0c <HAL_UART_MspInit+0x270>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003aba:	4b14      	ldr	r3, [pc, #80]	@ (8003b0c <HAL_UART_MspInit+0x270>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8003ac0:	4812      	ldr	r0, [pc, #72]	@ (8003b0c <HAL_UART_MspInit+0x270>)
 8003ac2:	f000 fcab 	bl	800441c <HAL_DMA_Init>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <HAL_UART_MspInit+0x234>
      Error_Handler();
 8003acc:	f7ff fc00 	bl	80032d0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a0e      	ldr	r2, [pc, #56]	@ (8003b0c <HAL_UART_MspInit+0x270>)
 8003ad4:	675a      	str	r2, [r3, #116]	@ 0x74
 8003ad6:	4a0d      	ldr	r2, [pc, #52]	@ (8003b0c <HAL_UART_MspInit+0x270>)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003adc:	2200      	movs	r2, #0
 8003ade:	2100      	movs	r1, #0
 8003ae0:	2035      	movs	r0, #53	@ 0x35
 8003ae2:	f000 fc64 	bl	80043ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003ae6:	2035      	movs	r0, #53	@ 0x35
 8003ae8:	f000 fc7d 	bl	80043e6 <HAL_NVIC_EnableIRQ>
}
 8003aec:	e146      	b.n	8003d7c <HAL_UART_MspInit+0x4e0>
 8003aee:	bf00      	nop
 8003af0:	40004c00 	.word	0x40004c00
 8003af4:	40023800 	.word	0x40023800
 8003af8:	40020800 	.word	0x40020800
 8003afc:	200006e4 	.word	0x200006e4
 8003b00:	40026040 	.word	0x40026040
 8003b04:	40005000 	.word	0x40005000
 8003b08:	40020c00 	.word	0x40020c00
 8003b0c:	20000744 	.word	0x20000744
 8003b10:	40026010 	.word	0x40026010
  else if(huart->Instance==USART2)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a9a      	ldr	r2, [pc, #616]	@ (8003d84 <HAL_UART_MspInit+0x4e8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d172      	bne.n	8003c04 <HAL_UART_MspInit+0x368>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003b1e:	2380      	movs	r3, #128	@ 0x80
 8003b20:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003b22:	2300      	movs	r3, #0
 8003b24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b28:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f002 fd3f 	bl	80065b0 <HAL_RCCEx_PeriphCLKConfig>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <HAL_UART_MspInit+0x2a0>
      Error_Handler();
 8003b38:	f7ff fbca 	bl	80032d0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b3c:	4b92      	ldr	r3, [pc, #584]	@ (8003d88 <HAL_UART_MspInit+0x4ec>)
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b40:	4a91      	ldr	r2, [pc, #580]	@ (8003d88 <HAL_UART_MspInit+0x4ec>)
 8003b42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b46:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b48:	4b8f      	ldr	r3, [pc, #572]	@ (8003d88 <HAL_UART_MspInit+0x4ec>)
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b50:	623b      	str	r3, [r7, #32]
 8003b52:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b54:	4b8c      	ldr	r3, [pc, #560]	@ (8003d88 <HAL_UART_MspInit+0x4ec>)
 8003b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b58:	4a8b      	ldr	r2, [pc, #556]	@ (8003d88 <HAL_UART_MspInit+0x4ec>)
 8003b5a:	f043 0308 	orr.w	r3, r3, #8
 8003b5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b60:	4b89      	ldr	r3, [pc, #548]	@ (8003d88 <HAL_UART_MspInit+0x4ec>)
 8003b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	61fb      	str	r3, [r7, #28]
 8003b6a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003b6c:	2360      	movs	r3, #96	@ 0x60
 8003b6e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b72:	2302      	movs	r3, #2
 8003b74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b84:	2307      	movs	r3, #7
 8003b86:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b8a:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8003b8e:	4619      	mov	r1, r3
 8003b90:	487e      	ldr	r0, [pc, #504]	@ (8003d8c <HAL_UART_MspInit+0x4f0>)
 8003b92:	f001 f84d 	bl	8004c30 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003b96:	4b7e      	ldr	r3, [pc, #504]	@ (8003d90 <HAL_UART_MspInit+0x4f4>)
 8003b98:	4a7e      	ldr	r2, [pc, #504]	@ (8003d94 <HAL_UART_MspInit+0x4f8>)
 8003b9a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003b9c:	4b7c      	ldr	r3, [pc, #496]	@ (8003d90 <HAL_UART_MspInit+0x4f4>)
 8003b9e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003ba2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ba4:	4b7a      	ldr	r3, [pc, #488]	@ (8003d90 <HAL_UART_MspInit+0x4f4>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003baa:	4b79      	ldr	r3, [pc, #484]	@ (8003d90 <HAL_UART_MspInit+0x4f4>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003bb0:	4b77      	ldr	r3, [pc, #476]	@ (8003d90 <HAL_UART_MspInit+0x4f4>)
 8003bb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003bb6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bb8:	4b75      	ldr	r3, [pc, #468]	@ (8003d90 <HAL_UART_MspInit+0x4f4>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bbe:	4b74      	ldr	r3, [pc, #464]	@ (8003d90 <HAL_UART_MspInit+0x4f4>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003bc4:	4b72      	ldr	r3, [pc, #456]	@ (8003d90 <HAL_UART_MspInit+0x4f4>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003bca:	4b71      	ldr	r3, [pc, #452]	@ (8003d90 <HAL_UART_MspInit+0x4f4>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bd0:	4b6f      	ldr	r3, [pc, #444]	@ (8003d90 <HAL_UART_MspInit+0x4f4>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003bd6:	486e      	ldr	r0, [pc, #440]	@ (8003d90 <HAL_UART_MspInit+0x4f4>)
 8003bd8:	f000 fc20 	bl	800441c <HAL_DMA_Init>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <HAL_UART_MspInit+0x34a>
      Error_Handler();
 8003be2:	f7ff fb75 	bl	80032d0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a69      	ldr	r2, [pc, #420]	@ (8003d90 <HAL_UART_MspInit+0x4f4>)
 8003bea:	675a      	str	r2, [r3, #116]	@ 0x74
 8003bec:	4a68      	ldr	r2, [pc, #416]	@ (8003d90 <HAL_UART_MspInit+0x4f4>)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	2026      	movs	r0, #38	@ 0x26
 8003bf8:	f000 fbd9 	bl	80043ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003bfc:	2026      	movs	r0, #38	@ 0x26
 8003bfe:	f000 fbf2 	bl	80043e6 <HAL_NVIC_EnableIRQ>
}
 8003c02:	e0bb      	b.n	8003d7c <HAL_UART_MspInit+0x4e0>
  else if(huart->Instance==USART3)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a63      	ldr	r2, [pc, #396]	@ (8003d98 <HAL_UART_MspInit+0x4fc>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d13e      	bne.n	8003c8c <HAL_UART_MspInit+0x3f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003c0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c12:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003c14:	2300      	movs	r3, #0
 8003c16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c1a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f002 fcc6 	bl	80065b0 <HAL_RCCEx_PeriphCLKConfig>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <HAL_UART_MspInit+0x392>
      Error_Handler();
 8003c2a:	f7ff fb51 	bl	80032d0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003c2e:	4b56      	ldr	r3, [pc, #344]	@ (8003d88 <HAL_UART_MspInit+0x4ec>)
 8003c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c32:	4a55      	ldr	r2, [pc, #340]	@ (8003d88 <HAL_UART_MspInit+0x4ec>)
 8003c34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c38:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c3a:	4b53      	ldr	r3, [pc, #332]	@ (8003d88 <HAL_UART_MspInit+0x4ec>)
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c42:	61bb      	str	r3, [r7, #24]
 8003c44:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c46:	4b50      	ldr	r3, [pc, #320]	@ (8003d88 <HAL_UART_MspInit+0x4ec>)
 8003c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4a:	4a4f      	ldr	r2, [pc, #316]	@ (8003d88 <HAL_UART_MspInit+0x4ec>)
 8003c4c:	f043 0308 	orr.w	r3, r3, #8
 8003c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c52:	4b4d      	ldr	r3, [pc, #308]	@ (8003d88 <HAL_UART_MspInit+0x4ec>)
 8003c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	617b      	str	r3, [r7, #20]
 8003c5c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003c5e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003c62:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c66:	2302      	movs	r3, #2
 8003c68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c72:	2303      	movs	r3, #3
 8003c74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c78:	2307      	movs	r3, #7
 8003c7a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c7e:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8003c82:	4619      	mov	r1, r3
 8003c84:	4841      	ldr	r0, [pc, #260]	@ (8003d8c <HAL_UART_MspInit+0x4f0>)
 8003c86:	f000 ffd3 	bl	8004c30 <HAL_GPIO_Init>
}
 8003c8a:	e077      	b.n	8003d7c <HAL_UART_MspInit+0x4e0>
  else if(huart->Instance==USART6)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a42      	ldr	r2, [pc, #264]	@ (8003d9c <HAL_UART_MspInit+0x500>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d172      	bne.n	8003d7c <HAL_UART_MspInit+0x4e0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003c96:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ca2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f002 fc82 	bl	80065b0 <HAL_RCCEx_PeriphCLKConfig>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_UART_MspInit+0x41a>
      Error_Handler();
 8003cb2:	f7ff fb0d 	bl	80032d0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003cb6:	4b34      	ldr	r3, [pc, #208]	@ (8003d88 <HAL_UART_MspInit+0x4ec>)
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cba:	4a33      	ldr	r2, [pc, #204]	@ (8003d88 <HAL_UART_MspInit+0x4ec>)
 8003cbc:	f043 0320 	orr.w	r3, r3, #32
 8003cc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cc2:	4b31      	ldr	r3, [pc, #196]	@ (8003d88 <HAL_UART_MspInit+0x4ec>)
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc6:	f003 0320 	and.w	r3, r3, #32
 8003cca:	613b      	str	r3, [r7, #16]
 8003ccc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cce:	4b2e      	ldr	r3, [pc, #184]	@ (8003d88 <HAL_UART_MspInit+0x4ec>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd2:	4a2d      	ldr	r2, [pc, #180]	@ (8003d88 <HAL_UART_MspInit+0x4ec>)
 8003cd4:	f043 0304 	orr.w	r3, r3, #4
 8003cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cda:	4b2b      	ldr	r3, [pc, #172]	@ (8003d88 <HAL_UART_MspInit+0x4ec>)
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cde:	f003 0304 	and.w	r3, r3, #4
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ce6:	23c0      	movs	r3, #192	@ 0xc0
 8003ce8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cec:	2302      	movs	r3, #2
 8003cee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003cfe:	2308      	movs	r3, #8
 8003d00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d04:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4825      	ldr	r0, [pc, #148]	@ (8003da0 <HAL_UART_MspInit+0x504>)
 8003d0c:	f000 ff90 	bl	8004c30 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003d10:	4b24      	ldr	r3, [pc, #144]	@ (8003da4 <HAL_UART_MspInit+0x508>)
 8003d12:	4a25      	ldr	r2, [pc, #148]	@ (8003da8 <HAL_UART_MspInit+0x50c>)
 8003d14:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003d16:	4b23      	ldr	r3, [pc, #140]	@ (8003da4 <HAL_UART_MspInit+0x508>)
 8003d18:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003d1c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d1e:	4b21      	ldr	r3, [pc, #132]	@ (8003da4 <HAL_UART_MspInit+0x508>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d24:	4b1f      	ldr	r3, [pc, #124]	@ (8003da4 <HAL_UART_MspInit+0x508>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8003da4 <HAL_UART_MspInit+0x508>)
 8003d2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d30:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d32:	4b1c      	ldr	r3, [pc, #112]	@ (8003da4 <HAL_UART_MspInit+0x508>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d38:	4b1a      	ldr	r3, [pc, #104]	@ (8003da4 <HAL_UART_MspInit+0x508>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003d3e:	4b19      	ldr	r3, [pc, #100]	@ (8003da4 <HAL_UART_MspInit+0x508>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d44:	4b17      	ldr	r3, [pc, #92]	@ (8003da4 <HAL_UART_MspInit+0x508>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d4a:	4b16      	ldr	r3, [pc, #88]	@ (8003da4 <HAL_UART_MspInit+0x508>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003d50:	4814      	ldr	r0, [pc, #80]	@ (8003da4 <HAL_UART_MspInit+0x508>)
 8003d52:	f000 fb63 	bl	800441c <HAL_DMA_Init>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <HAL_UART_MspInit+0x4c4>
      Error_Handler();
 8003d5c:	f7ff fab8 	bl	80032d0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a10      	ldr	r2, [pc, #64]	@ (8003da4 <HAL_UART_MspInit+0x508>)
 8003d64:	675a      	str	r2, [r3, #116]	@ 0x74
 8003d66:	4a0f      	ldr	r2, [pc, #60]	@ (8003da4 <HAL_UART_MspInit+0x508>)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	2100      	movs	r1, #0
 8003d70:	2047      	movs	r0, #71	@ 0x47
 8003d72:	f000 fb1c 	bl	80043ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003d76:	2047      	movs	r0, #71	@ 0x47
 8003d78:	f000 fb35 	bl	80043e6 <HAL_NVIC_EnableIRQ>
}
 8003d7c:	bf00      	nop
 8003d7e:	37d0      	adds	r7, #208	@ 0xd0
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40004400 	.word	0x40004400
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	40020c00 	.word	0x40020c00
 8003d90:	200007a4 	.word	0x200007a4
 8003d94:	40026088 	.word	0x40026088
 8003d98:	40004800 	.word	0x40004800
 8003d9c:	40011400 	.word	0x40011400
 8003da0:	40020800 	.word	0x40020800
 8003da4:	20000804 	.word	0x20000804
 8003da8:	40026428 	.word	0x40026428

08003dac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b0ac      	sub	sp, #176	@ 0xb0
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	609a      	str	r2, [r3, #8]
 8003dc0:	60da      	str	r2, [r3, #12]
 8003dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003dc4:	f107 0318 	add.w	r3, r7, #24
 8003dc8:	2284      	movs	r2, #132	@ 0x84
 8003dca:	2100      	movs	r1, #0
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f007 fe61 	bl	800ba94 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dda:	d159      	bne.n	8003e90 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003ddc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003de0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003de2:	2300      	movs	r3, #0
 8003de4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003de8:	f107 0318 	add.w	r3, r7, #24
 8003dec:	4618      	mov	r0, r3
 8003dee:	f002 fbdf 	bl	80065b0 <HAL_RCCEx_PeriphCLKConfig>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8003df8:	f7ff fa6a 	bl	80032d0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dfc:	4b26      	ldr	r3, [pc, #152]	@ (8003e98 <HAL_PCD_MspInit+0xec>)
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e00:	4a25      	ldr	r2, [pc, #148]	@ (8003e98 <HAL_PCD_MspInit+0xec>)
 8003e02:	f043 0301 	orr.w	r3, r3, #1
 8003e06:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e08:	4b23      	ldr	r3, [pc, #140]	@ (8003e98 <HAL_PCD_MspInit+0xec>)
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003e14:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8003e18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e22:	2300      	movs	r3, #0
 8003e24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003e2e:	230a      	movs	r3, #10
 8003e30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e34:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4818      	ldr	r0, [pc, #96]	@ (8003e9c <HAL_PCD_MspInit+0xf0>)
 8003e3c:	f000 fef8 	bl	8004c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003e40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003e54:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4810      	ldr	r0, [pc, #64]	@ (8003e9c <HAL_PCD_MspInit+0xf0>)
 8003e5c:	f000 fee8 	bl	8004c30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003e60:	4b0d      	ldr	r3, [pc, #52]	@ (8003e98 <HAL_PCD_MspInit+0xec>)
 8003e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e64:	4a0c      	ldr	r2, [pc, #48]	@ (8003e98 <HAL_PCD_MspInit+0xec>)
 8003e66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e6a:	6353      	str	r3, [r2, #52]	@ 0x34
 8003e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e98 <HAL_PCD_MspInit+0xec>)
 8003e6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e74:	613b      	str	r3, [r7, #16]
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	4b07      	ldr	r3, [pc, #28]	@ (8003e98 <HAL_PCD_MspInit+0xec>)
 8003e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e7c:	4a06      	ldr	r2, [pc, #24]	@ (8003e98 <HAL_PCD_MspInit+0xec>)
 8003e7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e82:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e84:	4b04      	ldr	r3, [pc, #16]	@ (8003e98 <HAL_PCD_MspInit+0xec>)
 8003e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8003e90:	bf00      	nop
 8003e92:	37b0      	adds	r7, #176	@ 0xb0
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	40020000 	.word	0x40020000

08003ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003ea4:	bf00      	nop
 8003ea6:	e7fd      	b.n	8003ea4 <NMI_Handler+0x4>

08003ea8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003eac:	bf00      	nop
 8003eae:	e7fd      	b.n	8003eac <HardFault_Handler+0x4>

08003eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003eb4:	bf00      	nop
 8003eb6:	e7fd      	b.n	8003eb4 <MemManage_Handler+0x4>

08003eb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ebc:	bf00      	nop
 8003ebe:	e7fd      	b.n	8003ebc <BusFault_Handler+0x4>

08003ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ec4:	bf00      	nop
 8003ec6:	e7fd      	b.n	8003ec4 <UsageFault_Handler+0x4>

08003ec8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ecc:	bf00      	nop
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003eda:	bf00      	nop
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ee8:	bf00      	nop
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ef6:	f000 f93b 	bl	8004170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003efa:	bf00      	nop
 8003efc:	bd80      	pop	{r7, pc}
	...

08003f00 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8003f04:	4802      	ldr	r0, [pc, #8]	@ (8003f10 <DMA1_Stream0_IRQHandler+0x10>)
 8003f06:	f000 fc29 	bl	800475c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003f0a:	bf00      	nop
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	20000744 	.word	0x20000744

08003f14 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003f18:	4802      	ldr	r0, [pc, #8]	@ (8003f24 <DMA1_Stream2_IRQHandler+0x10>)
 8003f1a:	f000 fc1f 	bl	800475c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003f1e:	bf00      	nop
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	200006e4 	.word	0x200006e4

08003f28 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003f2c:	4802      	ldr	r0, [pc, #8]	@ (8003f38 <DMA1_Stream5_IRQHandler+0x10>)
 8003f2e:	f000 fc15 	bl	800475c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003f32:	bf00      	nop
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	200007a4 	.word	0x200007a4

08003f3c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f40:	4802      	ldr	r0, [pc, #8]	@ (8003f4c <TIM1_CC_IRQHandler+0x10>)
 8003f42:	f004 fa79 	bl	8008438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003f46:	bf00      	nop
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	200001dc 	.word	0x200001dc

08003f50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f54:	4802      	ldr	r0, [pc, #8]	@ (8003f60 <TIM2_IRQHandler+0x10>)
 8003f56:	f004 fa6f 	bl	8008438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f5a:	bf00      	nop
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	20000228 	.word	0x20000228

08003f64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003f68:	4802      	ldr	r0, [pc, #8]	@ (8003f74 <TIM3_IRQHandler+0x10>)
 8003f6a:	f004 fa65 	bl	8008438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003f6e:	bf00      	nop
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000274 	.word	0x20000274

08003f78 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003f7c:	4802      	ldr	r0, [pc, #8]	@ (8003f88 <TIM4_IRQHandler+0x10>)
 8003f7e:	f004 fa5b 	bl	8008438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003f82:	bf00      	nop
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	200002c0 	.word	0x200002c0

08003f8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003f90:	4802      	ldr	r0, [pc, #8]	@ (8003f9c <USART2_IRQHandler+0x10>)
 8003f92:	f005 fb6f 	bl	8009674 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003f96:	bf00      	nop
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	2000054c 	.word	0x2000054c

08003fa0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8003fa4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003fa8:	f001 f820 	bl	8004fec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003fac:	bf00      	nop
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003fb4:	4802      	ldr	r0, [pc, #8]	@ (8003fc0 <TIM5_IRQHandler+0x10>)
 8003fb6:	f004 fa3f 	bl	8008438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003fba:	bf00      	nop
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	2000030c 	.word	0x2000030c

08003fc4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003fc8:	4802      	ldr	r0, [pc, #8]	@ (8003fd4 <UART4_IRQHandler+0x10>)
 8003fca:	f005 fb53 	bl	8009674 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003fce:	bf00      	nop
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	2000043c 	.word	0x2000043c

08003fd8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003fdc:	4802      	ldr	r0, [pc, #8]	@ (8003fe8 <UART5_IRQHandler+0x10>)
 8003fde:	f005 fb49 	bl	8009674 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003fe2:	bf00      	nop
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	200004c4 	.word	0x200004c4

08003fec <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003ff0:	4802      	ldr	r0, [pc, #8]	@ (8003ffc <DMA2_Stream1_IRQHandler+0x10>)
 8003ff2:	f000 fbb3 	bl	800475c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003ff6:	bf00      	nop
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	20000804 	.word	0x20000804

08004000 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004004:	4802      	ldr	r0, [pc, #8]	@ (8004010 <USART6_IRQHandler+0x10>)
 8004006:	f005 fb35 	bl	8009674 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800400a:	bf00      	nop
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	2000065c 	.word	0x2000065c

08004014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800401c:	4a14      	ldr	r2, [pc, #80]	@ (8004070 <_sbrk+0x5c>)
 800401e:	4b15      	ldr	r3, [pc, #84]	@ (8004074 <_sbrk+0x60>)
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004028:	4b13      	ldr	r3, [pc, #76]	@ (8004078 <_sbrk+0x64>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d102      	bne.n	8004036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004030:	4b11      	ldr	r3, [pc, #68]	@ (8004078 <_sbrk+0x64>)
 8004032:	4a12      	ldr	r2, [pc, #72]	@ (800407c <_sbrk+0x68>)
 8004034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004036:	4b10      	ldr	r3, [pc, #64]	@ (8004078 <_sbrk+0x64>)
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4413      	add	r3, r2
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	429a      	cmp	r2, r3
 8004042:	d207      	bcs.n	8004054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004044:	f007 fd2e 	bl	800baa4 <__errno>
 8004048:	4603      	mov	r3, r0
 800404a:	220c      	movs	r2, #12
 800404c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800404e:	f04f 33ff 	mov.w	r3, #4294967295
 8004052:	e009      	b.n	8004068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004054:	4b08      	ldr	r3, [pc, #32]	@ (8004078 <_sbrk+0x64>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800405a:	4b07      	ldr	r3, [pc, #28]	@ (8004078 <_sbrk+0x64>)
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4413      	add	r3, r2
 8004062:	4a05      	ldr	r2, [pc, #20]	@ (8004078 <_sbrk+0x64>)
 8004064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004066:	68fb      	ldr	r3, [r7, #12]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	20050000 	.word	0x20050000
 8004074:	00000400 	.word	0x00000400
 8004078:	20000f80 	.word	0x20000f80
 800407c:	200010f8 	.word	0x200010f8

08004080 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004084:	4b06      	ldr	r3, [pc, #24]	@ (80040a0 <SystemInit+0x20>)
 8004086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800408a:	4a05      	ldr	r2, [pc, #20]	@ (80040a0 <SystemInit+0x20>)
 800408c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004090:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004094:	bf00      	nop
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	e000ed00 	.word	0xe000ed00

080040a4 <Reset_Handler>:
 80040a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80040dc <LoopFillZerobss+0xe>
 80040a8:	f7ff ffea 	bl	8004080 <SystemInit>
 80040ac:	480c      	ldr	r0, [pc, #48]	@ (80040e0 <LoopFillZerobss+0x12>)
 80040ae:	490d      	ldr	r1, [pc, #52]	@ (80040e4 <LoopFillZerobss+0x16>)
 80040b0:	4a0d      	ldr	r2, [pc, #52]	@ (80040e8 <LoopFillZerobss+0x1a>)
 80040b2:	2300      	movs	r3, #0
 80040b4:	e002      	b.n	80040bc <LoopCopyDataInit>

080040b6 <CopyDataInit>:
 80040b6:	58d4      	ldr	r4, [r2, r3]
 80040b8:	50c4      	str	r4, [r0, r3]
 80040ba:	3304      	adds	r3, #4

080040bc <LoopCopyDataInit>:
 80040bc:	18c4      	adds	r4, r0, r3
 80040be:	428c      	cmp	r4, r1
 80040c0:	d3f9      	bcc.n	80040b6 <CopyDataInit>
 80040c2:	4a0a      	ldr	r2, [pc, #40]	@ (80040ec <LoopFillZerobss+0x1e>)
 80040c4:	4c0a      	ldr	r4, [pc, #40]	@ (80040f0 <LoopFillZerobss+0x22>)
 80040c6:	2300      	movs	r3, #0
 80040c8:	e001      	b.n	80040ce <LoopFillZerobss>

080040ca <FillZerobss>:
 80040ca:	6013      	str	r3, [r2, #0]
 80040cc:	3204      	adds	r2, #4

080040ce <LoopFillZerobss>:
 80040ce:	42a2      	cmp	r2, r4
 80040d0:	d3fb      	bcc.n	80040ca <FillZerobss>
 80040d2:	f007 fced 	bl	800bab0 <__libc_init_array>
 80040d6:	f7fe f97f 	bl	80023d8 <main>
 80040da:	4770      	bx	lr
 80040dc:	20050000 	.word	0x20050000
 80040e0:	20000000 	.word	0x20000000
 80040e4:	200000c0 	.word	0x200000c0
 80040e8:	0800cb4c 	.word	0x0800cb4c
 80040ec:	200000c0 	.word	0x200000c0
 80040f0:	200010f4 	.word	0x200010f4

080040f4 <ADC_IRQHandler>:
 80040f4:	e7fe      	b.n	80040f4 <ADC_IRQHandler>

080040f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040fa:	2003      	movs	r0, #3
 80040fc:	f000 f94c 	bl	8004398 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004100:	2000      	movs	r0, #0
 8004102:	f000 f805 	bl	8004110 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004106:	f7ff f8e9 	bl	80032dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004118:	4b12      	ldr	r3, [pc, #72]	@ (8004164 <HAL_InitTick+0x54>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	4b12      	ldr	r3, [pc, #72]	@ (8004168 <HAL_InitTick+0x58>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	4619      	mov	r1, r3
 8004122:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004126:	fbb3 f3f1 	udiv	r3, r3, r1
 800412a:	fbb2 f3f3 	udiv	r3, r2, r3
 800412e:	4618      	mov	r0, r3
 8004130:	f000 f967 	bl	8004402 <HAL_SYSTICK_Config>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e00e      	b.n	800415c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b0f      	cmp	r3, #15
 8004142:	d80a      	bhi.n	800415a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004144:	2200      	movs	r2, #0
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	f04f 30ff 	mov.w	r0, #4294967295
 800414c:	f000 f92f 	bl	80043ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004150:	4a06      	ldr	r2, [pc, #24]	@ (800416c <HAL_InitTick+0x5c>)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004156:	2300      	movs	r3, #0
 8004158:	e000      	b.n	800415c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
}
 800415c:	4618      	mov	r0, r3
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	2000004c 	.word	0x2000004c
 8004168:	20000054 	.word	0x20000054
 800416c:	20000050 	.word	0x20000050

08004170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004174:	4b06      	ldr	r3, [pc, #24]	@ (8004190 <HAL_IncTick+0x20>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	461a      	mov	r2, r3
 800417a:	4b06      	ldr	r3, [pc, #24]	@ (8004194 <HAL_IncTick+0x24>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4413      	add	r3, r2
 8004180:	4a04      	ldr	r2, [pc, #16]	@ (8004194 <HAL_IncTick+0x24>)
 8004182:	6013      	str	r3, [r2, #0]
}
 8004184:	bf00      	nop
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	20000054 	.word	0x20000054
 8004194:	20000f84 	.word	0x20000f84

08004198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  return uwTick;
 800419c:	4b03      	ldr	r3, [pc, #12]	@ (80041ac <HAL_GetTick+0x14>)
 800419e:	681b      	ldr	r3, [r3, #0]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	20000f84 	.word	0x20000f84

080041b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041b8:	f7ff ffee 	bl	8004198 <HAL_GetTick>
 80041bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c8:	d005      	beq.n	80041d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041ca:	4b0a      	ldr	r3, [pc, #40]	@ (80041f4 <HAL_Delay+0x44>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4413      	add	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041d6:	bf00      	nop
 80041d8:	f7ff ffde 	bl	8004198 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d8f7      	bhi.n	80041d8 <HAL_Delay+0x28>
  {
  }
}
 80041e8:	bf00      	nop
 80041ea:	bf00      	nop
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20000054 	.word	0x20000054

080041f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004208:	4b0b      	ldr	r3, [pc, #44]	@ (8004238 <__NVIC_SetPriorityGrouping+0x40>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004214:	4013      	ands	r3, r2
 8004216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004220:	4b06      	ldr	r3, [pc, #24]	@ (800423c <__NVIC_SetPriorityGrouping+0x44>)
 8004222:	4313      	orrs	r3, r2
 8004224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004226:	4a04      	ldr	r2, [pc, #16]	@ (8004238 <__NVIC_SetPriorityGrouping+0x40>)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	60d3      	str	r3, [r2, #12]
}
 800422c:	bf00      	nop
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	e000ed00 	.word	0xe000ed00
 800423c:	05fa0000 	.word	0x05fa0000

08004240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004244:	4b04      	ldr	r3, [pc, #16]	@ (8004258 <__NVIC_GetPriorityGrouping+0x18>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	0a1b      	lsrs	r3, r3, #8
 800424a:	f003 0307 	and.w	r3, r3, #7
}
 800424e:	4618      	mov	r0, r3
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	e000ed00 	.word	0xe000ed00

0800425c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	4603      	mov	r3, r0
 8004264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426a:	2b00      	cmp	r3, #0
 800426c:	db0b      	blt.n	8004286 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800426e:	79fb      	ldrb	r3, [r7, #7]
 8004270:	f003 021f 	and.w	r2, r3, #31
 8004274:	4907      	ldr	r1, [pc, #28]	@ (8004294 <__NVIC_EnableIRQ+0x38>)
 8004276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	2001      	movs	r0, #1
 800427e:	fa00 f202 	lsl.w	r2, r0, r2
 8004282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	e000e100 	.word	0xe000e100

08004298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	4603      	mov	r3, r0
 80042a0:	6039      	str	r1, [r7, #0]
 80042a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	db0a      	blt.n	80042c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	490c      	ldr	r1, [pc, #48]	@ (80042e4 <__NVIC_SetPriority+0x4c>)
 80042b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b6:	0112      	lsls	r2, r2, #4
 80042b8:	b2d2      	uxtb	r2, r2
 80042ba:	440b      	add	r3, r1
 80042bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042c0:	e00a      	b.n	80042d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	4908      	ldr	r1, [pc, #32]	@ (80042e8 <__NVIC_SetPriority+0x50>)
 80042c8:	79fb      	ldrb	r3, [r7, #7]
 80042ca:	f003 030f 	and.w	r3, r3, #15
 80042ce:	3b04      	subs	r3, #4
 80042d0:	0112      	lsls	r2, r2, #4
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	440b      	add	r3, r1
 80042d6:	761a      	strb	r2, [r3, #24]
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	e000e100 	.word	0xe000e100
 80042e8:	e000ed00 	.word	0xe000ed00

080042ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b089      	sub	sp, #36	@ 0x24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f003 0307 	and.w	r3, r3, #7
 80042fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	f1c3 0307 	rsb	r3, r3, #7
 8004306:	2b04      	cmp	r3, #4
 8004308:	bf28      	it	cs
 800430a:	2304      	movcs	r3, #4
 800430c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	3304      	adds	r3, #4
 8004312:	2b06      	cmp	r3, #6
 8004314:	d902      	bls.n	800431c <NVIC_EncodePriority+0x30>
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	3b03      	subs	r3, #3
 800431a:	e000      	b.n	800431e <NVIC_EncodePriority+0x32>
 800431c:	2300      	movs	r3, #0
 800431e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004320:	f04f 32ff 	mov.w	r2, #4294967295
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	fa02 f303 	lsl.w	r3, r2, r3
 800432a:	43da      	mvns	r2, r3
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	401a      	ands	r2, r3
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004334:	f04f 31ff 	mov.w	r1, #4294967295
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	fa01 f303 	lsl.w	r3, r1, r3
 800433e:	43d9      	mvns	r1, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004344:	4313      	orrs	r3, r2
         );
}
 8004346:	4618      	mov	r0, r3
 8004348:	3724      	adds	r7, #36	@ 0x24
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
	...

08004354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3b01      	subs	r3, #1
 8004360:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004364:	d301      	bcc.n	800436a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004366:	2301      	movs	r3, #1
 8004368:	e00f      	b.n	800438a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800436a:	4a0a      	ldr	r2, [pc, #40]	@ (8004394 <SysTick_Config+0x40>)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3b01      	subs	r3, #1
 8004370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004372:	210f      	movs	r1, #15
 8004374:	f04f 30ff 	mov.w	r0, #4294967295
 8004378:	f7ff ff8e 	bl	8004298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800437c:	4b05      	ldr	r3, [pc, #20]	@ (8004394 <SysTick_Config+0x40>)
 800437e:	2200      	movs	r2, #0
 8004380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004382:	4b04      	ldr	r3, [pc, #16]	@ (8004394 <SysTick_Config+0x40>)
 8004384:	2207      	movs	r2, #7
 8004386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	e000e010 	.word	0xe000e010

08004398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7ff ff29 	bl	80041f8 <__NVIC_SetPriorityGrouping>
}
 80043a6:	bf00      	nop
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b086      	sub	sp, #24
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	4603      	mov	r3, r0
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	607a      	str	r2, [r7, #4]
 80043ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80043bc:	2300      	movs	r3, #0
 80043be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043c0:	f7ff ff3e 	bl	8004240 <__NVIC_GetPriorityGrouping>
 80043c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	68b9      	ldr	r1, [r7, #8]
 80043ca:	6978      	ldr	r0, [r7, #20]
 80043cc:	f7ff ff8e 	bl	80042ec <NVIC_EncodePriority>
 80043d0:	4602      	mov	r2, r0
 80043d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043d6:	4611      	mov	r1, r2
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff ff5d 	bl	8004298 <__NVIC_SetPriority>
}
 80043de:	bf00      	nop
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b082      	sub	sp, #8
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	4603      	mov	r3, r0
 80043ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff ff31 	bl	800425c <__NVIC_EnableIRQ>
}
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b082      	sub	sp, #8
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7ff ffa2 	bl	8004354 <SysTick_Config>
 8004410:	4603      	mov	r3, r0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004428:	f7ff feb6 	bl	8004198 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e099      	b.n	800456c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0201 	bic.w	r2, r2, #1
 8004456:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004458:	e00f      	b.n	800447a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800445a:	f7ff fe9d 	bl	8004198 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b05      	cmp	r3, #5
 8004466:	d908      	bls.n	800447a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2220      	movs	r2, #32
 800446c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2203      	movs	r2, #3
 8004472:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e078      	b.n	800456c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1e8      	bne.n	800445a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	4b38      	ldr	r3, [pc, #224]	@ (8004574 <HAL_DMA_Init+0x158>)
 8004494:	4013      	ands	r3, r2
 8004496:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d107      	bne.n	80044e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044dc:	4313      	orrs	r3, r2
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f023 0307 	bic.w	r3, r3, #7
 80044fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	4313      	orrs	r3, r2
 8004504:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450a:	2b04      	cmp	r3, #4
 800450c:	d117      	bne.n	800453e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	4313      	orrs	r3, r2
 8004516:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00e      	beq.n	800453e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 fb09 	bl	8004b38 <DMA_CheckFifoParam>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d008      	beq.n	800453e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2240      	movs	r2, #64	@ 0x40
 8004530:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800453a:	2301      	movs	r3, #1
 800453c:	e016      	b.n	800456c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fac0 	bl	8004acc <DMA_CalcBaseAndBitshift>
 800454c:	4603      	mov	r3, r0
 800454e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004554:	223f      	movs	r2, #63	@ 0x3f
 8004556:	409a      	lsls	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	f010803f 	.word	0xf010803f

08004578 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800458e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004596:	2b01      	cmp	r3, #1
 8004598:	d101      	bne.n	800459e <HAL_DMA_Start_IT+0x26>
 800459a:	2302      	movs	r3, #2
 800459c:	e048      	b.n	8004630 <HAL_DMA_Start_IT+0xb8>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d137      	bne.n	8004622 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2202      	movs	r2, #2
 80045b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	68b9      	ldr	r1, [r7, #8]
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 fa52 	bl	8004a70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d0:	223f      	movs	r2, #63	@ 0x3f
 80045d2:	409a      	lsls	r2, r3
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0216 	orr.w	r2, r2, #22
 80045e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695a      	ldr	r2, [r3, #20]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80045f6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d007      	beq.n	8004610 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0208 	orr.w	r2, r2, #8
 800460e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0201 	orr.w	r2, r2, #1
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	e005      	b.n	800462e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800462a:	2302      	movs	r3, #2
 800462c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800462e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3718      	adds	r7, #24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004644:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004646:	f7ff fda7 	bl	8004198 <HAL_GetTick>
 800464a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d008      	beq.n	800466a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2280      	movs	r2, #128	@ 0x80
 800465c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e052      	b.n	8004710 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0216 	bic.w	r2, r2, #22
 8004678:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695a      	ldr	r2, [r3, #20]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004688:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468e:	2b00      	cmp	r3, #0
 8004690:	d103      	bne.n	800469a <HAL_DMA_Abort+0x62>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004696:	2b00      	cmp	r3, #0
 8004698:	d007      	beq.n	80046aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0208 	bic.w	r2, r2, #8
 80046a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0201 	bic.w	r2, r2, #1
 80046b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046ba:	e013      	b.n	80046e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046bc:	f7ff fd6c 	bl	8004198 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b05      	cmp	r3, #5
 80046c8:	d90c      	bls.n	80046e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2220      	movs	r2, #32
 80046ce:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2203      	movs	r2, #3
 80046d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e015      	b.n	8004710 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1e4      	bne.n	80046bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046f6:	223f      	movs	r2, #63	@ 0x3f
 80046f8:	409a      	lsls	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d004      	beq.n	8004736 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2280      	movs	r2, #128	@ 0x80
 8004730:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e00c      	b.n	8004750 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2205      	movs	r2, #5
 800473a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0201 	bic.w	r2, r2, #1
 800474c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004764:	2300      	movs	r3, #0
 8004766:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004768:	4b8e      	ldr	r3, [pc, #568]	@ (80049a4 <HAL_DMA_IRQHandler+0x248>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a8e      	ldr	r2, [pc, #568]	@ (80049a8 <HAL_DMA_IRQHandler+0x24c>)
 800476e:	fba2 2303 	umull	r2, r3, r2, r3
 8004772:	0a9b      	lsrs	r3, r3, #10
 8004774:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800477a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004786:	2208      	movs	r2, #8
 8004788:	409a      	lsls	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	4013      	ands	r3, r2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d01a      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b00      	cmp	r3, #0
 800479e:	d013      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 0204 	bic.w	r2, r2, #4
 80047ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047b4:	2208      	movs	r2, #8
 80047b6:	409a      	lsls	r2, r3
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c0:	f043 0201 	orr.w	r2, r3, #1
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047cc:	2201      	movs	r2, #1
 80047ce:	409a      	lsls	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4013      	ands	r3, r2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d012      	beq.n	80047fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00b      	beq.n	80047fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ea:	2201      	movs	r2, #1
 80047ec:	409a      	lsls	r2, r3
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f6:	f043 0202 	orr.w	r2, r3, #2
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004802:	2204      	movs	r2, #4
 8004804:	409a      	lsls	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4013      	ands	r3, r2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d012      	beq.n	8004834 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00b      	beq.n	8004834 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004820:	2204      	movs	r2, #4
 8004822:	409a      	lsls	r2, r3
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800482c:	f043 0204 	orr.w	r2, r3, #4
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004838:	2210      	movs	r2, #16
 800483a:	409a      	lsls	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4013      	ands	r3, r2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d043      	beq.n	80048cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0308 	and.w	r3, r3, #8
 800484e:	2b00      	cmp	r3, #0
 8004850:	d03c      	beq.n	80048cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004856:	2210      	movs	r2, #16
 8004858:	409a      	lsls	r2, r3
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d018      	beq.n	800489e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d108      	bne.n	800488c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487e:	2b00      	cmp	r3, #0
 8004880:	d024      	beq.n	80048cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	4798      	blx	r3
 800488a:	e01f      	b.n	80048cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004890:	2b00      	cmp	r3, #0
 8004892:	d01b      	beq.n	80048cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	4798      	blx	r3
 800489c:	e016      	b.n	80048cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d107      	bne.n	80048bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 0208 	bic.w	r2, r2, #8
 80048ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048d0:	2220      	movs	r2, #32
 80048d2:	409a      	lsls	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4013      	ands	r3, r2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 808f 	beq.w	80049fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0310 	and.w	r3, r3, #16
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 8087 	beq.w	80049fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048f2:	2220      	movs	r2, #32
 80048f4:	409a      	lsls	r2, r3
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b05      	cmp	r3, #5
 8004904:	d136      	bne.n	8004974 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 0216 	bic.w	r2, r2, #22
 8004914:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	695a      	ldr	r2, [r3, #20]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004924:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492a:	2b00      	cmp	r3, #0
 800492c:	d103      	bne.n	8004936 <HAL_DMA_IRQHandler+0x1da>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004932:	2b00      	cmp	r3, #0
 8004934:	d007      	beq.n	8004946 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0208 	bic.w	r2, r2, #8
 8004944:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800494a:	223f      	movs	r2, #63	@ 0x3f
 800494c:	409a      	lsls	r2, r3
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004966:	2b00      	cmp	r3, #0
 8004968:	d07e      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	4798      	blx	r3
        }
        return;
 8004972:	e079      	b.n	8004a68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d01d      	beq.n	80049be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10d      	bne.n	80049ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004994:	2b00      	cmp	r3, #0
 8004996:	d031      	beq.n	80049fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	4798      	blx	r3
 80049a0:	e02c      	b.n	80049fc <HAL_DMA_IRQHandler+0x2a0>
 80049a2:	bf00      	nop
 80049a4:	2000004c 	.word	0x2000004c
 80049a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d023      	beq.n	80049fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	4798      	blx	r3
 80049bc:	e01e      	b.n	80049fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10f      	bne.n	80049ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0210 	bic.w	r2, r2, #16
 80049da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d003      	beq.n	80049fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d032      	beq.n	8004a6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d022      	beq.n	8004a56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2205      	movs	r2, #5
 8004a14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 0201 	bic.w	r2, r2, #1
 8004a26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	60bb      	str	r3, [r7, #8]
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d307      	bcc.n	8004a44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1f2      	bne.n	8004a28 <HAL_DMA_IRQHandler+0x2cc>
 8004a42:	e000      	b.n	8004a46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004a44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d005      	beq.n	8004a6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	4798      	blx	r3
 8004a66:	e000      	b.n	8004a6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004a68:	bf00      	nop
    }
  }
}
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
 8004a7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004a8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	2b40      	cmp	r3, #64	@ 0x40
 8004a9c:	d108      	bne.n	8004ab0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004aae:	e007      	b.n	8004ac0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	60da      	str	r2, [r3, #12]
}
 8004ac0:	bf00      	nop
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	3b10      	subs	r3, #16
 8004adc:	4a13      	ldr	r2, [pc, #76]	@ (8004b2c <DMA_CalcBaseAndBitshift+0x60>)
 8004ade:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae2:	091b      	lsrs	r3, r3, #4
 8004ae4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004ae6:	4a12      	ldr	r2, [pc, #72]	@ (8004b30 <DMA_CalcBaseAndBitshift+0x64>)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4413      	add	r3, r2
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	461a      	mov	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2b03      	cmp	r3, #3
 8004af8:	d908      	bls.n	8004b0c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	4b0c      	ldr	r3, [pc, #48]	@ (8004b34 <DMA_CalcBaseAndBitshift+0x68>)
 8004b02:	4013      	ands	r3, r2
 8004b04:	1d1a      	adds	r2, r3, #4
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	659a      	str	r2, [r3, #88]	@ 0x58
 8004b0a:	e006      	b.n	8004b1a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	461a      	mov	r2, r3
 8004b12:	4b08      	ldr	r3, [pc, #32]	@ (8004b34 <DMA_CalcBaseAndBitshift+0x68>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	aaaaaaab 	.word	0xaaaaaaab
 8004b30:	0800cb00 	.word	0x0800cb00
 8004b34:	fffffc00 	.word	0xfffffc00

08004b38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b40:	2300      	movs	r3, #0
 8004b42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d11f      	bne.n	8004b92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2b03      	cmp	r3, #3
 8004b56:	d856      	bhi.n	8004c06 <DMA_CheckFifoParam+0xce>
 8004b58:	a201      	add	r2, pc, #4	@ (adr r2, 8004b60 <DMA_CheckFifoParam+0x28>)
 8004b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5e:	bf00      	nop
 8004b60:	08004b71 	.word	0x08004b71
 8004b64:	08004b83 	.word	0x08004b83
 8004b68:	08004b71 	.word	0x08004b71
 8004b6c:	08004c07 	.word	0x08004c07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d046      	beq.n	8004c0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b80:	e043      	b.n	8004c0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b86:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004b8a:	d140      	bne.n	8004c0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b90:	e03d      	b.n	8004c0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b9a:	d121      	bne.n	8004be0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2b03      	cmp	r3, #3
 8004ba0:	d837      	bhi.n	8004c12 <DMA_CheckFifoParam+0xda>
 8004ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ba8 <DMA_CheckFifoParam+0x70>)
 8004ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba8:	08004bb9 	.word	0x08004bb9
 8004bac:	08004bbf 	.word	0x08004bbf
 8004bb0:	08004bb9 	.word	0x08004bb9
 8004bb4:	08004bd1 	.word	0x08004bd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	73fb      	strb	r3, [r7, #15]
      break;
 8004bbc:	e030      	b.n	8004c20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d025      	beq.n	8004c16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bce:	e022      	b.n	8004c16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004bd8:	d11f      	bne.n	8004c1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004bde:	e01c      	b.n	8004c1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d903      	bls.n	8004bee <DMA_CheckFifoParam+0xb6>
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	2b03      	cmp	r3, #3
 8004bea:	d003      	beq.n	8004bf4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004bec:	e018      	b.n	8004c20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	73fb      	strb	r3, [r7, #15]
      break;
 8004bf2:	e015      	b.n	8004c20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00e      	beq.n	8004c1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	73fb      	strb	r3, [r7, #15]
      break;
 8004c04:	e00b      	b.n	8004c1e <DMA_CheckFifoParam+0xe6>
      break;
 8004c06:	bf00      	nop
 8004c08:	e00a      	b.n	8004c20 <DMA_CheckFifoParam+0xe8>
      break;
 8004c0a:	bf00      	nop
 8004c0c:	e008      	b.n	8004c20 <DMA_CheckFifoParam+0xe8>
      break;
 8004c0e:	bf00      	nop
 8004c10:	e006      	b.n	8004c20 <DMA_CheckFifoParam+0xe8>
      break;
 8004c12:	bf00      	nop
 8004c14:	e004      	b.n	8004c20 <DMA_CheckFifoParam+0xe8>
      break;
 8004c16:	bf00      	nop
 8004c18:	e002      	b.n	8004c20 <DMA_CheckFifoParam+0xe8>
      break;   
 8004c1a:	bf00      	nop
 8004c1c:	e000      	b.n	8004c20 <DMA_CheckFifoParam+0xe8>
      break;
 8004c1e:	bf00      	nop
    }
  } 
  
  return status; 
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop

08004c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b089      	sub	sp, #36	@ 0x24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004c42:	2300      	movs	r3, #0
 8004c44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004c46:	2300      	movs	r3, #0
 8004c48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	61fb      	str	r3, [r7, #28]
 8004c4e:	e175      	b.n	8004f3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004c50:	2201      	movs	r2, #1
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	fa02 f303 	lsl.w	r3, r2, r3
 8004c58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	4013      	ands	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	f040 8164 	bne.w	8004f36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f003 0303 	and.w	r3, r3, #3
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d005      	beq.n	8004c86 <HAL_GPIO_Init+0x56>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d130      	bne.n	8004ce8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	2203      	movs	r2, #3
 8004c92:	fa02 f303 	lsl.w	r3, r2, r3
 8004c96:	43db      	mvns	r3, r3
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc4:	43db      	mvns	r3, r3
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	091b      	lsrs	r3, r3, #4
 8004cd2:	f003 0201 	and.w	r2, r3, #1
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f003 0303 	and.w	r3, r3, #3
 8004cf0:	2b03      	cmp	r3, #3
 8004cf2:	d017      	beq.n	8004d24 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	005b      	lsls	r3, r3, #1
 8004cfe:	2203      	movs	r2, #3
 8004d00:	fa02 f303 	lsl.w	r3, r2, r3
 8004d04:	43db      	mvns	r3, r3
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	005b      	lsls	r3, r3, #1
 8004d14:	fa02 f303 	lsl.w	r3, r2, r3
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f003 0303 	and.w	r3, r3, #3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d123      	bne.n	8004d78 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	08da      	lsrs	r2, r3, #3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3208      	adds	r2, #8
 8004d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	220f      	movs	r2, #15
 8004d48:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4c:	43db      	mvns	r3, r3
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	4013      	ands	r3, r2
 8004d52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	691a      	ldr	r2, [r3, #16]
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	fa02 f303 	lsl.w	r3, r2, r3
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	08da      	lsrs	r2, r3, #3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	3208      	adds	r2, #8
 8004d72:	69b9      	ldr	r1, [r7, #24]
 8004d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	2203      	movs	r2, #3
 8004d84:	fa02 f303 	lsl.w	r3, r2, r3
 8004d88:	43db      	mvns	r3, r3
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f003 0203 	and.w	r2, r3, #3
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 80be 	beq.w	8004f36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dba:	4b66      	ldr	r3, [pc, #408]	@ (8004f54 <HAL_GPIO_Init+0x324>)
 8004dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dbe:	4a65      	ldr	r2, [pc, #404]	@ (8004f54 <HAL_GPIO_Init+0x324>)
 8004dc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004dc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004dc6:	4b63      	ldr	r3, [pc, #396]	@ (8004f54 <HAL_GPIO_Init+0x324>)
 8004dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dce:	60fb      	str	r3, [r7, #12]
 8004dd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004dd2:	4a61      	ldr	r2, [pc, #388]	@ (8004f58 <HAL_GPIO_Init+0x328>)
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	089b      	lsrs	r3, r3, #2
 8004dd8:	3302      	adds	r3, #2
 8004dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	f003 0303 	and.w	r3, r3, #3
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	220f      	movs	r2, #15
 8004dea:	fa02 f303 	lsl.w	r3, r2, r3
 8004dee:	43db      	mvns	r3, r3
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	4013      	ands	r3, r2
 8004df4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a58      	ldr	r2, [pc, #352]	@ (8004f5c <HAL_GPIO_Init+0x32c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d037      	beq.n	8004e6e <HAL_GPIO_Init+0x23e>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a57      	ldr	r2, [pc, #348]	@ (8004f60 <HAL_GPIO_Init+0x330>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d031      	beq.n	8004e6a <HAL_GPIO_Init+0x23a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a56      	ldr	r2, [pc, #344]	@ (8004f64 <HAL_GPIO_Init+0x334>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d02b      	beq.n	8004e66 <HAL_GPIO_Init+0x236>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a55      	ldr	r2, [pc, #340]	@ (8004f68 <HAL_GPIO_Init+0x338>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d025      	beq.n	8004e62 <HAL_GPIO_Init+0x232>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a54      	ldr	r2, [pc, #336]	@ (8004f6c <HAL_GPIO_Init+0x33c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d01f      	beq.n	8004e5e <HAL_GPIO_Init+0x22e>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a53      	ldr	r2, [pc, #332]	@ (8004f70 <HAL_GPIO_Init+0x340>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d019      	beq.n	8004e5a <HAL_GPIO_Init+0x22a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a52      	ldr	r2, [pc, #328]	@ (8004f74 <HAL_GPIO_Init+0x344>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d013      	beq.n	8004e56 <HAL_GPIO_Init+0x226>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a51      	ldr	r2, [pc, #324]	@ (8004f78 <HAL_GPIO_Init+0x348>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00d      	beq.n	8004e52 <HAL_GPIO_Init+0x222>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a50      	ldr	r2, [pc, #320]	@ (8004f7c <HAL_GPIO_Init+0x34c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d007      	beq.n	8004e4e <HAL_GPIO_Init+0x21e>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a4f      	ldr	r2, [pc, #316]	@ (8004f80 <HAL_GPIO_Init+0x350>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d101      	bne.n	8004e4a <HAL_GPIO_Init+0x21a>
 8004e46:	2309      	movs	r3, #9
 8004e48:	e012      	b.n	8004e70 <HAL_GPIO_Init+0x240>
 8004e4a:	230a      	movs	r3, #10
 8004e4c:	e010      	b.n	8004e70 <HAL_GPIO_Init+0x240>
 8004e4e:	2308      	movs	r3, #8
 8004e50:	e00e      	b.n	8004e70 <HAL_GPIO_Init+0x240>
 8004e52:	2307      	movs	r3, #7
 8004e54:	e00c      	b.n	8004e70 <HAL_GPIO_Init+0x240>
 8004e56:	2306      	movs	r3, #6
 8004e58:	e00a      	b.n	8004e70 <HAL_GPIO_Init+0x240>
 8004e5a:	2305      	movs	r3, #5
 8004e5c:	e008      	b.n	8004e70 <HAL_GPIO_Init+0x240>
 8004e5e:	2304      	movs	r3, #4
 8004e60:	e006      	b.n	8004e70 <HAL_GPIO_Init+0x240>
 8004e62:	2303      	movs	r3, #3
 8004e64:	e004      	b.n	8004e70 <HAL_GPIO_Init+0x240>
 8004e66:	2302      	movs	r3, #2
 8004e68:	e002      	b.n	8004e70 <HAL_GPIO_Init+0x240>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e000      	b.n	8004e70 <HAL_GPIO_Init+0x240>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	69fa      	ldr	r2, [r7, #28]
 8004e72:	f002 0203 	and.w	r2, r2, #3
 8004e76:	0092      	lsls	r2, r2, #2
 8004e78:	4093      	lsls	r3, r2
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004e80:	4935      	ldr	r1, [pc, #212]	@ (8004f58 <HAL_GPIO_Init+0x328>)
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	089b      	lsrs	r3, r3, #2
 8004e86:	3302      	adds	r3, #2
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e8e:	4b3d      	ldr	r3, [pc, #244]	@ (8004f84 <HAL_GPIO_Init+0x354>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	43db      	mvns	r3, r3
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004eb2:	4a34      	ldr	r2, [pc, #208]	@ (8004f84 <HAL_GPIO_Init+0x354>)
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004eb8:	4b32      	ldr	r3, [pc, #200]	@ (8004f84 <HAL_GPIO_Init+0x354>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	43db      	mvns	r3, r3
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d003      	beq.n	8004edc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004edc:	4a29      	ldr	r2, [pc, #164]	@ (8004f84 <HAL_GPIO_Init+0x354>)
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ee2:	4b28      	ldr	r3, [pc, #160]	@ (8004f84 <HAL_GPIO_Init+0x354>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	43db      	mvns	r3, r3
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f06:	4a1f      	ldr	r2, [pc, #124]	@ (8004f84 <HAL_GPIO_Init+0x354>)
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8004f84 <HAL_GPIO_Init+0x354>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	43db      	mvns	r3, r3
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d003      	beq.n	8004f30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f30:	4a14      	ldr	r2, [pc, #80]	@ (8004f84 <HAL_GPIO_Init+0x354>)
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	61fb      	str	r3, [r7, #28]
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	2b0f      	cmp	r3, #15
 8004f40:	f67f ae86 	bls.w	8004c50 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004f44:	bf00      	nop
 8004f46:	bf00      	nop
 8004f48:	3724      	adds	r7, #36	@ 0x24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	40023800 	.word	0x40023800
 8004f58:	40013800 	.word	0x40013800
 8004f5c:	40020000 	.word	0x40020000
 8004f60:	40020400 	.word	0x40020400
 8004f64:	40020800 	.word	0x40020800
 8004f68:	40020c00 	.word	0x40020c00
 8004f6c:	40021000 	.word	0x40021000
 8004f70:	40021400 	.word	0x40021400
 8004f74:	40021800 	.word	0x40021800
 8004f78:	40021c00 	.word	0x40021c00
 8004f7c:	40022000 	.word	0x40022000
 8004f80:	40022400 	.word	0x40022400
 8004f84:	40013c00 	.word	0x40013c00

08004f88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691a      	ldr	r2, [r3, #16]
 8004f98:	887b      	ldrh	r3, [r7, #2]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d002      	beq.n	8004fa6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	73fb      	strb	r3, [r7, #15]
 8004fa4:	e001      	b.n	8004faa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	807b      	strh	r3, [r7, #2]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004fc8:	787b      	ldrb	r3, [r7, #1]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fce:	887a      	ldrh	r2, [r7, #2]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004fd4:	e003      	b.n	8004fde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004fd6:	887b      	ldrh	r3, [r7, #2]
 8004fd8:	041a      	lsls	r2, r3, #16
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	619a      	str	r2, [r3, #24]
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
	...

08004fec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004ff6:	4b08      	ldr	r3, [pc, #32]	@ (8005018 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ff8:	695a      	ldr	r2, [r3, #20]
 8004ffa:	88fb      	ldrh	r3, [r7, #6]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d006      	beq.n	8005010 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005002:	4a05      	ldr	r2, [pc, #20]	@ (8005018 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005004:	88fb      	ldrh	r3, [r7, #6]
 8005006:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005008:	88fb      	ldrh	r3, [r7, #6]
 800500a:	4618      	mov	r0, r3
 800500c:	f7fd f9d0 	bl	80023b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005010:	bf00      	nop
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40013c00 	.word	0x40013c00

0800501c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e08b      	b.n	8005146 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d106      	bne.n	8005048 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7fe f96e 	bl	8003324 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2224      	movs	r2, #36	@ 0x24
 800504c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 0201 	bic.w	r2, r2, #1
 800505e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800506c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800507c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d107      	bne.n	8005096 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689a      	ldr	r2, [r3, #8]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005092:	609a      	str	r2, [r3, #8]
 8005094:	e006      	b.n	80050a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	689a      	ldr	r2, [r3, #8]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80050a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d108      	bne.n	80050be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050ba:	605a      	str	r2, [r3, #4]
 80050bc:	e007      	b.n	80050ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6859      	ldr	r1, [r3, #4]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005150 <HAL_I2C_Init+0x134>)
 80050da:	430b      	orrs	r3, r1
 80050dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68da      	ldr	r2, [r3, #12]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80050ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	691a      	ldr	r2, [r3, #16]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	69d9      	ldr	r1, [r3, #28]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a1a      	ldr	r2, [r3, #32]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	430a      	orrs	r2, r1
 8005116:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0201 	orr.w	r2, r2, #1
 8005126:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2220      	movs	r2, #32
 8005132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	02008000 	.word	0x02008000

08005154 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af02      	add	r7, sp, #8
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	607a      	str	r2, [r7, #4]
 800515e:	461a      	mov	r2, r3
 8005160:	460b      	mov	r3, r1
 8005162:	817b      	strh	r3, [r7, #10]
 8005164:	4613      	mov	r3, r2
 8005166:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b20      	cmp	r3, #32
 8005172:	f040 80fd 	bne.w	8005370 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800517c:	2b01      	cmp	r3, #1
 800517e:	d101      	bne.n	8005184 <HAL_I2C_Master_Transmit+0x30>
 8005180:	2302      	movs	r3, #2
 8005182:	e0f6      	b.n	8005372 <HAL_I2C_Master_Transmit+0x21e>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800518c:	f7ff f804 	bl	8004198 <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	2319      	movs	r3, #25
 8005198:	2201      	movs	r2, #1
 800519a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 f914 	bl	80053cc <I2C_WaitOnFlagUntilTimeout>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e0e1      	b.n	8005372 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2221      	movs	r2, #33	@ 0x21
 80051b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2210      	movs	r2, #16
 80051ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	893a      	ldrh	r2, [r7, #8]
 80051ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051da:	b29b      	uxth	r3, r3
 80051dc:	2bff      	cmp	r3, #255	@ 0xff
 80051de:	d906      	bls.n	80051ee <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	22ff      	movs	r2, #255	@ 0xff
 80051e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80051e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80051ea:	617b      	str	r3, [r7, #20]
 80051ec:	e007      	b.n	80051fe <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80051f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051fc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005202:	2b00      	cmp	r3, #0
 8005204:	d024      	beq.n	8005250 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520a:	781a      	ldrb	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800522e:	3b01      	subs	r3, #1
 8005230:	b29a      	uxth	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800523a:	b2db      	uxtb	r3, r3
 800523c:	3301      	adds	r3, #1
 800523e:	b2da      	uxtb	r2, r3
 8005240:	8979      	ldrh	r1, [r7, #10]
 8005242:	4b4e      	ldr	r3, [pc, #312]	@ (800537c <HAL_I2C_Master_Transmit+0x228>)
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f000 fa83 	bl	8005754 <I2C_TransferConfig>
 800524e:	e066      	b.n	800531e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005254:	b2da      	uxtb	r2, r3
 8005256:	8979      	ldrh	r1, [r7, #10]
 8005258:	4b48      	ldr	r3, [pc, #288]	@ (800537c <HAL_I2C_Master_Transmit+0x228>)
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 fa78 	bl	8005754 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005264:	e05b      	b.n	800531e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	6a39      	ldr	r1, [r7, #32]
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f000 f907 	bl	800547e <I2C_WaitOnTXISFlagUntilTimeout>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e07b      	b.n	8005372 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527e:	781a      	ldrb	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800528a:	1c5a      	adds	r2, r3, #1
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005294:	b29b      	uxth	r3, r3
 8005296:	3b01      	subs	r3, #1
 8005298:	b29a      	uxth	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052a2:	3b01      	subs	r3, #1
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d034      	beq.n	800531e <HAL_I2C_Master_Transmit+0x1ca>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d130      	bne.n	800531e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	2200      	movs	r2, #0
 80052c4:	2180      	movs	r1, #128	@ 0x80
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f000 f880 	bl	80053cc <I2C_WaitOnFlagUntilTimeout>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e04d      	b.n	8005372 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052da:	b29b      	uxth	r3, r3
 80052dc:	2bff      	cmp	r3, #255	@ 0xff
 80052de:	d90e      	bls.n	80052fe <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	22ff      	movs	r2, #255	@ 0xff
 80052e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	8979      	ldrh	r1, [r7, #10]
 80052ee:	2300      	movs	r3, #0
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 fa2c 	bl	8005754 <I2C_TransferConfig>
 80052fc:	e00f      	b.n	800531e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005302:	b29a      	uxth	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800530c:	b2da      	uxtb	r2, r3
 800530e:	8979      	ldrh	r1, [r7, #10]
 8005310:	2300      	movs	r3, #0
 8005312:	9300      	str	r3, [sp, #0]
 8005314:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f000 fa1b 	bl	8005754 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005322:	b29b      	uxth	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d19e      	bne.n	8005266 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	6a39      	ldr	r1, [r7, #32]
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f000 f8ed 	bl	800550c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e01a      	b.n	8005372 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2220      	movs	r2, #32
 8005342:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6859      	ldr	r1, [r3, #4]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	4b0c      	ldr	r3, [pc, #48]	@ (8005380 <HAL_I2C_Master_Transmit+0x22c>)
 8005350:	400b      	ands	r3, r1
 8005352:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2220      	movs	r2, #32
 8005358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800536c:	2300      	movs	r3, #0
 800536e:	e000      	b.n	8005372 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005370:	2302      	movs	r3, #2
  }
}
 8005372:	4618      	mov	r0, r3
 8005374:	3718      	adds	r7, #24
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	80002000 	.word	0x80002000
 8005380:	fe00e800 	.word	0xfe00e800

08005384 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b02      	cmp	r3, #2
 8005398:	d103      	bne.n	80053a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2200      	movs	r2, #0
 80053a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d007      	beq.n	80053c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699a      	ldr	r2, [r3, #24]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0201 	orr.w	r2, r2, #1
 80053be:	619a      	str	r2, [r3, #24]
  }
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	603b      	str	r3, [r7, #0]
 80053d8:	4613      	mov	r3, r2
 80053da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053dc:	e03b      	b.n	8005456 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	6839      	ldr	r1, [r7, #0]
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f000 f8d6 	bl	8005594 <I2C_IsErrorOccurred>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e041      	b.n	8005476 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f8:	d02d      	beq.n	8005456 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053fa:	f7fe fecd 	bl	8004198 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	429a      	cmp	r2, r3
 8005408:	d302      	bcc.n	8005410 <I2C_WaitOnFlagUntilTimeout+0x44>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d122      	bne.n	8005456 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699a      	ldr	r2, [r3, #24]
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	4013      	ands	r3, r2
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	429a      	cmp	r2, r3
 800541e:	bf0c      	ite	eq
 8005420:	2301      	moveq	r3, #1
 8005422:	2300      	movne	r3, #0
 8005424:	b2db      	uxtb	r3, r3
 8005426:	461a      	mov	r2, r3
 8005428:	79fb      	ldrb	r3, [r7, #7]
 800542a:	429a      	cmp	r2, r3
 800542c:	d113      	bne.n	8005456 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005432:	f043 0220 	orr.w	r2, r3, #32
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2220      	movs	r2, #32
 800543e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e00f      	b.n	8005476 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	699a      	ldr	r2, [r3, #24]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	4013      	ands	r3, r2
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	429a      	cmp	r2, r3
 8005464:	bf0c      	ite	eq
 8005466:	2301      	moveq	r3, #1
 8005468:	2300      	movne	r3, #0
 800546a:	b2db      	uxtb	r3, r3
 800546c:	461a      	mov	r2, r3
 800546e:	79fb      	ldrb	r3, [r7, #7]
 8005470:	429a      	cmp	r2, r3
 8005472:	d0b4      	beq.n	80053de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b084      	sub	sp, #16
 8005482:	af00      	add	r7, sp, #0
 8005484:	60f8      	str	r0, [r7, #12]
 8005486:	60b9      	str	r1, [r7, #8]
 8005488:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800548a:	e033      	b.n	80054f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	68b9      	ldr	r1, [r7, #8]
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 f87f 	bl	8005594 <I2C_IsErrorOccurred>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e031      	b.n	8005504 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a6:	d025      	beq.n	80054f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054a8:	f7fe fe76 	bl	8004198 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d302      	bcc.n	80054be <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d11a      	bne.n	80054f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d013      	beq.n	80054f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d0:	f043 0220 	orr.w	r2, r3, #32
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2220      	movs	r2, #32
 80054dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e007      	b.n	8005504 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d1c4      	bne.n	800548c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005518:	e02f      	b.n	800557a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	68b9      	ldr	r1, [r7, #8]
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f000 f838 	bl	8005594 <I2C_IsErrorOccurred>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e02d      	b.n	800558a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800552e:	f7fe fe33 	bl	8004198 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	429a      	cmp	r2, r3
 800553c:	d302      	bcc.n	8005544 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d11a      	bne.n	800557a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	f003 0320 	and.w	r3, r3, #32
 800554e:	2b20      	cmp	r3, #32
 8005550:	d013      	beq.n	800557a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005556:	f043 0220 	orr.w	r2, r3, #32
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2220      	movs	r2, #32
 8005562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e007      	b.n	800558a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	f003 0320 	and.w	r3, r3, #32
 8005584:	2b20      	cmp	r3, #32
 8005586:	d1c8      	bne.n	800551a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
	...

08005594 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b08a      	sub	sp, #40	@ 0x28
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055a0:	2300      	movs	r3, #0
 80055a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80055ae:	2300      	movs	r3, #0
 80055b0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	f003 0310 	and.w	r3, r3, #16
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d068      	beq.n	8005692 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2210      	movs	r2, #16
 80055c6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80055c8:	e049      	b.n	800565e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d0:	d045      	beq.n	800565e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80055d2:	f7fe fde1 	bl	8004198 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d302      	bcc.n	80055e8 <I2C_IsErrorOccurred+0x54>
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d13a      	bne.n	800565e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055fa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005606:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800560a:	d121      	bne.n	8005650 <I2C_IsErrorOccurred+0xbc>
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005612:	d01d      	beq.n	8005650 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005614:	7cfb      	ldrb	r3, [r7, #19]
 8005616:	2b20      	cmp	r3, #32
 8005618:	d01a      	beq.n	8005650 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005628:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800562a:	f7fe fdb5 	bl	8004198 <HAL_GetTick>
 800562e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005630:	e00e      	b.n	8005650 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005632:	f7fe fdb1 	bl	8004198 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b19      	cmp	r3, #25
 800563e:	d907      	bls.n	8005650 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005640:	6a3b      	ldr	r3, [r7, #32]
 8005642:	f043 0320 	orr.w	r3, r3, #32
 8005646:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800564e:	e006      	b.n	800565e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	f003 0320 	and.w	r3, r3, #32
 800565a:	2b20      	cmp	r3, #32
 800565c:	d1e9      	bne.n	8005632 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	f003 0320 	and.w	r3, r3, #32
 8005668:	2b20      	cmp	r3, #32
 800566a:	d003      	beq.n	8005674 <I2C_IsErrorOccurred+0xe0>
 800566c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0aa      	beq.n	80055ca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005674:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005678:	2b00      	cmp	r3, #0
 800567a:	d103      	bne.n	8005684 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2220      	movs	r2, #32
 8005682:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	f043 0304 	orr.w	r3, r3, #4
 800568a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00b      	beq.n	80056bc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	f043 0301 	orr.w	r3, r3, #1
 80056aa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00b      	beq.n	80056de <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	f043 0308 	orr.w	r3, r3, #8
 80056cc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80056d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00b      	beq.n	8005700 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	f043 0302 	orr.w	r3, r3, #2
 80056ee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005700:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005704:	2b00      	cmp	r3, #0
 8005706:	d01c      	beq.n	8005742 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f7ff fe3b 	bl	8005384 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6859      	ldr	r1, [r3, #4]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	4b0d      	ldr	r3, [pc, #52]	@ (8005750 <I2C_IsErrorOccurred+0x1bc>)
 800571a:	400b      	ands	r3, r1
 800571c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	431a      	orrs	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2220      	movs	r2, #32
 800572e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005742:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005746:	4618      	mov	r0, r3
 8005748:	3728      	adds	r7, #40	@ 0x28
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	fe00e800 	.word	0xfe00e800

08005754 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	607b      	str	r3, [r7, #4]
 800575e:	460b      	mov	r3, r1
 8005760:	817b      	strh	r3, [r7, #10]
 8005762:	4613      	mov	r3, r2
 8005764:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005766:	897b      	ldrh	r3, [r7, #10]
 8005768:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800576c:	7a7b      	ldrb	r3, [r7, #9]
 800576e:	041b      	lsls	r3, r3, #16
 8005770:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005774:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	4313      	orrs	r3, r2
 800577e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005782:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	6a3b      	ldr	r3, [r7, #32]
 800578c:	0d5b      	lsrs	r3, r3, #21
 800578e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005792:	4b08      	ldr	r3, [pc, #32]	@ (80057b4 <I2C_TransferConfig+0x60>)
 8005794:	430b      	orrs	r3, r1
 8005796:	43db      	mvns	r3, r3
 8005798:	ea02 0103 	and.w	r1, r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80057a6:	bf00      	nop
 80057a8:	371c      	adds	r7, #28
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	03ff63ff 	.word	0x03ff63ff

080057b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b20      	cmp	r3, #32
 80057cc:	d138      	bne.n	8005840 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d101      	bne.n	80057dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80057d8:	2302      	movs	r3, #2
 80057da:	e032      	b.n	8005842 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2224      	movs	r2, #36	@ 0x24
 80057e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 0201 	bic.w	r2, r2, #1
 80057fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800580a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6819      	ldr	r1, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	430a      	orrs	r2, r1
 800581a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f042 0201 	orr.w	r2, r2, #1
 800582a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2220      	movs	r2, #32
 8005830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800583c:	2300      	movs	r3, #0
 800583e:	e000      	b.n	8005842 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005840:	2302      	movs	r3, #2
  }
}
 8005842:	4618      	mov	r0, r3
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800584e:	b480      	push	{r7}
 8005850:	b085      	sub	sp, #20
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
 8005856:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b20      	cmp	r3, #32
 8005862:	d139      	bne.n	80058d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800586a:	2b01      	cmp	r3, #1
 800586c:	d101      	bne.n	8005872 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800586e:	2302      	movs	r3, #2
 8005870:	e033      	b.n	80058da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2224      	movs	r2, #36	@ 0x24
 800587e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 0201 	bic.w	r2, r2, #1
 8005890:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80058a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	021b      	lsls	r3, r3, #8
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f042 0201 	orr.w	r2, r2, #1
 80058c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2220      	movs	r2, #32
 80058c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80058d4:	2300      	movs	r3, #0
 80058d6:	e000      	b.n	80058da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80058d8:	2302      	movs	r3, #2
  }
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b086      	sub	sp, #24
 80058ea:	af02      	add	r7, sp, #8
 80058ec:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e108      	b.n	8005b0a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d106      	bne.n	8005918 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7fe fa4a 	bl	8003dac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2203      	movs	r2, #3
 800591c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005926:	d102      	bne.n	800592e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4618      	mov	r0, r3
 8005934:	f005 f81a 	bl	800a96c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6818      	ldr	r0, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	7c1a      	ldrb	r2, [r3, #16]
 8005940:	f88d 2000 	strb.w	r2, [sp]
 8005944:	3304      	adds	r3, #4
 8005946:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005948:	f004 ffb6 	bl	800a8b8 <USB_CoreInit>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d005      	beq.n	800595e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2202      	movs	r2, #2
 8005956:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e0d5      	b.n	8005b0a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2100      	movs	r1, #0
 8005964:	4618      	mov	r0, r3
 8005966:	f005 f812 	bl	800a98e <USB_SetCurrentMode>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d005      	beq.n	800597c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2202      	movs	r2, #2
 8005974:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e0c6      	b.n	8005b0a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800597c:	2300      	movs	r3, #0
 800597e:	73fb      	strb	r3, [r7, #15]
 8005980:	e04a      	b.n	8005a18 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005982:	7bfa      	ldrb	r2, [r7, #15]
 8005984:	6879      	ldr	r1, [r7, #4]
 8005986:	4613      	mov	r3, r2
 8005988:	00db      	lsls	r3, r3, #3
 800598a:	4413      	add	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	440b      	add	r3, r1
 8005990:	3315      	adds	r3, #21
 8005992:	2201      	movs	r2, #1
 8005994:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005996:	7bfa      	ldrb	r2, [r7, #15]
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	4613      	mov	r3, r2
 800599c:	00db      	lsls	r3, r3, #3
 800599e:	4413      	add	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	440b      	add	r3, r1
 80059a4:	3314      	adds	r3, #20
 80059a6:	7bfa      	ldrb	r2, [r7, #15]
 80059a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80059aa:	7bfa      	ldrb	r2, [r7, #15]
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	b298      	uxth	r0, r3
 80059b0:	6879      	ldr	r1, [r7, #4]
 80059b2:	4613      	mov	r3, r2
 80059b4:	00db      	lsls	r3, r3, #3
 80059b6:	4413      	add	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	440b      	add	r3, r1
 80059bc:	332e      	adds	r3, #46	@ 0x2e
 80059be:	4602      	mov	r2, r0
 80059c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80059c2:	7bfa      	ldrb	r2, [r7, #15]
 80059c4:	6879      	ldr	r1, [r7, #4]
 80059c6:	4613      	mov	r3, r2
 80059c8:	00db      	lsls	r3, r3, #3
 80059ca:	4413      	add	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	440b      	add	r3, r1
 80059d0:	3318      	adds	r3, #24
 80059d2:	2200      	movs	r2, #0
 80059d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80059d6:	7bfa      	ldrb	r2, [r7, #15]
 80059d8:	6879      	ldr	r1, [r7, #4]
 80059da:	4613      	mov	r3, r2
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	4413      	add	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	440b      	add	r3, r1
 80059e4:	331c      	adds	r3, #28
 80059e6:	2200      	movs	r2, #0
 80059e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80059ea:	7bfa      	ldrb	r2, [r7, #15]
 80059ec:	6879      	ldr	r1, [r7, #4]
 80059ee:	4613      	mov	r3, r2
 80059f0:	00db      	lsls	r3, r3, #3
 80059f2:	4413      	add	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	440b      	add	r3, r1
 80059f8:	3320      	adds	r3, #32
 80059fa:	2200      	movs	r2, #0
 80059fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80059fe:	7bfa      	ldrb	r2, [r7, #15]
 8005a00:	6879      	ldr	r1, [r7, #4]
 8005a02:	4613      	mov	r3, r2
 8005a04:	00db      	lsls	r3, r3, #3
 8005a06:	4413      	add	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	440b      	add	r3, r1
 8005a0c:	3324      	adds	r3, #36	@ 0x24
 8005a0e:	2200      	movs	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a12:	7bfb      	ldrb	r3, [r7, #15]
 8005a14:	3301      	adds	r3, #1
 8005a16:	73fb      	strb	r3, [r7, #15]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	791b      	ldrb	r3, [r3, #4]
 8005a1c:	7bfa      	ldrb	r2, [r7, #15]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d3af      	bcc.n	8005982 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a22:	2300      	movs	r3, #0
 8005a24:	73fb      	strb	r3, [r7, #15]
 8005a26:	e044      	b.n	8005ab2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005a28:	7bfa      	ldrb	r2, [r7, #15]
 8005a2a:	6879      	ldr	r1, [r7, #4]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	4413      	add	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	440b      	add	r3, r1
 8005a36:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005a3e:	7bfa      	ldrb	r2, [r7, #15]
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	4613      	mov	r3, r2
 8005a44:	00db      	lsls	r3, r3, #3
 8005a46:	4413      	add	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	440b      	add	r3, r1
 8005a4c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005a50:	7bfa      	ldrb	r2, [r7, #15]
 8005a52:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005a54:	7bfa      	ldrb	r2, [r7, #15]
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	4413      	add	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	440b      	add	r3, r1
 8005a62:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005a66:	2200      	movs	r2, #0
 8005a68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005a6a:	7bfa      	ldrb	r2, [r7, #15]
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	00db      	lsls	r3, r3, #3
 8005a72:	4413      	add	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	440b      	add	r3, r1
 8005a78:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005a80:	7bfa      	ldrb	r2, [r7, #15]
 8005a82:	6879      	ldr	r1, [r7, #4]
 8005a84:	4613      	mov	r3, r2
 8005a86:	00db      	lsls	r3, r3, #3
 8005a88:	4413      	add	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	440b      	add	r3, r1
 8005a8e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005a92:	2200      	movs	r2, #0
 8005a94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005a96:	7bfa      	ldrb	r2, [r7, #15]
 8005a98:	6879      	ldr	r1, [r7, #4]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	00db      	lsls	r3, r3, #3
 8005a9e:	4413      	add	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	440b      	add	r3, r1
 8005aa4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	73fb      	strb	r3, [r7, #15]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	791b      	ldrb	r3, [r3, #4]
 8005ab6:	7bfa      	ldrb	r2, [r7, #15]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d3b5      	bcc.n	8005a28 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6818      	ldr	r0, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	7c1a      	ldrb	r2, [r3, #16]
 8005ac4:	f88d 2000 	strb.w	r2, [sp]
 8005ac8:	3304      	adds	r3, #4
 8005aca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005acc:	f004 ffac 	bl	800aa28 <USB_DevInit>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d005      	beq.n	8005ae2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2202      	movs	r2, #2
 8005ada:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e013      	b.n	8005b0a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	7b1b      	ldrb	r3, [r3, #12]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d102      	bne.n	8005afe <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f80b 	bl	8005b14 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f005 f967 	bl	800add6 <USB_DevDisconnect>

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
	...

08005b14 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b42:	4b05      	ldr	r3, [pc, #20]	@ (8005b58 <HAL_PCDEx_ActivateLPM+0x44>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3714      	adds	r7, #20
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	10000003 	.word	0x10000003

08005b5c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b60:	4b05      	ldr	r3, [pc, #20]	@ (8005b78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a04      	ldr	r2, [pc, #16]	@ (8005b78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005b66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b6a:	6013      	str	r3, [r2, #0]
}
 8005b6c:	bf00      	nop
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	40007000 	.word	0x40007000

08005b7c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005b82:	2300      	movs	r3, #0
 8005b84:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005b86:	4b23      	ldr	r3, [pc, #140]	@ (8005c14 <HAL_PWREx_EnableOverDrive+0x98>)
 8005b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b8a:	4a22      	ldr	r2, [pc, #136]	@ (8005c14 <HAL_PWREx_EnableOverDrive+0x98>)
 8005b8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b92:	4b20      	ldr	r3, [pc, #128]	@ (8005c14 <HAL_PWREx_EnableOverDrive+0x98>)
 8005b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b9a:	603b      	str	r3, [r7, #0]
 8005b9c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8005c18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a1d      	ldr	r2, [pc, #116]	@ (8005c18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ba8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005baa:	f7fe faf5 	bl	8004198 <HAL_GetTick>
 8005bae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005bb0:	e009      	b.n	8005bc6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005bb2:	f7fe faf1 	bl	8004198 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005bc0:	d901      	bls.n	8005bc6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e022      	b.n	8005c0c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005bc6:	4b14      	ldr	r3, [pc, #80]	@ (8005c18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bd2:	d1ee      	bne.n	8005bb2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005bd4:	4b10      	ldr	r3, [pc, #64]	@ (8005c18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a0f      	ldr	r2, [pc, #60]	@ (8005c18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005bda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bde:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005be0:	f7fe fada 	bl	8004198 <HAL_GetTick>
 8005be4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005be6:	e009      	b.n	8005bfc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005be8:	f7fe fad6 	bl	8004198 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005bf6:	d901      	bls.n	8005bfc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e007      	b.n	8005c0c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005bfc:	4b06      	ldr	r3, [pc, #24]	@ (8005c18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c08:	d1ee      	bne.n	8005be8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3708      	adds	r7, #8
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	40023800 	.word	0x40023800
 8005c18:	40007000 	.word	0x40007000

08005c1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005c24:	2300      	movs	r3, #0
 8005c26:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e291      	b.n	8006156 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 8087 	beq.w	8005d4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c40:	4b96      	ldr	r3, [pc, #600]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f003 030c 	and.w	r3, r3, #12
 8005c48:	2b04      	cmp	r3, #4
 8005c4a:	d00c      	beq.n	8005c66 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c4c:	4b93      	ldr	r3, [pc, #588]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f003 030c 	and.w	r3, r3, #12
 8005c54:	2b08      	cmp	r3, #8
 8005c56:	d112      	bne.n	8005c7e <HAL_RCC_OscConfig+0x62>
 8005c58:	4b90      	ldr	r3, [pc, #576]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c64:	d10b      	bne.n	8005c7e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c66:	4b8d      	ldr	r3, [pc, #564]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d06c      	beq.n	8005d4c <HAL_RCC_OscConfig+0x130>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d168      	bne.n	8005d4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e26b      	b.n	8006156 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c86:	d106      	bne.n	8005c96 <HAL_RCC_OscConfig+0x7a>
 8005c88:	4b84      	ldr	r3, [pc, #528]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a83      	ldr	r2, [pc, #524]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005c8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c92:	6013      	str	r3, [r2, #0]
 8005c94:	e02e      	b.n	8005cf4 <HAL_RCC_OscConfig+0xd8>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10c      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x9c>
 8005c9e:	4b7f      	ldr	r3, [pc, #508]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a7e      	ldr	r2, [pc, #504]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005ca4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ca8:	6013      	str	r3, [r2, #0]
 8005caa:	4b7c      	ldr	r3, [pc, #496]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a7b      	ldr	r2, [pc, #492]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005cb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	e01d      	b.n	8005cf4 <HAL_RCC_OscConfig+0xd8>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005cc0:	d10c      	bne.n	8005cdc <HAL_RCC_OscConfig+0xc0>
 8005cc2:	4b76      	ldr	r3, [pc, #472]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a75      	ldr	r2, [pc, #468]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005cc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	4b73      	ldr	r3, [pc, #460]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a72      	ldr	r2, [pc, #456]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005cd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cd8:	6013      	str	r3, [r2, #0]
 8005cda:	e00b      	b.n	8005cf4 <HAL_RCC_OscConfig+0xd8>
 8005cdc:	4b6f      	ldr	r3, [pc, #444]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a6e      	ldr	r2, [pc, #440]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005ce2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ce6:	6013      	str	r3, [r2, #0]
 8005ce8:	4b6c      	ldr	r3, [pc, #432]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a6b      	ldr	r2, [pc, #428]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005cee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d013      	beq.n	8005d24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cfc:	f7fe fa4c 	bl	8004198 <HAL_GetTick>
 8005d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d02:	e008      	b.n	8005d16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d04:	f7fe fa48 	bl	8004198 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b64      	cmp	r3, #100	@ 0x64
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e21f      	b.n	8006156 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d16:	4b61      	ldr	r3, [pc, #388]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d0f0      	beq.n	8005d04 <HAL_RCC_OscConfig+0xe8>
 8005d22:	e014      	b.n	8005d4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d24:	f7fe fa38 	bl	8004198 <HAL_GetTick>
 8005d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d2c:	f7fe fa34 	bl	8004198 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b64      	cmp	r3, #100	@ 0x64
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e20b      	b.n	8006156 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d3e:	4b57      	ldr	r3, [pc, #348]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1f0      	bne.n	8005d2c <HAL_RCC_OscConfig+0x110>
 8005d4a:	e000      	b.n	8005d4e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d069      	beq.n	8005e2e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d5a:	4b50      	ldr	r3, [pc, #320]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f003 030c 	and.w	r3, r3, #12
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00b      	beq.n	8005d7e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d66:	4b4d      	ldr	r3, [pc, #308]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f003 030c 	and.w	r3, r3, #12
 8005d6e:	2b08      	cmp	r3, #8
 8005d70:	d11c      	bne.n	8005dac <HAL_RCC_OscConfig+0x190>
 8005d72:	4b4a      	ldr	r3, [pc, #296]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d116      	bne.n	8005dac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d7e:	4b47      	ldr	r3, [pc, #284]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d005      	beq.n	8005d96 <HAL_RCC_OscConfig+0x17a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d001      	beq.n	8005d96 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e1df      	b.n	8006156 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d96:	4b41      	ldr	r3, [pc, #260]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	493d      	ldr	r1, [pc, #244]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005daa:	e040      	b.n	8005e2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d023      	beq.n	8005dfc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005db4:	4b39      	ldr	r3, [pc, #228]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a38      	ldr	r2, [pc, #224]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005dba:	f043 0301 	orr.w	r3, r3, #1
 8005dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc0:	f7fe f9ea 	bl	8004198 <HAL_GetTick>
 8005dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dc6:	e008      	b.n	8005dda <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dc8:	f7fe f9e6 	bl	8004198 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e1bd      	b.n	8006156 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dda:	4b30      	ldr	r3, [pc, #192]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0f0      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005de6:	4b2d      	ldr	r3, [pc, #180]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	4929      	ldr	r1, [pc, #164]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	600b      	str	r3, [r1, #0]
 8005dfa:	e018      	b.n	8005e2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dfc:	4b27      	ldr	r3, [pc, #156]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a26      	ldr	r2, [pc, #152]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005e02:	f023 0301 	bic.w	r3, r3, #1
 8005e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e08:	f7fe f9c6 	bl	8004198 <HAL_GetTick>
 8005e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e0e:	e008      	b.n	8005e22 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e10:	f7fe f9c2 	bl	8004198 <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e199      	b.n	8006156 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e22:	4b1e      	ldr	r3, [pc, #120]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1f0      	bne.n	8005e10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0308 	and.w	r3, r3, #8
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d038      	beq.n	8005eac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d019      	beq.n	8005e76 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e42:	4b16      	ldr	r3, [pc, #88]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e46:	4a15      	ldr	r2, [pc, #84]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005e48:	f043 0301 	orr.w	r3, r3, #1
 8005e4c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e4e:	f7fe f9a3 	bl	8004198 <HAL_GetTick>
 8005e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e54:	e008      	b.n	8005e68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e56:	f7fe f99f 	bl	8004198 <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d901      	bls.n	8005e68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e176      	b.n	8006156 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e68:	4b0c      	ldr	r3, [pc, #48]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005e6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e6c:	f003 0302 	and.w	r3, r3, #2
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d0f0      	beq.n	8005e56 <HAL_RCC_OscConfig+0x23a>
 8005e74:	e01a      	b.n	8005eac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e76:	4b09      	ldr	r3, [pc, #36]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005e78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e7a:	4a08      	ldr	r2, [pc, #32]	@ (8005e9c <HAL_RCC_OscConfig+0x280>)
 8005e7c:	f023 0301 	bic.w	r3, r3, #1
 8005e80:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e82:	f7fe f989 	bl	8004198 <HAL_GetTick>
 8005e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e88:	e00a      	b.n	8005ea0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e8a:	f7fe f985 	bl	8004198 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d903      	bls.n	8005ea0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e15c      	b.n	8006156 <HAL_RCC_OscConfig+0x53a>
 8005e9c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ea0:	4b91      	ldr	r3, [pc, #580]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 8005ea2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ea4:	f003 0302 	and.w	r3, r3, #2
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1ee      	bne.n	8005e8a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 80a4 	beq.w	8006002 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005eba:	4b8b      	ldr	r3, [pc, #556]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10d      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ec6:	4b88      	ldr	r3, [pc, #544]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eca:	4a87      	ldr	r2, [pc, #540]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 8005ecc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ed0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ed2:	4b85      	ldr	r3, [pc, #532]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005eda:	60bb      	str	r3, [r7, #8]
 8005edc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ee2:	4b82      	ldr	r3, [pc, #520]	@ (80060ec <HAL_RCC_OscConfig+0x4d0>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d118      	bne.n	8005f20 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005eee:	4b7f      	ldr	r3, [pc, #508]	@ (80060ec <HAL_RCC_OscConfig+0x4d0>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a7e      	ldr	r2, [pc, #504]	@ (80060ec <HAL_RCC_OscConfig+0x4d0>)
 8005ef4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ef8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005efa:	f7fe f94d 	bl	8004198 <HAL_GetTick>
 8005efe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f00:	e008      	b.n	8005f14 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f02:	f7fe f949 	bl	8004198 <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	2b64      	cmp	r3, #100	@ 0x64
 8005f0e:	d901      	bls.n	8005f14 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e120      	b.n	8006156 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f14:	4b75      	ldr	r3, [pc, #468]	@ (80060ec <HAL_RCC_OscConfig+0x4d0>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d0f0      	beq.n	8005f02 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d106      	bne.n	8005f36 <HAL_RCC_OscConfig+0x31a>
 8005f28:	4b6f      	ldr	r3, [pc, #444]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 8005f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f2c:	4a6e      	ldr	r2, [pc, #440]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 8005f2e:	f043 0301 	orr.w	r3, r3, #1
 8005f32:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f34:	e02d      	b.n	8005f92 <HAL_RCC_OscConfig+0x376>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10c      	bne.n	8005f58 <HAL_RCC_OscConfig+0x33c>
 8005f3e:	4b6a      	ldr	r3, [pc, #424]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 8005f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f42:	4a69      	ldr	r2, [pc, #420]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 8005f44:	f023 0301 	bic.w	r3, r3, #1
 8005f48:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f4a:	4b67      	ldr	r3, [pc, #412]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 8005f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f4e:	4a66      	ldr	r2, [pc, #408]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 8005f50:	f023 0304 	bic.w	r3, r3, #4
 8005f54:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f56:	e01c      	b.n	8005f92 <HAL_RCC_OscConfig+0x376>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	2b05      	cmp	r3, #5
 8005f5e:	d10c      	bne.n	8005f7a <HAL_RCC_OscConfig+0x35e>
 8005f60:	4b61      	ldr	r3, [pc, #388]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 8005f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f64:	4a60      	ldr	r2, [pc, #384]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 8005f66:	f043 0304 	orr.w	r3, r3, #4
 8005f6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f6c:	4b5e      	ldr	r3, [pc, #376]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 8005f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f70:	4a5d      	ldr	r2, [pc, #372]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 8005f72:	f043 0301 	orr.w	r3, r3, #1
 8005f76:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f78:	e00b      	b.n	8005f92 <HAL_RCC_OscConfig+0x376>
 8005f7a:	4b5b      	ldr	r3, [pc, #364]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 8005f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f7e:	4a5a      	ldr	r2, [pc, #360]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 8005f80:	f023 0301 	bic.w	r3, r3, #1
 8005f84:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f86:	4b58      	ldr	r3, [pc, #352]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 8005f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f8a:	4a57      	ldr	r2, [pc, #348]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 8005f8c:	f023 0304 	bic.w	r3, r3, #4
 8005f90:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d015      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f9a:	f7fe f8fd 	bl	8004198 <HAL_GetTick>
 8005f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fa0:	e00a      	b.n	8005fb8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fa2:	f7fe f8f9 	bl	8004198 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d901      	bls.n	8005fb8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e0ce      	b.n	8006156 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fb8:	4b4b      	ldr	r3, [pc, #300]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 8005fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d0ee      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x386>
 8005fc4:	e014      	b.n	8005ff0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc6:	f7fe f8e7 	bl	8004198 <HAL_GetTick>
 8005fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fcc:	e00a      	b.n	8005fe4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fce:	f7fe f8e3 	bl	8004198 <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d901      	bls.n	8005fe4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e0b8      	b.n	8006156 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fe4:	4b40      	ldr	r3, [pc, #256]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 8005fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1ee      	bne.n	8005fce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ff0:	7dfb      	ldrb	r3, [r7, #23]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d105      	bne.n	8006002 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ff6:	4b3c      	ldr	r3, [pc, #240]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffa:	4a3b      	ldr	r2, [pc, #236]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 8005ffc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006000:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	2b00      	cmp	r3, #0
 8006008:	f000 80a4 	beq.w	8006154 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800600c:	4b36      	ldr	r3, [pc, #216]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f003 030c 	and.w	r3, r3, #12
 8006014:	2b08      	cmp	r3, #8
 8006016:	d06b      	beq.n	80060f0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	2b02      	cmp	r3, #2
 800601e:	d149      	bne.n	80060b4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006020:	4b31      	ldr	r3, [pc, #196]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a30      	ldr	r2, [pc, #192]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 8006026:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800602a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800602c:	f7fe f8b4 	bl	8004198 <HAL_GetTick>
 8006030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006032:	e008      	b.n	8006046 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006034:	f7fe f8b0 	bl	8004198 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b02      	cmp	r3, #2
 8006040:	d901      	bls.n	8006046 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e087      	b.n	8006156 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006046:	4b28      	ldr	r3, [pc, #160]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1f0      	bne.n	8006034 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	69da      	ldr	r2, [r3, #28]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	431a      	orrs	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006060:	019b      	lsls	r3, r3, #6
 8006062:	431a      	orrs	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006068:	085b      	lsrs	r3, r3, #1
 800606a:	3b01      	subs	r3, #1
 800606c:	041b      	lsls	r3, r3, #16
 800606e:	431a      	orrs	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006074:	061b      	lsls	r3, r3, #24
 8006076:	4313      	orrs	r3, r2
 8006078:	4a1b      	ldr	r2, [pc, #108]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 800607a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800607e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006080:	4b19      	ldr	r3, [pc, #100]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a18      	ldr	r2, [pc, #96]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 8006086:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800608a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800608c:	f7fe f884 	bl	8004198 <HAL_GetTick>
 8006090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006092:	e008      	b.n	80060a6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006094:	f7fe f880 	bl	8004198 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d901      	bls.n	80060a6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e057      	b.n	8006156 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060a6:	4b10      	ldr	r3, [pc, #64]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d0f0      	beq.n	8006094 <HAL_RCC_OscConfig+0x478>
 80060b2:	e04f      	b.n	8006154 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060b4:	4b0c      	ldr	r3, [pc, #48]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a0b      	ldr	r2, [pc, #44]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 80060ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060c0:	f7fe f86a 	bl	8004198 <HAL_GetTick>
 80060c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060c6:	e008      	b.n	80060da <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060c8:	f7fe f866 	bl	8004198 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d901      	bls.n	80060da <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e03d      	b.n	8006156 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060da:	4b03      	ldr	r3, [pc, #12]	@ (80060e8 <HAL_RCC_OscConfig+0x4cc>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1f0      	bne.n	80060c8 <HAL_RCC_OscConfig+0x4ac>
 80060e6:	e035      	b.n	8006154 <HAL_RCC_OscConfig+0x538>
 80060e8:	40023800 	.word	0x40023800
 80060ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80060f0:	4b1b      	ldr	r3, [pc, #108]	@ (8006160 <HAL_RCC_OscConfig+0x544>)
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d028      	beq.n	8006150 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006108:	429a      	cmp	r2, r3
 800610a:	d121      	bne.n	8006150 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006116:	429a      	cmp	r2, r3
 8006118:	d11a      	bne.n	8006150 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006120:	4013      	ands	r3, r2
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006126:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006128:	4293      	cmp	r3, r2
 800612a:	d111      	bne.n	8006150 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006136:	085b      	lsrs	r3, r3, #1
 8006138:	3b01      	subs	r3, #1
 800613a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800613c:	429a      	cmp	r2, r3
 800613e:	d107      	bne.n	8006150 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800614a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800614c:	429a      	cmp	r2, r3
 800614e:	d001      	beq.n	8006154 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e000      	b.n	8006156 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3718      	adds	r7, #24
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	40023800 	.word	0x40023800

08006164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800616e:	2300      	movs	r3, #0
 8006170:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e0d0      	b.n	800631e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800617c:	4b6a      	ldr	r3, [pc, #424]	@ (8006328 <HAL_RCC_ClockConfig+0x1c4>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 030f 	and.w	r3, r3, #15
 8006184:	683a      	ldr	r2, [r7, #0]
 8006186:	429a      	cmp	r2, r3
 8006188:	d910      	bls.n	80061ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800618a:	4b67      	ldr	r3, [pc, #412]	@ (8006328 <HAL_RCC_ClockConfig+0x1c4>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f023 020f 	bic.w	r2, r3, #15
 8006192:	4965      	ldr	r1, [pc, #404]	@ (8006328 <HAL_RCC_ClockConfig+0x1c4>)
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	4313      	orrs	r3, r2
 8006198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800619a:	4b63      	ldr	r3, [pc, #396]	@ (8006328 <HAL_RCC_ClockConfig+0x1c4>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 030f 	and.w	r3, r3, #15
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d001      	beq.n	80061ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e0b8      	b.n	800631e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0302 	and.w	r3, r3, #2
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d020      	beq.n	80061fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0304 	and.w	r3, r3, #4
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d005      	beq.n	80061d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061c4:	4b59      	ldr	r3, [pc, #356]	@ (800632c <HAL_RCC_ClockConfig+0x1c8>)
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	4a58      	ldr	r2, [pc, #352]	@ (800632c <HAL_RCC_ClockConfig+0x1c8>)
 80061ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80061ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0308 	and.w	r3, r3, #8
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d005      	beq.n	80061e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061dc:	4b53      	ldr	r3, [pc, #332]	@ (800632c <HAL_RCC_ClockConfig+0x1c8>)
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	4a52      	ldr	r2, [pc, #328]	@ (800632c <HAL_RCC_ClockConfig+0x1c8>)
 80061e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80061e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061e8:	4b50      	ldr	r3, [pc, #320]	@ (800632c <HAL_RCC_ClockConfig+0x1c8>)
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	494d      	ldr	r1, [pc, #308]	@ (800632c <HAL_RCC_ClockConfig+0x1c8>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	2b00      	cmp	r3, #0
 8006204:	d040      	beq.n	8006288 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d107      	bne.n	800621e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800620e:	4b47      	ldr	r3, [pc, #284]	@ (800632c <HAL_RCC_ClockConfig+0x1c8>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d115      	bne.n	8006246 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e07f      	b.n	800631e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	2b02      	cmp	r3, #2
 8006224:	d107      	bne.n	8006236 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006226:	4b41      	ldr	r3, [pc, #260]	@ (800632c <HAL_RCC_ClockConfig+0x1c8>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d109      	bne.n	8006246 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e073      	b.n	800631e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006236:	4b3d      	ldr	r3, [pc, #244]	@ (800632c <HAL_RCC_ClockConfig+0x1c8>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e06b      	b.n	800631e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006246:	4b39      	ldr	r3, [pc, #228]	@ (800632c <HAL_RCC_ClockConfig+0x1c8>)
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f023 0203 	bic.w	r2, r3, #3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	4936      	ldr	r1, [pc, #216]	@ (800632c <HAL_RCC_ClockConfig+0x1c8>)
 8006254:	4313      	orrs	r3, r2
 8006256:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006258:	f7fd ff9e 	bl	8004198 <HAL_GetTick>
 800625c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800625e:	e00a      	b.n	8006276 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006260:	f7fd ff9a 	bl	8004198 <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800626e:	4293      	cmp	r3, r2
 8006270:	d901      	bls.n	8006276 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e053      	b.n	800631e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006276:	4b2d      	ldr	r3, [pc, #180]	@ (800632c <HAL_RCC_ClockConfig+0x1c8>)
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f003 020c 	and.w	r2, r3, #12
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	429a      	cmp	r2, r3
 8006286:	d1eb      	bne.n	8006260 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006288:	4b27      	ldr	r3, [pc, #156]	@ (8006328 <HAL_RCC_ClockConfig+0x1c4>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 030f 	and.w	r3, r3, #15
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	429a      	cmp	r2, r3
 8006294:	d210      	bcs.n	80062b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006296:	4b24      	ldr	r3, [pc, #144]	@ (8006328 <HAL_RCC_ClockConfig+0x1c4>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f023 020f 	bic.w	r2, r3, #15
 800629e:	4922      	ldr	r1, [pc, #136]	@ (8006328 <HAL_RCC_ClockConfig+0x1c4>)
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062a6:	4b20      	ldr	r3, [pc, #128]	@ (8006328 <HAL_RCC_ClockConfig+0x1c4>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 030f 	and.w	r3, r3, #15
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d001      	beq.n	80062b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e032      	b.n	800631e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0304 	and.w	r3, r3, #4
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d008      	beq.n	80062d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062c4:	4b19      	ldr	r3, [pc, #100]	@ (800632c <HAL_RCC_ClockConfig+0x1c8>)
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	4916      	ldr	r1, [pc, #88]	@ (800632c <HAL_RCC_ClockConfig+0x1c8>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0308 	and.w	r3, r3, #8
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d009      	beq.n	80062f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80062e2:	4b12      	ldr	r3, [pc, #72]	@ (800632c <HAL_RCC_ClockConfig+0x1c8>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	490e      	ldr	r1, [pc, #56]	@ (800632c <HAL_RCC_ClockConfig+0x1c8>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80062f6:	f000 f821 	bl	800633c <HAL_RCC_GetSysClockFreq>
 80062fa:	4602      	mov	r2, r0
 80062fc:	4b0b      	ldr	r3, [pc, #44]	@ (800632c <HAL_RCC_ClockConfig+0x1c8>)
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	091b      	lsrs	r3, r3, #4
 8006302:	f003 030f 	and.w	r3, r3, #15
 8006306:	490a      	ldr	r1, [pc, #40]	@ (8006330 <HAL_RCC_ClockConfig+0x1cc>)
 8006308:	5ccb      	ldrb	r3, [r1, r3]
 800630a:	fa22 f303 	lsr.w	r3, r2, r3
 800630e:	4a09      	ldr	r2, [pc, #36]	@ (8006334 <HAL_RCC_ClockConfig+0x1d0>)
 8006310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006312:	4b09      	ldr	r3, [pc, #36]	@ (8006338 <HAL_RCC_ClockConfig+0x1d4>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4618      	mov	r0, r3
 8006318:	f7fd fefa 	bl	8004110 <HAL_InitTick>

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	40023c00 	.word	0x40023c00
 800632c:	40023800 	.word	0x40023800
 8006330:	0800cae8 	.word	0x0800cae8
 8006334:	2000004c 	.word	0x2000004c
 8006338:	20000050 	.word	0x20000050

0800633c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800633c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006340:	b094      	sub	sp, #80	@ 0x50
 8006342:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006344:	2300      	movs	r3, #0
 8006346:	647b      	str	r3, [r7, #68]	@ 0x44
 8006348:	2300      	movs	r3, #0
 800634a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800634c:	2300      	movs	r3, #0
 800634e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8006350:	2300      	movs	r3, #0
 8006352:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006354:	4b79      	ldr	r3, [pc, #484]	@ (800653c <HAL_RCC_GetSysClockFreq+0x200>)
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f003 030c 	and.w	r3, r3, #12
 800635c:	2b08      	cmp	r3, #8
 800635e:	d00d      	beq.n	800637c <HAL_RCC_GetSysClockFreq+0x40>
 8006360:	2b08      	cmp	r3, #8
 8006362:	f200 80e1 	bhi.w	8006528 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006366:	2b00      	cmp	r3, #0
 8006368:	d002      	beq.n	8006370 <HAL_RCC_GetSysClockFreq+0x34>
 800636a:	2b04      	cmp	r3, #4
 800636c:	d003      	beq.n	8006376 <HAL_RCC_GetSysClockFreq+0x3a>
 800636e:	e0db      	b.n	8006528 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006370:	4b73      	ldr	r3, [pc, #460]	@ (8006540 <HAL_RCC_GetSysClockFreq+0x204>)
 8006372:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006374:	e0db      	b.n	800652e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006376:	4b73      	ldr	r3, [pc, #460]	@ (8006544 <HAL_RCC_GetSysClockFreq+0x208>)
 8006378:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800637a:	e0d8      	b.n	800652e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800637c:	4b6f      	ldr	r3, [pc, #444]	@ (800653c <HAL_RCC_GetSysClockFreq+0x200>)
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006384:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006386:	4b6d      	ldr	r3, [pc, #436]	@ (800653c <HAL_RCC_GetSysClockFreq+0x200>)
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d063      	beq.n	800645a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006392:	4b6a      	ldr	r3, [pc, #424]	@ (800653c <HAL_RCC_GetSysClockFreq+0x200>)
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	099b      	lsrs	r3, r3, #6
 8006398:	2200      	movs	r2, #0
 800639a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800639c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800639e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80063a6:	2300      	movs	r3, #0
 80063a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80063aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80063ae:	4622      	mov	r2, r4
 80063b0:	462b      	mov	r3, r5
 80063b2:	f04f 0000 	mov.w	r0, #0
 80063b6:	f04f 0100 	mov.w	r1, #0
 80063ba:	0159      	lsls	r1, r3, #5
 80063bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063c0:	0150      	lsls	r0, r2, #5
 80063c2:	4602      	mov	r2, r0
 80063c4:	460b      	mov	r3, r1
 80063c6:	4621      	mov	r1, r4
 80063c8:	1a51      	subs	r1, r2, r1
 80063ca:	6139      	str	r1, [r7, #16]
 80063cc:	4629      	mov	r1, r5
 80063ce:	eb63 0301 	sbc.w	r3, r3, r1
 80063d2:	617b      	str	r3, [r7, #20]
 80063d4:	f04f 0200 	mov.w	r2, #0
 80063d8:	f04f 0300 	mov.w	r3, #0
 80063dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063e0:	4659      	mov	r1, fp
 80063e2:	018b      	lsls	r3, r1, #6
 80063e4:	4651      	mov	r1, sl
 80063e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80063ea:	4651      	mov	r1, sl
 80063ec:	018a      	lsls	r2, r1, #6
 80063ee:	4651      	mov	r1, sl
 80063f0:	ebb2 0801 	subs.w	r8, r2, r1
 80063f4:	4659      	mov	r1, fp
 80063f6:	eb63 0901 	sbc.w	r9, r3, r1
 80063fa:	f04f 0200 	mov.w	r2, #0
 80063fe:	f04f 0300 	mov.w	r3, #0
 8006402:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006406:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800640a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800640e:	4690      	mov	r8, r2
 8006410:	4699      	mov	r9, r3
 8006412:	4623      	mov	r3, r4
 8006414:	eb18 0303 	adds.w	r3, r8, r3
 8006418:	60bb      	str	r3, [r7, #8]
 800641a:	462b      	mov	r3, r5
 800641c:	eb49 0303 	adc.w	r3, r9, r3
 8006420:	60fb      	str	r3, [r7, #12]
 8006422:	f04f 0200 	mov.w	r2, #0
 8006426:	f04f 0300 	mov.w	r3, #0
 800642a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800642e:	4629      	mov	r1, r5
 8006430:	024b      	lsls	r3, r1, #9
 8006432:	4621      	mov	r1, r4
 8006434:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006438:	4621      	mov	r1, r4
 800643a:	024a      	lsls	r2, r1, #9
 800643c:	4610      	mov	r0, r2
 800643e:	4619      	mov	r1, r3
 8006440:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006442:	2200      	movs	r2, #0
 8006444:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006446:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006448:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800644c:	f7f9 ff38 	bl	80002c0 <__aeabi_uldivmod>
 8006450:	4602      	mov	r2, r0
 8006452:	460b      	mov	r3, r1
 8006454:	4613      	mov	r3, r2
 8006456:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006458:	e058      	b.n	800650c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800645a:	4b38      	ldr	r3, [pc, #224]	@ (800653c <HAL_RCC_GetSysClockFreq+0x200>)
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	099b      	lsrs	r3, r3, #6
 8006460:	2200      	movs	r2, #0
 8006462:	4618      	mov	r0, r3
 8006464:	4611      	mov	r1, r2
 8006466:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800646a:	623b      	str	r3, [r7, #32]
 800646c:	2300      	movs	r3, #0
 800646e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006470:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006474:	4642      	mov	r2, r8
 8006476:	464b      	mov	r3, r9
 8006478:	f04f 0000 	mov.w	r0, #0
 800647c:	f04f 0100 	mov.w	r1, #0
 8006480:	0159      	lsls	r1, r3, #5
 8006482:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006486:	0150      	lsls	r0, r2, #5
 8006488:	4602      	mov	r2, r0
 800648a:	460b      	mov	r3, r1
 800648c:	4641      	mov	r1, r8
 800648e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006492:	4649      	mov	r1, r9
 8006494:	eb63 0b01 	sbc.w	fp, r3, r1
 8006498:	f04f 0200 	mov.w	r2, #0
 800649c:	f04f 0300 	mov.w	r3, #0
 80064a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80064a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80064a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80064ac:	ebb2 040a 	subs.w	r4, r2, sl
 80064b0:	eb63 050b 	sbc.w	r5, r3, fp
 80064b4:	f04f 0200 	mov.w	r2, #0
 80064b8:	f04f 0300 	mov.w	r3, #0
 80064bc:	00eb      	lsls	r3, r5, #3
 80064be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064c2:	00e2      	lsls	r2, r4, #3
 80064c4:	4614      	mov	r4, r2
 80064c6:	461d      	mov	r5, r3
 80064c8:	4643      	mov	r3, r8
 80064ca:	18e3      	adds	r3, r4, r3
 80064cc:	603b      	str	r3, [r7, #0]
 80064ce:	464b      	mov	r3, r9
 80064d0:	eb45 0303 	adc.w	r3, r5, r3
 80064d4:	607b      	str	r3, [r7, #4]
 80064d6:	f04f 0200 	mov.w	r2, #0
 80064da:	f04f 0300 	mov.w	r3, #0
 80064de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064e2:	4629      	mov	r1, r5
 80064e4:	028b      	lsls	r3, r1, #10
 80064e6:	4621      	mov	r1, r4
 80064e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064ec:	4621      	mov	r1, r4
 80064ee:	028a      	lsls	r2, r1, #10
 80064f0:	4610      	mov	r0, r2
 80064f2:	4619      	mov	r1, r3
 80064f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064f6:	2200      	movs	r2, #0
 80064f8:	61bb      	str	r3, [r7, #24]
 80064fa:	61fa      	str	r2, [r7, #28]
 80064fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006500:	f7f9 fede 	bl	80002c0 <__aeabi_uldivmod>
 8006504:	4602      	mov	r2, r0
 8006506:	460b      	mov	r3, r1
 8006508:	4613      	mov	r3, r2
 800650a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800650c:	4b0b      	ldr	r3, [pc, #44]	@ (800653c <HAL_RCC_GetSysClockFreq+0x200>)
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	0c1b      	lsrs	r3, r3, #16
 8006512:	f003 0303 	and.w	r3, r3, #3
 8006516:	3301      	adds	r3, #1
 8006518:	005b      	lsls	r3, r3, #1
 800651a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800651c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800651e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006520:	fbb2 f3f3 	udiv	r3, r2, r3
 8006524:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006526:	e002      	b.n	800652e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006528:	4b05      	ldr	r3, [pc, #20]	@ (8006540 <HAL_RCC_GetSysClockFreq+0x204>)
 800652a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800652c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800652e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006530:	4618      	mov	r0, r3
 8006532:	3750      	adds	r7, #80	@ 0x50
 8006534:	46bd      	mov	sp, r7
 8006536:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800653a:	bf00      	nop
 800653c:	40023800 	.word	0x40023800
 8006540:	00f42400 	.word	0x00f42400
 8006544:	007a1200 	.word	0x007a1200

08006548 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006548:	b480      	push	{r7}
 800654a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800654c:	4b03      	ldr	r3, [pc, #12]	@ (800655c <HAL_RCC_GetHCLKFreq+0x14>)
 800654e:	681b      	ldr	r3, [r3, #0]
}
 8006550:	4618      	mov	r0, r3
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	2000004c 	.word	0x2000004c

08006560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006564:	f7ff fff0 	bl	8006548 <HAL_RCC_GetHCLKFreq>
 8006568:	4602      	mov	r2, r0
 800656a:	4b05      	ldr	r3, [pc, #20]	@ (8006580 <HAL_RCC_GetPCLK1Freq+0x20>)
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	0a9b      	lsrs	r3, r3, #10
 8006570:	f003 0307 	and.w	r3, r3, #7
 8006574:	4903      	ldr	r1, [pc, #12]	@ (8006584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006576:	5ccb      	ldrb	r3, [r1, r3]
 8006578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800657c:	4618      	mov	r0, r3
 800657e:	bd80      	pop	{r7, pc}
 8006580:	40023800 	.word	0x40023800
 8006584:	0800caf8 	.word	0x0800caf8

08006588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800658c:	f7ff ffdc 	bl	8006548 <HAL_RCC_GetHCLKFreq>
 8006590:	4602      	mov	r2, r0
 8006592:	4b05      	ldr	r3, [pc, #20]	@ (80065a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	0b5b      	lsrs	r3, r3, #13
 8006598:	f003 0307 	and.w	r3, r3, #7
 800659c:	4903      	ldr	r1, [pc, #12]	@ (80065ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800659e:	5ccb      	ldrb	r3, [r1, r3]
 80065a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	40023800 	.word	0x40023800
 80065ac:	0800caf8 	.word	0x0800caf8

080065b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b088      	sub	sp, #32
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80065b8:	2300      	movs	r3, #0
 80065ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80065bc:	2300      	movs	r3, #0
 80065be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80065c0:	2300      	movs	r3, #0
 80065c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80065c4:	2300      	movs	r3, #0
 80065c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80065c8:	2300      	movs	r3, #0
 80065ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d012      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80065d8:	4b69      	ldr	r3, [pc, #420]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	4a68      	ldr	r2, [pc, #416]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065de:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80065e2:	6093      	str	r3, [r2, #8]
 80065e4:	4b66      	ldr	r3, [pc, #408]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065e6:	689a      	ldr	r2, [r3, #8]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065ec:	4964      	ldr	r1, [pc, #400]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80065fa:	2301      	movs	r3, #1
 80065fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d017      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800660a:	4b5d      	ldr	r3, [pc, #372]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800660c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006610:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006618:	4959      	ldr	r1, [pc, #356]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800661a:	4313      	orrs	r3, r2
 800661c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006624:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006628:	d101      	bne.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800662a:	2301      	movs	r3, #1
 800662c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006636:	2301      	movs	r3, #1
 8006638:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d017      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006646:	4b4e      	ldr	r3, [pc, #312]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006648:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800664c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006654:	494a      	ldr	r1, [pc, #296]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006656:	4313      	orrs	r3, r2
 8006658:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006660:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006664:	d101      	bne.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006666:	2301      	movs	r3, #1
 8006668:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006672:	2301      	movs	r3, #1
 8006674:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006682:	2301      	movs	r3, #1
 8006684:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0320 	and.w	r3, r3, #32
 800668e:	2b00      	cmp	r3, #0
 8006690:	f000 808b 	beq.w	80067aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006694:	4b3a      	ldr	r3, [pc, #232]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006698:	4a39      	ldr	r2, [pc, #228]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800669a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800669e:	6413      	str	r3, [r2, #64]	@ 0x40
 80066a0:	4b37      	ldr	r3, [pc, #220]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066a8:	60bb      	str	r3, [r7, #8]
 80066aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80066ac:	4b35      	ldr	r3, [pc, #212]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a34      	ldr	r2, [pc, #208]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80066b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066b8:	f7fd fd6e 	bl	8004198 <HAL_GetTick>
 80066bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80066be:	e008      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066c0:	f7fd fd6a 	bl	8004198 <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	2b64      	cmp	r3, #100	@ 0x64
 80066cc:	d901      	bls.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e357      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80066d2:	4b2c      	ldr	r3, [pc, #176]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d0f0      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80066de:	4b28      	ldr	r3, [pc, #160]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d035      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d02e      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066fc:	4b20      	ldr	r3, [pc, #128]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006700:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006704:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006706:	4b1e      	ldr	r3, [pc, #120]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800670a:	4a1d      	ldr	r2, [pc, #116]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800670c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006710:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006712:	4b1b      	ldr	r3, [pc, #108]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006716:	4a1a      	ldr	r2, [pc, #104]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006718:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800671c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800671e:	4a18      	ldr	r2, [pc, #96]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006724:	4b16      	ldr	r3, [pc, #88]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	2b01      	cmp	r3, #1
 800672e:	d114      	bne.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006730:	f7fd fd32 	bl	8004198 <HAL_GetTick>
 8006734:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006736:	e00a      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006738:	f7fd fd2e 	bl	8004198 <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006746:	4293      	cmp	r3, r2
 8006748:	d901      	bls.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e319      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800674e:	4b0c      	ldr	r3, [pc, #48]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006752:	f003 0302 	and.w	r3, r3, #2
 8006756:	2b00      	cmp	r3, #0
 8006758:	d0ee      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800675e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006762:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006766:	d111      	bne.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006768:	4b05      	ldr	r3, [pc, #20]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006774:	4b04      	ldr	r3, [pc, #16]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006776:	400b      	ands	r3, r1
 8006778:	4901      	ldr	r1, [pc, #4]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800677a:	4313      	orrs	r3, r2
 800677c:	608b      	str	r3, [r1, #8]
 800677e:	e00b      	b.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006780:	40023800 	.word	0x40023800
 8006784:	40007000 	.word	0x40007000
 8006788:	0ffffcff 	.word	0x0ffffcff
 800678c:	4baa      	ldr	r3, [pc, #680]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	4aa9      	ldr	r2, [pc, #676]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006792:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006796:	6093      	str	r3, [r2, #8]
 8006798:	4ba7      	ldr	r3, [pc, #668]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800679a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067a4:	49a4      	ldr	r1, [pc, #656]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0310 	and.w	r3, r3, #16
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d010      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80067b6:	4ba0      	ldr	r3, [pc, #640]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067bc:	4a9e      	ldr	r2, [pc, #632]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80067c6:	4b9c      	ldr	r3, [pc, #624]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d0:	4999      	ldr	r1, [pc, #612]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00a      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067e4:	4b94      	ldr	r3, [pc, #592]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067f2:	4991      	ldr	r1, [pc, #580]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067f4:	4313      	orrs	r3, r2
 80067f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006806:	4b8c      	ldr	r3, [pc, #560]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800680c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006814:	4988      	ldr	r1, [pc, #544]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006816:	4313      	orrs	r3, r2
 8006818:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00a      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006828:	4b83      	ldr	r3, [pc, #524]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800682a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800682e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006836:	4980      	ldr	r1, [pc, #512]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006838:	4313      	orrs	r3, r2
 800683a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800684a:	4b7b      	ldr	r3, [pc, #492]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800684c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006850:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006858:	4977      	ldr	r1, [pc, #476]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800685a:	4313      	orrs	r3, r2
 800685c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00a      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800686c:	4b72      	ldr	r3, [pc, #456]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800686e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006872:	f023 0203 	bic.w	r2, r3, #3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800687a:	496f      	ldr	r1, [pc, #444]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800687c:	4313      	orrs	r3, r2
 800687e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00a      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800688e:	4b6a      	ldr	r3, [pc, #424]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006894:	f023 020c 	bic.w	r2, r3, #12
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800689c:	4966      	ldr	r1, [pc, #408]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00a      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80068b0:	4b61      	ldr	r3, [pc, #388]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068b6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068be:	495e      	ldr	r1, [pc, #376]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068c0:	4313      	orrs	r3, r2
 80068c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00a      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80068d2:	4b59      	ldr	r3, [pc, #356]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068d8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068e0:	4955      	ldr	r1, [pc, #340]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00a      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80068f4:	4b50      	ldr	r3, [pc, #320]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068fa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006902:	494d      	ldr	r1, [pc, #308]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006904:	4313      	orrs	r3, r2
 8006906:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00a      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006916:	4b48      	ldr	r3, [pc, #288]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800691c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006924:	4944      	ldr	r1, [pc, #272]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006926:	4313      	orrs	r3, r2
 8006928:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00a      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006938:	4b3f      	ldr	r3, [pc, #252]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800693a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800693e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006946:	493c      	ldr	r1, [pc, #240]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006948:	4313      	orrs	r3, r2
 800694a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00a      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800695a:	4b37      	ldr	r3, [pc, #220]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800695c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006960:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006968:	4933      	ldr	r1, [pc, #204]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800696a:	4313      	orrs	r3, r2
 800696c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00a      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800697c:	4b2e      	ldr	r3, [pc, #184]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800697e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006982:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800698a:	492b      	ldr	r1, [pc, #172]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800698c:	4313      	orrs	r3, r2
 800698e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d011      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800699e:	4b26      	ldr	r3, [pc, #152]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069a4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069ac:	4922      	ldr	r1, [pc, #136]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069bc:	d101      	bne.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80069be:	2301      	movs	r3, #1
 80069c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0308 	and.w	r3, r3, #8
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80069ce:	2301      	movs	r3, #1
 80069d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00a      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80069de:	4b16      	ldr	r3, [pc, #88]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069e4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069ec:	4912      	ldr	r1, [pc, #72]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069ee:	4313      	orrs	r3, r2
 80069f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00b      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006a00:	4b0d      	ldr	r3, [pc, #52]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a06:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a10:	4909      	ldr	r1, [pc, #36]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a12:	4313      	orrs	r3, r2
 8006a14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d006      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 80d9 	beq.w	8006bde <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006a2c:	4b02      	ldr	r3, [pc, #8]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a01      	ldr	r2, [pc, #4]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a32:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006a36:	e001      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006a38:	40023800 	.word	0x40023800
 8006a3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a3e:	f7fd fbab 	bl	8004198 <HAL_GetTick>
 8006a42:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a44:	e008      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a46:	f7fd fba7 	bl	8004198 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2b64      	cmp	r3, #100	@ 0x64
 8006a52:	d901      	bls.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e194      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a58:	4b6c      	ldr	r3, [pc, #432]	@ (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1f0      	bne.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d021      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d11d      	bne.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006a78:	4b64      	ldr	r3, [pc, #400]	@ (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a7e:	0c1b      	lsrs	r3, r3, #16
 8006a80:	f003 0303 	and.w	r3, r3, #3
 8006a84:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006a86:	4b61      	ldr	r3, [pc, #388]	@ (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a8c:	0e1b      	lsrs	r3, r3, #24
 8006a8e:	f003 030f 	and.w	r3, r3, #15
 8006a92:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	019a      	lsls	r2, r3, #6
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	041b      	lsls	r3, r3, #16
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	061b      	lsls	r3, r3, #24
 8006aa4:	431a      	orrs	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	071b      	lsls	r3, r3, #28
 8006aac:	4957      	ldr	r1, [pc, #348]	@ (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d004      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ac4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ac8:	d00a      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d02e      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ada:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ade:	d129      	bne.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006ae0:	4b4a      	ldr	r3, [pc, #296]	@ (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ae6:	0c1b      	lsrs	r3, r3, #16
 8006ae8:	f003 0303 	and.w	r3, r3, #3
 8006aec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006aee:	4b47      	ldr	r3, [pc, #284]	@ (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006af4:	0f1b      	lsrs	r3, r3, #28
 8006af6:	f003 0307 	and.w	r3, r3, #7
 8006afa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	019a      	lsls	r2, r3, #6
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	041b      	lsls	r3, r3, #16
 8006b06:	431a      	orrs	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	061b      	lsls	r3, r3, #24
 8006b0e:	431a      	orrs	r2, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	071b      	lsls	r3, r3, #28
 8006b14:	493d      	ldr	r1, [pc, #244]	@ (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b16:	4313      	orrs	r3, r2
 8006b18:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006b1c:	4b3b      	ldr	r3, [pc, #236]	@ (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b22:	f023 021f 	bic.w	r2, r3, #31
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	4937      	ldr	r1, [pc, #220]	@ (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d01d      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006b40:	4b32      	ldr	r3, [pc, #200]	@ (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b46:	0e1b      	lsrs	r3, r3, #24
 8006b48:	f003 030f 	and.w	r3, r3, #15
 8006b4c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b54:	0f1b      	lsrs	r3, r3, #28
 8006b56:	f003 0307 	and.w	r3, r3, #7
 8006b5a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	019a      	lsls	r2, r3, #6
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	041b      	lsls	r3, r3, #16
 8006b68:	431a      	orrs	r2, r3
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	061b      	lsls	r3, r3, #24
 8006b6e:	431a      	orrs	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	071b      	lsls	r3, r3, #28
 8006b74:	4925      	ldr	r1, [pc, #148]	@ (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d011      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	019a      	lsls	r2, r3, #6
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	041b      	lsls	r3, r3, #16
 8006b94:	431a      	orrs	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	061b      	lsls	r3, r3, #24
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	071b      	lsls	r3, r3, #28
 8006ba4:	4919      	ldr	r1, [pc, #100]	@ (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006bac:	4b17      	ldr	r3, [pc, #92]	@ (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a16      	ldr	r2, [pc, #88]	@ (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bb2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006bb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bb8:	f7fd faee 	bl	8004198 <HAL_GetTick>
 8006bbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bbe:	e008      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006bc0:	f7fd faea 	bl	8004198 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	2b64      	cmp	r3, #100	@ 0x64
 8006bcc:	d901      	bls.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e0d7      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d0f0      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	f040 80cd 	bne.w	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006be6:	4b09      	ldr	r3, [pc, #36]	@ (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a08      	ldr	r2, [pc, #32]	@ (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bf2:	f7fd fad1 	bl	8004198 <HAL_GetTick>
 8006bf6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006bf8:	e00a      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006bfa:	f7fd facd 	bl	8004198 <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	2b64      	cmp	r3, #100	@ 0x64
 8006c06:	d903      	bls.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e0ba      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006c0c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c10:	4b5e      	ldr	r3, [pc, #376]	@ (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c1c:	d0ed      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d003      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d009      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d02e      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d12a      	bne.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006c46:	4b51      	ldr	r3, [pc, #324]	@ (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c4c:	0c1b      	lsrs	r3, r3, #16
 8006c4e:	f003 0303 	and.w	r3, r3, #3
 8006c52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006c54:	4b4d      	ldr	r3, [pc, #308]	@ (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c5a:	0f1b      	lsrs	r3, r3, #28
 8006c5c:	f003 0307 	and.w	r3, r3, #7
 8006c60:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	695b      	ldr	r3, [r3, #20]
 8006c66:	019a      	lsls	r2, r3, #6
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	041b      	lsls	r3, r3, #16
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	061b      	lsls	r3, r3, #24
 8006c74:	431a      	orrs	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	071b      	lsls	r3, r3, #28
 8006c7a:	4944      	ldr	r1, [pc, #272]	@ (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006c82:	4b42      	ldr	r3, [pc, #264]	@ (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c88:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c90:	3b01      	subs	r3, #1
 8006c92:	021b      	lsls	r3, r3, #8
 8006c94:	493d      	ldr	r1, [pc, #244]	@ (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d022      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006cac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cb0:	d11d      	bne.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006cb2:	4b36      	ldr	r3, [pc, #216]	@ (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cb8:	0e1b      	lsrs	r3, r3, #24
 8006cba:	f003 030f 	and.w	r3, r3, #15
 8006cbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006cc0:	4b32      	ldr	r3, [pc, #200]	@ (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cc6:	0f1b      	lsrs	r3, r3, #28
 8006cc8:	f003 0307 	and.w	r3, r3, #7
 8006ccc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	019a      	lsls	r2, r3, #6
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a1b      	ldr	r3, [r3, #32]
 8006cd8:	041b      	lsls	r3, r3, #16
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	061b      	lsls	r3, r3, #24
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	071b      	lsls	r3, r3, #28
 8006ce6:	4929      	ldr	r1, [pc, #164]	@ (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0308 	and.w	r3, r3, #8
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d028      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006cfa:	4b24      	ldr	r3, [pc, #144]	@ (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d00:	0e1b      	lsrs	r3, r3, #24
 8006d02:	f003 030f 	and.w	r3, r3, #15
 8006d06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006d08:	4b20      	ldr	r3, [pc, #128]	@ (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d0e:	0c1b      	lsrs	r3, r3, #16
 8006d10:	f003 0303 	and.w	r3, r3, #3
 8006d14:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	019a      	lsls	r2, r3, #6
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	041b      	lsls	r3, r3, #16
 8006d20:	431a      	orrs	r2, r3
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	061b      	lsls	r3, r3, #24
 8006d26:	431a      	orrs	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	69db      	ldr	r3, [r3, #28]
 8006d2c:	071b      	lsls	r3, r3, #28
 8006d2e:	4917      	ldr	r1, [pc, #92]	@ (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006d36:	4b15      	ldr	r3, [pc, #84]	@ (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d44:	4911      	ldr	r1, [pc, #68]	@ (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d46:	4313      	orrs	r3, r2
 8006d48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a0e      	ldr	r2, [pc, #56]	@ (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d58:	f7fd fa1e 	bl	8004198 <HAL_GetTick>
 8006d5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d5e:	e008      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006d60:	f7fd fa1a 	bl	8004198 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	2b64      	cmp	r3, #100	@ 0x64
 8006d6c:	d901      	bls.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e007      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d72:	4b06      	ldr	r3, [pc, #24]	@ (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d7e:	d1ef      	bne.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3720      	adds	r7, #32
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	40023800 	.word	0x40023800

08006d90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e09d      	b.n	8006ede <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d108      	bne.n	8006dbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006db2:	d009      	beq.n	8006dc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	61da      	str	r2, [r3, #28]
 8006dba:	e005      	b.n	8006dc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d106      	bne.n	8006de8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7fc fafe 	bl	80033e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2202      	movs	r2, #2
 8006dec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006dfe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e08:	d902      	bls.n	8006e10 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	60fb      	str	r3, [r7, #12]
 8006e0e:	e002      	b.n	8006e16 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006e10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006e14:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006e1e:	d007      	beq.n	8006e30 <HAL_SPI_Init+0xa0>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e28:	d002      	beq.n	8006e30 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006e40:	431a      	orrs	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	f003 0302 	and.w	r3, r3, #2
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	695b      	ldr	r3, [r3, #20]
 8006e50:	f003 0301 	and.w	r3, r3, #1
 8006e54:	431a      	orrs	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e5e:	431a      	orrs	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	69db      	ldr	r3, [r3, #28]
 8006e64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e68:	431a      	orrs	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e72:	ea42 0103 	orr.w	r1, r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e7a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	430a      	orrs	r2, r1
 8006e84:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	0c1b      	lsrs	r3, r3, #16
 8006e8c:	f003 0204 	and.w	r2, r3, #4
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e94:	f003 0310 	and.w	r3, r3, #16
 8006e98:	431a      	orrs	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e9e:	f003 0308 	and.w	r3, r3, #8
 8006ea2:	431a      	orrs	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006eac:	ea42 0103 	orr.w	r1, r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	69da      	ldr	r2, [r3, #28]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ecc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b088      	sub	sp, #32
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	60f8      	str	r0, [r7, #12]
 8006eee:	60b9      	str	r1, [r7, #8]
 8006ef0:	603b      	str	r3, [r7, #0]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d101      	bne.n	8006f08 <HAL_SPI_Transmit+0x22>
 8006f04:	2302      	movs	r3, #2
 8006f06:	e15f      	b.n	80071c8 <HAL_SPI_Transmit+0x2e2>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f10:	f7fd f942 	bl	8004198 <HAL_GetTick>
 8006f14:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006f16:	88fb      	ldrh	r3, [r7, #6]
 8006f18:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d002      	beq.n	8006f2c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006f26:	2302      	movs	r3, #2
 8006f28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f2a:	e148      	b.n	80071be <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d002      	beq.n	8006f38 <HAL_SPI_Transmit+0x52>
 8006f32:	88fb      	ldrh	r3, [r7, #6]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d102      	bne.n	8006f3e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f3c:	e13f      	b.n	80071be <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2203      	movs	r2, #3
 8006f42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	88fa      	ldrh	r2, [r7, #6]
 8006f56:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	88fa      	ldrh	r2, [r7, #6]
 8006f5c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f88:	d10f      	bne.n	8006faa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006fa8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fb4:	2b40      	cmp	r3, #64	@ 0x40
 8006fb6:	d007      	beq.n	8006fc8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006fd0:	d94f      	bls.n	8007072 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d002      	beq.n	8006fe0 <HAL_SPI_Transmit+0xfa>
 8006fda:	8afb      	ldrh	r3, [r7, #22]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d142      	bne.n	8007066 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe4:	881a      	ldrh	r2, [r3, #0]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff0:	1c9a      	adds	r2, r3, #2
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007004:	e02f      	b.n	8007066 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	f003 0302 	and.w	r3, r3, #2
 8007010:	2b02      	cmp	r3, #2
 8007012:	d112      	bne.n	800703a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007018:	881a      	ldrh	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007024:	1c9a      	adds	r2, r3, #2
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800702e:	b29b      	uxth	r3, r3
 8007030:	3b01      	subs	r3, #1
 8007032:	b29a      	uxth	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007038:	e015      	b.n	8007066 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800703a:	f7fd f8ad 	bl	8004198 <HAL_GetTick>
 800703e:	4602      	mov	r2, r0
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	429a      	cmp	r2, r3
 8007048:	d803      	bhi.n	8007052 <HAL_SPI_Transmit+0x16c>
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007050:	d102      	bne.n	8007058 <HAL_SPI_Transmit+0x172>
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d106      	bne.n	8007066 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007064:	e0ab      	b.n	80071be <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800706a:	b29b      	uxth	r3, r3
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1ca      	bne.n	8007006 <HAL_SPI_Transmit+0x120>
 8007070:	e080      	b.n	8007174 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d002      	beq.n	8007080 <HAL_SPI_Transmit+0x19a>
 800707a:	8afb      	ldrh	r3, [r7, #22]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d174      	bne.n	800716a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007084:	b29b      	uxth	r3, r3
 8007086:	2b01      	cmp	r3, #1
 8007088:	d912      	bls.n	80070b0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800708e:	881a      	ldrh	r2, [r3, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709a:	1c9a      	adds	r2, r3, #2
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	3b02      	subs	r3, #2
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80070ae:	e05c      	b.n	800716a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	330c      	adds	r3, #12
 80070ba:	7812      	ldrb	r2, [r2, #0]
 80070bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c2:	1c5a      	adds	r2, r3, #1
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	3b01      	subs	r3, #1
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80070d6:	e048      	b.n	800716a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f003 0302 	and.w	r3, r3, #2
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d12b      	bne.n	800713e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d912      	bls.n	8007116 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070f4:	881a      	ldrh	r2, [r3, #0]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007100:	1c9a      	adds	r2, r3, #2
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800710a:	b29b      	uxth	r3, r3
 800710c:	3b02      	subs	r3, #2
 800710e:	b29a      	uxth	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007114:	e029      	b.n	800716a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	330c      	adds	r3, #12
 8007120:	7812      	ldrb	r2, [r2, #0]
 8007122:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007128:	1c5a      	adds	r2, r3, #1
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007132:	b29b      	uxth	r3, r3
 8007134:	3b01      	subs	r3, #1
 8007136:	b29a      	uxth	r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800713c:	e015      	b.n	800716a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800713e:	f7fd f82b 	bl	8004198 <HAL_GetTick>
 8007142:	4602      	mov	r2, r0
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	429a      	cmp	r2, r3
 800714c:	d803      	bhi.n	8007156 <HAL_SPI_Transmit+0x270>
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007154:	d102      	bne.n	800715c <HAL_SPI_Transmit+0x276>
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d106      	bne.n	800716a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007168:	e029      	b.n	80071be <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800716e:	b29b      	uxth	r3, r3
 8007170:	2b00      	cmp	r3, #0
 8007172:	d1b1      	bne.n	80070d8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007174:	69ba      	ldr	r2, [r7, #24]
 8007176:	6839      	ldr	r1, [r7, #0]
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f000 fb69 	bl	8007850 <SPI_EndRxTxTransaction>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d002      	beq.n	800718a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2220      	movs	r2, #32
 8007188:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10a      	bne.n	80071a8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007192:	2300      	movs	r3, #0
 8007194:	613b      	str	r3, [r7, #16]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	613b      	str	r3, [r7, #16]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	613b      	str	r3, [r7, #16]
 80071a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d002      	beq.n	80071b6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	77fb      	strb	r3, [r7, #31]
 80071b4:	e003      	b.n	80071be <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80071c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3720      	adds	r7, #32
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b08a      	sub	sp, #40	@ 0x28
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
 80071dc:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80071de:	2301      	movs	r3, #1
 80071e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80071e2:	2300      	movs	r3, #0
 80071e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d101      	bne.n	80071f6 <HAL_SPI_TransmitReceive+0x26>
 80071f2:	2302      	movs	r3, #2
 80071f4:	e20a      	b.n	800760c <HAL_SPI_TransmitReceive+0x43c>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071fe:	f7fc ffcb 	bl	8004198 <HAL_GetTick>
 8007202:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800720a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007212:	887b      	ldrh	r3, [r7, #2]
 8007214:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007216:	887b      	ldrh	r3, [r7, #2]
 8007218:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800721a:	7efb      	ldrb	r3, [r7, #27]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d00e      	beq.n	800723e <HAL_SPI_TransmitReceive+0x6e>
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007226:	d106      	bne.n	8007236 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d102      	bne.n	8007236 <HAL_SPI_TransmitReceive+0x66>
 8007230:	7efb      	ldrb	r3, [r7, #27]
 8007232:	2b04      	cmp	r3, #4
 8007234:	d003      	beq.n	800723e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007236:	2302      	movs	r3, #2
 8007238:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800723c:	e1e0      	b.n	8007600 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d005      	beq.n	8007250 <HAL_SPI_TransmitReceive+0x80>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d002      	beq.n	8007250 <HAL_SPI_TransmitReceive+0x80>
 800724a:	887b      	ldrh	r3, [r7, #2]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d103      	bne.n	8007258 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007256:	e1d3      	b.n	8007600 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800725e:	b2db      	uxtb	r3, r3
 8007260:	2b04      	cmp	r3, #4
 8007262:	d003      	beq.n	800726c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2205      	movs	r2, #5
 8007268:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	887a      	ldrh	r2, [r7, #2]
 800727c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	887a      	ldrh	r2, [r7, #2]
 8007284:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	887a      	ldrh	r2, [r7, #2]
 8007292:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	887a      	ldrh	r2, [r7, #2]
 8007298:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2200      	movs	r2, #0
 800729e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80072ae:	d802      	bhi.n	80072b6 <HAL_SPI_TransmitReceive+0xe6>
 80072b0:	8a3b      	ldrh	r3, [r7, #16]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d908      	bls.n	80072c8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80072c4:	605a      	str	r2, [r3, #4]
 80072c6:	e007      	b.n	80072d8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80072d6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072e2:	2b40      	cmp	r3, #64	@ 0x40
 80072e4:	d007      	beq.n	80072f6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80072fe:	f240 8081 	bls.w	8007404 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d002      	beq.n	8007310 <HAL_SPI_TransmitReceive+0x140>
 800730a:	8a7b      	ldrh	r3, [r7, #18]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d16d      	bne.n	80073ec <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007314:	881a      	ldrh	r2, [r3, #0]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007320:	1c9a      	adds	r2, r3, #2
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800732a:	b29b      	uxth	r3, r3
 800732c:	3b01      	subs	r3, #1
 800732e:	b29a      	uxth	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007334:	e05a      	b.n	80073ec <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b02      	cmp	r3, #2
 8007342:	d11b      	bne.n	800737c <HAL_SPI_TransmitReceive+0x1ac>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007348:	b29b      	uxth	r3, r3
 800734a:	2b00      	cmp	r3, #0
 800734c:	d016      	beq.n	800737c <HAL_SPI_TransmitReceive+0x1ac>
 800734e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007350:	2b01      	cmp	r3, #1
 8007352:	d113      	bne.n	800737c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007358:	881a      	ldrh	r2, [r3, #0]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007364:	1c9a      	adds	r2, r3, #2
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800736e:	b29b      	uxth	r3, r3
 8007370:	3b01      	subs	r3, #1
 8007372:	b29a      	uxth	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007378:	2300      	movs	r3, #0
 800737a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f003 0301 	and.w	r3, r3, #1
 8007386:	2b01      	cmp	r3, #1
 8007388:	d11c      	bne.n	80073c4 <HAL_SPI_TransmitReceive+0x1f4>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007390:	b29b      	uxth	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	d016      	beq.n	80073c4 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68da      	ldr	r2, [r3, #12]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a0:	b292      	uxth	r2, r2
 80073a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a8:	1c9a      	adds	r2, r3, #2
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	3b01      	subs	r3, #1
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073c0:	2301      	movs	r3, #1
 80073c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80073c4:	f7fc fee8 	bl	8004198 <HAL_GetTick>
 80073c8:	4602      	mov	r2, r0
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d80b      	bhi.n	80073ec <HAL_SPI_TransmitReceive+0x21c>
 80073d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073da:	d007      	beq.n	80073ec <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80073ea:	e109      	b.n	8007600 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d19f      	bne.n	8007336 <HAL_SPI_TransmitReceive+0x166>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d199      	bne.n	8007336 <HAL_SPI_TransmitReceive+0x166>
 8007402:	e0e3      	b.n	80075cc <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d003      	beq.n	8007414 <HAL_SPI_TransmitReceive+0x244>
 800740c:	8a7b      	ldrh	r3, [r7, #18]
 800740e:	2b01      	cmp	r3, #1
 8007410:	f040 80cf 	bne.w	80075b2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007418:	b29b      	uxth	r3, r3
 800741a:	2b01      	cmp	r3, #1
 800741c:	d912      	bls.n	8007444 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007422:	881a      	ldrh	r2, [r3, #0]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800742e:	1c9a      	adds	r2, r3, #2
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007438:	b29b      	uxth	r3, r3
 800743a:	3b02      	subs	r3, #2
 800743c:	b29a      	uxth	r2, r3
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007442:	e0b6      	b.n	80075b2 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	330c      	adds	r3, #12
 800744e:	7812      	ldrb	r2, [r2, #0]
 8007450:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007456:	1c5a      	adds	r2, r3, #1
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007460:	b29b      	uxth	r3, r3
 8007462:	3b01      	subs	r3, #1
 8007464:	b29a      	uxth	r2, r3
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800746a:	e0a2      	b.n	80075b2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f003 0302 	and.w	r3, r3, #2
 8007476:	2b02      	cmp	r3, #2
 8007478:	d134      	bne.n	80074e4 <HAL_SPI_TransmitReceive+0x314>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800747e:	b29b      	uxth	r3, r3
 8007480:	2b00      	cmp	r3, #0
 8007482:	d02f      	beq.n	80074e4 <HAL_SPI_TransmitReceive+0x314>
 8007484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007486:	2b01      	cmp	r3, #1
 8007488:	d12c      	bne.n	80074e4 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800748e:	b29b      	uxth	r3, r3
 8007490:	2b01      	cmp	r3, #1
 8007492:	d912      	bls.n	80074ba <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007498:	881a      	ldrh	r2, [r3, #0]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074a4:	1c9a      	adds	r2, r3, #2
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	3b02      	subs	r3, #2
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80074b8:	e012      	b.n	80074e0 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	330c      	adds	r3, #12
 80074c4:	7812      	ldrb	r2, [r2, #0]
 80074c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074cc:	1c5a      	adds	r2, r3, #1
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	3b01      	subs	r3, #1
 80074da:	b29a      	uxth	r2, r3
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80074e0:	2300      	movs	r3, #0
 80074e2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f003 0301 	and.w	r3, r3, #1
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d148      	bne.n	8007584 <HAL_SPI_TransmitReceive+0x3b4>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d042      	beq.n	8007584 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007504:	b29b      	uxth	r3, r3
 8007506:	2b01      	cmp	r3, #1
 8007508:	d923      	bls.n	8007552 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68da      	ldr	r2, [r3, #12]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007514:	b292      	uxth	r2, r2
 8007516:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800751c:	1c9a      	adds	r2, r3, #2
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007528:	b29b      	uxth	r3, r3
 800752a:	3b02      	subs	r3, #2
 800752c:	b29a      	uxth	r2, r3
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800753a:	b29b      	uxth	r3, r3
 800753c:	2b01      	cmp	r3, #1
 800753e:	d81f      	bhi.n	8007580 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800754e:	605a      	str	r2, [r3, #4]
 8007550:	e016      	b.n	8007580 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f103 020c 	add.w	r2, r3, #12
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800755e:	7812      	ldrb	r2, [r2, #0]
 8007560:	b2d2      	uxtb	r2, r2
 8007562:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007568:	1c5a      	adds	r2, r3, #1
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007574:	b29b      	uxth	r3, r3
 8007576:	3b01      	subs	r3, #1
 8007578:	b29a      	uxth	r2, r3
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007580:	2301      	movs	r3, #1
 8007582:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007584:	f7fc fe08 	bl	8004198 <HAL_GetTick>
 8007588:	4602      	mov	r2, r0
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007590:	429a      	cmp	r2, r3
 8007592:	d803      	bhi.n	800759c <HAL_SPI_TransmitReceive+0x3cc>
 8007594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800759a:	d102      	bne.n	80075a2 <HAL_SPI_TransmitReceive+0x3d2>
 800759c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d107      	bne.n	80075b2 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80075b0:	e026      	b.n	8007600 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f47f af57 	bne.w	800746c <HAL_SPI_TransmitReceive+0x29c>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f47f af50 	bne.w	800746c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075cc:	69fa      	ldr	r2, [r7, #28]
 80075ce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f000 f93d 	bl	8007850 <SPI_EndRxTxTransaction>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d005      	beq.n	80075e8 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2220      	movs	r2, #32
 80075e6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d003      	beq.n	80075f8 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075f6:	e003      	b.n	8007600 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007608:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800760c:	4618      	mov	r0, r3
 800760e:	3728      	adds	r7, #40	@ 0x28
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b088      	sub	sp, #32
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	603b      	str	r3, [r7, #0]
 8007620:	4613      	mov	r3, r2
 8007622:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007624:	f7fc fdb8 	bl	8004198 <HAL_GetTick>
 8007628:	4602      	mov	r2, r0
 800762a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800762c:	1a9b      	subs	r3, r3, r2
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	4413      	add	r3, r2
 8007632:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007634:	f7fc fdb0 	bl	8004198 <HAL_GetTick>
 8007638:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800763a:	4b39      	ldr	r3, [pc, #228]	@ (8007720 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	015b      	lsls	r3, r3, #5
 8007640:	0d1b      	lsrs	r3, r3, #20
 8007642:	69fa      	ldr	r2, [r7, #28]
 8007644:	fb02 f303 	mul.w	r3, r2, r3
 8007648:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800764a:	e054      	b.n	80076f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007652:	d050      	beq.n	80076f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007654:	f7fc fda0 	bl	8004198 <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	69fa      	ldr	r2, [r7, #28]
 8007660:	429a      	cmp	r2, r3
 8007662:	d902      	bls.n	800766a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d13d      	bne.n	80076e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	685a      	ldr	r2, [r3, #4]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007678:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007682:	d111      	bne.n	80076a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800768c:	d004      	beq.n	8007698 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007696:	d107      	bne.n	80076a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076b0:	d10f      	bne.n	80076d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80076c0:	601a      	str	r2, [r3, #0]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80076d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80076e2:	2303      	movs	r3, #3
 80076e4:	e017      	b.n	8007716 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d101      	bne.n	80076f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80076ec:	2300      	movs	r3, #0
 80076ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	3b01      	subs	r3, #1
 80076f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	689a      	ldr	r2, [r3, #8]
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	4013      	ands	r3, r2
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	429a      	cmp	r2, r3
 8007704:	bf0c      	ite	eq
 8007706:	2301      	moveq	r3, #1
 8007708:	2300      	movne	r3, #0
 800770a:	b2db      	uxtb	r3, r3
 800770c:	461a      	mov	r2, r3
 800770e:	79fb      	ldrb	r3, [r7, #7]
 8007710:	429a      	cmp	r2, r3
 8007712:	d19b      	bne.n	800764c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3720      	adds	r7, #32
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	2000004c 	.word	0x2000004c

08007724 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b08a      	sub	sp, #40	@ 0x28
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
 8007730:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007732:	2300      	movs	r3, #0
 8007734:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007736:	f7fc fd2f 	bl	8004198 <HAL_GetTick>
 800773a:	4602      	mov	r2, r0
 800773c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773e:	1a9b      	subs	r3, r3, r2
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	4413      	add	r3, r2
 8007744:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007746:	f7fc fd27 	bl	8004198 <HAL_GetTick>
 800774a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	330c      	adds	r3, #12
 8007752:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007754:	4b3d      	ldr	r3, [pc, #244]	@ (800784c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	4613      	mov	r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4413      	add	r3, r2
 800775e:	00da      	lsls	r2, r3, #3
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	0d1b      	lsrs	r3, r3, #20
 8007764:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007766:	fb02 f303 	mul.w	r3, r2, r3
 800776a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800776c:	e060      	b.n	8007830 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007774:	d107      	bne.n	8007786 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d104      	bne.n	8007786 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	b2db      	uxtb	r3, r3
 8007782:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007784:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800778c:	d050      	beq.n	8007830 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800778e:	f7fc fd03 	bl	8004198 <HAL_GetTick>
 8007792:	4602      	mov	r2, r0
 8007794:	6a3b      	ldr	r3, [r7, #32]
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800779a:	429a      	cmp	r2, r3
 800779c:	d902      	bls.n	80077a4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800779e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d13d      	bne.n	8007820 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80077b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077bc:	d111      	bne.n	80077e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077c6:	d004      	beq.n	80077d2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077d0:	d107      	bne.n	80077e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077ea:	d10f      	bne.n	800780c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80077fa:	601a      	str	r2, [r3, #0]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800780a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	e010      	b.n	8007842 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d101      	bne.n	800782a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007826:	2300      	movs	r3, #0
 8007828:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	3b01      	subs	r3, #1
 800782e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	689a      	ldr	r2, [r3, #8]
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	4013      	ands	r3, r2
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	429a      	cmp	r2, r3
 800783e:	d196      	bne.n	800776e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	3728      	adds	r7, #40	@ 0x28
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	2000004c 	.word	0x2000004c

08007850 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b088      	sub	sp, #32
 8007854:	af02      	add	r7, sp, #8
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	2200      	movs	r2, #0
 8007864:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f7ff ff5b 	bl	8007724 <SPI_WaitFifoStateUntilTimeout>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d007      	beq.n	8007884 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007878:	f043 0220 	orr.w	r2, r3, #32
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e046      	b.n	8007912 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007884:	4b25      	ldr	r3, [pc, #148]	@ (800791c <SPI_EndRxTxTransaction+0xcc>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a25      	ldr	r2, [pc, #148]	@ (8007920 <SPI_EndRxTxTransaction+0xd0>)
 800788a:	fba2 2303 	umull	r2, r3, r2, r3
 800788e:	0d5b      	lsrs	r3, r3, #21
 8007890:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007894:	fb02 f303 	mul.w	r3, r2, r3
 8007898:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80078a2:	d112      	bne.n	80078ca <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	2200      	movs	r2, #0
 80078ac:	2180      	movs	r1, #128	@ 0x80
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f7ff feb0 	bl	8007614 <SPI_WaitFlagStateUntilTimeout>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d016      	beq.n	80078e8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078be:	f043 0220 	orr.w	r2, r3, #32
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e023      	b.n	8007912 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00a      	beq.n	80078e6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	3b01      	subs	r3, #1
 80078d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078e0:	2b80      	cmp	r3, #128	@ 0x80
 80078e2:	d0f2      	beq.n	80078ca <SPI_EndRxTxTransaction+0x7a>
 80078e4:	e000      	b.n	80078e8 <SPI_EndRxTxTransaction+0x98>
        break;
 80078e6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	9300      	str	r3, [sp, #0]
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f7ff ff15 	bl	8007724 <SPI_WaitFifoStateUntilTimeout>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d007      	beq.n	8007910 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007904:	f043 0220 	orr.w	r2, r3, #32
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e000      	b.n	8007912 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3718      	adds	r7, #24
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	2000004c 	.word	0x2000004c
 8007920:	165e9f81 	.word	0x165e9f81

08007924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d101      	bne.n	8007936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	e049      	b.n	80079ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b00      	cmp	r3, #0
 8007940:	d106      	bne.n	8007950 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f7fb fdac 	bl	80034a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2202      	movs	r2, #2
 8007954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	3304      	adds	r3, #4
 8007960:	4619      	mov	r1, r3
 8007962:	4610      	mov	r0, r2
 8007964:	f001 f876 	bl	8008a54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3708      	adds	r7, #8
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
	...

080079d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d001      	beq.n	80079ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e04c      	b.n	8007a86 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2202      	movs	r2, #2
 80079f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a26      	ldr	r2, [pc, #152]	@ (8007a94 <HAL_TIM_Base_Start+0xc0>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d022      	beq.n	8007a44 <HAL_TIM_Base_Start+0x70>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a06:	d01d      	beq.n	8007a44 <HAL_TIM_Base_Start+0x70>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a22      	ldr	r2, [pc, #136]	@ (8007a98 <HAL_TIM_Base_Start+0xc4>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d018      	beq.n	8007a44 <HAL_TIM_Base_Start+0x70>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a21      	ldr	r2, [pc, #132]	@ (8007a9c <HAL_TIM_Base_Start+0xc8>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d013      	beq.n	8007a44 <HAL_TIM_Base_Start+0x70>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a1f      	ldr	r2, [pc, #124]	@ (8007aa0 <HAL_TIM_Base_Start+0xcc>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d00e      	beq.n	8007a44 <HAL_TIM_Base_Start+0x70>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a1e      	ldr	r2, [pc, #120]	@ (8007aa4 <HAL_TIM_Base_Start+0xd0>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d009      	beq.n	8007a44 <HAL_TIM_Base_Start+0x70>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a1c      	ldr	r2, [pc, #112]	@ (8007aa8 <HAL_TIM_Base_Start+0xd4>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d004      	beq.n	8007a44 <HAL_TIM_Base_Start+0x70>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a1b      	ldr	r2, [pc, #108]	@ (8007aac <HAL_TIM_Base_Start+0xd8>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d115      	bne.n	8007a70 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	689a      	ldr	r2, [r3, #8]
 8007a4a:	4b19      	ldr	r3, [pc, #100]	@ (8007ab0 <HAL_TIM_Base_Start+0xdc>)
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2b06      	cmp	r3, #6
 8007a54:	d015      	beq.n	8007a82 <HAL_TIM_Base_Start+0xae>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a5c:	d011      	beq.n	8007a82 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f042 0201 	orr.w	r2, r2, #1
 8007a6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a6e:	e008      	b.n	8007a82 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f042 0201 	orr.w	r2, r2, #1
 8007a7e:	601a      	str	r2, [r3, #0]
 8007a80:	e000      	b.n	8007a84 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3714      	adds	r7, #20
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	40010000 	.word	0x40010000
 8007a98:	40000400 	.word	0x40000400
 8007a9c:	40000800 	.word	0x40000800
 8007aa0:	40000c00 	.word	0x40000c00
 8007aa4:	40010400 	.word	0x40010400
 8007aa8:	40014000 	.word	0x40014000
 8007aac:	40001800 	.word	0x40001800
 8007ab0:	00010007 	.word	0x00010007

08007ab4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	6a1a      	ldr	r2, [r3, #32]
 8007ac2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10f      	bne.n	8007aec <HAL_TIM_Base_Stop+0x38>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	6a1a      	ldr	r2, [r3, #32]
 8007ad2:	f240 4344 	movw	r3, #1092	@ 0x444
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d107      	bne.n	8007aec <HAL_TIM_Base_Stop+0x38>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f022 0201 	bic.w	r2, r2, #1
 8007aea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b082      	sub	sp, #8
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e049      	b.n	8007ba8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d106      	bne.n	8007b2e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f7fb fda1 	bl	8003670 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2202      	movs	r2, #2
 8007b32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	4619      	mov	r1, r3
 8007b40:	4610      	mov	r0, r2
 8007b42:	f000 ff87 	bl	8008a54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3708      	adds	r7, #8
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d109      	bne.n	8007bd4 <HAL_TIM_PWM_Start+0x24>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	bf14      	ite	ne
 8007bcc:	2301      	movne	r3, #1
 8007bce:	2300      	moveq	r3, #0
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	e03c      	b.n	8007c4e <HAL_TIM_PWM_Start+0x9e>
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	2b04      	cmp	r3, #4
 8007bd8:	d109      	bne.n	8007bee <HAL_TIM_PWM_Start+0x3e>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	bf14      	ite	ne
 8007be6:	2301      	movne	r3, #1
 8007be8:	2300      	moveq	r3, #0
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	e02f      	b.n	8007c4e <HAL_TIM_PWM_Start+0x9e>
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	2b08      	cmp	r3, #8
 8007bf2:	d109      	bne.n	8007c08 <HAL_TIM_PWM_Start+0x58>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	bf14      	ite	ne
 8007c00:	2301      	movne	r3, #1
 8007c02:	2300      	moveq	r3, #0
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	e022      	b.n	8007c4e <HAL_TIM_PWM_Start+0x9e>
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	2b0c      	cmp	r3, #12
 8007c0c:	d109      	bne.n	8007c22 <HAL_TIM_PWM_Start+0x72>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	bf14      	ite	ne
 8007c1a:	2301      	movne	r3, #1
 8007c1c:	2300      	moveq	r3, #0
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	e015      	b.n	8007c4e <HAL_TIM_PWM_Start+0x9e>
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	2b10      	cmp	r3, #16
 8007c26:	d109      	bne.n	8007c3c <HAL_TIM_PWM_Start+0x8c>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	bf14      	ite	ne
 8007c34:	2301      	movne	r3, #1
 8007c36:	2300      	moveq	r3, #0
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	e008      	b.n	8007c4e <HAL_TIM_PWM_Start+0x9e>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	bf14      	ite	ne
 8007c48:	2301      	movne	r3, #1
 8007c4a:	2300      	moveq	r3, #0
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d001      	beq.n	8007c56 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e092      	b.n	8007d7c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d104      	bne.n	8007c66 <HAL_TIM_PWM_Start+0xb6>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2202      	movs	r2, #2
 8007c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c64:	e023      	b.n	8007cae <HAL_TIM_PWM_Start+0xfe>
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	2b04      	cmp	r3, #4
 8007c6a:	d104      	bne.n	8007c76 <HAL_TIM_PWM_Start+0xc6>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2202      	movs	r2, #2
 8007c70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c74:	e01b      	b.n	8007cae <HAL_TIM_PWM_Start+0xfe>
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	2b08      	cmp	r3, #8
 8007c7a:	d104      	bne.n	8007c86 <HAL_TIM_PWM_Start+0xd6>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2202      	movs	r2, #2
 8007c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c84:	e013      	b.n	8007cae <HAL_TIM_PWM_Start+0xfe>
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	2b0c      	cmp	r3, #12
 8007c8a:	d104      	bne.n	8007c96 <HAL_TIM_PWM_Start+0xe6>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2202      	movs	r2, #2
 8007c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c94:	e00b      	b.n	8007cae <HAL_TIM_PWM_Start+0xfe>
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	2b10      	cmp	r3, #16
 8007c9a:	d104      	bne.n	8007ca6 <HAL_TIM_PWM_Start+0xf6>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2202      	movs	r2, #2
 8007ca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ca4:	e003      	b.n	8007cae <HAL_TIM_PWM_Start+0xfe>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2202      	movs	r2, #2
 8007caa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	6839      	ldr	r1, [r7, #0]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f001 fa70 	bl	800919c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a30      	ldr	r2, [pc, #192]	@ (8007d84 <HAL_TIM_PWM_Start+0x1d4>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d004      	beq.n	8007cd0 <HAL_TIM_PWM_Start+0x120>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a2f      	ldr	r2, [pc, #188]	@ (8007d88 <HAL_TIM_PWM_Start+0x1d8>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d101      	bne.n	8007cd4 <HAL_TIM_PWM_Start+0x124>
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e000      	b.n	8007cd6 <HAL_TIM_PWM_Start+0x126>
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d007      	beq.n	8007cea <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007ce8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a25      	ldr	r2, [pc, #148]	@ (8007d84 <HAL_TIM_PWM_Start+0x1d4>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d022      	beq.n	8007d3a <HAL_TIM_PWM_Start+0x18a>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cfc:	d01d      	beq.n	8007d3a <HAL_TIM_PWM_Start+0x18a>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a22      	ldr	r2, [pc, #136]	@ (8007d8c <HAL_TIM_PWM_Start+0x1dc>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d018      	beq.n	8007d3a <HAL_TIM_PWM_Start+0x18a>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a20      	ldr	r2, [pc, #128]	@ (8007d90 <HAL_TIM_PWM_Start+0x1e0>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d013      	beq.n	8007d3a <HAL_TIM_PWM_Start+0x18a>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a1f      	ldr	r2, [pc, #124]	@ (8007d94 <HAL_TIM_PWM_Start+0x1e4>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d00e      	beq.n	8007d3a <HAL_TIM_PWM_Start+0x18a>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a19      	ldr	r2, [pc, #100]	@ (8007d88 <HAL_TIM_PWM_Start+0x1d8>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d009      	beq.n	8007d3a <HAL_TIM_PWM_Start+0x18a>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8007d98 <HAL_TIM_PWM_Start+0x1e8>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d004      	beq.n	8007d3a <HAL_TIM_PWM_Start+0x18a>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a19      	ldr	r2, [pc, #100]	@ (8007d9c <HAL_TIM_PWM_Start+0x1ec>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d115      	bne.n	8007d66 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	689a      	ldr	r2, [r3, #8]
 8007d40:	4b17      	ldr	r3, [pc, #92]	@ (8007da0 <HAL_TIM_PWM_Start+0x1f0>)
 8007d42:	4013      	ands	r3, r2
 8007d44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2b06      	cmp	r3, #6
 8007d4a:	d015      	beq.n	8007d78 <HAL_TIM_PWM_Start+0x1c8>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d52:	d011      	beq.n	8007d78 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f042 0201 	orr.w	r2, r2, #1
 8007d62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d64:	e008      	b.n	8007d78 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f042 0201 	orr.w	r2, r2, #1
 8007d74:	601a      	str	r2, [r3, #0]
 8007d76:	e000      	b.n	8007d7a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d78:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	40010000 	.word	0x40010000
 8007d88:	40010400 	.word	0x40010400
 8007d8c:	40000400 	.word	0x40000400
 8007d90:	40000800 	.word	0x40000800
 8007d94:	40000c00 	.word	0x40000c00
 8007d98:	40014000 	.word	0x40014000
 8007d9c:	40001800 	.word	0x40001800
 8007da0:	00010007 	.word	0x00010007

08007da4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dae:	2300      	movs	r3, #0
 8007db0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d109      	bne.n	8007dcc <HAL_TIM_PWM_Start_IT+0x28>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	bf14      	ite	ne
 8007dc4:	2301      	movne	r3, #1
 8007dc6:	2300      	moveq	r3, #0
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	e03c      	b.n	8007e46 <HAL_TIM_PWM_Start_IT+0xa2>
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	2b04      	cmp	r3, #4
 8007dd0:	d109      	bne.n	8007de6 <HAL_TIM_PWM_Start_IT+0x42>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	bf14      	ite	ne
 8007dde:	2301      	movne	r3, #1
 8007de0:	2300      	moveq	r3, #0
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	e02f      	b.n	8007e46 <HAL_TIM_PWM_Start_IT+0xa2>
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	2b08      	cmp	r3, #8
 8007dea:	d109      	bne.n	8007e00 <HAL_TIM_PWM_Start_IT+0x5c>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	bf14      	ite	ne
 8007df8:	2301      	movne	r3, #1
 8007dfa:	2300      	moveq	r3, #0
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	e022      	b.n	8007e46 <HAL_TIM_PWM_Start_IT+0xa2>
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	2b0c      	cmp	r3, #12
 8007e04:	d109      	bne.n	8007e1a <HAL_TIM_PWM_Start_IT+0x76>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	bf14      	ite	ne
 8007e12:	2301      	movne	r3, #1
 8007e14:	2300      	moveq	r3, #0
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	e015      	b.n	8007e46 <HAL_TIM_PWM_Start_IT+0xa2>
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	2b10      	cmp	r3, #16
 8007e1e:	d109      	bne.n	8007e34 <HAL_TIM_PWM_Start_IT+0x90>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	bf14      	ite	ne
 8007e2c:	2301      	movne	r3, #1
 8007e2e:	2300      	moveq	r3, #0
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	e008      	b.n	8007e46 <HAL_TIM_PWM_Start_IT+0xa2>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	bf14      	ite	ne
 8007e40:	2301      	movne	r3, #1
 8007e42:	2300      	moveq	r3, #0
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d001      	beq.n	8007e4e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e0dd      	b.n	800800a <HAL_TIM_PWM_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d104      	bne.n	8007e5e <HAL_TIM_PWM_Start_IT+0xba>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2202      	movs	r2, #2
 8007e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e5c:	e023      	b.n	8007ea6 <HAL_TIM_PWM_Start_IT+0x102>
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	2b04      	cmp	r3, #4
 8007e62:	d104      	bne.n	8007e6e <HAL_TIM_PWM_Start_IT+0xca>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2202      	movs	r2, #2
 8007e68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e6c:	e01b      	b.n	8007ea6 <HAL_TIM_PWM_Start_IT+0x102>
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	2b08      	cmp	r3, #8
 8007e72:	d104      	bne.n	8007e7e <HAL_TIM_PWM_Start_IT+0xda>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2202      	movs	r2, #2
 8007e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e7c:	e013      	b.n	8007ea6 <HAL_TIM_PWM_Start_IT+0x102>
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	2b0c      	cmp	r3, #12
 8007e82:	d104      	bne.n	8007e8e <HAL_TIM_PWM_Start_IT+0xea>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2202      	movs	r2, #2
 8007e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e8c:	e00b      	b.n	8007ea6 <HAL_TIM_PWM_Start_IT+0x102>
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2b10      	cmp	r3, #16
 8007e92:	d104      	bne.n	8007e9e <HAL_TIM_PWM_Start_IT+0xfa>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2202      	movs	r2, #2
 8007e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e9c:	e003      	b.n	8007ea6 <HAL_TIM_PWM_Start_IT+0x102>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2202      	movs	r2, #2
 8007ea2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	2b0c      	cmp	r3, #12
 8007eaa:	d841      	bhi.n	8007f30 <HAL_TIM_PWM_Start_IT+0x18c>
 8007eac:	a201      	add	r2, pc, #4	@ (adr r2, 8007eb4 <HAL_TIM_PWM_Start_IT+0x110>)
 8007eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb2:	bf00      	nop
 8007eb4:	08007ee9 	.word	0x08007ee9
 8007eb8:	08007f31 	.word	0x08007f31
 8007ebc:	08007f31 	.word	0x08007f31
 8007ec0:	08007f31 	.word	0x08007f31
 8007ec4:	08007efb 	.word	0x08007efb
 8007ec8:	08007f31 	.word	0x08007f31
 8007ecc:	08007f31 	.word	0x08007f31
 8007ed0:	08007f31 	.word	0x08007f31
 8007ed4:	08007f0d 	.word	0x08007f0d
 8007ed8:	08007f31 	.word	0x08007f31
 8007edc:	08007f31 	.word	0x08007f31
 8007ee0:	08007f31 	.word	0x08007f31
 8007ee4:	08007f1f 	.word	0x08007f1f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68da      	ldr	r2, [r3, #12]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f042 0202 	orr.w	r2, r2, #2
 8007ef6:	60da      	str	r2, [r3, #12]
      break;
 8007ef8:	e01d      	b.n	8007f36 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68da      	ldr	r2, [r3, #12]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f042 0204 	orr.w	r2, r2, #4
 8007f08:	60da      	str	r2, [r3, #12]
      break;
 8007f0a:	e014      	b.n	8007f36 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68da      	ldr	r2, [r3, #12]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f042 0208 	orr.w	r2, r2, #8
 8007f1a:	60da      	str	r2, [r3, #12]
      break;
 8007f1c:	e00b      	b.n	8007f36 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68da      	ldr	r2, [r3, #12]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f042 0210 	orr.w	r2, r2, #16
 8007f2c:	60da      	str	r2, [r3, #12]
      break;
 8007f2e:	e002      	b.n	8007f36 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	73fb      	strb	r3, [r7, #15]
      break;
 8007f34:	bf00      	nop
  }

  if (status == HAL_OK)
 8007f36:	7bfb      	ldrb	r3, [r7, #15]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d165      	bne.n	8008008 <HAL_TIM_PWM_Start_IT+0x264>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2201      	movs	r2, #1
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	4618      	mov	r0, r3
 8007f46:	f001 f929 	bl	800919c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a31      	ldr	r2, [pc, #196]	@ (8008014 <HAL_TIM_PWM_Start_IT+0x270>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d004      	beq.n	8007f5e <HAL_TIM_PWM_Start_IT+0x1ba>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a2f      	ldr	r2, [pc, #188]	@ (8008018 <HAL_TIM_PWM_Start_IT+0x274>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d101      	bne.n	8007f62 <HAL_TIM_PWM_Start_IT+0x1be>
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e000      	b.n	8007f64 <HAL_TIM_PWM_Start_IT+0x1c0>
 8007f62:	2300      	movs	r3, #0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d007      	beq.n	8007f78 <HAL_TIM_PWM_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007f76:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a25      	ldr	r2, [pc, #148]	@ (8008014 <HAL_TIM_PWM_Start_IT+0x270>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d022      	beq.n	8007fc8 <HAL_TIM_PWM_Start_IT+0x224>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f8a:	d01d      	beq.n	8007fc8 <HAL_TIM_PWM_Start_IT+0x224>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a22      	ldr	r2, [pc, #136]	@ (800801c <HAL_TIM_PWM_Start_IT+0x278>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d018      	beq.n	8007fc8 <HAL_TIM_PWM_Start_IT+0x224>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a21      	ldr	r2, [pc, #132]	@ (8008020 <HAL_TIM_PWM_Start_IT+0x27c>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d013      	beq.n	8007fc8 <HAL_TIM_PWM_Start_IT+0x224>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8008024 <HAL_TIM_PWM_Start_IT+0x280>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d00e      	beq.n	8007fc8 <HAL_TIM_PWM_Start_IT+0x224>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a1a      	ldr	r2, [pc, #104]	@ (8008018 <HAL_TIM_PWM_Start_IT+0x274>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d009      	beq.n	8007fc8 <HAL_TIM_PWM_Start_IT+0x224>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a1b      	ldr	r2, [pc, #108]	@ (8008028 <HAL_TIM_PWM_Start_IT+0x284>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d004      	beq.n	8007fc8 <HAL_TIM_PWM_Start_IT+0x224>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a1a      	ldr	r2, [pc, #104]	@ (800802c <HAL_TIM_PWM_Start_IT+0x288>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d115      	bne.n	8007ff4 <HAL_TIM_PWM_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	689a      	ldr	r2, [r3, #8]
 8007fce:	4b18      	ldr	r3, [pc, #96]	@ (8008030 <HAL_TIM_PWM_Start_IT+0x28c>)
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	2b06      	cmp	r3, #6
 8007fd8:	d015      	beq.n	8008006 <HAL_TIM_PWM_Start_IT+0x262>
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fe0:	d011      	beq.n	8008006 <HAL_TIM_PWM_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f042 0201 	orr.w	r2, r2, #1
 8007ff0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ff2:	e008      	b.n	8008006 <HAL_TIM_PWM_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f042 0201 	orr.w	r2, r2, #1
 8008002:	601a      	str	r2, [r3, #0]
 8008004:	e000      	b.n	8008008 <HAL_TIM_PWM_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008006:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008008:	7bfb      	ldrb	r3, [r7, #15]
}
 800800a:	4618      	mov	r0, r3
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	40010000 	.word	0x40010000
 8008018:	40010400 	.word	0x40010400
 800801c:	40000400 	.word	0x40000400
 8008020:	40000800 	.word	0x40000800
 8008024:	40000c00 	.word	0x40000c00
 8008028:	40014000 	.word	0x40014000
 800802c:	40001800 	.word	0x40001800
 8008030:	00010007 	.word	0x00010007

08008034 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800803e:	2300      	movs	r3, #0
 8008040:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	2b0c      	cmp	r3, #12
 8008046:	d841      	bhi.n	80080cc <HAL_TIM_PWM_Stop_IT+0x98>
 8008048:	a201      	add	r2, pc, #4	@ (adr r2, 8008050 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800804a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804e:	bf00      	nop
 8008050:	08008085 	.word	0x08008085
 8008054:	080080cd 	.word	0x080080cd
 8008058:	080080cd 	.word	0x080080cd
 800805c:	080080cd 	.word	0x080080cd
 8008060:	08008097 	.word	0x08008097
 8008064:	080080cd 	.word	0x080080cd
 8008068:	080080cd 	.word	0x080080cd
 800806c:	080080cd 	.word	0x080080cd
 8008070:	080080a9 	.word	0x080080a9
 8008074:	080080cd 	.word	0x080080cd
 8008078:	080080cd 	.word	0x080080cd
 800807c:	080080cd 	.word	0x080080cd
 8008080:	080080bb 	.word	0x080080bb
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68da      	ldr	r2, [r3, #12]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f022 0202 	bic.w	r2, r2, #2
 8008092:	60da      	str	r2, [r3, #12]
      break;
 8008094:	e01d      	b.n	80080d2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68da      	ldr	r2, [r3, #12]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f022 0204 	bic.w	r2, r2, #4
 80080a4:	60da      	str	r2, [r3, #12]
      break;
 80080a6:	e014      	b.n	80080d2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	68da      	ldr	r2, [r3, #12]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f022 0208 	bic.w	r2, r2, #8
 80080b6:	60da      	str	r2, [r3, #12]
      break;
 80080b8:	e00b      	b.n	80080d2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68da      	ldr	r2, [r3, #12]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f022 0210 	bic.w	r2, r2, #16
 80080c8:	60da      	str	r2, [r3, #12]
      break;
 80080ca:	e002      	b.n	80080d2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	73fb      	strb	r3, [r7, #15]
      break;
 80080d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80080d2:	7bfb      	ldrb	r3, [r7, #15]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d171      	bne.n	80081bc <HAL_TIM_PWM_Stop_IT+0x188>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2200      	movs	r2, #0
 80080de:	6839      	ldr	r1, [r7, #0]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f001 f85b 	bl	800919c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a37      	ldr	r2, [pc, #220]	@ (80081c8 <HAL_TIM_PWM_Stop_IT+0x194>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d004      	beq.n	80080fa <HAL_TIM_PWM_Stop_IT+0xc6>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a35      	ldr	r2, [pc, #212]	@ (80081cc <HAL_TIM_PWM_Stop_IT+0x198>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d101      	bne.n	80080fe <HAL_TIM_PWM_Stop_IT+0xca>
 80080fa:	2301      	movs	r3, #1
 80080fc:	e000      	b.n	8008100 <HAL_TIM_PWM_Stop_IT+0xcc>
 80080fe:	2300      	movs	r3, #0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d017      	beq.n	8008134 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	6a1a      	ldr	r2, [r3, #32]
 800810a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800810e:	4013      	ands	r3, r2
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10f      	bne.n	8008134 <HAL_TIM_PWM_Stop_IT+0x100>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6a1a      	ldr	r2, [r3, #32]
 800811a:	f240 4344 	movw	r3, #1092	@ 0x444
 800811e:	4013      	ands	r3, r2
 8008120:	2b00      	cmp	r3, #0
 8008122:	d107      	bne.n	8008134 <HAL_TIM_PWM_Stop_IT+0x100>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008132:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	6a1a      	ldr	r2, [r3, #32]
 800813a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800813e:	4013      	ands	r3, r2
 8008140:	2b00      	cmp	r3, #0
 8008142:	d10f      	bne.n	8008164 <HAL_TIM_PWM_Stop_IT+0x130>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	6a1a      	ldr	r2, [r3, #32]
 800814a:	f240 4344 	movw	r3, #1092	@ 0x444
 800814e:	4013      	ands	r3, r2
 8008150:	2b00      	cmp	r3, #0
 8008152:	d107      	bne.n	8008164 <HAL_TIM_PWM_Stop_IT+0x130>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f022 0201 	bic.w	r2, r2, #1
 8008162:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d104      	bne.n	8008174 <HAL_TIM_PWM_Stop_IT+0x140>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2201      	movs	r2, #1
 800816e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008172:	e023      	b.n	80081bc <HAL_TIM_PWM_Stop_IT+0x188>
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	2b04      	cmp	r3, #4
 8008178:	d104      	bne.n	8008184 <HAL_TIM_PWM_Stop_IT+0x150>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008182:	e01b      	b.n	80081bc <HAL_TIM_PWM_Stop_IT+0x188>
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	2b08      	cmp	r3, #8
 8008188:	d104      	bne.n	8008194 <HAL_TIM_PWM_Stop_IT+0x160>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008192:	e013      	b.n	80081bc <HAL_TIM_PWM_Stop_IT+0x188>
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	2b0c      	cmp	r3, #12
 8008198:	d104      	bne.n	80081a4 <HAL_TIM_PWM_Stop_IT+0x170>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80081a2:	e00b      	b.n	80081bc <HAL_TIM_PWM_Stop_IT+0x188>
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	2b10      	cmp	r3, #16
 80081a8:	d104      	bne.n	80081b4 <HAL_TIM_PWM_Stop_IT+0x180>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2201      	movs	r2, #1
 80081ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081b2:	e003      	b.n	80081bc <HAL_TIM_PWM_Stop_IT+0x188>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 80081bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	40010000 	.word	0x40010000
 80081cc:	40010400 	.word	0x40010400

080081d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d101      	bne.n	80081e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	e08f      	b.n	8008304 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d106      	bne.n	80081fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7fb f9ed 	bl	80035d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2202      	movs	r2, #2
 8008202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	6899      	ldr	r1, [r3, #8]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	4b3e      	ldr	r3, [pc, #248]	@ (800830c <HAL_TIM_Encoder_Init+0x13c>)
 8008212:	400b      	ands	r3, r1
 8008214:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	3304      	adds	r3, #4
 800821e:	4619      	mov	r1, r3
 8008220:	4610      	mov	r0, r2
 8008222:	f000 fc17 	bl	8008a54 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	6a1b      	ldr	r3, [r3, #32]
 800823c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	697a      	ldr	r2, [r7, #20]
 8008244:	4313      	orrs	r3, r2
 8008246:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	4b31      	ldr	r3, [pc, #196]	@ (8008310 <HAL_TIM_Encoder_Init+0x140>)
 800824c:	4013      	ands	r3, r2
 800824e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	689a      	ldr	r2, [r3, #8]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	021b      	lsls	r3, r3, #8
 800825a:	4313      	orrs	r3, r2
 800825c:	693a      	ldr	r2, [r7, #16]
 800825e:	4313      	orrs	r3, r2
 8008260:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008262:	693a      	ldr	r2, [r7, #16]
 8008264:	4b2b      	ldr	r3, [pc, #172]	@ (8008314 <HAL_TIM_Encoder_Init+0x144>)
 8008266:	4013      	ands	r3, r2
 8008268:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800826a:	693a      	ldr	r2, [r7, #16]
 800826c:	4b2a      	ldr	r3, [pc, #168]	@ (8008318 <HAL_TIM_Encoder_Init+0x148>)
 800826e:	4013      	ands	r3, r2
 8008270:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	68da      	ldr	r2, [r3, #12]
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	69db      	ldr	r3, [r3, #28]
 800827a:	021b      	lsls	r3, r3, #8
 800827c:	4313      	orrs	r3, r2
 800827e:	693a      	ldr	r2, [r7, #16]
 8008280:	4313      	orrs	r3, r2
 8008282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	011a      	lsls	r2, r3, #4
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	6a1b      	ldr	r3, [r3, #32]
 800828e:	031b      	lsls	r3, r3, #12
 8008290:	4313      	orrs	r3, r2
 8008292:	693a      	ldr	r2, [r7, #16]
 8008294:	4313      	orrs	r3, r2
 8008296:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800829e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80082a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	685a      	ldr	r2, [r3, #4]
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	695b      	ldr	r3, [r3, #20]
 80082b0:	011b      	lsls	r3, r3, #4
 80082b2:	4313      	orrs	r3, r2
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	697a      	ldr	r2, [r7, #20]
 80082c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	68fa      	ldr	r2, [r7, #12]
 80082d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2201      	movs	r2, #1
 80082ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2201      	movs	r2, #1
 80082f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2201      	movs	r2, #1
 80082fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	3718      	adds	r7, #24
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	fffebff8 	.word	0xfffebff8
 8008310:	fffffcfc 	.word	0xfffffcfc
 8008314:	fffff3f3 	.word	0xfffff3f3
 8008318:	ffff0f0f 	.word	0xffff0f0f

0800831c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800832c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008334:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800833c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008344:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d110      	bne.n	800836e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800834c:	7bfb      	ldrb	r3, [r7, #15]
 800834e:	2b01      	cmp	r3, #1
 8008350:	d102      	bne.n	8008358 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008352:	7b7b      	ldrb	r3, [r7, #13]
 8008354:	2b01      	cmp	r3, #1
 8008356:	d001      	beq.n	800835c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	e069      	b.n	8008430 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2202      	movs	r2, #2
 8008360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2202      	movs	r2, #2
 8008368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800836c:	e031      	b.n	80083d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	2b04      	cmp	r3, #4
 8008372:	d110      	bne.n	8008396 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008374:	7bbb      	ldrb	r3, [r7, #14]
 8008376:	2b01      	cmp	r3, #1
 8008378:	d102      	bne.n	8008380 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800837a:	7b3b      	ldrb	r3, [r7, #12]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d001      	beq.n	8008384 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	e055      	b.n	8008430 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2202      	movs	r2, #2
 8008388:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2202      	movs	r2, #2
 8008390:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008394:	e01d      	b.n	80083d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008396:	7bfb      	ldrb	r3, [r7, #15]
 8008398:	2b01      	cmp	r3, #1
 800839a:	d108      	bne.n	80083ae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800839c:	7bbb      	ldrb	r3, [r7, #14]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d105      	bne.n	80083ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80083a2:	7b7b      	ldrb	r3, [r7, #13]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d102      	bne.n	80083ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80083a8:	7b3b      	ldrb	r3, [r7, #12]
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d001      	beq.n	80083b2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	e03e      	b.n	8008430 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2202      	movs	r2, #2
 80083b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2202      	movs	r2, #2
 80083be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2202      	movs	r2, #2
 80083c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2202      	movs	r2, #2
 80083ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d003      	beq.n	80083e0 <HAL_TIM_Encoder_Start+0xc4>
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	2b04      	cmp	r3, #4
 80083dc:	d008      	beq.n	80083f0 <HAL_TIM_Encoder_Start+0xd4>
 80083de:	e00f      	b.n	8008400 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2201      	movs	r2, #1
 80083e6:	2100      	movs	r1, #0
 80083e8:	4618      	mov	r0, r3
 80083ea:	f000 fed7 	bl	800919c <TIM_CCxChannelCmd>
      break;
 80083ee:	e016      	b.n	800841e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2201      	movs	r2, #1
 80083f6:	2104      	movs	r1, #4
 80083f8:	4618      	mov	r0, r3
 80083fa:	f000 fecf 	bl	800919c <TIM_CCxChannelCmd>
      break;
 80083fe:	e00e      	b.n	800841e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2201      	movs	r2, #1
 8008406:	2100      	movs	r1, #0
 8008408:	4618      	mov	r0, r3
 800840a:	f000 fec7 	bl	800919c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2201      	movs	r2, #1
 8008414:	2104      	movs	r1, #4
 8008416:	4618      	mov	r0, r3
 8008418:	f000 fec0 	bl	800919c <TIM_CCxChannelCmd>
      break;
 800841c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f042 0201 	orr.w	r2, r2, #1
 800842c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	3710      	adds	r7, #16
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	f003 0302 	and.w	r3, r3, #2
 8008456:	2b00      	cmp	r3, #0
 8008458:	d020      	beq.n	800849c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f003 0302 	and.w	r3, r3, #2
 8008460:	2b00      	cmp	r3, #0
 8008462:	d01b      	beq.n	800849c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f06f 0202 	mvn.w	r2, #2
 800846c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2201      	movs	r2, #1
 8008472:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	699b      	ldr	r3, [r3, #24]
 800847a:	f003 0303 	and.w	r3, r3, #3
 800847e:	2b00      	cmp	r3, #0
 8008480:	d003      	beq.n	800848a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fad2 	bl	8008a2c <HAL_TIM_IC_CaptureCallback>
 8008488:	e005      	b.n	8008496 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fac4 	bl	8008a18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f7f8 fa43 	bl	800091c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	f003 0304 	and.w	r3, r3, #4
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d020      	beq.n	80084e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f003 0304 	and.w	r3, r3, #4
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d01b      	beq.n	80084e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f06f 0204 	mvn.w	r2, #4
 80084b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2202      	movs	r2, #2
 80084be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	699b      	ldr	r3, [r3, #24]
 80084c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d003      	beq.n	80084d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 faac 	bl	8008a2c <HAL_TIM_IC_CaptureCallback>
 80084d4:	e005      	b.n	80084e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 fa9e 	bl	8008a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f7f8 fa1d 	bl	800091c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	f003 0308 	and.w	r3, r3, #8
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d020      	beq.n	8008534 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f003 0308 	and.w	r3, r3, #8
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d01b      	beq.n	8008534 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f06f 0208 	mvn.w	r2, #8
 8008504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2204      	movs	r2, #4
 800850a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	69db      	ldr	r3, [r3, #28]
 8008512:	f003 0303 	and.w	r3, r3, #3
 8008516:	2b00      	cmp	r3, #0
 8008518:	d003      	beq.n	8008522 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 fa86 	bl	8008a2c <HAL_TIM_IC_CaptureCallback>
 8008520:	e005      	b.n	800852e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 fa78 	bl	8008a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f7f8 f9f7 	bl	800091c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	f003 0310 	and.w	r3, r3, #16
 800853a:	2b00      	cmp	r3, #0
 800853c:	d020      	beq.n	8008580 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f003 0310 	and.w	r3, r3, #16
 8008544:	2b00      	cmp	r3, #0
 8008546:	d01b      	beq.n	8008580 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f06f 0210 	mvn.w	r2, #16
 8008550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2208      	movs	r2, #8
 8008556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	69db      	ldr	r3, [r3, #28]
 800855e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008562:	2b00      	cmp	r3, #0
 8008564:	d003      	beq.n	800856e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fa60 	bl	8008a2c <HAL_TIM_IC_CaptureCallback>
 800856c:	e005      	b.n	800857a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 fa52 	bl	8008a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f7f8 f9d1 	bl	800091c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	f003 0301 	and.w	r3, r3, #1
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00c      	beq.n	80085a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f003 0301 	and.w	r3, r3, #1
 8008590:	2b00      	cmp	r3, #0
 8008592:	d007      	beq.n	80085a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f06f 0201 	mvn.w	r2, #1
 800859c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 fa30 	bl	8008a04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d104      	bne.n	80085b8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d00c      	beq.n	80085d2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d007      	beq.n	80085d2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80085ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 ff21 	bl	8009414 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00c      	beq.n	80085f6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d007      	beq.n	80085f6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80085ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 ff19 	bl	8009428 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00c      	beq.n	800861a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008606:	2b00      	cmp	r3, #0
 8008608:	d007      	beq.n	800861a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 fa13 	bl	8008a40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	f003 0320 	and.w	r3, r3, #32
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00c      	beq.n	800863e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f003 0320 	and.w	r3, r3, #32
 800862a:	2b00      	cmp	r3, #0
 800862c:	d007      	beq.n	800863e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f06f 0220 	mvn.w	r2, #32
 8008636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 fee1 	bl	8009400 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800863e:	bf00      	nop
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
	...

08008648 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008654:	2300      	movs	r3, #0
 8008656:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800865e:	2b01      	cmp	r3, #1
 8008660:	d101      	bne.n	8008666 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008662:	2302      	movs	r3, #2
 8008664:	e0ff      	b.n	8008866 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2201      	movs	r2, #1
 800866a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2b14      	cmp	r3, #20
 8008672:	f200 80f0 	bhi.w	8008856 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008676:	a201      	add	r2, pc, #4	@ (adr r2, 800867c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800867c:	080086d1 	.word	0x080086d1
 8008680:	08008857 	.word	0x08008857
 8008684:	08008857 	.word	0x08008857
 8008688:	08008857 	.word	0x08008857
 800868c:	08008711 	.word	0x08008711
 8008690:	08008857 	.word	0x08008857
 8008694:	08008857 	.word	0x08008857
 8008698:	08008857 	.word	0x08008857
 800869c:	08008753 	.word	0x08008753
 80086a0:	08008857 	.word	0x08008857
 80086a4:	08008857 	.word	0x08008857
 80086a8:	08008857 	.word	0x08008857
 80086ac:	08008793 	.word	0x08008793
 80086b0:	08008857 	.word	0x08008857
 80086b4:	08008857 	.word	0x08008857
 80086b8:	08008857 	.word	0x08008857
 80086bc:	080087d5 	.word	0x080087d5
 80086c0:	08008857 	.word	0x08008857
 80086c4:	08008857 	.word	0x08008857
 80086c8:	08008857 	.word	0x08008857
 80086cc:	08008815 	.word	0x08008815
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	68b9      	ldr	r1, [r7, #8]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f000 fa68 	bl	8008bac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	699a      	ldr	r2, [r3, #24]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f042 0208 	orr.w	r2, r2, #8
 80086ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	699a      	ldr	r2, [r3, #24]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f022 0204 	bic.w	r2, r2, #4
 80086fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	6999      	ldr	r1, [r3, #24]
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	691a      	ldr	r2, [r3, #16]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	430a      	orrs	r2, r1
 800870c:	619a      	str	r2, [r3, #24]
      break;
 800870e:	e0a5      	b.n	800885c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	68b9      	ldr	r1, [r7, #8]
 8008716:	4618      	mov	r0, r3
 8008718:	f000 faba 	bl	8008c90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	699a      	ldr	r2, [r3, #24]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800872a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	699a      	ldr	r2, [r3, #24]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800873a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	6999      	ldr	r1, [r3, #24]
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	021a      	lsls	r2, r3, #8
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	430a      	orrs	r2, r1
 800874e:	619a      	str	r2, [r3, #24]
      break;
 8008750:	e084      	b.n	800885c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	68b9      	ldr	r1, [r7, #8]
 8008758:	4618      	mov	r0, r3
 800875a:	f000 fb11 	bl	8008d80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	69da      	ldr	r2, [r3, #28]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f042 0208 	orr.w	r2, r2, #8
 800876c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	69da      	ldr	r2, [r3, #28]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f022 0204 	bic.w	r2, r2, #4
 800877c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	69d9      	ldr	r1, [r3, #28]
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	691a      	ldr	r2, [r3, #16]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	430a      	orrs	r2, r1
 800878e:	61da      	str	r2, [r3, #28]
      break;
 8008790:	e064      	b.n	800885c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	68b9      	ldr	r1, [r7, #8]
 8008798:	4618      	mov	r0, r3
 800879a:	f000 fb67 	bl	8008e6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	69da      	ldr	r2, [r3, #28]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80087ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	69da      	ldr	r2, [r3, #28]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80087bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	69d9      	ldr	r1, [r3, #28]
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	021a      	lsls	r2, r3, #8
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	430a      	orrs	r2, r1
 80087d0:	61da      	str	r2, [r3, #28]
      break;
 80087d2:	e043      	b.n	800885c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	68b9      	ldr	r1, [r7, #8]
 80087da:	4618      	mov	r0, r3
 80087dc:	f000 fb9e 	bl	8008f1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f042 0208 	orr.w	r2, r2, #8
 80087ee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f022 0204 	bic.w	r2, r2, #4
 80087fe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	691a      	ldr	r2, [r3, #16]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	430a      	orrs	r2, r1
 8008810:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008812:	e023      	b.n	800885c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	68b9      	ldr	r1, [r7, #8]
 800881a:	4618      	mov	r0, r3
 800881c:	f000 fbd0 	bl	8008fc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800882e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800883e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	021a      	lsls	r2, r3, #8
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	430a      	orrs	r2, r1
 8008852:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008854:	e002      	b.n	800885c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	75fb      	strb	r3, [r7, #23]
      break;
 800885a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008864:	7dfb      	ldrb	r3, [r7, #23]
}
 8008866:	4618      	mov	r0, r3
 8008868:	3718      	adds	r7, #24
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop

08008870 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800887a:	2300      	movs	r3, #0
 800887c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008884:	2b01      	cmp	r3, #1
 8008886:	d101      	bne.n	800888c <HAL_TIM_ConfigClockSource+0x1c>
 8008888:	2302      	movs	r3, #2
 800888a:	e0b4      	b.n	80089f6 <HAL_TIM_ConfigClockSource+0x186>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2202      	movs	r2, #2
 8008898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80088a4:	68ba      	ldr	r2, [r7, #8]
 80088a6:	4b56      	ldr	r3, [pc, #344]	@ (8008a00 <HAL_TIM_ConfigClockSource+0x190>)
 80088a8:	4013      	ands	r3, r2
 80088aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80088b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	68ba      	ldr	r2, [r7, #8]
 80088ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088c4:	d03e      	beq.n	8008944 <HAL_TIM_ConfigClockSource+0xd4>
 80088c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088ca:	f200 8087 	bhi.w	80089dc <HAL_TIM_ConfigClockSource+0x16c>
 80088ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088d2:	f000 8086 	beq.w	80089e2 <HAL_TIM_ConfigClockSource+0x172>
 80088d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088da:	d87f      	bhi.n	80089dc <HAL_TIM_ConfigClockSource+0x16c>
 80088dc:	2b70      	cmp	r3, #112	@ 0x70
 80088de:	d01a      	beq.n	8008916 <HAL_TIM_ConfigClockSource+0xa6>
 80088e0:	2b70      	cmp	r3, #112	@ 0x70
 80088e2:	d87b      	bhi.n	80089dc <HAL_TIM_ConfigClockSource+0x16c>
 80088e4:	2b60      	cmp	r3, #96	@ 0x60
 80088e6:	d050      	beq.n	800898a <HAL_TIM_ConfigClockSource+0x11a>
 80088e8:	2b60      	cmp	r3, #96	@ 0x60
 80088ea:	d877      	bhi.n	80089dc <HAL_TIM_ConfigClockSource+0x16c>
 80088ec:	2b50      	cmp	r3, #80	@ 0x50
 80088ee:	d03c      	beq.n	800896a <HAL_TIM_ConfigClockSource+0xfa>
 80088f0:	2b50      	cmp	r3, #80	@ 0x50
 80088f2:	d873      	bhi.n	80089dc <HAL_TIM_ConfigClockSource+0x16c>
 80088f4:	2b40      	cmp	r3, #64	@ 0x40
 80088f6:	d058      	beq.n	80089aa <HAL_TIM_ConfigClockSource+0x13a>
 80088f8:	2b40      	cmp	r3, #64	@ 0x40
 80088fa:	d86f      	bhi.n	80089dc <HAL_TIM_ConfigClockSource+0x16c>
 80088fc:	2b30      	cmp	r3, #48	@ 0x30
 80088fe:	d064      	beq.n	80089ca <HAL_TIM_ConfigClockSource+0x15a>
 8008900:	2b30      	cmp	r3, #48	@ 0x30
 8008902:	d86b      	bhi.n	80089dc <HAL_TIM_ConfigClockSource+0x16c>
 8008904:	2b20      	cmp	r3, #32
 8008906:	d060      	beq.n	80089ca <HAL_TIM_ConfigClockSource+0x15a>
 8008908:	2b20      	cmp	r3, #32
 800890a:	d867      	bhi.n	80089dc <HAL_TIM_ConfigClockSource+0x16c>
 800890c:	2b00      	cmp	r3, #0
 800890e:	d05c      	beq.n	80089ca <HAL_TIM_ConfigClockSource+0x15a>
 8008910:	2b10      	cmp	r3, #16
 8008912:	d05a      	beq.n	80089ca <HAL_TIM_ConfigClockSource+0x15a>
 8008914:	e062      	b.n	80089dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008926:	f000 fc19 	bl	800915c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008938:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	68ba      	ldr	r2, [r7, #8]
 8008940:	609a      	str	r2, [r3, #8]
      break;
 8008942:	e04f      	b.n	80089e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008954:	f000 fc02 	bl	800915c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	689a      	ldr	r2, [r3, #8]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008966:	609a      	str	r2, [r3, #8]
      break;
 8008968:	e03c      	b.n	80089e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008976:	461a      	mov	r2, r3
 8008978:	f000 fb76 	bl	8009068 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2150      	movs	r1, #80	@ 0x50
 8008982:	4618      	mov	r0, r3
 8008984:	f000 fbcf 	bl	8009126 <TIM_ITRx_SetConfig>
      break;
 8008988:	e02c      	b.n	80089e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008996:	461a      	mov	r2, r3
 8008998:	f000 fb95 	bl	80090c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2160      	movs	r1, #96	@ 0x60
 80089a2:	4618      	mov	r0, r3
 80089a4:	f000 fbbf 	bl	8009126 <TIM_ITRx_SetConfig>
      break;
 80089a8:	e01c      	b.n	80089e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80089b6:	461a      	mov	r2, r3
 80089b8:	f000 fb56 	bl	8009068 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2140      	movs	r1, #64	@ 0x40
 80089c2:	4618      	mov	r0, r3
 80089c4:	f000 fbaf 	bl	8009126 <TIM_ITRx_SetConfig>
      break;
 80089c8:	e00c      	b.n	80089e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4619      	mov	r1, r3
 80089d4:	4610      	mov	r0, r2
 80089d6:	f000 fba6 	bl	8009126 <TIM_ITRx_SetConfig>
      break;
 80089da:	e003      	b.n	80089e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	73fb      	strb	r3, [r7, #15]
      break;
 80089e0:	e000      	b.n	80089e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80089e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	fffeff88 	.word	0xfffeff88

08008a04 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008a0c:	bf00      	nop
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a20:	bf00      	nop
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a34:	bf00      	nop
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a48:	bf00      	nop
 8008a4a:	370c      	adds	r7, #12
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b085      	sub	sp, #20
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a46      	ldr	r2, [pc, #280]	@ (8008b80 <TIM_Base_SetConfig+0x12c>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d013      	beq.n	8008a94 <TIM_Base_SetConfig+0x40>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a72:	d00f      	beq.n	8008a94 <TIM_Base_SetConfig+0x40>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a43      	ldr	r2, [pc, #268]	@ (8008b84 <TIM_Base_SetConfig+0x130>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d00b      	beq.n	8008a94 <TIM_Base_SetConfig+0x40>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a42      	ldr	r2, [pc, #264]	@ (8008b88 <TIM_Base_SetConfig+0x134>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d007      	beq.n	8008a94 <TIM_Base_SetConfig+0x40>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4a41      	ldr	r2, [pc, #260]	@ (8008b8c <TIM_Base_SetConfig+0x138>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d003      	beq.n	8008a94 <TIM_Base_SetConfig+0x40>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a40      	ldr	r2, [pc, #256]	@ (8008b90 <TIM_Base_SetConfig+0x13c>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d108      	bne.n	8008aa6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4a35      	ldr	r2, [pc, #212]	@ (8008b80 <TIM_Base_SetConfig+0x12c>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d02b      	beq.n	8008b06 <TIM_Base_SetConfig+0xb2>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ab4:	d027      	beq.n	8008b06 <TIM_Base_SetConfig+0xb2>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a32      	ldr	r2, [pc, #200]	@ (8008b84 <TIM_Base_SetConfig+0x130>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d023      	beq.n	8008b06 <TIM_Base_SetConfig+0xb2>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a31      	ldr	r2, [pc, #196]	@ (8008b88 <TIM_Base_SetConfig+0x134>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d01f      	beq.n	8008b06 <TIM_Base_SetConfig+0xb2>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a30      	ldr	r2, [pc, #192]	@ (8008b8c <TIM_Base_SetConfig+0x138>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d01b      	beq.n	8008b06 <TIM_Base_SetConfig+0xb2>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4a2f      	ldr	r2, [pc, #188]	@ (8008b90 <TIM_Base_SetConfig+0x13c>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d017      	beq.n	8008b06 <TIM_Base_SetConfig+0xb2>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4a2e      	ldr	r2, [pc, #184]	@ (8008b94 <TIM_Base_SetConfig+0x140>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d013      	beq.n	8008b06 <TIM_Base_SetConfig+0xb2>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4a2d      	ldr	r2, [pc, #180]	@ (8008b98 <TIM_Base_SetConfig+0x144>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d00f      	beq.n	8008b06 <TIM_Base_SetConfig+0xb2>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4a2c      	ldr	r2, [pc, #176]	@ (8008b9c <TIM_Base_SetConfig+0x148>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d00b      	beq.n	8008b06 <TIM_Base_SetConfig+0xb2>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a2b      	ldr	r2, [pc, #172]	@ (8008ba0 <TIM_Base_SetConfig+0x14c>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d007      	beq.n	8008b06 <TIM_Base_SetConfig+0xb2>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4a2a      	ldr	r2, [pc, #168]	@ (8008ba4 <TIM_Base_SetConfig+0x150>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d003      	beq.n	8008b06 <TIM_Base_SetConfig+0xb2>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4a29      	ldr	r2, [pc, #164]	@ (8008ba8 <TIM_Base_SetConfig+0x154>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d108      	bne.n	8008b18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	695b      	ldr	r3, [r3, #20]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	689a      	ldr	r2, [r3, #8]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a10      	ldr	r2, [pc, #64]	@ (8008b80 <TIM_Base_SetConfig+0x12c>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d003      	beq.n	8008b4c <TIM_Base_SetConfig+0xf8>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	4a12      	ldr	r2, [pc, #72]	@ (8008b90 <TIM_Base_SetConfig+0x13c>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d103      	bne.n	8008b54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	691a      	ldr	r2, [r3, #16]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	f003 0301 	and.w	r3, r3, #1
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d105      	bne.n	8008b72 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	691b      	ldr	r3, [r3, #16]
 8008b6a:	f023 0201 	bic.w	r2, r3, #1
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	611a      	str	r2, [r3, #16]
  }
}
 8008b72:	bf00      	nop
 8008b74:	3714      	adds	r7, #20
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr
 8008b7e:	bf00      	nop
 8008b80:	40010000 	.word	0x40010000
 8008b84:	40000400 	.word	0x40000400
 8008b88:	40000800 	.word	0x40000800
 8008b8c:	40000c00 	.word	0x40000c00
 8008b90:	40010400 	.word	0x40010400
 8008b94:	40014000 	.word	0x40014000
 8008b98:	40014400 	.word	0x40014400
 8008b9c:	40014800 	.word	0x40014800
 8008ba0:	40001800 	.word	0x40001800
 8008ba4:	40001c00 	.word	0x40001c00
 8008ba8:	40002000 	.word	0x40002000

08008bac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b087      	sub	sp, #28
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a1b      	ldr	r3, [r3, #32]
 8008bba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a1b      	ldr	r3, [r3, #32]
 8008bc0:	f023 0201 	bic.w	r2, r3, #1
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	699b      	ldr	r3, [r3, #24]
 8008bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8008c84 <TIM_OC1_SetConfig+0xd8>)
 8008bd8:	4013      	ands	r3, r2
 8008bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f023 0303 	bic.w	r3, r3, #3
 8008be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	f023 0302 	bic.w	r3, r3, #2
 8008bf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	697a      	ldr	r2, [r7, #20]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4a21      	ldr	r2, [pc, #132]	@ (8008c88 <TIM_OC1_SetConfig+0xdc>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d003      	beq.n	8008c10 <TIM_OC1_SetConfig+0x64>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4a20      	ldr	r2, [pc, #128]	@ (8008c8c <TIM_OC1_SetConfig+0xe0>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d10c      	bne.n	8008c2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	f023 0308 	bic.w	r3, r3, #8
 8008c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	697a      	ldr	r2, [r7, #20]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	f023 0304 	bic.w	r3, r3, #4
 8008c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a16      	ldr	r2, [pc, #88]	@ (8008c88 <TIM_OC1_SetConfig+0xdc>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d003      	beq.n	8008c3a <TIM_OC1_SetConfig+0x8e>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a15      	ldr	r2, [pc, #84]	@ (8008c8c <TIM_OC1_SetConfig+0xe0>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d111      	bne.n	8008c5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	695b      	ldr	r3, [r3, #20]
 8008c4e:	693a      	ldr	r2, [r7, #16]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	699b      	ldr	r3, [r3, #24]
 8008c58:	693a      	ldr	r2, [r7, #16]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	693a      	ldr	r2, [r7, #16]
 8008c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	685a      	ldr	r2, [r3, #4]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	697a      	ldr	r2, [r7, #20]
 8008c76:	621a      	str	r2, [r3, #32]
}
 8008c78:	bf00      	nop
 8008c7a:	371c      	adds	r7, #28
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr
 8008c84:	fffeff8f 	.word	0xfffeff8f
 8008c88:	40010000 	.word	0x40010000
 8008c8c:	40010400 	.word	0x40010400

08008c90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b087      	sub	sp, #28
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a1b      	ldr	r3, [r3, #32]
 8008c9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6a1b      	ldr	r3, [r3, #32]
 8008ca4:	f023 0210 	bic.w	r2, r3, #16
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	699b      	ldr	r3, [r3, #24]
 8008cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	4b2e      	ldr	r3, [pc, #184]	@ (8008d74 <TIM_OC2_SetConfig+0xe4>)
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	021b      	lsls	r3, r3, #8
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	f023 0320 	bic.w	r3, r3, #32
 8008cda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	011b      	lsls	r3, r3, #4
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a23      	ldr	r2, [pc, #140]	@ (8008d78 <TIM_OC2_SetConfig+0xe8>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d003      	beq.n	8008cf8 <TIM_OC2_SetConfig+0x68>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a22      	ldr	r2, [pc, #136]	@ (8008d7c <TIM_OC2_SetConfig+0xec>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d10d      	bne.n	8008d14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	011b      	lsls	r3, r3, #4
 8008d06:	697a      	ldr	r2, [r7, #20]
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a18      	ldr	r2, [pc, #96]	@ (8008d78 <TIM_OC2_SetConfig+0xe8>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d003      	beq.n	8008d24 <TIM_OC2_SetConfig+0x94>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a17      	ldr	r2, [pc, #92]	@ (8008d7c <TIM_OC2_SetConfig+0xec>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d113      	bne.n	8008d4c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008d2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008d32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	693a      	ldr	r2, [r7, #16]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	699b      	ldr	r3, [r3, #24]
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	693a      	ldr	r2, [r7, #16]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	685a      	ldr	r2, [r3, #4]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	697a      	ldr	r2, [r7, #20]
 8008d64:	621a      	str	r2, [r3, #32]
}
 8008d66:	bf00      	nop
 8008d68:	371c      	adds	r7, #28
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	feff8fff 	.word	0xfeff8fff
 8008d78:	40010000 	.word	0x40010000
 8008d7c:	40010400 	.word	0x40010400

08008d80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b087      	sub	sp, #28
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a1b      	ldr	r3, [r3, #32]
 8008d8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6a1b      	ldr	r3, [r3, #32]
 8008d94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	69db      	ldr	r3, [r3, #28]
 8008da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	4b2d      	ldr	r3, [pc, #180]	@ (8008e60 <TIM_OC3_SetConfig+0xe0>)
 8008dac:	4013      	ands	r3, r2
 8008dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f023 0303 	bic.w	r3, r3, #3
 8008db6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008dc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	021b      	lsls	r3, r3, #8
 8008dd0:	697a      	ldr	r2, [r7, #20]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a22      	ldr	r2, [pc, #136]	@ (8008e64 <TIM_OC3_SetConfig+0xe4>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d003      	beq.n	8008de6 <TIM_OC3_SetConfig+0x66>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a21      	ldr	r2, [pc, #132]	@ (8008e68 <TIM_OC3_SetConfig+0xe8>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d10d      	bne.n	8008e02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008dec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	021b      	lsls	r3, r3, #8
 8008df4:	697a      	ldr	r2, [r7, #20]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a17      	ldr	r2, [pc, #92]	@ (8008e64 <TIM_OC3_SetConfig+0xe4>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d003      	beq.n	8008e12 <TIM_OC3_SetConfig+0x92>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a16      	ldr	r2, [pc, #88]	@ (8008e68 <TIM_OC3_SetConfig+0xe8>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d113      	bne.n	8008e3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008e20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	695b      	ldr	r3, [r3, #20]
 8008e26:	011b      	lsls	r3, r3, #4
 8008e28:	693a      	ldr	r2, [r7, #16]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	699b      	ldr	r3, [r3, #24]
 8008e32:	011b      	lsls	r3, r3, #4
 8008e34:	693a      	ldr	r2, [r7, #16]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	693a      	ldr	r2, [r7, #16]
 8008e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	685a      	ldr	r2, [r3, #4]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	697a      	ldr	r2, [r7, #20]
 8008e52:	621a      	str	r2, [r3, #32]
}
 8008e54:	bf00      	nop
 8008e56:	371c      	adds	r7, #28
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr
 8008e60:	fffeff8f 	.word	0xfffeff8f
 8008e64:	40010000 	.word	0x40010000
 8008e68:	40010400 	.word	0x40010400

08008e6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b087      	sub	sp, #28
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6a1b      	ldr	r3, [r3, #32]
 8008e7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6a1b      	ldr	r3, [r3, #32]
 8008e80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	69db      	ldr	r3, [r3, #28]
 8008e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	4b1e      	ldr	r3, [pc, #120]	@ (8008f10 <TIM_OC4_SetConfig+0xa4>)
 8008e98:	4013      	ands	r3, r2
 8008e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	021b      	lsls	r3, r3, #8
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	4313      	orrs	r3, r2
 8008eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008eb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	031b      	lsls	r3, r3, #12
 8008ebe:	693a      	ldr	r2, [r7, #16]
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a13      	ldr	r2, [pc, #76]	@ (8008f14 <TIM_OC4_SetConfig+0xa8>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d003      	beq.n	8008ed4 <TIM_OC4_SetConfig+0x68>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a12      	ldr	r2, [pc, #72]	@ (8008f18 <TIM_OC4_SetConfig+0xac>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d109      	bne.n	8008ee8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008eda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	695b      	ldr	r3, [r3, #20]
 8008ee0:	019b      	lsls	r3, r3, #6
 8008ee2:	697a      	ldr	r2, [r7, #20]
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	697a      	ldr	r2, [r7, #20]
 8008eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	685a      	ldr	r2, [r3, #4]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	693a      	ldr	r2, [r7, #16]
 8008f00:	621a      	str	r2, [r3, #32]
}
 8008f02:	bf00      	nop
 8008f04:	371c      	adds	r7, #28
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop
 8008f10:	feff8fff 	.word	0xfeff8fff
 8008f14:	40010000 	.word	0x40010000
 8008f18:	40010400 	.word	0x40010400

08008f1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b087      	sub	sp, #28
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a1b      	ldr	r3, [r3, #32]
 8008f2a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6a1b      	ldr	r3, [r3, #32]
 8008f30:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008f44:	68fa      	ldr	r2, [r7, #12]
 8008f46:	4b1b      	ldr	r3, [pc, #108]	@ (8008fb4 <TIM_OC5_SetConfig+0x98>)
 8008f48:	4013      	ands	r3, r2
 8008f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008f5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	041b      	lsls	r3, r3, #16
 8008f64:	693a      	ldr	r2, [r7, #16]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a12      	ldr	r2, [pc, #72]	@ (8008fb8 <TIM_OC5_SetConfig+0x9c>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d003      	beq.n	8008f7a <TIM_OC5_SetConfig+0x5e>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a11      	ldr	r2, [pc, #68]	@ (8008fbc <TIM_OC5_SetConfig+0xa0>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d109      	bne.n	8008f8e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	695b      	ldr	r3, [r3, #20]
 8008f86:	021b      	lsls	r3, r3, #8
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	697a      	ldr	r2, [r7, #20]
 8008f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	685a      	ldr	r2, [r3, #4]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	693a      	ldr	r2, [r7, #16]
 8008fa6:	621a      	str	r2, [r3, #32]
}
 8008fa8:	bf00      	nop
 8008faa:	371c      	adds	r7, #28
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr
 8008fb4:	fffeff8f 	.word	0xfffeff8f
 8008fb8:	40010000 	.word	0x40010000
 8008fbc:	40010400 	.word	0x40010400

08008fc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b087      	sub	sp, #28
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6a1b      	ldr	r3, [r3, #32]
 8008fce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6a1b      	ldr	r3, [r3, #32]
 8008fd4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	4b1c      	ldr	r3, [pc, #112]	@ (800905c <TIM_OC6_SetConfig+0x9c>)
 8008fec:	4013      	ands	r3, r2
 8008fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	021b      	lsls	r3, r3, #8
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009002:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	051b      	lsls	r3, r3, #20
 800900a:	693a      	ldr	r2, [r7, #16]
 800900c:	4313      	orrs	r3, r2
 800900e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	4a13      	ldr	r2, [pc, #76]	@ (8009060 <TIM_OC6_SetConfig+0xa0>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d003      	beq.n	8009020 <TIM_OC6_SetConfig+0x60>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4a12      	ldr	r2, [pc, #72]	@ (8009064 <TIM_OC6_SetConfig+0xa4>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d109      	bne.n	8009034 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009026:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	695b      	ldr	r3, [r3, #20]
 800902c:	029b      	lsls	r3, r3, #10
 800902e:	697a      	ldr	r2, [r7, #20]
 8009030:	4313      	orrs	r3, r2
 8009032:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	697a      	ldr	r2, [r7, #20]
 8009038:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	685a      	ldr	r2, [r3, #4]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	693a      	ldr	r2, [r7, #16]
 800904c:	621a      	str	r2, [r3, #32]
}
 800904e:	bf00      	nop
 8009050:	371c      	adds	r7, #28
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	feff8fff 	.word	0xfeff8fff
 8009060:	40010000 	.word	0x40010000
 8009064:	40010400 	.word	0x40010400

08009068 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009068:	b480      	push	{r7}
 800906a:	b087      	sub	sp, #28
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6a1b      	ldr	r3, [r3, #32]
 8009078:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6a1b      	ldr	r3, [r3, #32]
 800907e:	f023 0201 	bic.w	r2, r3, #1
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	699b      	ldr	r3, [r3, #24]
 800908a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	011b      	lsls	r3, r3, #4
 8009098:	693a      	ldr	r2, [r7, #16]
 800909a:	4313      	orrs	r3, r2
 800909c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	f023 030a 	bic.w	r3, r3, #10
 80090a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80090a6:	697a      	ldr	r2, [r7, #20]
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	693a      	ldr	r2, [r7, #16]
 80090b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	697a      	ldr	r2, [r7, #20]
 80090b8:	621a      	str	r2, [r3, #32]
}
 80090ba:	bf00      	nop
 80090bc:	371c      	adds	r7, #28
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr

080090c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090c6:	b480      	push	{r7}
 80090c8:	b087      	sub	sp, #28
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	60f8      	str	r0, [r7, #12]
 80090ce:	60b9      	str	r1, [r7, #8]
 80090d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6a1b      	ldr	r3, [r3, #32]
 80090d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6a1b      	ldr	r3, [r3, #32]
 80090dc:	f023 0210 	bic.w	r2, r3, #16
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	699b      	ldr	r3, [r3, #24]
 80090e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80090f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	031b      	lsls	r3, r3, #12
 80090f6:	693a      	ldr	r2, [r7, #16]
 80090f8:	4313      	orrs	r3, r2
 80090fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009102:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	011b      	lsls	r3, r3, #4
 8009108:	697a      	ldr	r2, [r7, #20]
 800910a:	4313      	orrs	r3, r2
 800910c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	693a      	ldr	r2, [r7, #16]
 8009112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	697a      	ldr	r2, [r7, #20]
 8009118:	621a      	str	r2, [r3, #32]
}
 800911a:	bf00      	nop
 800911c:	371c      	adds	r7, #28
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr

08009126 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009126:	b480      	push	{r7}
 8009128:	b085      	sub	sp, #20
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
 800912e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800913c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800913e:	683a      	ldr	r2, [r7, #0]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	4313      	orrs	r3, r2
 8009144:	f043 0307 	orr.w	r3, r3, #7
 8009148:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	609a      	str	r2, [r3, #8]
}
 8009150:	bf00      	nop
 8009152:	3714      	adds	r7, #20
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800915c:	b480      	push	{r7}
 800915e:	b087      	sub	sp, #28
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	607a      	str	r2, [r7, #4]
 8009168:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009176:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	021a      	lsls	r2, r3, #8
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	431a      	orrs	r2, r3
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	4313      	orrs	r3, r2
 8009184:	697a      	ldr	r2, [r7, #20]
 8009186:	4313      	orrs	r3, r2
 8009188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	697a      	ldr	r2, [r7, #20]
 800918e:	609a      	str	r2, [r3, #8]
}
 8009190:	bf00      	nop
 8009192:	371c      	adds	r7, #28
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800919c:	b480      	push	{r7}
 800919e:	b087      	sub	sp, #28
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	f003 031f 	and.w	r3, r3, #31
 80091ae:	2201      	movs	r2, #1
 80091b0:	fa02 f303 	lsl.w	r3, r2, r3
 80091b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	6a1a      	ldr	r2, [r3, #32]
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	43db      	mvns	r3, r3
 80091be:	401a      	ands	r2, r3
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6a1a      	ldr	r2, [r3, #32]
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	f003 031f 	and.w	r3, r3, #31
 80091ce:	6879      	ldr	r1, [r7, #4]
 80091d0:	fa01 f303 	lsl.w	r3, r1, r3
 80091d4:	431a      	orrs	r2, r3
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	621a      	str	r2, [r3, #32]
}
 80091da:	bf00      	nop
 80091dc:	371c      	adds	r7, #28
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
	...

080091e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b085      	sub	sp, #20
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d101      	bne.n	8009200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091fc:	2302      	movs	r3, #2
 80091fe:	e06d      	b.n	80092dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2202      	movs	r2, #2
 800920c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a30      	ldr	r2, [pc, #192]	@ (80092e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d004      	beq.n	8009234 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a2f      	ldr	r2, [pc, #188]	@ (80092ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d108      	bne.n	8009246 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800923a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	4313      	orrs	r3, r2
 8009244:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800924c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	4313      	orrs	r3, r2
 8009256:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a20      	ldr	r2, [pc, #128]	@ (80092e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d022      	beq.n	80092b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009272:	d01d      	beq.n	80092b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a1d      	ldr	r2, [pc, #116]	@ (80092f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d018      	beq.n	80092b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a1c      	ldr	r2, [pc, #112]	@ (80092f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d013      	beq.n	80092b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a1a      	ldr	r2, [pc, #104]	@ (80092f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d00e      	beq.n	80092b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a15      	ldr	r2, [pc, #84]	@ (80092ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d009      	beq.n	80092b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a16      	ldr	r2, [pc, #88]	@ (80092fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d004      	beq.n	80092b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a15      	ldr	r2, [pc, #84]	@ (8009300 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d10c      	bne.n	80092ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80092b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	68ba      	ldr	r2, [r7, #8]
 80092be:	4313      	orrs	r3, r2
 80092c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	68ba      	ldr	r2, [r7, #8]
 80092c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2201      	movs	r2, #1
 80092ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3714      	adds	r7, #20
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr
 80092e8:	40010000 	.word	0x40010000
 80092ec:	40010400 	.word	0x40010400
 80092f0:	40000400 	.word	0x40000400
 80092f4:	40000800 	.word	0x40000800
 80092f8:	40000c00 	.word	0x40000c00
 80092fc:	40014000 	.word	0x40014000
 8009300:	40001800 	.word	0x40001800

08009304 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009304:	b480      	push	{r7}
 8009306:	b085      	sub	sp, #20
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800930e:	2300      	movs	r3, #0
 8009310:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009318:	2b01      	cmp	r3, #1
 800931a:	d101      	bne.n	8009320 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800931c:	2302      	movs	r3, #2
 800931e:	e065      	b.n	80093ec <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	4313      	orrs	r3, r2
 8009334:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	4313      	orrs	r3, r2
 8009342:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	4313      	orrs	r3, r2
 8009350:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4313      	orrs	r3, r2
 800935e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	4313      	orrs	r3, r2
 800936c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	695b      	ldr	r3, [r3, #20]
 8009378:	4313      	orrs	r3, r2
 800937a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009386:	4313      	orrs	r3, r2
 8009388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	699b      	ldr	r3, [r3, #24]
 8009394:	041b      	lsls	r3, r3, #16
 8009396:	4313      	orrs	r3, r2
 8009398:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a16      	ldr	r2, [pc, #88]	@ (80093f8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d004      	beq.n	80093ae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a14      	ldr	r2, [pc, #80]	@ (80093fc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d115      	bne.n	80093da <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093b8:	051b      	lsls	r3, r3, #20
 80093ba:	4313      	orrs	r3, r2
 80093bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	69db      	ldr	r3, [r3, #28]
 80093c8:	4313      	orrs	r3, r2
 80093ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	6a1b      	ldr	r3, [r3, #32]
 80093d6:	4313      	orrs	r3, r2
 80093d8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3714      	adds	r7, #20
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	40010000 	.word	0x40010000
 80093fc:	40010400 	.word	0x40010400

08009400 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009408:	bf00      	nop
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800941c:	bf00      	nop
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009430:	bf00      	nop
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d101      	bne.n	800944e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	e040      	b.n	80094d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009452:	2b00      	cmp	r3, #0
 8009454:	d106      	bne.n	8009464 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f7fa fa1c 	bl	800389c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2224      	movs	r2, #36	@ 0x24
 8009468:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f022 0201 	bic.w	r2, r2, #1
 8009478:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800947e:	2b00      	cmp	r3, #0
 8009480:	d002      	beq.n	8009488 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fe56 	bl	800a134 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 fbef 	bl	8009c6c <UART_SetConfig>
 800948e:	4603      	mov	r3, r0
 8009490:	2b01      	cmp	r3, #1
 8009492:	d101      	bne.n	8009498 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009494:	2301      	movs	r3, #1
 8009496:	e01b      	b.n	80094d0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	685a      	ldr	r2, [r3, #4]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80094a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	689a      	ldr	r2, [r3, #8]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80094b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f042 0201 	orr.w	r2, r2, #1
 80094c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 fed5 	bl	800a278 <UART_CheckIdleState>
 80094ce:	4603      	mov	r3, r0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3708      	adds	r7, #8
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b08a      	sub	sp, #40	@ 0x28
 80094dc:	af02      	add	r7, sp, #8
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	603b      	str	r3, [r7, #0]
 80094e4:	4613      	mov	r3, r2
 80094e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80094ec:	2b20      	cmp	r3, #32
 80094ee:	d177      	bne.n	80095e0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d002      	beq.n	80094fc <HAL_UART_Transmit+0x24>
 80094f6:	88fb      	ldrh	r3, [r7, #6]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d101      	bne.n	8009500 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	e070      	b.n	80095e2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2200      	movs	r2, #0
 8009504:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2221      	movs	r2, #33	@ 0x21
 800950c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800950e:	f7fa fe43 	bl	8004198 <HAL_GetTick>
 8009512:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	88fa      	ldrh	r2, [r7, #6]
 8009518:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	88fa      	ldrh	r2, [r7, #6]
 8009520:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800952c:	d108      	bne.n	8009540 <HAL_UART_Transmit+0x68>
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d104      	bne.n	8009540 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009536:	2300      	movs	r3, #0
 8009538:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	61bb      	str	r3, [r7, #24]
 800953e:	e003      	b.n	8009548 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009544:	2300      	movs	r3, #0
 8009546:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009548:	e02f      	b.n	80095aa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	9300      	str	r3, [sp, #0]
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	2200      	movs	r2, #0
 8009552:	2180      	movs	r1, #128	@ 0x80
 8009554:	68f8      	ldr	r0, [r7, #12]
 8009556:	f000 fee6 	bl	800a326 <UART_WaitOnFlagUntilTimeout>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d004      	beq.n	800956a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2220      	movs	r2, #32
 8009564:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8009566:	2303      	movs	r3, #3
 8009568:	e03b      	b.n	80095e2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800956a:	69fb      	ldr	r3, [r7, #28]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d10b      	bne.n	8009588 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	881b      	ldrh	r3, [r3, #0]
 8009574:	461a      	mov	r2, r3
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800957e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009580:	69bb      	ldr	r3, [r7, #24]
 8009582:	3302      	adds	r3, #2
 8009584:	61bb      	str	r3, [r7, #24]
 8009586:	e007      	b.n	8009598 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009588:	69fb      	ldr	r3, [r7, #28]
 800958a:	781a      	ldrb	r2, [r3, #0]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009592:	69fb      	ldr	r3, [r7, #28]
 8009594:	3301      	adds	r3, #1
 8009596:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800959e:	b29b      	uxth	r3, r3
 80095a0:	3b01      	subs	r3, #1
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d1c9      	bne.n	800954a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	9300      	str	r3, [sp, #0]
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	2200      	movs	r2, #0
 80095be:	2140      	movs	r1, #64	@ 0x40
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f000 feb0 	bl	800a326 <UART_WaitOnFlagUntilTimeout>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d004      	beq.n	80095d6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2220      	movs	r2, #32
 80095d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80095d2:	2303      	movs	r3, #3
 80095d4:	e005      	b.n	80095e2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2220      	movs	r2, #32
 80095da:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80095dc:	2300      	movs	r3, #0
 80095de:	e000      	b.n	80095e2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80095e0:	2302      	movs	r3, #2
  }
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3720      	adds	r7, #32
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b08a      	sub	sp, #40	@ 0x28
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	60f8      	str	r0, [r7, #12]
 80095f2:	60b9      	str	r1, [r7, #8]
 80095f4:	4613      	mov	r3, r2
 80095f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095fe:	2b20      	cmp	r3, #32
 8009600:	d132      	bne.n	8009668 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d002      	beq.n	800960e <HAL_UART_Receive_DMA+0x24>
 8009608:	88fb      	ldrh	r3, [r7, #6]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d101      	bne.n	8009612 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	e02b      	b.n	800966a <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2200      	movs	r2, #0
 8009616:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009622:	2b00      	cmp	r3, #0
 8009624:	d018      	beq.n	8009658 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	e853 3f00 	ldrex	r3, [r3]
 8009632:	613b      	str	r3, [r7, #16]
   return(result);
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800963a:	627b      	str	r3, [r7, #36]	@ 0x24
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	461a      	mov	r2, r3
 8009642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009644:	623b      	str	r3, [r7, #32]
 8009646:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009648:	69f9      	ldr	r1, [r7, #28]
 800964a:	6a3a      	ldr	r2, [r7, #32]
 800964c:	e841 2300 	strex	r3, r2, [r1]
 8009650:	61bb      	str	r3, [r7, #24]
   return(result);
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d1e6      	bne.n	8009626 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009658:	88fb      	ldrh	r3, [r7, #6]
 800965a:	461a      	mov	r2, r3
 800965c:	68b9      	ldr	r1, [r7, #8]
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f000 fece 	bl	800a400 <UART_Start_Receive_DMA>
 8009664:	4603      	mov	r3, r0
 8009666:	e000      	b.n	800966a <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8009668:	2302      	movs	r3, #2
  }
}
 800966a:	4618      	mov	r0, r3
 800966c:	3728      	adds	r7, #40	@ 0x28
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
	...

08009674 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b0ba      	sub	sp, #232	@ 0xe8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	69db      	ldr	r3, [r3, #28]
 8009682:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800969a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800969e:	f640 030f 	movw	r3, #2063	@ 0x80f
 80096a2:	4013      	ands	r3, r2
 80096a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80096a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d115      	bne.n	80096dc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80096b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096b4:	f003 0320 	and.w	r3, r3, #32
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00f      	beq.n	80096dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80096bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096c0:	f003 0320 	and.w	r3, r3, #32
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d009      	beq.n	80096dc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	f000 8297 	beq.w	8009c00 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	4798      	blx	r3
      }
      return;
 80096da:	e291      	b.n	8009c00 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80096dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f000 8117 	beq.w	8009914 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80096e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096ea:	f003 0301 	and.w	r3, r3, #1
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d106      	bne.n	8009700 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80096f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80096f6:	4b85      	ldr	r3, [pc, #532]	@ (800990c <HAL_UART_IRQHandler+0x298>)
 80096f8:	4013      	ands	r3, r2
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	f000 810a 	beq.w	8009914 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009704:	f003 0301 	and.w	r3, r3, #1
 8009708:	2b00      	cmp	r3, #0
 800970a:	d011      	beq.n	8009730 <HAL_UART_IRQHandler+0xbc>
 800970c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00b      	beq.n	8009730 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2201      	movs	r2, #1
 800971e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009726:	f043 0201 	orr.w	r2, r3, #1
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009734:	f003 0302 	and.w	r3, r3, #2
 8009738:	2b00      	cmp	r3, #0
 800973a:	d011      	beq.n	8009760 <HAL_UART_IRQHandler+0xec>
 800973c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009740:	f003 0301 	and.w	r3, r3, #1
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00b      	beq.n	8009760 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2202      	movs	r2, #2
 800974e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009756:	f043 0204 	orr.w	r2, r3, #4
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009764:	f003 0304 	and.w	r3, r3, #4
 8009768:	2b00      	cmp	r3, #0
 800976a:	d011      	beq.n	8009790 <HAL_UART_IRQHandler+0x11c>
 800976c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009770:	f003 0301 	and.w	r3, r3, #1
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00b      	beq.n	8009790 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	2204      	movs	r2, #4
 800977e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009786:	f043 0202 	orr.w	r2, r3, #2
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009794:	f003 0308 	and.w	r3, r3, #8
 8009798:	2b00      	cmp	r3, #0
 800979a:	d017      	beq.n	80097cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800979c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097a0:	f003 0320 	and.w	r3, r3, #32
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d105      	bne.n	80097b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80097a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d00b      	beq.n	80097cc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2208      	movs	r2, #8
 80097ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097c2:	f043 0208 	orr.w	r2, r3, #8
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80097cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d012      	beq.n	80097fe <HAL_UART_IRQHandler+0x18a>
 80097d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d00c      	beq.n	80097fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80097ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097f4:	f043 0220 	orr.w	r2, r3, #32
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009804:	2b00      	cmp	r3, #0
 8009806:	f000 81fd 	beq.w	8009c04 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800980a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800980e:	f003 0320 	and.w	r3, r3, #32
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00d      	beq.n	8009832 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800981a:	f003 0320 	and.w	r3, r3, #32
 800981e:	2b00      	cmp	r3, #0
 8009820:	d007      	beq.n	8009832 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009826:	2b00      	cmp	r3, #0
 8009828:	d003      	beq.n	8009832 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009838:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009846:	2b40      	cmp	r3, #64	@ 0x40
 8009848:	d005      	beq.n	8009856 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800984a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800984e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009852:	2b00      	cmp	r3, #0
 8009854:	d04f      	beq.n	80098f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 fe98 	bl	800a58c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009866:	2b40      	cmp	r3, #64	@ 0x40
 8009868:	d141      	bne.n	80098ee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	3308      	adds	r3, #8
 8009870:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009874:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009878:	e853 3f00 	ldrex	r3, [r3]
 800987c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009880:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009884:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009888:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	3308      	adds	r3, #8
 8009892:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009896:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800989a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80098a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80098a6:	e841 2300 	strex	r3, r2, [r1]
 80098aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80098ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d1d9      	bne.n	800986a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d013      	beq.n	80098e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098c2:	4a13      	ldr	r2, [pc, #76]	@ (8009910 <HAL_UART_IRQHandler+0x29c>)
 80098c4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7fa ff24 	bl	8004718 <HAL_DMA_Abort_IT>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d017      	beq.n	8009906 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80098e0:	4610      	mov	r0, r2
 80098e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098e4:	e00f      	b.n	8009906 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 f9aa 	bl	8009c40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098ec:	e00b      	b.n	8009906 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f9a6 	bl	8009c40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098f4:	e007      	b.n	8009906 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 f9a2 	bl	8009c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8009904:	e17e      	b.n	8009c04 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009906:	bf00      	nop
    return;
 8009908:	e17c      	b.n	8009c04 <HAL_UART_IRQHandler+0x590>
 800990a:	bf00      	nop
 800990c:	04000120 	.word	0x04000120
 8009910:	0800a839 	.word	0x0800a839

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009918:	2b01      	cmp	r3, #1
 800991a:	f040 814c 	bne.w	8009bb6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800991e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009922:	f003 0310 	and.w	r3, r3, #16
 8009926:	2b00      	cmp	r3, #0
 8009928:	f000 8145 	beq.w	8009bb6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800992c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009930:	f003 0310 	and.w	r3, r3, #16
 8009934:	2b00      	cmp	r3, #0
 8009936:	f000 813e 	beq.w	8009bb6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2210      	movs	r2, #16
 8009940:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800994c:	2b40      	cmp	r3, #64	@ 0x40
 800994e:	f040 80b6 	bne.w	8009abe <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800995e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009962:	2b00      	cmp	r3, #0
 8009964:	f000 8150 	beq.w	8009c08 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800996e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009972:	429a      	cmp	r2, r3
 8009974:	f080 8148 	bcs.w	8009c08 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800997e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009986:	69db      	ldr	r3, [r3, #28]
 8009988:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800998c:	f000 8086 	beq.w	8009a9c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009998:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800999c:	e853 3f00 	ldrex	r3, [r3]
 80099a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80099a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80099a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	461a      	mov	r2, r3
 80099b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80099ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80099be:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80099c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80099ca:	e841 2300 	strex	r3, r2, [r1]
 80099ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80099d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d1da      	bne.n	8009990 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	3308      	adds	r3, #8
 80099e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80099e4:	e853 3f00 	ldrex	r3, [r3]
 80099e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80099ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80099ec:	f023 0301 	bic.w	r3, r3, #1
 80099f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	3308      	adds	r3, #8
 80099fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80099fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009a02:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a04:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009a06:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009a0a:	e841 2300 	strex	r3, r2, [r1]
 8009a0e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009a10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d1e1      	bne.n	80099da <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	3308      	adds	r3, #8
 8009a1c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a20:	e853 3f00 	ldrex	r3, [r3]
 8009a24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009a26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	3308      	adds	r3, #8
 8009a36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009a3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009a3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a3e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009a40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009a42:	e841 2300 	strex	r3, r2, [r1]
 8009a46:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009a48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d1e3      	bne.n	8009a16 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2220      	movs	r2, #32
 8009a52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a64:	e853 3f00 	ldrex	r3, [r3]
 8009a68:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009a6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a6c:	f023 0310 	bic.w	r3, r3, #16
 8009a70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	461a      	mov	r2, r3
 8009a7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a80:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009a84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a86:	e841 2300 	strex	r3, r2, [r1]
 8009a8a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009a8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1e4      	bne.n	8009a5c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7fa fdce 	bl	8004638 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2202      	movs	r2, #2
 8009aa0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	1ad3      	subs	r3, r2, r3
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 f8cc 	bl	8009c54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009abc:	e0a4      	b.n	8009c08 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	1ad3      	subs	r3, r2, r3
 8009ace:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	f000 8096 	beq.w	8009c0c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8009ae0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f000 8091 	beq.w	8009c0c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009af2:	e853 3f00 	ldrex	r3, [r3]
 8009af6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009afa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009afe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	461a      	mov	r2, r3
 8009b08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009b0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b0e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b14:	e841 2300 	strex	r3, r2, [r1]
 8009b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1e4      	bne.n	8009aea <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	3308      	adds	r3, #8
 8009b26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b2a:	e853 3f00 	ldrex	r3, [r3]
 8009b2e:	623b      	str	r3, [r7, #32]
   return(result);
 8009b30:	6a3b      	ldr	r3, [r7, #32]
 8009b32:	f023 0301 	bic.w	r3, r3, #1
 8009b36:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	3308      	adds	r3, #8
 8009b40:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009b44:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b4c:	e841 2300 	strex	r3, r2, [r1]
 8009b50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d1e3      	bne.n	8009b20 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2220      	movs	r2, #32
 8009b5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	e853 3f00 	ldrex	r3, [r3]
 8009b78:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f023 0310 	bic.w	r3, r3, #16
 8009b80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	461a      	mov	r2, r3
 8009b8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009b8e:	61fb      	str	r3, [r7, #28]
 8009b90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b92:	69b9      	ldr	r1, [r7, #24]
 8009b94:	69fa      	ldr	r2, [r7, #28]
 8009b96:	e841 2300 	strex	r3, r2, [r1]
 8009b9a:	617b      	str	r3, [r7, #20]
   return(result);
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d1e4      	bne.n	8009b6c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2202      	movs	r2, #2
 8009ba6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ba8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009bac:	4619      	mov	r1, r3
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 f850 	bl	8009c54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009bb4:	e02a      	b.n	8009c0c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d00e      	beq.n	8009be0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d008      	beq.n	8009be0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d01c      	beq.n	8009c10 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	4798      	blx	r3
    }
    return;
 8009bde:	e017      	b.n	8009c10 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d012      	beq.n	8009c12 <HAL_UART_IRQHandler+0x59e>
 8009bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d00c      	beq.n	8009c12 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 fe33 	bl	800a864 <UART_EndTransmit_IT>
    return;
 8009bfe:	e008      	b.n	8009c12 <HAL_UART_IRQHandler+0x59e>
      return;
 8009c00:	bf00      	nop
 8009c02:	e006      	b.n	8009c12 <HAL_UART_IRQHandler+0x59e>
    return;
 8009c04:	bf00      	nop
 8009c06:	e004      	b.n	8009c12 <HAL_UART_IRQHandler+0x59e>
      return;
 8009c08:	bf00      	nop
 8009c0a:	e002      	b.n	8009c12 <HAL_UART_IRQHandler+0x59e>
      return;
 8009c0c:	bf00      	nop
 8009c0e:	e000      	b.n	8009c12 <HAL_UART_IRQHandler+0x59e>
    return;
 8009c10:	bf00      	nop
  }

}
 8009c12:	37e8      	adds	r7, #232	@ 0xe8
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009c20:	bf00      	nop
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009c34:	bf00      	nop
 8009c36:	370c      	adds	r7, #12
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009c48:	bf00      	nop
 8009c4a:	370c      	adds	r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009c60:	bf00      	nop
 8009c62:	370c      	adds	r7, #12
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b088      	sub	sp, #32
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c74:	2300      	movs	r3, #0
 8009c76:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	689a      	ldr	r2, [r3, #8]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	431a      	orrs	r2, r3
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	695b      	ldr	r3, [r3, #20]
 8009c86:	431a      	orrs	r2, r3
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	69db      	ldr	r3, [r3, #28]
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	4ba6      	ldr	r3, [pc, #664]	@ (8009f30 <UART_SetConfig+0x2c4>)
 8009c98:	4013      	ands	r3, r2
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	6812      	ldr	r2, [r2, #0]
 8009c9e:	6979      	ldr	r1, [r7, #20]
 8009ca0:	430b      	orrs	r3, r1
 8009ca2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	68da      	ldr	r2, [r3, #12]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	430a      	orrs	r2, r1
 8009cb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	699b      	ldr	r3, [r3, #24]
 8009cbe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6a1b      	ldr	r3, [r3, #32]
 8009cc4:	697a      	ldr	r2, [r7, #20]
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	697a      	ldr	r2, [r7, #20]
 8009cda:	430a      	orrs	r2, r1
 8009cdc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4a94      	ldr	r2, [pc, #592]	@ (8009f34 <UART_SetConfig+0x2c8>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d120      	bne.n	8009d2a <UART_SetConfig+0xbe>
 8009ce8:	4b93      	ldr	r3, [pc, #588]	@ (8009f38 <UART_SetConfig+0x2cc>)
 8009cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cee:	f003 0303 	and.w	r3, r3, #3
 8009cf2:	2b03      	cmp	r3, #3
 8009cf4:	d816      	bhi.n	8009d24 <UART_SetConfig+0xb8>
 8009cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8009cfc <UART_SetConfig+0x90>)
 8009cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cfc:	08009d0d 	.word	0x08009d0d
 8009d00:	08009d19 	.word	0x08009d19
 8009d04:	08009d13 	.word	0x08009d13
 8009d08:	08009d1f 	.word	0x08009d1f
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	77fb      	strb	r3, [r7, #31]
 8009d10:	e150      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009d12:	2302      	movs	r3, #2
 8009d14:	77fb      	strb	r3, [r7, #31]
 8009d16:	e14d      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009d18:	2304      	movs	r3, #4
 8009d1a:	77fb      	strb	r3, [r7, #31]
 8009d1c:	e14a      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009d1e:	2308      	movs	r3, #8
 8009d20:	77fb      	strb	r3, [r7, #31]
 8009d22:	e147      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009d24:	2310      	movs	r3, #16
 8009d26:	77fb      	strb	r3, [r7, #31]
 8009d28:	e144      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a83      	ldr	r2, [pc, #524]	@ (8009f3c <UART_SetConfig+0x2d0>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d132      	bne.n	8009d9a <UART_SetConfig+0x12e>
 8009d34:	4b80      	ldr	r3, [pc, #512]	@ (8009f38 <UART_SetConfig+0x2cc>)
 8009d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d3a:	f003 030c 	and.w	r3, r3, #12
 8009d3e:	2b0c      	cmp	r3, #12
 8009d40:	d828      	bhi.n	8009d94 <UART_SetConfig+0x128>
 8009d42:	a201      	add	r2, pc, #4	@ (adr r2, 8009d48 <UART_SetConfig+0xdc>)
 8009d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d48:	08009d7d 	.word	0x08009d7d
 8009d4c:	08009d95 	.word	0x08009d95
 8009d50:	08009d95 	.word	0x08009d95
 8009d54:	08009d95 	.word	0x08009d95
 8009d58:	08009d89 	.word	0x08009d89
 8009d5c:	08009d95 	.word	0x08009d95
 8009d60:	08009d95 	.word	0x08009d95
 8009d64:	08009d95 	.word	0x08009d95
 8009d68:	08009d83 	.word	0x08009d83
 8009d6c:	08009d95 	.word	0x08009d95
 8009d70:	08009d95 	.word	0x08009d95
 8009d74:	08009d95 	.word	0x08009d95
 8009d78:	08009d8f 	.word	0x08009d8f
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	77fb      	strb	r3, [r7, #31]
 8009d80:	e118      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009d82:	2302      	movs	r3, #2
 8009d84:	77fb      	strb	r3, [r7, #31]
 8009d86:	e115      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009d88:	2304      	movs	r3, #4
 8009d8a:	77fb      	strb	r3, [r7, #31]
 8009d8c:	e112      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009d8e:	2308      	movs	r3, #8
 8009d90:	77fb      	strb	r3, [r7, #31]
 8009d92:	e10f      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009d94:	2310      	movs	r3, #16
 8009d96:	77fb      	strb	r3, [r7, #31]
 8009d98:	e10c      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a68      	ldr	r2, [pc, #416]	@ (8009f40 <UART_SetConfig+0x2d4>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d120      	bne.n	8009de6 <UART_SetConfig+0x17a>
 8009da4:	4b64      	ldr	r3, [pc, #400]	@ (8009f38 <UART_SetConfig+0x2cc>)
 8009da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009daa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009dae:	2b30      	cmp	r3, #48	@ 0x30
 8009db0:	d013      	beq.n	8009dda <UART_SetConfig+0x16e>
 8009db2:	2b30      	cmp	r3, #48	@ 0x30
 8009db4:	d814      	bhi.n	8009de0 <UART_SetConfig+0x174>
 8009db6:	2b20      	cmp	r3, #32
 8009db8:	d009      	beq.n	8009dce <UART_SetConfig+0x162>
 8009dba:	2b20      	cmp	r3, #32
 8009dbc:	d810      	bhi.n	8009de0 <UART_SetConfig+0x174>
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d002      	beq.n	8009dc8 <UART_SetConfig+0x15c>
 8009dc2:	2b10      	cmp	r3, #16
 8009dc4:	d006      	beq.n	8009dd4 <UART_SetConfig+0x168>
 8009dc6:	e00b      	b.n	8009de0 <UART_SetConfig+0x174>
 8009dc8:	2300      	movs	r3, #0
 8009dca:	77fb      	strb	r3, [r7, #31]
 8009dcc:	e0f2      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009dce:	2302      	movs	r3, #2
 8009dd0:	77fb      	strb	r3, [r7, #31]
 8009dd2:	e0ef      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009dd4:	2304      	movs	r3, #4
 8009dd6:	77fb      	strb	r3, [r7, #31]
 8009dd8:	e0ec      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009dda:	2308      	movs	r3, #8
 8009ddc:	77fb      	strb	r3, [r7, #31]
 8009dde:	e0e9      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009de0:	2310      	movs	r3, #16
 8009de2:	77fb      	strb	r3, [r7, #31]
 8009de4:	e0e6      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a56      	ldr	r2, [pc, #344]	@ (8009f44 <UART_SetConfig+0x2d8>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d120      	bne.n	8009e32 <UART_SetConfig+0x1c6>
 8009df0:	4b51      	ldr	r3, [pc, #324]	@ (8009f38 <UART_SetConfig+0x2cc>)
 8009df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009df6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009dfa:	2bc0      	cmp	r3, #192	@ 0xc0
 8009dfc:	d013      	beq.n	8009e26 <UART_SetConfig+0x1ba>
 8009dfe:	2bc0      	cmp	r3, #192	@ 0xc0
 8009e00:	d814      	bhi.n	8009e2c <UART_SetConfig+0x1c0>
 8009e02:	2b80      	cmp	r3, #128	@ 0x80
 8009e04:	d009      	beq.n	8009e1a <UART_SetConfig+0x1ae>
 8009e06:	2b80      	cmp	r3, #128	@ 0x80
 8009e08:	d810      	bhi.n	8009e2c <UART_SetConfig+0x1c0>
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d002      	beq.n	8009e14 <UART_SetConfig+0x1a8>
 8009e0e:	2b40      	cmp	r3, #64	@ 0x40
 8009e10:	d006      	beq.n	8009e20 <UART_SetConfig+0x1b4>
 8009e12:	e00b      	b.n	8009e2c <UART_SetConfig+0x1c0>
 8009e14:	2300      	movs	r3, #0
 8009e16:	77fb      	strb	r3, [r7, #31]
 8009e18:	e0cc      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009e1a:	2302      	movs	r3, #2
 8009e1c:	77fb      	strb	r3, [r7, #31]
 8009e1e:	e0c9      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009e20:	2304      	movs	r3, #4
 8009e22:	77fb      	strb	r3, [r7, #31]
 8009e24:	e0c6      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009e26:	2308      	movs	r3, #8
 8009e28:	77fb      	strb	r3, [r7, #31]
 8009e2a:	e0c3      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009e2c:	2310      	movs	r3, #16
 8009e2e:	77fb      	strb	r3, [r7, #31]
 8009e30:	e0c0      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a44      	ldr	r2, [pc, #272]	@ (8009f48 <UART_SetConfig+0x2dc>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d125      	bne.n	8009e88 <UART_SetConfig+0x21c>
 8009e3c:	4b3e      	ldr	r3, [pc, #248]	@ (8009f38 <UART_SetConfig+0x2cc>)
 8009e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009e46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e4a:	d017      	beq.n	8009e7c <UART_SetConfig+0x210>
 8009e4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e50:	d817      	bhi.n	8009e82 <UART_SetConfig+0x216>
 8009e52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e56:	d00b      	beq.n	8009e70 <UART_SetConfig+0x204>
 8009e58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e5c:	d811      	bhi.n	8009e82 <UART_SetConfig+0x216>
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d003      	beq.n	8009e6a <UART_SetConfig+0x1fe>
 8009e62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e66:	d006      	beq.n	8009e76 <UART_SetConfig+0x20a>
 8009e68:	e00b      	b.n	8009e82 <UART_SetConfig+0x216>
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	77fb      	strb	r3, [r7, #31]
 8009e6e:	e0a1      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009e70:	2302      	movs	r3, #2
 8009e72:	77fb      	strb	r3, [r7, #31]
 8009e74:	e09e      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009e76:	2304      	movs	r3, #4
 8009e78:	77fb      	strb	r3, [r7, #31]
 8009e7a:	e09b      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009e7c:	2308      	movs	r3, #8
 8009e7e:	77fb      	strb	r3, [r7, #31]
 8009e80:	e098      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009e82:	2310      	movs	r3, #16
 8009e84:	77fb      	strb	r3, [r7, #31]
 8009e86:	e095      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a2f      	ldr	r2, [pc, #188]	@ (8009f4c <UART_SetConfig+0x2e0>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d125      	bne.n	8009ede <UART_SetConfig+0x272>
 8009e92:	4b29      	ldr	r3, [pc, #164]	@ (8009f38 <UART_SetConfig+0x2cc>)
 8009e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e98:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009e9c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ea0:	d017      	beq.n	8009ed2 <UART_SetConfig+0x266>
 8009ea2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ea6:	d817      	bhi.n	8009ed8 <UART_SetConfig+0x26c>
 8009ea8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009eac:	d00b      	beq.n	8009ec6 <UART_SetConfig+0x25a>
 8009eae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009eb2:	d811      	bhi.n	8009ed8 <UART_SetConfig+0x26c>
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d003      	beq.n	8009ec0 <UART_SetConfig+0x254>
 8009eb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ebc:	d006      	beq.n	8009ecc <UART_SetConfig+0x260>
 8009ebe:	e00b      	b.n	8009ed8 <UART_SetConfig+0x26c>
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	77fb      	strb	r3, [r7, #31]
 8009ec4:	e076      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009ec6:	2302      	movs	r3, #2
 8009ec8:	77fb      	strb	r3, [r7, #31]
 8009eca:	e073      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009ecc:	2304      	movs	r3, #4
 8009ece:	77fb      	strb	r3, [r7, #31]
 8009ed0:	e070      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009ed2:	2308      	movs	r3, #8
 8009ed4:	77fb      	strb	r3, [r7, #31]
 8009ed6:	e06d      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009ed8:	2310      	movs	r3, #16
 8009eda:	77fb      	strb	r3, [r7, #31]
 8009edc:	e06a      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a1b      	ldr	r2, [pc, #108]	@ (8009f50 <UART_SetConfig+0x2e4>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d138      	bne.n	8009f5a <UART_SetConfig+0x2ee>
 8009ee8:	4b13      	ldr	r3, [pc, #76]	@ (8009f38 <UART_SetConfig+0x2cc>)
 8009eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009eee:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009ef2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009ef6:	d017      	beq.n	8009f28 <UART_SetConfig+0x2bc>
 8009ef8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009efc:	d82a      	bhi.n	8009f54 <UART_SetConfig+0x2e8>
 8009efe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f02:	d00b      	beq.n	8009f1c <UART_SetConfig+0x2b0>
 8009f04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f08:	d824      	bhi.n	8009f54 <UART_SetConfig+0x2e8>
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d003      	beq.n	8009f16 <UART_SetConfig+0x2aa>
 8009f0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f12:	d006      	beq.n	8009f22 <UART_SetConfig+0x2b6>
 8009f14:	e01e      	b.n	8009f54 <UART_SetConfig+0x2e8>
 8009f16:	2300      	movs	r3, #0
 8009f18:	77fb      	strb	r3, [r7, #31]
 8009f1a:	e04b      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009f1c:	2302      	movs	r3, #2
 8009f1e:	77fb      	strb	r3, [r7, #31]
 8009f20:	e048      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009f22:	2304      	movs	r3, #4
 8009f24:	77fb      	strb	r3, [r7, #31]
 8009f26:	e045      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009f28:	2308      	movs	r3, #8
 8009f2a:	77fb      	strb	r3, [r7, #31]
 8009f2c:	e042      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009f2e:	bf00      	nop
 8009f30:	efff69f3 	.word	0xefff69f3
 8009f34:	40011000 	.word	0x40011000
 8009f38:	40023800 	.word	0x40023800
 8009f3c:	40004400 	.word	0x40004400
 8009f40:	40004800 	.word	0x40004800
 8009f44:	40004c00 	.word	0x40004c00
 8009f48:	40005000 	.word	0x40005000
 8009f4c:	40011400 	.word	0x40011400
 8009f50:	40007800 	.word	0x40007800
 8009f54:	2310      	movs	r3, #16
 8009f56:	77fb      	strb	r3, [r7, #31]
 8009f58:	e02c      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4a72      	ldr	r2, [pc, #456]	@ (800a128 <UART_SetConfig+0x4bc>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d125      	bne.n	8009fb0 <UART_SetConfig+0x344>
 8009f64:	4b71      	ldr	r3, [pc, #452]	@ (800a12c <UART_SetConfig+0x4c0>)
 8009f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f6a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009f6e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009f72:	d017      	beq.n	8009fa4 <UART_SetConfig+0x338>
 8009f74:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009f78:	d817      	bhi.n	8009faa <UART_SetConfig+0x33e>
 8009f7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f7e:	d00b      	beq.n	8009f98 <UART_SetConfig+0x32c>
 8009f80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f84:	d811      	bhi.n	8009faa <UART_SetConfig+0x33e>
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d003      	beq.n	8009f92 <UART_SetConfig+0x326>
 8009f8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009f8e:	d006      	beq.n	8009f9e <UART_SetConfig+0x332>
 8009f90:	e00b      	b.n	8009faa <UART_SetConfig+0x33e>
 8009f92:	2300      	movs	r3, #0
 8009f94:	77fb      	strb	r3, [r7, #31]
 8009f96:	e00d      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009f98:	2302      	movs	r3, #2
 8009f9a:	77fb      	strb	r3, [r7, #31]
 8009f9c:	e00a      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009f9e:	2304      	movs	r3, #4
 8009fa0:	77fb      	strb	r3, [r7, #31]
 8009fa2:	e007      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009fa4:	2308      	movs	r3, #8
 8009fa6:	77fb      	strb	r3, [r7, #31]
 8009fa8:	e004      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009faa:	2310      	movs	r3, #16
 8009fac:	77fb      	strb	r3, [r7, #31]
 8009fae:	e001      	b.n	8009fb4 <UART_SetConfig+0x348>
 8009fb0:	2310      	movs	r3, #16
 8009fb2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	69db      	ldr	r3, [r3, #28]
 8009fb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009fbc:	d15b      	bne.n	800a076 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009fbe:	7ffb      	ldrb	r3, [r7, #31]
 8009fc0:	2b08      	cmp	r3, #8
 8009fc2:	d828      	bhi.n	800a016 <UART_SetConfig+0x3aa>
 8009fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8009fcc <UART_SetConfig+0x360>)
 8009fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fca:	bf00      	nop
 8009fcc:	08009ff1 	.word	0x08009ff1
 8009fd0:	08009ff9 	.word	0x08009ff9
 8009fd4:	0800a001 	.word	0x0800a001
 8009fd8:	0800a017 	.word	0x0800a017
 8009fdc:	0800a007 	.word	0x0800a007
 8009fe0:	0800a017 	.word	0x0800a017
 8009fe4:	0800a017 	.word	0x0800a017
 8009fe8:	0800a017 	.word	0x0800a017
 8009fec:	0800a00f 	.word	0x0800a00f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ff0:	f7fc fab6 	bl	8006560 <HAL_RCC_GetPCLK1Freq>
 8009ff4:	61b8      	str	r0, [r7, #24]
        break;
 8009ff6:	e013      	b.n	800a020 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ff8:	f7fc fac6 	bl	8006588 <HAL_RCC_GetPCLK2Freq>
 8009ffc:	61b8      	str	r0, [r7, #24]
        break;
 8009ffe:	e00f      	b.n	800a020 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a000:	4b4b      	ldr	r3, [pc, #300]	@ (800a130 <UART_SetConfig+0x4c4>)
 800a002:	61bb      	str	r3, [r7, #24]
        break;
 800a004:	e00c      	b.n	800a020 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a006:	f7fc f999 	bl	800633c <HAL_RCC_GetSysClockFreq>
 800a00a:	61b8      	str	r0, [r7, #24]
        break;
 800a00c:	e008      	b.n	800a020 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a00e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a012:	61bb      	str	r3, [r7, #24]
        break;
 800a014:	e004      	b.n	800a020 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a016:	2300      	movs	r3, #0
 800a018:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a01a:	2301      	movs	r3, #1
 800a01c:	77bb      	strb	r3, [r7, #30]
        break;
 800a01e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d074      	beq.n	800a110 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a026:	69bb      	ldr	r3, [r7, #24]
 800a028:	005a      	lsls	r2, r3, #1
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	085b      	lsrs	r3, r3, #1
 800a030:	441a      	add	r2, r3
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	fbb2 f3f3 	udiv	r3, r2, r3
 800a03a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	2b0f      	cmp	r3, #15
 800a040:	d916      	bls.n	800a070 <UART_SetConfig+0x404>
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a048:	d212      	bcs.n	800a070 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	f023 030f 	bic.w	r3, r3, #15
 800a052:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	085b      	lsrs	r3, r3, #1
 800a058:	b29b      	uxth	r3, r3
 800a05a:	f003 0307 	and.w	r3, r3, #7
 800a05e:	b29a      	uxth	r2, r3
 800a060:	89fb      	ldrh	r3, [r7, #14]
 800a062:	4313      	orrs	r3, r2
 800a064:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	89fa      	ldrh	r2, [r7, #14]
 800a06c:	60da      	str	r2, [r3, #12]
 800a06e:	e04f      	b.n	800a110 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	77bb      	strb	r3, [r7, #30]
 800a074:	e04c      	b.n	800a110 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a076:	7ffb      	ldrb	r3, [r7, #31]
 800a078:	2b08      	cmp	r3, #8
 800a07a:	d828      	bhi.n	800a0ce <UART_SetConfig+0x462>
 800a07c:	a201      	add	r2, pc, #4	@ (adr r2, 800a084 <UART_SetConfig+0x418>)
 800a07e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a082:	bf00      	nop
 800a084:	0800a0a9 	.word	0x0800a0a9
 800a088:	0800a0b1 	.word	0x0800a0b1
 800a08c:	0800a0b9 	.word	0x0800a0b9
 800a090:	0800a0cf 	.word	0x0800a0cf
 800a094:	0800a0bf 	.word	0x0800a0bf
 800a098:	0800a0cf 	.word	0x0800a0cf
 800a09c:	0800a0cf 	.word	0x0800a0cf
 800a0a0:	0800a0cf 	.word	0x0800a0cf
 800a0a4:	0800a0c7 	.word	0x0800a0c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0a8:	f7fc fa5a 	bl	8006560 <HAL_RCC_GetPCLK1Freq>
 800a0ac:	61b8      	str	r0, [r7, #24]
        break;
 800a0ae:	e013      	b.n	800a0d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0b0:	f7fc fa6a 	bl	8006588 <HAL_RCC_GetPCLK2Freq>
 800a0b4:	61b8      	str	r0, [r7, #24]
        break;
 800a0b6:	e00f      	b.n	800a0d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0b8:	4b1d      	ldr	r3, [pc, #116]	@ (800a130 <UART_SetConfig+0x4c4>)
 800a0ba:	61bb      	str	r3, [r7, #24]
        break;
 800a0bc:	e00c      	b.n	800a0d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0be:	f7fc f93d 	bl	800633c <HAL_RCC_GetSysClockFreq>
 800a0c2:	61b8      	str	r0, [r7, #24]
        break;
 800a0c4:	e008      	b.n	800a0d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a0ca:	61bb      	str	r3, [r7, #24]
        break;
 800a0cc:	e004      	b.n	800a0d8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	77bb      	strb	r3, [r7, #30]
        break;
 800a0d6:	bf00      	nop
    }

    if (pclk != 0U)
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d018      	beq.n	800a110 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	085a      	lsrs	r2, r3, #1
 800a0e4:	69bb      	ldr	r3, [r7, #24]
 800a0e6:	441a      	add	r2, r3
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	2b0f      	cmp	r3, #15
 800a0f6:	d909      	bls.n	800a10c <UART_SetConfig+0x4a0>
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0fe:	d205      	bcs.n	800a10c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	b29a      	uxth	r2, r3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	60da      	str	r2, [r3, #12]
 800a10a:	e001      	b.n	800a110 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a10c:	2301      	movs	r3, #1
 800a10e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2200      	movs	r2, #0
 800a11a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a11c:	7fbb      	ldrb	r3, [r7, #30]
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3720      	adds	r7, #32
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	40007c00 	.word	0x40007c00
 800a12c:	40023800 	.word	0x40023800
 800a130:	00f42400 	.word	0x00f42400

0800a134 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a140:	f003 0308 	and.w	r3, r3, #8
 800a144:	2b00      	cmp	r3, #0
 800a146:	d00a      	beq.n	800a15e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	430a      	orrs	r2, r1
 800a15c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a162:	f003 0301 	and.w	r3, r3, #1
 800a166:	2b00      	cmp	r3, #0
 800a168:	d00a      	beq.n	800a180 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	430a      	orrs	r2, r1
 800a17e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a184:	f003 0302 	and.w	r3, r3, #2
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d00a      	beq.n	800a1a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	430a      	orrs	r2, r1
 800a1a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1a6:	f003 0304 	and.w	r3, r3, #4
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d00a      	beq.n	800a1c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	430a      	orrs	r2, r1
 800a1c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1c8:	f003 0310 	and.w	r3, r3, #16
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d00a      	beq.n	800a1e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	430a      	orrs	r2, r1
 800a1e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ea:	f003 0320 	and.w	r3, r3, #32
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d00a      	beq.n	800a208 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	430a      	orrs	r2, r1
 800a206:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a20c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a210:	2b00      	cmp	r3, #0
 800a212:	d01a      	beq.n	800a24a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	430a      	orrs	r2, r1
 800a228:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a22e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a232:	d10a      	bne.n	800a24a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	430a      	orrs	r2, r1
 800a248:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a24e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a252:	2b00      	cmp	r3, #0
 800a254:	d00a      	beq.n	800a26c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	430a      	orrs	r2, r1
 800a26a:	605a      	str	r2, [r3, #4]
  }
}
 800a26c:	bf00      	nop
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b08c      	sub	sp, #48	@ 0x30
 800a27c:	af02      	add	r7, sp, #8
 800a27e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a288:	f7f9 ff86 	bl	8004198 <HAL_GetTick>
 800a28c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f003 0308 	and.w	r3, r3, #8
 800a298:	2b08      	cmp	r3, #8
 800a29a:	d12e      	bne.n	800a2fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a29c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 f83b 	bl	800a326 <UART_WaitOnFlagUntilTimeout>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d021      	beq.n	800a2fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	e853 3f00 	ldrex	r3, [r3]
 800a2c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a2ca:	623b      	str	r3, [r7, #32]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	6a3b      	ldr	r3, [r7, #32]
 800a2d4:	61fb      	str	r3, [r7, #28]
 800a2d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d8:	69b9      	ldr	r1, [r7, #24]
 800a2da:	69fa      	ldr	r2, [r7, #28]
 800a2dc:	e841 2300 	strex	r3, r2, [r1]
 800a2e0:	617b      	str	r3, [r7, #20]
   return(result);
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d1e6      	bne.n	800a2b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2220      	movs	r2, #32
 800a2ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a2f6:	2303      	movs	r3, #3
 800a2f8:	e011      	b.n	800a31e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2220      	movs	r2, #32
 800a2fe:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2220      	movs	r2, #32
 800a304:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2200      	movs	r2, #0
 800a312:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a31c:	2300      	movs	r3, #0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3728      	adds	r7, #40	@ 0x28
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a326:	b580      	push	{r7, lr}
 800a328:	b084      	sub	sp, #16
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	60f8      	str	r0, [r7, #12]
 800a32e:	60b9      	str	r1, [r7, #8]
 800a330:	603b      	str	r3, [r7, #0]
 800a332:	4613      	mov	r3, r2
 800a334:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a336:	e04f      	b.n	800a3d8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a338:	69bb      	ldr	r3, [r7, #24]
 800a33a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a33e:	d04b      	beq.n	800a3d8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a340:	f7f9 ff2a 	bl	8004198 <HAL_GetTick>
 800a344:	4602      	mov	r2, r0
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	1ad3      	subs	r3, r2, r3
 800a34a:	69ba      	ldr	r2, [r7, #24]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d302      	bcc.n	800a356 <UART_WaitOnFlagUntilTimeout+0x30>
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d101      	bne.n	800a35a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a356:	2303      	movs	r3, #3
 800a358:	e04e      	b.n	800a3f8 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f003 0304 	and.w	r3, r3, #4
 800a364:	2b00      	cmp	r3, #0
 800a366:	d037      	beq.n	800a3d8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	2b80      	cmp	r3, #128	@ 0x80
 800a36c:	d034      	beq.n	800a3d8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	2b40      	cmp	r3, #64	@ 0x40
 800a372:	d031      	beq.n	800a3d8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	69db      	ldr	r3, [r3, #28]
 800a37a:	f003 0308 	and.w	r3, r3, #8
 800a37e:	2b08      	cmp	r3, #8
 800a380:	d110      	bne.n	800a3a4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2208      	movs	r2, #8
 800a388:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a38a:	68f8      	ldr	r0, [r7, #12]
 800a38c:	f000 f8fe 	bl	800a58c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2208      	movs	r2, #8
 800a394:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2200      	movs	r2, #0
 800a39c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	e029      	b.n	800a3f8 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	69db      	ldr	r3, [r3, #28]
 800a3aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a3ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3b2:	d111      	bne.n	800a3d8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a3bc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f000 f8e4 	bl	800a58c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2220      	movs	r2, #32
 800a3c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	e00f      	b.n	800a3f8 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	69da      	ldr	r2, [r3, #28]
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	4013      	ands	r3, r2
 800a3e2:	68ba      	ldr	r2, [r7, #8]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	bf0c      	ite	eq
 800a3e8:	2301      	moveq	r3, #1
 800a3ea:	2300      	movne	r3, #0
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	79fb      	ldrb	r3, [r7, #7]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d0a0      	beq.n	800a338 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a3f6:	2300      	movs	r3, #0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3710      	adds	r7, #16
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b096      	sub	sp, #88	@ 0x58
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	4613      	mov	r3, r2
 800a40c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	68ba      	ldr	r2, [r7, #8]
 800a412:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	88fa      	ldrh	r2, [r7, #6]
 800a418:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2200      	movs	r2, #0
 800a420:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2222      	movs	r2, #34	@ 0x22
 800a428:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a430:	2b00      	cmp	r3, #0
 800a432:	d028      	beq.n	800a486 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a438:	4a3e      	ldr	r2, [pc, #248]	@ (800a534 <UART_Start_Receive_DMA+0x134>)
 800a43a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a440:	4a3d      	ldr	r2, [pc, #244]	@ (800a538 <UART_Start_Receive_DMA+0x138>)
 800a442:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a448:	4a3c      	ldr	r2, [pc, #240]	@ (800a53c <UART_Start_Receive_DMA+0x13c>)
 800a44a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a450:	2200      	movs	r2, #0
 800a452:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	3324      	adds	r3, #36	@ 0x24
 800a45e:	4619      	mov	r1, r3
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a464:	461a      	mov	r2, r3
 800a466:	88fb      	ldrh	r3, [r7, #6]
 800a468:	f7fa f886 	bl	8004578 <HAL_DMA_Start_IT>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d009      	beq.n	800a486 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2210      	movs	r2, #16
 800a476:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2220      	movs	r2, #32
 800a47e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800a482:	2301      	movs	r3, #1
 800a484:	e051      	b.n	800a52a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d018      	beq.n	800a4c0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a496:	e853 3f00 	ldrex	r3, [r3]
 800a49a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a49c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a49e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4a2:	657b      	str	r3, [r7, #84]	@ 0x54
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4ae:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a4b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a4b4:	e841 2300 	strex	r3, r2, [r1]
 800a4b8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a4ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d1e6      	bne.n	800a48e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	3308      	adds	r3, #8
 800a4c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ca:	e853 3f00 	ldrex	r3, [r3]
 800a4ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d2:	f043 0301 	orr.w	r3, r3, #1
 800a4d6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	3308      	adds	r3, #8
 800a4de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a4e0:	637a      	str	r2, [r7, #52]	@ 0x34
 800a4e2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a4e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a4e8:	e841 2300 	strex	r3, r2, [r1]
 800a4ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a4ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d1e5      	bne.n	800a4c0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	3308      	adds	r3, #8
 800a4fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	e853 3f00 	ldrex	r3, [r3]
 800a502:	613b      	str	r3, [r7, #16]
   return(result);
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a50a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	3308      	adds	r3, #8
 800a512:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a514:	623a      	str	r2, [r7, #32]
 800a516:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a518:	69f9      	ldr	r1, [r7, #28]
 800a51a:	6a3a      	ldr	r2, [r7, #32]
 800a51c:	e841 2300 	strex	r3, r2, [r1]
 800a520:	61bb      	str	r3, [r7, #24]
   return(result);
 800a522:	69bb      	ldr	r3, [r7, #24]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d1e5      	bne.n	800a4f4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800a528:	2300      	movs	r3, #0
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3758      	adds	r7, #88	@ 0x58
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	0800a655 	.word	0x0800a655
 800a538:	0800a77d 	.word	0x0800a77d
 800a53c:	0800a7bb 	.word	0x0800a7bb

0800a540 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a540:	b480      	push	{r7}
 800a542:	b089      	sub	sp, #36	@ 0x24
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	e853 3f00 	ldrex	r3, [r3]
 800a554:	60bb      	str	r3, [r7, #8]
   return(result);
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a55c:	61fb      	str	r3, [r7, #28]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	461a      	mov	r2, r3
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	61bb      	str	r3, [r7, #24]
 800a568:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a56a:	6979      	ldr	r1, [r7, #20]
 800a56c:	69ba      	ldr	r2, [r7, #24]
 800a56e:	e841 2300 	strex	r3, r2, [r1]
 800a572:	613b      	str	r3, [r7, #16]
   return(result);
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d1e6      	bne.n	800a548 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2220      	movs	r2, #32
 800a57e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800a580:	bf00      	nop
 800a582:	3724      	adds	r7, #36	@ 0x24
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b095      	sub	sp, #84	@ 0x54
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a59a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a59c:	e853 3f00 	ldrex	r3, [r3]
 800a5a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a5a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5b2:	643b      	str	r3, [r7, #64]	@ 0x40
 800a5b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a5b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a5ba:	e841 2300 	strex	r3, r2, [r1]
 800a5be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d1e6      	bne.n	800a594 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	3308      	adds	r3, #8
 800a5cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ce:	6a3b      	ldr	r3, [r7, #32]
 800a5d0:	e853 3f00 	ldrex	r3, [r3]
 800a5d4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a5d6:	69fb      	ldr	r3, [r7, #28]
 800a5d8:	f023 0301 	bic.w	r3, r3, #1
 800a5dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	3308      	adds	r3, #8
 800a5e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a5e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a5ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a5ee:	e841 2300 	strex	r3, r2, [r1]
 800a5f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d1e5      	bne.n	800a5c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d118      	bne.n	800a634 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	e853 3f00 	ldrex	r3, [r3]
 800a60e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	f023 0310 	bic.w	r3, r3, #16
 800a616:	647b      	str	r3, [r7, #68]	@ 0x44
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	461a      	mov	r2, r3
 800a61e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a620:	61bb      	str	r3, [r7, #24]
 800a622:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a624:	6979      	ldr	r1, [r7, #20]
 800a626:	69ba      	ldr	r2, [r7, #24]
 800a628:	e841 2300 	strex	r3, r2, [r1]
 800a62c:	613b      	str	r3, [r7, #16]
   return(result);
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d1e6      	bne.n	800a602 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2220      	movs	r2, #32
 800a638:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2200      	movs	r2, #0
 800a646:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a648:	bf00      	nop
 800a64a:	3754      	adds	r7, #84	@ 0x54
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr

0800a654 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b09c      	sub	sp, #112	@ 0x70
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a660:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	69db      	ldr	r3, [r3, #28]
 800a666:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a66a:	d071      	beq.n	800a750 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a66c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a66e:	2200      	movs	r2, #0
 800a670:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a674:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a67c:	e853 3f00 	ldrex	r3, [r3]
 800a680:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a682:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a684:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a688:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a68a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	461a      	mov	r2, r3
 800a690:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a692:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a694:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a696:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a698:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a69a:	e841 2300 	strex	r3, r2, [r1]
 800a69e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a6a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1e6      	bne.n	800a674 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	3308      	adds	r3, #8
 800a6ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6b0:	e853 3f00 	ldrex	r3, [r3]
 800a6b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a6b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6b8:	f023 0301 	bic.w	r3, r3, #1
 800a6bc:	667b      	str	r3, [r7, #100]	@ 0x64
 800a6be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	3308      	adds	r3, #8
 800a6c4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a6c6:	647a      	str	r2, [r7, #68]	@ 0x44
 800a6c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a6cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6ce:	e841 2300 	strex	r3, r2, [r1]
 800a6d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a6d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d1e5      	bne.n	800a6a6 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	3308      	adds	r3, #8
 800a6e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6e4:	e853 3f00 	ldrex	r3, [r3]
 800a6e8:	623b      	str	r3, [r7, #32]
   return(result);
 800a6ea:	6a3b      	ldr	r3, [r7, #32]
 800a6ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6f0:	663b      	str	r3, [r7, #96]	@ 0x60
 800a6f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	3308      	adds	r3, #8
 800a6f8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a6fa:	633a      	str	r2, [r7, #48]	@ 0x30
 800a6fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a700:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a702:	e841 2300 	strex	r3, r2, [r1]
 800a706:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d1e5      	bne.n	800a6da <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a70e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a710:	2220      	movs	r2, #32
 800a712:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a716:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d118      	bne.n	800a750 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a71e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	e853 3f00 	ldrex	r3, [r3]
 800a72a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f023 0310 	bic.w	r3, r3, #16
 800a732:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a734:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	461a      	mov	r2, r3
 800a73a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a73c:	61fb      	str	r3, [r7, #28]
 800a73e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a740:	69b9      	ldr	r1, [r7, #24]
 800a742:	69fa      	ldr	r2, [r7, #28]
 800a744:	e841 2300 	strex	r3, r2, [r1]
 800a748:	617b      	str	r3, [r7, #20]
   return(result);
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d1e6      	bne.n	800a71e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a750:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a752:	2200      	movs	r2, #0
 800a754:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a756:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d107      	bne.n	800a76e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a75e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a760:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a764:	4619      	mov	r1, r3
 800a766:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a768:	f7ff fa74 	bl	8009c54 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a76c:	e002      	b.n	800a774 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a76e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a770:	f7f7 f9a0 	bl	8001ab4 <HAL_UART_RxCpltCallback>
}
 800a774:	bf00      	nop
 800a776:	3770      	adds	r7, #112	@ 0x70
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a788:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2201      	movs	r2, #1
 800a78e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a794:	2b01      	cmp	r3, #1
 800a796:	d109      	bne.n	800a7ac <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a79e:	085b      	lsrs	r3, r3, #1
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	68f8      	ldr	r0, [r7, #12]
 800a7a6:	f7ff fa55 	bl	8009c54 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a7aa:	e002      	b.n	800a7b2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a7ac:	68f8      	ldr	r0, [r7, #12]
 800a7ae:	f7ff fa3d 	bl	8009c2c <HAL_UART_RxHalfCpltCallback>
}
 800a7b2:	bf00      	nop
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}

0800a7ba <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a7ba:	b580      	push	{r7, lr}
 800a7bc:	b086      	sub	sp, #24
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7c6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7cc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7d4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	689b      	ldr	r3, [r3, #8]
 800a7dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7e0:	2b80      	cmp	r3, #128	@ 0x80
 800a7e2:	d109      	bne.n	800a7f8 <UART_DMAError+0x3e>
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	2b21      	cmp	r3, #33	@ 0x21
 800a7e8:	d106      	bne.n	800a7f8 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800a7f2:	6978      	ldr	r0, [r7, #20]
 800a7f4:	f7ff fea4 	bl	800a540 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	689b      	ldr	r3, [r3, #8]
 800a7fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a802:	2b40      	cmp	r3, #64	@ 0x40
 800a804:	d109      	bne.n	800a81a <UART_DMAError+0x60>
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2b22      	cmp	r3, #34	@ 0x22
 800a80a:	d106      	bne.n	800a81a <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	2200      	movs	r2, #0
 800a810:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800a814:	6978      	ldr	r0, [r7, #20]
 800a816:	f7ff feb9 	bl	800a58c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a820:	f043 0210 	orr.w	r2, r3, #16
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a82a:	6978      	ldr	r0, [r7, #20]
 800a82c:	f7ff fa08 	bl	8009c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a830:	bf00      	nop
 800a832:	3718      	adds	r7, #24
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a844:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2200      	movs	r2, #0
 800a84a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2200      	movs	r2, #0
 800a852:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f7ff f9f2 	bl	8009c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a85c:	bf00      	nop
 800a85e:	3710      	adds	r7, #16
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b088      	sub	sp, #32
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	e853 3f00 	ldrex	r3, [r3]
 800a878:	60bb      	str	r3, [r7, #8]
   return(result);
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a880:	61fb      	str	r3, [r7, #28]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	461a      	mov	r2, r3
 800a888:	69fb      	ldr	r3, [r7, #28]
 800a88a:	61bb      	str	r3, [r7, #24]
 800a88c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a88e:	6979      	ldr	r1, [r7, #20]
 800a890:	69ba      	ldr	r2, [r7, #24]
 800a892:	e841 2300 	strex	r3, r2, [r1]
 800a896:	613b      	str	r3, [r7, #16]
   return(result);
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d1e6      	bne.n	800a86c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2220      	movs	r2, #32
 800a8a2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f7ff f9b4 	bl	8009c18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8b0:	bf00      	nop
 800a8b2:	3720      	adds	r7, #32
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a8b8:	b084      	sub	sp, #16
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b084      	sub	sp, #16
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
 800a8c2:	f107 001c 	add.w	r0, r7, #28
 800a8c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a8ca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d121      	bne.n	800a916 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	68da      	ldr	r2, [r3, #12]
 800a8e2:	4b21      	ldr	r3, [pc, #132]	@ (800a968 <USB_CoreInit+0xb0>)
 800a8e4:	4013      	ands	r3, r2
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	68db      	ldr	r3, [r3, #12]
 800a8ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a8f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d105      	bne.n	800a90a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	68db      	ldr	r3, [r3, #12]
 800a902:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 fa92 	bl	800ae34 <USB_CoreReset>
 800a910:	4603      	mov	r3, r0
 800a912:	73fb      	strb	r3, [r7, #15]
 800a914:	e010      	b.n	800a938 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 fa86 	bl	800ae34 <USB_CoreReset>
 800a928:	4603      	mov	r3, r0
 800a92a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a930:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800a938:	7fbb      	ldrb	r3, [r7, #30]
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	d10b      	bne.n	800a956 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	f043 0206 	orr.w	r2, r3, #6
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	689b      	ldr	r3, [r3, #8]
 800a94e:	f043 0220 	orr.w	r2, r3, #32
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a956:	7bfb      	ldrb	r3, [r7, #15]
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3710      	adds	r7, #16
 800a95c:	46bd      	mov	sp, r7
 800a95e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a962:	b004      	add	sp, #16
 800a964:	4770      	bx	lr
 800a966:	bf00      	nop
 800a968:	ffbdffbf 	.word	0xffbdffbf

0800a96c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	689b      	ldr	r3, [r3, #8]
 800a978:	f023 0201 	bic.w	r2, r3, #1
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a980:	2300      	movs	r3, #0
}
 800a982:	4618      	mov	r0, r3
 800a984:	370c      	adds	r7, #12
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr

0800a98e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a98e:	b580      	push	{r7, lr}
 800a990:	b084      	sub	sp, #16
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
 800a996:	460b      	mov	r3, r1
 800a998:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a99a:	2300      	movs	r3, #0
 800a99c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	68db      	ldr	r3, [r3, #12]
 800a9a2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a9aa:	78fb      	ldrb	r3, [r7, #3]
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d115      	bne.n	800a9dc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	68db      	ldr	r3, [r3, #12]
 800a9b4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a9bc:	200a      	movs	r0, #10
 800a9be:	f7f9 fbf7 	bl	80041b0 <HAL_Delay>
      ms += 10U;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	330a      	adds	r3, #10
 800a9c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 fa25 	bl	800ae18 <USB_GetMode>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d01e      	beq.n	800aa12 <USB_SetCurrentMode+0x84>
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2bc7      	cmp	r3, #199	@ 0xc7
 800a9d8:	d9f0      	bls.n	800a9bc <USB_SetCurrentMode+0x2e>
 800a9da:	e01a      	b.n	800aa12 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a9dc:	78fb      	ldrb	r3, [r7, #3]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d115      	bne.n	800aa0e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	68db      	ldr	r3, [r3, #12]
 800a9e6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a9ee:	200a      	movs	r0, #10
 800a9f0:	f7f9 fbde 	bl	80041b0 <HAL_Delay>
      ms += 10U;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	330a      	adds	r3, #10
 800a9f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 fa0c 	bl	800ae18 <USB_GetMode>
 800aa00:	4603      	mov	r3, r0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d005      	beq.n	800aa12 <USB_SetCurrentMode+0x84>
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2bc7      	cmp	r3, #199	@ 0xc7
 800aa0a:	d9f0      	bls.n	800a9ee <USB_SetCurrentMode+0x60>
 800aa0c:	e001      	b.n	800aa12 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e005      	b.n	800aa1e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2bc8      	cmp	r3, #200	@ 0xc8
 800aa16:	d101      	bne.n	800aa1c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	e000      	b.n	800aa1e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800aa1c:	2300      	movs	r3, #0
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3710      	adds	r7, #16
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
	...

0800aa28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aa28:	b084      	sub	sp, #16
 800aa2a:	b580      	push	{r7, lr}
 800aa2c:	b086      	sub	sp, #24
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
 800aa32:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800aa36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800aa42:	2300      	movs	r3, #0
 800aa44:	613b      	str	r3, [r7, #16]
 800aa46:	e009      	b.n	800aa5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	3340      	adds	r3, #64	@ 0x40
 800aa4e:	009b      	lsls	r3, r3, #2
 800aa50:	4413      	add	r3, r2
 800aa52:	2200      	movs	r2, #0
 800aa54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	3301      	adds	r3, #1
 800aa5a:	613b      	str	r3, [r7, #16]
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	2b0e      	cmp	r3, #14
 800aa60:	d9f2      	bls.n	800aa48 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800aa62:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d11c      	bne.n	800aaa4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	68fa      	ldr	r2, [r7, #12]
 800aa74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa78:	f043 0302 	orr.w	r3, r3, #2
 800aa7c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa82:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	601a      	str	r2, [r3, #0]
 800aaa2:	e005      	b.n	800aab0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaa8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aab6:	461a      	mov	r2, r3
 800aab8:	2300      	movs	r3, #0
 800aaba:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aabc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d10d      	bne.n	800aae0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800aac4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d104      	bne.n	800aad6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800aacc:	2100      	movs	r1, #0
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 f968 	bl	800ada4 <USB_SetDevSpeed>
 800aad4:	e008      	b.n	800aae8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800aad6:	2101      	movs	r1, #1
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f000 f963 	bl	800ada4 <USB_SetDevSpeed>
 800aade:	e003      	b.n	800aae8 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800aae0:	2103      	movs	r1, #3
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f000 f95e 	bl	800ada4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800aae8:	2110      	movs	r1, #16
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 f8fa 	bl	800ace4 <USB_FlushTxFifo>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d001      	beq.n	800aafa <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 f924 	bl	800ad48 <USB_FlushRxFifo>
 800ab00:	4603      	mov	r3, r0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d001      	beq.n	800ab0a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800ab06:	2301      	movs	r3, #1
 800ab08:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab10:	461a      	mov	r2, r3
 800ab12:	2300      	movs	r3, #0
 800ab14:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	2300      	movs	r3, #0
 800ab20:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab28:	461a      	mov	r2, r3
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab2e:	2300      	movs	r3, #0
 800ab30:	613b      	str	r3, [r7, #16]
 800ab32:	e043      	b.n	800abbc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	015a      	lsls	r2, r3, #5
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	4413      	add	r3, r2
 800ab3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ab46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab4a:	d118      	bne.n	800ab7e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d10a      	bne.n	800ab68 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	015a      	lsls	r2, r3, #5
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	4413      	add	r3, r2
 800ab5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab5e:	461a      	mov	r2, r3
 800ab60:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ab64:	6013      	str	r3, [r2, #0]
 800ab66:	e013      	b.n	800ab90 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	015a      	lsls	r2, r3, #5
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	4413      	add	r3, r2
 800ab70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab74:	461a      	mov	r2, r3
 800ab76:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ab7a:	6013      	str	r3, [r2, #0]
 800ab7c:	e008      	b.n	800ab90 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	015a      	lsls	r2, r3, #5
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	4413      	add	r3, r2
 800ab86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	015a      	lsls	r2, r3, #5
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	4413      	add	r3, r2
 800ab98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	2300      	movs	r3, #0
 800aba0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	015a      	lsls	r2, r3, #5
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	4413      	add	r3, r2
 800abaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abae:	461a      	mov	r2, r3
 800abb0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800abb4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	3301      	adds	r3, #1
 800abba:	613b      	str	r3, [r7, #16]
 800abbc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800abc0:	461a      	mov	r2, r3
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d3b5      	bcc.n	800ab34 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800abc8:	2300      	movs	r3, #0
 800abca:	613b      	str	r3, [r7, #16]
 800abcc:	e043      	b.n	800ac56 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	015a      	lsls	r2, r3, #5
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	4413      	add	r3, r2
 800abd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800abe0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800abe4:	d118      	bne.n	800ac18 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d10a      	bne.n	800ac02 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	015a      	lsls	r2, r3, #5
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	4413      	add	r3, r2
 800abf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abf8:	461a      	mov	r2, r3
 800abfa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800abfe:	6013      	str	r3, [r2, #0]
 800ac00:	e013      	b.n	800ac2a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	015a      	lsls	r2, r3, #5
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	4413      	add	r3, r2
 800ac0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac0e:	461a      	mov	r2, r3
 800ac10:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ac14:	6013      	str	r3, [r2, #0]
 800ac16:	e008      	b.n	800ac2a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	015a      	lsls	r2, r3, #5
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	4413      	add	r3, r2
 800ac20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac24:	461a      	mov	r2, r3
 800ac26:	2300      	movs	r3, #0
 800ac28:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	015a      	lsls	r2, r3, #5
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	4413      	add	r3, r2
 800ac32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac36:	461a      	mov	r2, r3
 800ac38:	2300      	movs	r3, #0
 800ac3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	015a      	lsls	r2, r3, #5
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	4413      	add	r3, r2
 800ac44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac48:	461a      	mov	r2, r3
 800ac4a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ac4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	3301      	adds	r3, #1
 800ac54:	613b      	str	r3, [r7, #16]
 800ac56:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d3b5      	bcc.n	800abce <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac68:	691b      	ldr	r3, [r3, #16]
 800ac6a:	68fa      	ldr	r2, [r7, #12]
 800ac6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac74:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800ac82:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ac84:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d105      	bne.n	800ac98 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	699b      	ldr	r3, [r3, #24]
 800ac90:	f043 0210 	orr.w	r2, r3, #16
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	699a      	ldr	r2, [r3, #24]
 800ac9c:	4b0f      	ldr	r3, [pc, #60]	@ (800acdc <USB_DevInit+0x2b4>)
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aca4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d005      	beq.n	800acb8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	699b      	ldr	r3, [r3, #24]
 800acb0:	f043 0208 	orr.w	r2, r3, #8
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800acb8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d105      	bne.n	800accc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	699a      	ldr	r2, [r3, #24]
 800acc4:	4b06      	ldr	r3, [pc, #24]	@ (800ace0 <USB_DevInit+0x2b8>)
 800acc6:	4313      	orrs	r3, r2
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800accc:	7dfb      	ldrb	r3, [r7, #23]
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3718      	adds	r7, #24
 800acd2:	46bd      	mov	sp, r7
 800acd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800acd8:	b004      	add	sp, #16
 800acda:	4770      	bx	lr
 800acdc:	803c3800 	.word	0x803c3800
 800ace0:	40000004 	.word	0x40000004

0800ace4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b085      	sub	sp, #20
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800acee:	2300      	movs	r3, #0
 800acf0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	3301      	adds	r3, #1
 800acf6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800acfe:	d901      	bls.n	800ad04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ad00:	2303      	movs	r3, #3
 800ad02:	e01b      	b.n	800ad3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	691b      	ldr	r3, [r3, #16]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	daf2      	bge.n	800acf2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	019b      	lsls	r3, r3, #6
 800ad14:	f043 0220 	orr.w	r2, r3, #32
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ad28:	d901      	bls.n	800ad2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ad2a:	2303      	movs	r3, #3
 800ad2c:	e006      	b.n	800ad3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	691b      	ldr	r3, [r3, #16]
 800ad32:	f003 0320 	and.w	r3, r3, #32
 800ad36:	2b20      	cmp	r3, #32
 800ad38:	d0f0      	beq.n	800ad1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ad3a:	2300      	movs	r3, #0
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3714      	adds	r7, #20
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b085      	sub	sp, #20
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ad50:	2300      	movs	r3, #0
 800ad52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	3301      	adds	r3, #1
 800ad58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ad60:	d901      	bls.n	800ad66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ad62:	2303      	movs	r3, #3
 800ad64:	e018      	b.n	800ad98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	691b      	ldr	r3, [r3, #16]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	daf2      	bge.n	800ad54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2210      	movs	r2, #16
 800ad76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ad84:	d901      	bls.n	800ad8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ad86:	2303      	movs	r3, #3
 800ad88:	e006      	b.n	800ad98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	691b      	ldr	r3, [r3, #16]
 800ad8e:	f003 0310 	and.w	r3, r3, #16
 800ad92:	2b10      	cmp	r3, #16
 800ad94:	d0f0      	beq.n	800ad78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ad96:	2300      	movs	r3, #0
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3714      	adds	r7, #20
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b085      	sub	sp, #20
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	460b      	mov	r3, r1
 800adae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	78fb      	ldrb	r3, [r7, #3]
 800adbe:	68f9      	ldr	r1, [r7, #12]
 800adc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800adc4:	4313      	orrs	r3, r2
 800adc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800adc8:	2300      	movs	r3, #0
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3714      	adds	r7, #20
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr

0800add6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800add6:	b480      	push	{r7}
 800add8:	b085      	sub	sp, #20
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	68fa      	ldr	r2, [r7, #12]
 800adec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800adf0:	f023 0303 	bic.w	r3, r3, #3
 800adf4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	68fa      	ldr	r2, [r7, #12]
 800ae00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ae04:	f043 0302 	orr.w	r3, r3, #2
 800ae08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ae0a:	2300      	movs	r3, #0
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3714      	adds	r7, #20
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b083      	sub	sp, #12
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	695b      	ldr	r3, [r3, #20]
 800ae24:	f003 0301 	and.w	r3, r3, #1
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	370c      	adds	r7, #12
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr

0800ae34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b085      	sub	sp, #20
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	3301      	adds	r3, #1
 800ae44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae4c:	d901      	bls.n	800ae52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ae4e:	2303      	movs	r3, #3
 800ae50:	e01b      	b.n	800ae8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	691b      	ldr	r3, [r3, #16]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	daf2      	bge.n	800ae40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	691b      	ldr	r3, [r3, #16]
 800ae62:	f043 0201 	orr.w	r2, r3, #1
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae76:	d901      	bls.n	800ae7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ae78:	2303      	movs	r3, #3
 800ae7a:	e006      	b.n	800ae8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	691b      	ldr	r3, [r3, #16]
 800ae80:	f003 0301 	and.w	r3, r3, #1
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d0f0      	beq.n	800ae6a <USB_CoreReset+0x36>

  return HAL_OK;
 800ae88:	2300      	movs	r3, #0
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3714      	adds	r7, #20
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr
	...

0800ae98 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800ae9c:	4904      	ldr	r1, [pc, #16]	@ (800aeb0 <MX_FATFS_Init+0x18>)
 800ae9e:	4805      	ldr	r0, [pc, #20]	@ (800aeb4 <MX_FATFS_Init+0x1c>)
 800aea0:	f000 fd94 	bl	800b9cc <FATFS_LinkDriver>
 800aea4:	4603      	mov	r3, r0
 800aea6:	461a      	mov	r2, r3
 800aea8:	4b03      	ldr	r3, [pc, #12]	@ (800aeb8 <MX_FATFS_Init+0x20>)
 800aeaa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aeac:	bf00      	nop
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	20000f8c 	.word	0x20000f8c
 800aeb4:	20000058 	.word	0x20000058
 800aeb8:	20000f88 	.word	0x20000f88

0800aebc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b082      	sub	sp, #8
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	4603      	mov	r3, r0
 800aec4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800aec6:	79fb      	ldrb	r3, [r7, #7]
 800aec8:	4618      	mov	r0, r3
 800aeca:	f000 f9d7 	bl	800b27c <USER_SPI_initialize>
 800aece:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3708      	adds	r7, #8
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0
 800aede:	4603      	mov	r3, r0
 800aee0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800aee2:	79fb      	ldrb	r3, [r7, #7]
 800aee4:	4618      	mov	r0, r3
 800aee6:	f000 fabd 	bl	800b464 <USER_SPI_status>
 800aeea:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3708      	adds	r7, #8
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	60b9      	str	r1, [r7, #8]
 800aefc:	607a      	str	r2, [r7, #4]
 800aefe:	603b      	str	r3, [r7, #0]
 800af00:	4603      	mov	r3, r0
 800af02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);return RES_OK;
 800af04:	7bf8      	ldrb	r0, [r7, #15]
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	68b9      	ldr	r1, [r7, #8]
 800af0c:	f000 fac0 	bl	800b490 <USER_SPI_read>
 800af10:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800af12:	4618      	mov	r0, r3
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b084      	sub	sp, #16
 800af1e:	af00      	add	r7, sp, #0
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	607a      	str	r2, [r7, #4]
 800af24:	603b      	str	r3, [r7, #0]
 800af26:	4603      	mov	r3, r0
 800af28:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800af2a:	7bf8      	ldrb	r0, [r7, #15]
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	68b9      	ldr	r1, [r7, #8]
 800af32:	f000 fb13 	bl	800b55c <USER_SPI_write>
 800af36:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3710      	adds	r7, #16
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	4603      	mov	r3, r0
 800af48:	603a      	str	r2, [r7, #0]
 800af4a:	71fb      	strb	r3, [r7, #7]
 800af4c:	460b      	mov	r3, r1
 800af4e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800af50:	79b9      	ldrb	r1, [r7, #6]
 800af52:	79fb      	ldrb	r3, [r7, #7]
 800af54:	683a      	ldr	r2, [r7, #0]
 800af56:	4618      	mov	r0, r3
 800af58:	f000 fb7c 	bl	800b654 <USER_SPI_ioctl>
 800af5c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3708      	adds	r7, #8
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
	...

0800af68 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800af70:	f7f9 f912 	bl	8004198 <HAL_GetTick>
 800af74:	4603      	mov	r3, r0
 800af76:	4a04      	ldr	r2, [pc, #16]	@ (800af88 <SPI_Timer_On+0x20>)
 800af78:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800af7a:	4a04      	ldr	r2, [pc, #16]	@ (800af8c <SPI_Timer_On+0x24>)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6013      	str	r3, [r2, #0]
}
 800af80:	bf00      	nop
 800af82:	3708      	adds	r7, #8
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}
 800af88:	20000f98 	.word	0x20000f98
 800af8c:	20000f9c 	.word	0x20000f9c

0800af90 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800af90:	b580      	push	{r7, lr}
 800af92:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800af94:	f7f9 f900 	bl	8004198 <HAL_GetTick>
 800af98:	4602      	mov	r2, r0
 800af9a:	4b06      	ldr	r3, [pc, #24]	@ (800afb4 <SPI_Timer_Status+0x24>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	1ad2      	subs	r2, r2, r3
 800afa0:	4b05      	ldr	r3, [pc, #20]	@ (800afb8 <SPI_Timer_Status+0x28>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	bf34      	ite	cc
 800afa8:	2301      	movcc	r3, #1
 800afaa:	2300      	movcs	r3, #0
 800afac:	b2db      	uxtb	r3, r3
}
 800afae:	4618      	mov	r0, r3
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	20000f98 	.word	0x20000f98
 800afb8:	20000f9c 	.word	0x20000f9c

0800afbc <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b086      	sub	sp, #24
 800afc0:	af02      	add	r7, sp, #8
 800afc2:	4603      	mov	r3, r0
 800afc4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800afc6:	f107 020f 	add.w	r2, r7, #15
 800afca:	1df9      	adds	r1, r7, #7
 800afcc:	2332      	movs	r3, #50	@ 0x32
 800afce:	9300      	str	r3, [sp, #0]
 800afd0:	2301      	movs	r3, #1
 800afd2:	4804      	ldr	r0, [pc, #16]	@ (800afe4 <xchg_spi+0x28>)
 800afd4:	f7fc f8fc 	bl	80071d0 <HAL_SPI_TransmitReceive>
    return rxDat;
 800afd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3710      	adds	r7, #16
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	20000178 	.word	0x20000178

0800afe8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800afe8:	b590      	push	{r4, r7, lr}
 800afea:	b085      	sub	sp, #20
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800aff2:	2300      	movs	r3, #0
 800aff4:	60fb      	str	r3, [r7, #12]
 800aff6:	e00a      	b.n	800b00e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	18d4      	adds	r4, r2, r3
 800affe:	20ff      	movs	r0, #255	@ 0xff
 800b000:	f7ff ffdc 	bl	800afbc <xchg_spi>
 800b004:	4603      	mov	r3, r0
 800b006:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	3301      	adds	r3, #1
 800b00c:	60fb      	str	r3, [r7, #12]
 800b00e:	68fa      	ldr	r2, [r7, #12]
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	429a      	cmp	r2, r3
 800b014:	d3f0      	bcc.n	800aff8 <rcvr_spi_multi+0x10>
	}
}
 800b016:	bf00      	nop
 800b018:	bf00      	nop
 800b01a:	3714      	adds	r7, #20
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd90      	pop	{r4, r7, pc}

0800b020 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	b29a      	uxth	r2, r3
 800b02e:	f04f 33ff 	mov.w	r3, #4294967295
 800b032:	6879      	ldr	r1, [r7, #4]
 800b034:	4803      	ldr	r0, [pc, #12]	@ (800b044 <xmit_spi_multi+0x24>)
 800b036:	f7fb ff56 	bl	8006ee6 <HAL_SPI_Transmit>
}
 800b03a:	bf00      	nop
 800b03c:	3708      	adds	r7, #8
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	20000178 	.word	0x20000178

0800b048 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b086      	sub	sp, #24
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800b050:	f7f9 f8a2 	bl	8004198 <HAL_GetTick>
 800b054:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800b05a:	20ff      	movs	r0, #255	@ 0xff
 800b05c:	f7ff ffae 	bl	800afbc <xchg_spi>
 800b060:	4603      	mov	r3, r0
 800b062:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800b064:	7bfb      	ldrb	r3, [r7, #15]
 800b066:	2bff      	cmp	r3, #255	@ 0xff
 800b068:	d007      	beq.n	800b07a <wait_ready+0x32>
 800b06a:	f7f9 f895 	bl	8004198 <HAL_GetTick>
 800b06e:	4602      	mov	r2, r0
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	1ad3      	subs	r3, r2, r3
 800b074:	693a      	ldr	r2, [r7, #16]
 800b076:	429a      	cmp	r2, r3
 800b078:	d8ef      	bhi.n	800b05a <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800b07a:	7bfb      	ldrb	r3, [r7, #15]
 800b07c:	2bff      	cmp	r3, #255	@ 0xff
 800b07e:	bf0c      	ite	eq
 800b080:	2301      	moveq	r3, #1
 800b082:	2300      	movne	r3, #0
 800b084:	b2db      	uxtb	r3, r3
}
 800b086:	4618      	mov	r0, r3
 800b088:	3718      	adds	r7, #24
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
	...

0800b090 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800b094:	2201      	movs	r2, #1
 800b096:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b09a:	4804      	ldr	r0, [pc, #16]	@ (800b0ac <despiselect+0x1c>)
 800b09c:	f7f9 ff8c 	bl	8004fb8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800b0a0:	20ff      	movs	r0, #255	@ 0xff
 800b0a2:	f7ff ff8b 	bl	800afbc <xchg_spi>

}
 800b0a6:	bf00      	nop
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	bf00      	nop
 800b0ac:	40020400 	.word	0x40020400

0800b0b0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b0ba:	480a      	ldr	r0, [pc, #40]	@ (800b0e4 <spiselect+0x34>)
 800b0bc:	f7f9 ff7c 	bl	8004fb8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800b0c0:	20ff      	movs	r0, #255	@ 0xff
 800b0c2:	f7ff ff7b 	bl	800afbc <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800b0c6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b0ca:	f7ff ffbd 	bl	800b048 <wait_ready>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d001      	beq.n	800b0d8 <spiselect+0x28>
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	e002      	b.n	800b0de <spiselect+0x2e>

	despiselect();
 800b0d8:	f7ff ffda 	bl	800b090 <despiselect>
	return 0;	/* Timeout */
 800b0dc:	2300      	movs	r3, #0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	40020400 	.word	0x40020400

0800b0e8 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800b0f2:	20c8      	movs	r0, #200	@ 0xc8
 800b0f4:	f7ff ff38 	bl	800af68 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800b0f8:	20ff      	movs	r0, #255	@ 0xff
 800b0fa:	f7ff ff5f 	bl	800afbc <xchg_spi>
 800b0fe:	4603      	mov	r3, r0
 800b100:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800b102:	7bfb      	ldrb	r3, [r7, #15]
 800b104:	2bff      	cmp	r3, #255	@ 0xff
 800b106:	d104      	bne.n	800b112 <rcvr_datablock+0x2a>
 800b108:	f7ff ff42 	bl	800af90 <SPI_Timer_Status>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d1f2      	bne.n	800b0f8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800b112:	7bfb      	ldrb	r3, [r7, #15]
 800b114:	2bfe      	cmp	r3, #254	@ 0xfe
 800b116:	d001      	beq.n	800b11c <rcvr_datablock+0x34>
 800b118:	2300      	movs	r3, #0
 800b11a:	e00a      	b.n	800b132 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800b11c:	6839      	ldr	r1, [r7, #0]
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f7ff ff62 	bl	800afe8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800b124:	20ff      	movs	r0, #255	@ 0xff
 800b126:	f7ff ff49 	bl	800afbc <xchg_spi>
 800b12a:	20ff      	movs	r0, #255	@ 0xff
 800b12c:	f7ff ff46 	bl	800afbc <xchg_spi>

	return 1;						/* Function succeeded */
 800b130:	2301      	movs	r3, #1
}
 800b132:	4618      	mov	r0, r3
 800b134:	3710      	adds	r7, #16
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}

0800b13a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800b13a:	b580      	push	{r7, lr}
 800b13c:	b084      	sub	sp, #16
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
 800b142:	460b      	mov	r3, r1
 800b144:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800b146:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b14a:	f7ff ff7d 	bl	800b048 <wait_ready>
 800b14e:	4603      	mov	r3, r0
 800b150:	2b00      	cmp	r3, #0
 800b152:	d101      	bne.n	800b158 <xmit_datablock+0x1e>
 800b154:	2300      	movs	r3, #0
 800b156:	e01e      	b.n	800b196 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800b158:	78fb      	ldrb	r3, [r7, #3]
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7ff ff2e 	bl	800afbc <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800b160:	78fb      	ldrb	r3, [r7, #3]
 800b162:	2bfd      	cmp	r3, #253	@ 0xfd
 800b164:	d016      	beq.n	800b194 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800b166:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f7ff ff58 	bl	800b020 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800b170:	20ff      	movs	r0, #255	@ 0xff
 800b172:	f7ff ff23 	bl	800afbc <xchg_spi>
 800b176:	20ff      	movs	r0, #255	@ 0xff
 800b178:	f7ff ff20 	bl	800afbc <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800b17c:	20ff      	movs	r0, #255	@ 0xff
 800b17e:	f7ff ff1d 	bl	800afbc <xchg_spi>
 800b182:	4603      	mov	r3, r0
 800b184:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800b186:	7bfb      	ldrb	r3, [r7, #15]
 800b188:	f003 031f 	and.w	r3, r3, #31
 800b18c:	2b05      	cmp	r3, #5
 800b18e:	d001      	beq.n	800b194 <xmit_datablock+0x5a>
 800b190:	2300      	movs	r3, #0
 800b192:	e000      	b.n	800b196 <xmit_datablock+0x5c>
	}
	return 1;
 800b194:	2301      	movs	r3, #1
}
 800b196:	4618      	mov	r0, r3
 800b198:	3710      	adds	r7, #16
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}

0800b19e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800b19e:	b580      	push	{r7, lr}
 800b1a0:	b084      	sub	sp, #16
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	6039      	str	r1, [r7, #0]
 800b1a8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800b1aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	da0e      	bge.n	800b1d0 <send_cmd+0x32>
		cmd &= 0x7F;
 800b1b2:	79fb      	ldrb	r3, [r7, #7]
 800b1b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1b8:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800b1ba:	2100      	movs	r1, #0
 800b1bc:	2037      	movs	r0, #55	@ 0x37
 800b1be:	f7ff ffee 	bl	800b19e <send_cmd>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800b1c6:	7bbb      	ldrb	r3, [r7, #14]
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d901      	bls.n	800b1d0 <send_cmd+0x32>
 800b1cc:	7bbb      	ldrb	r3, [r7, #14]
 800b1ce:	e051      	b.n	800b274 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800b1d0:	79fb      	ldrb	r3, [r7, #7]
 800b1d2:	2b0c      	cmp	r3, #12
 800b1d4:	d008      	beq.n	800b1e8 <send_cmd+0x4a>
		despiselect();
 800b1d6:	f7ff ff5b 	bl	800b090 <despiselect>
		if (!spiselect()) return 0xFF;
 800b1da:	f7ff ff69 	bl	800b0b0 <spiselect>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d101      	bne.n	800b1e8 <send_cmd+0x4a>
 800b1e4:	23ff      	movs	r3, #255	@ 0xff
 800b1e6:	e045      	b.n	800b274 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800b1e8:	79fb      	ldrb	r3, [r7, #7]
 800b1ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1ee:	b2db      	uxtb	r3, r3
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f7ff fee3 	bl	800afbc <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	0e1b      	lsrs	r3, r3, #24
 800b1fa:	b2db      	uxtb	r3, r3
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f7ff fedd 	bl	800afbc <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	0c1b      	lsrs	r3, r3, #16
 800b206:	b2db      	uxtb	r3, r3
 800b208:	4618      	mov	r0, r3
 800b20a:	f7ff fed7 	bl	800afbc <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	0a1b      	lsrs	r3, r3, #8
 800b212:	b2db      	uxtb	r3, r3
 800b214:	4618      	mov	r0, r3
 800b216:	f7ff fed1 	bl	800afbc <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	b2db      	uxtb	r3, r3
 800b21e:	4618      	mov	r0, r3
 800b220:	f7ff fecc 	bl	800afbc <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800b224:	2301      	movs	r3, #1
 800b226:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800b228:	79fb      	ldrb	r3, [r7, #7]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d101      	bne.n	800b232 <send_cmd+0x94>
 800b22e:	2395      	movs	r3, #149	@ 0x95
 800b230:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800b232:	79fb      	ldrb	r3, [r7, #7]
 800b234:	2b08      	cmp	r3, #8
 800b236:	d101      	bne.n	800b23c <send_cmd+0x9e>
 800b238:	2387      	movs	r3, #135	@ 0x87
 800b23a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800b23c:	7bfb      	ldrb	r3, [r7, #15]
 800b23e:	4618      	mov	r0, r3
 800b240:	f7ff febc 	bl	800afbc <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800b244:	79fb      	ldrb	r3, [r7, #7]
 800b246:	2b0c      	cmp	r3, #12
 800b248:	d102      	bne.n	800b250 <send_cmd+0xb2>
 800b24a:	20ff      	movs	r0, #255	@ 0xff
 800b24c:	f7ff feb6 	bl	800afbc <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800b250:	230a      	movs	r3, #10
 800b252:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800b254:	20ff      	movs	r0, #255	@ 0xff
 800b256:	f7ff feb1 	bl	800afbc <xchg_spi>
 800b25a:	4603      	mov	r3, r0
 800b25c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800b25e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b262:	2b00      	cmp	r3, #0
 800b264:	da05      	bge.n	800b272 <send_cmd+0xd4>
 800b266:	7bfb      	ldrb	r3, [r7, #15]
 800b268:	3b01      	subs	r3, #1
 800b26a:	73fb      	strb	r3, [r7, #15]
 800b26c:	7bfb      	ldrb	r3, [r7, #15]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d1f0      	bne.n	800b254 <send_cmd+0xb6>

	return res;							/* Return received response */
 800b272:	7bbb      	ldrb	r3, [r7, #14]
}
 800b274:	4618      	mov	r0, r3
 800b276:	3710      	adds	r7, #16
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800b27c:	b590      	push	{r4, r7, lr}
 800b27e:	b085      	sub	sp, #20
 800b280:	af00      	add	r7, sp, #0
 800b282:	4603      	mov	r3, r0
 800b284:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800b286:	79fb      	ldrb	r3, [r7, #7]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d001      	beq.n	800b290 <USER_SPI_initialize+0x14>
 800b28c:	2301      	movs	r3, #1
 800b28e:	e0dc      	b.n	800b44a <USER_SPI_initialize+0x1ce>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800b290:	4b70      	ldr	r3, [pc, #448]	@ (800b454 <USER_SPI_initialize+0x1d8>)
 800b292:	781b      	ldrb	r3, [r3, #0]
 800b294:	b2db      	uxtb	r3, r3
 800b296:	f003 0302 	and.w	r3, r3, #2
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d003      	beq.n	800b2a6 <USER_SPI_initialize+0x2a>
 800b29e:	4b6d      	ldr	r3, [pc, #436]	@ (800b454 <USER_SPI_initialize+0x1d8>)
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	e0d1      	b.n	800b44a <USER_SPI_initialize+0x1ce>
	flag = Stat;
 800b2a6:	4b6b      	ldr	r3, [pc, #428]	@ (800b454 <USER_SPI_initialize+0x1d8>)
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	4b6a      	ldr	r3, [pc, #424]	@ (800b458 <USER_SPI_initialize+0x1dc>)
 800b2b0:	601a      	str	r2, [r3, #0]

	FCLK_SLOW();
 800b2b2:	4b6a      	ldr	r3, [pc, #424]	@ (800b45c <USER_SPI_initialize+0x1e0>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800b2bc:	4b67      	ldr	r3, [pc, #412]	@ (800b45c <USER_SPI_initialize+0x1e0>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800b2c4:	601a      	str	r2, [r3, #0]
	//SD_SPI_HANDLE.Instance->CR1 = SPI_BAUDRATEPRESCALER_128;


	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800b2c6:	230a      	movs	r3, #10
 800b2c8:	73fb      	strb	r3, [r7, #15]
 800b2ca:	e005      	b.n	800b2d8 <USER_SPI_initialize+0x5c>
 800b2cc:	20ff      	movs	r0, #255	@ 0xff
 800b2ce:	f7ff fe75 	bl	800afbc <xchg_spi>
 800b2d2:	7bfb      	ldrb	r3, [r7, #15]
 800b2d4:	3b01      	subs	r3, #1
 800b2d6:	73fb      	strb	r3, [r7, #15]
 800b2d8:	7bfb      	ldrb	r3, [r7, #15]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d1f6      	bne.n	800b2cc <USER_SPI_initialize+0x50>

	ty = 0;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800b2e2:	2100      	movs	r1, #0
 800b2e4:	2000      	movs	r0, #0
 800b2e6:	f7ff ff5a 	bl	800b19e <send_cmd>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	f040 808b 	bne.w	800b408 <USER_SPI_initialize+0x18c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800b2f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b2f6:	f7ff fe37 	bl	800af68 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800b2fa:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800b2fe:	2008      	movs	r0, #8
 800b300:	f7ff ff4d 	bl	800b19e <send_cmd>
 800b304:	4603      	mov	r3, r0
 800b306:	2b01      	cmp	r3, #1
 800b308:	d151      	bne.n	800b3ae <USER_SPI_initialize+0x132>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800b30a:	2300      	movs	r3, #0
 800b30c:	73fb      	strb	r3, [r7, #15]
 800b30e:	e00d      	b.n	800b32c <USER_SPI_initialize+0xb0>
 800b310:	7bfc      	ldrb	r4, [r7, #15]
 800b312:	20ff      	movs	r0, #255	@ 0xff
 800b314:	f7ff fe52 	bl	800afbc <xchg_spi>
 800b318:	4603      	mov	r3, r0
 800b31a:	461a      	mov	r2, r3
 800b31c:	f104 0310 	add.w	r3, r4, #16
 800b320:	443b      	add	r3, r7
 800b322:	f803 2c08 	strb.w	r2, [r3, #-8]
 800b326:	7bfb      	ldrb	r3, [r7, #15]
 800b328:	3301      	adds	r3, #1
 800b32a:	73fb      	strb	r3, [r7, #15]
 800b32c:	7bfb      	ldrb	r3, [r7, #15]
 800b32e:	2b03      	cmp	r3, #3
 800b330:	d9ee      	bls.n	800b310 <USER_SPI_initialize+0x94>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800b332:	7abb      	ldrb	r3, [r7, #10]
 800b334:	2b01      	cmp	r3, #1
 800b336:	d167      	bne.n	800b408 <USER_SPI_initialize+0x18c>
 800b338:	7afb      	ldrb	r3, [r7, #11]
 800b33a:	2baa      	cmp	r3, #170	@ 0xaa
 800b33c:	d164      	bne.n	800b408 <USER_SPI_initialize+0x18c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800b33e:	bf00      	nop
 800b340:	f7ff fe26 	bl	800af90 <SPI_Timer_Status>
 800b344:	4603      	mov	r3, r0
 800b346:	2b00      	cmp	r3, #0
 800b348:	d007      	beq.n	800b35a <USER_SPI_initialize+0xde>
 800b34a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800b34e:	20a9      	movs	r0, #169	@ 0xa9
 800b350:	f7ff ff25 	bl	800b19e <send_cmd>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d1f2      	bne.n	800b340 <USER_SPI_initialize+0xc4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800b35a:	f7ff fe19 	bl	800af90 <SPI_Timer_Status>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d051      	beq.n	800b408 <USER_SPI_initialize+0x18c>
 800b364:	2100      	movs	r1, #0
 800b366:	203a      	movs	r0, #58	@ 0x3a
 800b368:	f7ff ff19 	bl	800b19e <send_cmd>
 800b36c:	4603      	mov	r3, r0
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d14a      	bne.n	800b408 <USER_SPI_initialize+0x18c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800b372:	2300      	movs	r3, #0
 800b374:	73fb      	strb	r3, [r7, #15]
 800b376:	e00d      	b.n	800b394 <USER_SPI_initialize+0x118>
 800b378:	7bfc      	ldrb	r4, [r7, #15]
 800b37a:	20ff      	movs	r0, #255	@ 0xff
 800b37c:	f7ff fe1e 	bl	800afbc <xchg_spi>
 800b380:	4603      	mov	r3, r0
 800b382:	461a      	mov	r2, r3
 800b384:	f104 0310 	add.w	r3, r4, #16
 800b388:	443b      	add	r3, r7
 800b38a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800b38e:	7bfb      	ldrb	r3, [r7, #15]
 800b390:	3301      	adds	r3, #1
 800b392:	73fb      	strb	r3, [r7, #15]
 800b394:	7bfb      	ldrb	r3, [r7, #15]
 800b396:	2b03      	cmp	r3, #3
 800b398:	d9ee      	bls.n	800b378 <USER_SPI_initialize+0xfc>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800b39a:	7a3b      	ldrb	r3, [r7, #8]
 800b39c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d001      	beq.n	800b3a8 <USER_SPI_initialize+0x12c>
 800b3a4:	230c      	movs	r3, #12
 800b3a6:	e000      	b.n	800b3aa <USER_SPI_initialize+0x12e>
 800b3a8:	2304      	movs	r3, #4
 800b3aa:	737b      	strb	r3, [r7, #13]
 800b3ac:	e02c      	b.n	800b408 <USER_SPI_initialize+0x18c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800b3ae:	2100      	movs	r1, #0
 800b3b0:	20a9      	movs	r0, #169	@ 0xa9
 800b3b2:	f7ff fef4 	bl	800b19e <send_cmd>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	d804      	bhi.n	800b3c6 <USER_SPI_initialize+0x14a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800b3bc:	2302      	movs	r3, #2
 800b3be:	737b      	strb	r3, [r7, #13]
 800b3c0:	23a9      	movs	r3, #169	@ 0xa9
 800b3c2:	73bb      	strb	r3, [r7, #14]
 800b3c4:	e003      	b.n	800b3ce <USER_SPI_initialize+0x152>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	737b      	strb	r3, [r7, #13]
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800b3ce:	bf00      	nop
 800b3d0:	f7ff fdde 	bl	800af90 <SPI_Timer_Status>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d007      	beq.n	800b3ea <USER_SPI_initialize+0x16e>
 800b3da:	7bbb      	ldrb	r3, [r7, #14]
 800b3dc:	2100      	movs	r1, #0
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7ff fedd 	bl	800b19e <send_cmd>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d1f2      	bne.n	800b3d0 <USER_SPI_initialize+0x154>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800b3ea:	f7ff fdd1 	bl	800af90 <SPI_Timer_Status>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d007      	beq.n	800b404 <USER_SPI_initialize+0x188>
 800b3f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b3f8:	2010      	movs	r0, #16
 800b3fa:	f7ff fed0 	bl	800b19e <send_cmd>
 800b3fe:	4603      	mov	r3, r0
 800b400:	2b00      	cmp	r3, #0
 800b402:	d001      	beq.n	800b408 <USER_SPI_initialize+0x18c>
				ty = 0;
 800b404:	2300      	movs	r3, #0
 800b406:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800b408:	4a15      	ldr	r2, [pc, #84]	@ (800b460 <USER_SPI_initialize+0x1e4>)
 800b40a:	7b7b      	ldrb	r3, [r7, #13]
 800b40c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800b40e:	f7ff fe3f 	bl	800b090 <despiselect>

	if (ty) {			/* OK */
 800b412:	7b7b      	ldrb	r3, [r7, #13]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d012      	beq.n	800b43e <USER_SPI_initialize+0x1c2>
		FCLK_FAST();			/* Set fast clock */
 800b418:	4b10      	ldr	r3, [pc, #64]	@ (800b45c <USER_SPI_initialize+0x1e0>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800b422:	4b0e      	ldr	r3, [pc, #56]	@ (800b45c <USER_SPI_initialize+0x1e0>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f042 0210 	orr.w	r2, r2, #16
 800b42a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800b42c:	4b09      	ldr	r3, [pc, #36]	@ (800b454 <USER_SPI_initialize+0x1d8>)
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	b2db      	uxtb	r3, r3
 800b432:	f023 0301 	bic.w	r3, r3, #1
 800b436:	b2da      	uxtb	r2, r3
 800b438:	4b06      	ldr	r3, [pc, #24]	@ (800b454 <USER_SPI_initialize+0x1d8>)
 800b43a:	701a      	strb	r2, [r3, #0]
 800b43c:	e002      	b.n	800b444 <USER_SPI_initialize+0x1c8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800b43e:	4b05      	ldr	r3, [pc, #20]	@ (800b454 <USER_SPI_initialize+0x1d8>)
 800b440:	2201      	movs	r2, #1
 800b442:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800b444:	4b03      	ldr	r3, [pc, #12]	@ (800b454 <USER_SPI_initialize+0x1d8>)
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	b2db      	uxtb	r3, r3
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3714      	adds	r7, #20
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd90      	pop	{r4, r7, pc}
 800b452:	bf00      	nop
 800b454:	2000006c 	.word	0x2000006c
 800b458:	20000f90 	.word	0x20000f90
 800b45c:	20000178 	.word	0x20000178
 800b460:	20000f94 	.word	0x20000f94

0800b464 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
 800b46a:	4603      	mov	r3, r0
 800b46c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800b46e:	79fb      	ldrb	r3, [r7, #7]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d001      	beq.n	800b478 <USER_SPI_status+0x14>
 800b474:	2301      	movs	r3, #1
 800b476:	e002      	b.n	800b47e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800b478:	4b04      	ldr	r3, [pc, #16]	@ (800b48c <USER_SPI_status+0x28>)
 800b47a:	781b      	ldrb	r3, [r3, #0]
 800b47c:	b2db      	uxtb	r3, r3
}
 800b47e:	4618      	mov	r0, r3
 800b480:	370c      	adds	r7, #12
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr
 800b48a:	bf00      	nop
 800b48c:	2000006c 	.word	0x2000006c

0800b490 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	60b9      	str	r1, [r7, #8]
 800b498:	607a      	str	r2, [r7, #4]
 800b49a:	603b      	str	r3, [r7, #0]
 800b49c:	4603      	mov	r3, r0
 800b49e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800b4a0:	7bfb      	ldrb	r3, [r7, #15]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d102      	bne.n	800b4ac <USER_SPI_read+0x1c>
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d101      	bne.n	800b4b0 <USER_SPI_read+0x20>
 800b4ac:	2304      	movs	r3, #4
 800b4ae:	e04d      	b.n	800b54c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800b4b0:	4b28      	ldr	r3, [pc, #160]	@ (800b554 <USER_SPI_read+0xc4>)
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	f003 0301 	and.w	r3, r3, #1
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d001      	beq.n	800b4c2 <USER_SPI_read+0x32>
 800b4be:	2303      	movs	r3, #3
 800b4c0:	e044      	b.n	800b54c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800b4c2:	4b25      	ldr	r3, [pc, #148]	@ (800b558 <USER_SPI_read+0xc8>)
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	f003 0308 	and.w	r3, r3, #8
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d102      	bne.n	800b4d4 <USER_SPI_read+0x44>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	025b      	lsls	r3, r3, #9
 800b4d2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	d111      	bne.n	800b4fe <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800b4da:	6879      	ldr	r1, [r7, #4]
 800b4dc:	2011      	movs	r0, #17
 800b4de:	f7ff fe5e 	bl	800b19e <send_cmd>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d129      	bne.n	800b53c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800b4e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b4ec:	68b8      	ldr	r0, [r7, #8]
 800b4ee:	f7ff fdfb 	bl	800b0e8 <rcvr_datablock>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d021      	beq.n	800b53c <USER_SPI_read+0xac>
			count = 0;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	603b      	str	r3, [r7, #0]
 800b4fc:	e01e      	b.n	800b53c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800b4fe:	6879      	ldr	r1, [r7, #4]
 800b500:	2012      	movs	r0, #18
 800b502:	f7ff fe4c 	bl	800b19e <send_cmd>
 800b506:	4603      	mov	r3, r0
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d117      	bne.n	800b53c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800b50c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b510:	68b8      	ldr	r0, [r7, #8]
 800b512:	f7ff fde9 	bl	800b0e8 <rcvr_datablock>
 800b516:	4603      	mov	r3, r0
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00a      	beq.n	800b532 <USER_SPI_read+0xa2>
				buff += 512;
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800b522:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	3b01      	subs	r3, #1
 800b528:	603b      	str	r3, [r7, #0]
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d1ed      	bne.n	800b50c <USER_SPI_read+0x7c>
 800b530:	e000      	b.n	800b534 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800b532:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800b534:	2100      	movs	r1, #0
 800b536:	200c      	movs	r0, #12
 800b538:	f7ff fe31 	bl	800b19e <send_cmd>
		}
	}
	despiselect();
 800b53c:	f7ff fda8 	bl	800b090 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	2b00      	cmp	r3, #0
 800b544:	bf14      	ite	ne
 800b546:	2301      	movne	r3, #1
 800b548:	2300      	moveq	r3, #0
 800b54a:	b2db      	uxtb	r3, r3
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3710      	adds	r7, #16
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}
 800b554:	2000006c 	.word	0x2000006c
 800b558:	20000f94 	.word	0x20000f94

0800b55c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	60b9      	str	r1, [r7, #8]
 800b564:	607a      	str	r2, [r7, #4]
 800b566:	603b      	str	r3, [r7, #0]
 800b568:	4603      	mov	r3, r0
 800b56a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800b56c:	7bfb      	ldrb	r3, [r7, #15]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d102      	bne.n	800b578 <USER_SPI_write+0x1c>
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d101      	bne.n	800b57c <USER_SPI_write+0x20>
 800b578:	2304      	movs	r3, #4
 800b57a:	e063      	b.n	800b644 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800b57c:	4b33      	ldr	r3, [pc, #204]	@ (800b64c <USER_SPI_write+0xf0>)
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	b2db      	uxtb	r3, r3
 800b582:	f003 0301 	and.w	r3, r3, #1
 800b586:	2b00      	cmp	r3, #0
 800b588:	d001      	beq.n	800b58e <USER_SPI_write+0x32>
 800b58a:	2303      	movs	r3, #3
 800b58c:	e05a      	b.n	800b644 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800b58e:	4b2f      	ldr	r3, [pc, #188]	@ (800b64c <USER_SPI_write+0xf0>)
 800b590:	781b      	ldrb	r3, [r3, #0]
 800b592:	b2db      	uxtb	r3, r3
 800b594:	f003 0304 	and.w	r3, r3, #4
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d001      	beq.n	800b5a0 <USER_SPI_write+0x44>
 800b59c:	2302      	movs	r3, #2
 800b59e:	e051      	b.n	800b644 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800b5a0:	4b2b      	ldr	r3, [pc, #172]	@ (800b650 <USER_SPI_write+0xf4>)
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	f003 0308 	and.w	r3, r3, #8
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d102      	bne.n	800b5b2 <USER_SPI_write+0x56>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	025b      	lsls	r3, r3, #9
 800b5b0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d110      	bne.n	800b5da <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800b5b8:	6879      	ldr	r1, [r7, #4]
 800b5ba:	2018      	movs	r0, #24
 800b5bc:	f7ff fdef 	bl	800b19e <send_cmd>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d136      	bne.n	800b634 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800b5c6:	21fe      	movs	r1, #254	@ 0xfe
 800b5c8:	68b8      	ldr	r0, [r7, #8]
 800b5ca:	f7ff fdb6 	bl	800b13a <xmit_datablock>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d02f      	beq.n	800b634 <USER_SPI_write+0xd8>
			count = 0;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	603b      	str	r3, [r7, #0]
 800b5d8:	e02c      	b.n	800b634 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800b5da:	4b1d      	ldr	r3, [pc, #116]	@ (800b650 <USER_SPI_write+0xf4>)
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	f003 0306 	and.w	r3, r3, #6
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d003      	beq.n	800b5ee <USER_SPI_write+0x92>
 800b5e6:	6839      	ldr	r1, [r7, #0]
 800b5e8:	2097      	movs	r0, #151	@ 0x97
 800b5ea:	f7ff fdd8 	bl	800b19e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800b5ee:	6879      	ldr	r1, [r7, #4]
 800b5f0:	2019      	movs	r0, #25
 800b5f2:	f7ff fdd4 	bl	800b19e <send_cmd>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d11b      	bne.n	800b634 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800b5fc:	21fc      	movs	r1, #252	@ 0xfc
 800b5fe:	68b8      	ldr	r0, [r7, #8]
 800b600:	f7ff fd9b 	bl	800b13a <xmit_datablock>
 800b604:	4603      	mov	r3, r0
 800b606:	2b00      	cmp	r3, #0
 800b608:	d00a      	beq.n	800b620 <USER_SPI_write+0xc4>
				buff += 512;
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800b610:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	3b01      	subs	r3, #1
 800b616:	603b      	str	r3, [r7, #0]
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d1ee      	bne.n	800b5fc <USER_SPI_write+0xa0>
 800b61e:	e000      	b.n	800b622 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800b620:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800b622:	21fd      	movs	r1, #253	@ 0xfd
 800b624:	2000      	movs	r0, #0
 800b626:	f7ff fd88 	bl	800b13a <xmit_datablock>
 800b62a:	4603      	mov	r3, r0
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d101      	bne.n	800b634 <USER_SPI_write+0xd8>
 800b630:	2301      	movs	r3, #1
 800b632:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800b634:	f7ff fd2c 	bl	800b090 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	bf14      	ite	ne
 800b63e:	2301      	movne	r3, #1
 800b640:	2300      	moveq	r3, #0
 800b642:	b2db      	uxtb	r3, r3
}
 800b644:	4618      	mov	r0, r3
 800b646:	3710      	adds	r7, #16
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}
 800b64c:	2000006c 	.word	0x2000006c
 800b650:	20000f94 	.word	0x20000f94

0800b654 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b08c      	sub	sp, #48	@ 0x30
 800b658:	af00      	add	r7, sp, #0
 800b65a:	4603      	mov	r3, r0
 800b65c:	603a      	str	r2, [r7, #0]
 800b65e:	71fb      	strb	r3, [r7, #7]
 800b660:	460b      	mov	r3, r1
 800b662:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800b664:	79fb      	ldrb	r3, [r7, #7]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d001      	beq.n	800b66e <USER_SPI_ioctl+0x1a>
 800b66a:	2304      	movs	r3, #4
 800b66c:	e15a      	b.n	800b924 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800b66e:	4baf      	ldr	r3, [pc, #700]	@ (800b92c <USER_SPI_ioctl+0x2d8>)
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	b2db      	uxtb	r3, r3
 800b674:	f003 0301 	and.w	r3, r3, #1
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d001      	beq.n	800b680 <USER_SPI_ioctl+0x2c>
 800b67c:	2303      	movs	r3, #3
 800b67e:	e151      	b.n	800b924 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800b680:	2301      	movs	r3, #1
 800b682:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800b686:	79bb      	ldrb	r3, [r7, #6]
 800b688:	2b04      	cmp	r3, #4
 800b68a:	f200 8136 	bhi.w	800b8fa <USER_SPI_ioctl+0x2a6>
 800b68e:	a201      	add	r2, pc, #4	@ (adr r2, 800b694 <USER_SPI_ioctl+0x40>)
 800b690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b694:	0800b6a9 	.word	0x0800b6a9
 800b698:	0800b6bd 	.word	0x0800b6bd
 800b69c:	0800b8fb 	.word	0x0800b8fb
 800b6a0:	0800b769 	.word	0x0800b769
 800b6a4:	0800b85f 	.word	0x0800b85f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800b6a8:	f7ff fd02 	bl	800b0b0 <spiselect>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	f000 8127 	beq.w	800b902 <USER_SPI_ioctl+0x2ae>
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800b6ba:	e122      	b.n	800b902 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800b6bc:	2100      	movs	r1, #0
 800b6be:	2009      	movs	r0, #9
 800b6c0:	f7ff fd6d 	bl	800b19e <send_cmd>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	f040 811d 	bne.w	800b906 <USER_SPI_ioctl+0x2b2>
 800b6cc:	f107 030c 	add.w	r3, r7, #12
 800b6d0:	2110      	movs	r1, #16
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7ff fd08 	bl	800b0e8 <rcvr_datablock>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	f000 8113 	beq.w	800b906 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800b6e0:	7b3b      	ldrb	r3, [r7, #12]
 800b6e2:	099b      	lsrs	r3, r3, #6
 800b6e4:	b2db      	uxtb	r3, r3
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d111      	bne.n	800b70e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800b6ea:	7d7b      	ldrb	r3, [r7, #21]
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	7d3b      	ldrb	r3, [r7, #20]
 800b6f0:	021b      	lsls	r3, r3, #8
 800b6f2:	4413      	add	r3, r2
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	7cfb      	ldrb	r3, [r7, #19]
 800b6f8:	041b      	lsls	r3, r3, #16
 800b6fa:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800b6fe:	4413      	add	r3, r2
 800b700:	3301      	adds	r3, #1
 800b702:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800b704:	69fb      	ldr	r3, [r7, #28]
 800b706:	029a      	lsls	r2, r3, #10
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	601a      	str	r2, [r3, #0]
 800b70c:	e028      	b.n	800b760 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800b70e:	7c7b      	ldrb	r3, [r7, #17]
 800b710:	f003 030f 	and.w	r3, r3, #15
 800b714:	b2da      	uxtb	r2, r3
 800b716:	7dbb      	ldrb	r3, [r7, #22]
 800b718:	09db      	lsrs	r3, r3, #7
 800b71a:	b2db      	uxtb	r3, r3
 800b71c:	4413      	add	r3, r2
 800b71e:	b2da      	uxtb	r2, r3
 800b720:	7d7b      	ldrb	r3, [r7, #21]
 800b722:	005b      	lsls	r3, r3, #1
 800b724:	b2db      	uxtb	r3, r3
 800b726:	f003 0306 	and.w	r3, r3, #6
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	4413      	add	r3, r2
 800b72e:	b2db      	uxtb	r3, r3
 800b730:	3302      	adds	r3, #2
 800b732:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800b736:	7d3b      	ldrb	r3, [r7, #20]
 800b738:	099b      	lsrs	r3, r3, #6
 800b73a:	b2db      	uxtb	r3, r3
 800b73c:	461a      	mov	r2, r3
 800b73e:	7cfb      	ldrb	r3, [r7, #19]
 800b740:	009b      	lsls	r3, r3, #2
 800b742:	441a      	add	r2, r3
 800b744:	7cbb      	ldrb	r3, [r7, #18]
 800b746:	029b      	lsls	r3, r3, #10
 800b748:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b74c:	4413      	add	r3, r2
 800b74e:	3301      	adds	r3, #1
 800b750:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800b752:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b756:	3b09      	subs	r3, #9
 800b758:	69fa      	ldr	r2, [r7, #28]
 800b75a:	409a      	lsls	r2, r3
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800b760:	2300      	movs	r3, #0
 800b762:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800b766:	e0ce      	b.n	800b906 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800b768:	4b71      	ldr	r3, [pc, #452]	@ (800b930 <USER_SPI_ioctl+0x2dc>)
 800b76a:	781b      	ldrb	r3, [r3, #0]
 800b76c:	f003 0304 	and.w	r3, r3, #4
 800b770:	2b00      	cmp	r3, #0
 800b772:	d031      	beq.n	800b7d8 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800b774:	2100      	movs	r1, #0
 800b776:	208d      	movs	r0, #141	@ 0x8d
 800b778:	f7ff fd11 	bl	800b19e <send_cmd>
 800b77c:	4603      	mov	r3, r0
 800b77e:	2b00      	cmp	r3, #0
 800b780:	f040 80c3 	bne.w	800b90a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800b784:	20ff      	movs	r0, #255	@ 0xff
 800b786:	f7ff fc19 	bl	800afbc <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800b78a:	f107 030c 	add.w	r3, r7, #12
 800b78e:	2110      	movs	r1, #16
 800b790:	4618      	mov	r0, r3
 800b792:	f7ff fca9 	bl	800b0e8 <rcvr_datablock>
 800b796:	4603      	mov	r3, r0
 800b798:	2b00      	cmp	r3, #0
 800b79a:	f000 80b6 	beq.w	800b90a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800b79e:	2330      	movs	r3, #48	@ 0x30
 800b7a0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800b7a4:	e007      	b.n	800b7b6 <USER_SPI_ioctl+0x162>
 800b7a6:	20ff      	movs	r0, #255	@ 0xff
 800b7a8:	f7ff fc08 	bl	800afbc <xchg_spi>
 800b7ac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b7b0:	3b01      	subs	r3, #1
 800b7b2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800b7b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d1f3      	bne.n	800b7a6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800b7be:	7dbb      	ldrb	r3, [r7, #22]
 800b7c0:	091b      	lsrs	r3, r3, #4
 800b7c2:	b2db      	uxtb	r3, r3
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	2310      	movs	r3, #16
 800b7c8:	fa03 f202 	lsl.w	r2, r3, r2
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800b7d6:	e098      	b.n	800b90a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800b7d8:	2100      	movs	r1, #0
 800b7da:	2009      	movs	r0, #9
 800b7dc:	f7ff fcdf 	bl	800b19e <send_cmd>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	f040 8091 	bne.w	800b90a <USER_SPI_ioctl+0x2b6>
 800b7e8:	f107 030c 	add.w	r3, r7, #12
 800b7ec:	2110      	movs	r1, #16
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f7ff fc7a 	bl	800b0e8 <rcvr_datablock>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	f000 8087 	beq.w	800b90a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800b7fc:	4b4c      	ldr	r3, [pc, #304]	@ (800b930 <USER_SPI_ioctl+0x2dc>)
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	f003 0302 	and.w	r3, r3, #2
 800b804:	2b00      	cmp	r3, #0
 800b806:	d012      	beq.n	800b82e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800b808:	7dbb      	ldrb	r3, [r7, #22]
 800b80a:	005b      	lsls	r3, r3, #1
 800b80c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800b810:	7dfa      	ldrb	r2, [r7, #23]
 800b812:	09d2      	lsrs	r2, r2, #7
 800b814:	b2d2      	uxtb	r2, r2
 800b816:	4413      	add	r3, r2
 800b818:	1c5a      	adds	r2, r3, #1
 800b81a:	7e7b      	ldrb	r3, [r7, #25]
 800b81c:	099b      	lsrs	r3, r3, #6
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	3b01      	subs	r3, #1
 800b822:	fa02 f303 	lsl.w	r3, r2, r3
 800b826:	461a      	mov	r2, r3
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	601a      	str	r2, [r3, #0]
 800b82c:	e013      	b.n	800b856 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800b82e:	7dbb      	ldrb	r3, [r7, #22]
 800b830:	109b      	asrs	r3, r3, #2
 800b832:	b29b      	uxth	r3, r3
 800b834:	f003 031f 	and.w	r3, r3, #31
 800b838:	3301      	adds	r3, #1
 800b83a:	7dfa      	ldrb	r2, [r7, #23]
 800b83c:	00d2      	lsls	r2, r2, #3
 800b83e:	f002 0218 	and.w	r2, r2, #24
 800b842:	7df9      	ldrb	r1, [r7, #23]
 800b844:	0949      	lsrs	r1, r1, #5
 800b846:	b2c9      	uxtb	r1, r1
 800b848:	440a      	add	r2, r1
 800b84a:	3201      	adds	r2, #1
 800b84c:	fb02 f303 	mul.w	r3, r2, r3
 800b850:	461a      	mov	r2, r3
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800b856:	2300      	movs	r3, #0
 800b858:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800b85c:	e055      	b.n	800b90a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800b85e:	4b34      	ldr	r3, [pc, #208]	@ (800b930 <USER_SPI_ioctl+0x2dc>)
 800b860:	781b      	ldrb	r3, [r3, #0]
 800b862:	f003 0306 	and.w	r3, r3, #6
 800b866:	2b00      	cmp	r3, #0
 800b868:	d051      	beq.n	800b90e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800b86a:	f107 020c 	add.w	r2, r7, #12
 800b86e:	79fb      	ldrb	r3, [r7, #7]
 800b870:	210b      	movs	r1, #11
 800b872:	4618      	mov	r0, r3
 800b874:	f7ff feee 	bl	800b654 <USER_SPI_ioctl>
 800b878:	4603      	mov	r3, r0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d149      	bne.n	800b912 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800b87e:	7b3b      	ldrb	r3, [r7, #12]
 800b880:	099b      	lsrs	r3, r3, #6
 800b882:	b2db      	uxtb	r3, r3
 800b884:	2b00      	cmp	r3, #0
 800b886:	d104      	bne.n	800b892 <USER_SPI_ioctl+0x23e>
 800b888:	7dbb      	ldrb	r3, [r7, #22]
 800b88a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d041      	beq.n	800b916 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	623b      	str	r3, [r7, #32]
 800b896:	6a3b      	ldr	r3, [r7, #32]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b89c:	6a3b      	ldr	r3, [r7, #32]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800b8a2:	4b23      	ldr	r3, [pc, #140]	@ (800b930 <USER_SPI_ioctl+0x2dc>)
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	f003 0308 	and.w	r3, r3, #8
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d105      	bne.n	800b8ba <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800b8ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8b0:	025b      	lsls	r3, r3, #9
 800b8b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8b6:	025b      	lsls	r3, r3, #9
 800b8b8:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800b8ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b8bc:	2020      	movs	r0, #32
 800b8be:	f7ff fc6e 	bl	800b19e <send_cmd>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d128      	bne.n	800b91a <USER_SPI_ioctl+0x2c6>
 800b8c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b8ca:	2021      	movs	r0, #33	@ 0x21
 800b8cc:	f7ff fc67 	bl	800b19e <send_cmd>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d121      	bne.n	800b91a <USER_SPI_ioctl+0x2c6>
 800b8d6:	2100      	movs	r1, #0
 800b8d8:	2026      	movs	r0, #38	@ 0x26
 800b8da:	f7ff fc60 	bl	800b19e <send_cmd>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d11a      	bne.n	800b91a <USER_SPI_ioctl+0x2c6>
 800b8e4:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b8e8:	f7ff fbae 	bl	800b048 <wait_ready>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d013      	beq.n	800b91a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800b8f8:	e00f      	b.n	800b91a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800b8fa:	2304      	movs	r3, #4
 800b8fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b900:	e00c      	b.n	800b91c <USER_SPI_ioctl+0x2c8>
		break;
 800b902:	bf00      	nop
 800b904:	e00a      	b.n	800b91c <USER_SPI_ioctl+0x2c8>
		break;
 800b906:	bf00      	nop
 800b908:	e008      	b.n	800b91c <USER_SPI_ioctl+0x2c8>
		break;
 800b90a:	bf00      	nop
 800b90c:	e006      	b.n	800b91c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800b90e:	bf00      	nop
 800b910:	e004      	b.n	800b91c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800b912:	bf00      	nop
 800b914:	e002      	b.n	800b91c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800b916:	bf00      	nop
 800b918:	e000      	b.n	800b91c <USER_SPI_ioctl+0x2c8>
		break;
 800b91a:	bf00      	nop
	}

	despiselect();
 800b91c:	f7ff fbb8 	bl	800b090 <despiselect>

	return res;
 800b920:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b924:	4618      	mov	r0, r3
 800b926:	3730      	adds	r7, #48	@ 0x30
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	2000006c 	.word	0x2000006c
 800b930:	20000f94 	.word	0x20000f94

0800b934 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b934:	b480      	push	{r7}
 800b936:	b087      	sub	sp, #28
 800b938:	af00      	add	r7, sp, #0
 800b93a:	60f8      	str	r0, [r7, #12]
 800b93c:	60b9      	str	r1, [r7, #8]
 800b93e:	4613      	mov	r3, r2
 800b940:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b942:	2301      	movs	r3, #1
 800b944:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b946:	2300      	movs	r3, #0
 800b948:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b94a:	4b1f      	ldr	r3, [pc, #124]	@ (800b9c8 <FATFS_LinkDriverEx+0x94>)
 800b94c:	7a5b      	ldrb	r3, [r3, #9]
 800b94e:	b2db      	uxtb	r3, r3
 800b950:	2b00      	cmp	r3, #0
 800b952:	d131      	bne.n	800b9b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b954:	4b1c      	ldr	r3, [pc, #112]	@ (800b9c8 <FATFS_LinkDriverEx+0x94>)
 800b956:	7a5b      	ldrb	r3, [r3, #9]
 800b958:	b2db      	uxtb	r3, r3
 800b95a:	461a      	mov	r2, r3
 800b95c:	4b1a      	ldr	r3, [pc, #104]	@ (800b9c8 <FATFS_LinkDriverEx+0x94>)
 800b95e:	2100      	movs	r1, #0
 800b960:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b962:	4b19      	ldr	r3, [pc, #100]	@ (800b9c8 <FATFS_LinkDriverEx+0x94>)
 800b964:	7a5b      	ldrb	r3, [r3, #9]
 800b966:	b2db      	uxtb	r3, r3
 800b968:	4a17      	ldr	r2, [pc, #92]	@ (800b9c8 <FATFS_LinkDriverEx+0x94>)
 800b96a:	009b      	lsls	r3, r3, #2
 800b96c:	4413      	add	r3, r2
 800b96e:	68fa      	ldr	r2, [r7, #12]
 800b970:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b972:	4b15      	ldr	r3, [pc, #84]	@ (800b9c8 <FATFS_LinkDriverEx+0x94>)
 800b974:	7a5b      	ldrb	r3, [r3, #9]
 800b976:	b2db      	uxtb	r3, r3
 800b978:	461a      	mov	r2, r3
 800b97a:	4b13      	ldr	r3, [pc, #76]	@ (800b9c8 <FATFS_LinkDriverEx+0x94>)
 800b97c:	4413      	add	r3, r2
 800b97e:	79fa      	ldrb	r2, [r7, #7]
 800b980:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b982:	4b11      	ldr	r3, [pc, #68]	@ (800b9c8 <FATFS_LinkDriverEx+0x94>)
 800b984:	7a5b      	ldrb	r3, [r3, #9]
 800b986:	b2db      	uxtb	r3, r3
 800b988:	1c5a      	adds	r2, r3, #1
 800b98a:	b2d1      	uxtb	r1, r2
 800b98c:	4a0e      	ldr	r2, [pc, #56]	@ (800b9c8 <FATFS_LinkDriverEx+0x94>)
 800b98e:	7251      	strb	r1, [r2, #9]
 800b990:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b992:	7dbb      	ldrb	r3, [r7, #22]
 800b994:	3330      	adds	r3, #48	@ 0x30
 800b996:	b2da      	uxtb	r2, r3
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	3301      	adds	r3, #1
 800b9a0:	223a      	movs	r2, #58	@ 0x3a
 800b9a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	3302      	adds	r3, #2
 800b9a8:	222f      	movs	r2, #47	@ 0x2f
 800b9aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	3303      	adds	r3, #3
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b9b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	371c      	adds	r7, #28
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c4:	4770      	bx	lr
 800b9c6:	bf00      	nop
 800b9c8:	20000fa0 	.word	0x20000fa0

0800b9cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b082      	sub	sp, #8
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	6839      	ldr	r1, [r7, #0]
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f7ff ffaa 	bl	800b934 <FATFS_LinkDriverEx>
 800b9e0:	4603      	mov	r3, r0
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3708      	adds	r7, #8
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
	...

0800b9ec <sniprintf>:
 800b9ec:	b40c      	push	{r2, r3}
 800b9ee:	b530      	push	{r4, r5, lr}
 800b9f0:	4b17      	ldr	r3, [pc, #92]	@ (800ba50 <sniprintf+0x64>)
 800b9f2:	1e0c      	subs	r4, r1, #0
 800b9f4:	681d      	ldr	r5, [r3, #0]
 800b9f6:	b09d      	sub	sp, #116	@ 0x74
 800b9f8:	da08      	bge.n	800ba0c <sniprintf+0x20>
 800b9fa:	238b      	movs	r3, #139	@ 0x8b
 800b9fc:	602b      	str	r3, [r5, #0]
 800b9fe:	f04f 30ff 	mov.w	r0, #4294967295
 800ba02:	b01d      	add	sp, #116	@ 0x74
 800ba04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba08:	b002      	add	sp, #8
 800ba0a:	4770      	bx	lr
 800ba0c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ba10:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ba14:	bf14      	ite	ne
 800ba16:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ba1a:	4623      	moveq	r3, r4
 800ba1c:	9304      	str	r3, [sp, #16]
 800ba1e:	9307      	str	r3, [sp, #28]
 800ba20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ba24:	9002      	str	r0, [sp, #8]
 800ba26:	9006      	str	r0, [sp, #24]
 800ba28:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ba2c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ba2e:	ab21      	add	r3, sp, #132	@ 0x84
 800ba30:	a902      	add	r1, sp, #8
 800ba32:	4628      	mov	r0, r5
 800ba34:	9301      	str	r3, [sp, #4]
 800ba36:	f000 f9c3 	bl	800bdc0 <_svfiprintf_r>
 800ba3a:	1c43      	adds	r3, r0, #1
 800ba3c:	bfbc      	itt	lt
 800ba3e:	238b      	movlt	r3, #139	@ 0x8b
 800ba40:	602b      	strlt	r3, [r5, #0]
 800ba42:	2c00      	cmp	r4, #0
 800ba44:	d0dd      	beq.n	800ba02 <sniprintf+0x16>
 800ba46:	9b02      	ldr	r3, [sp, #8]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	701a      	strb	r2, [r3, #0]
 800ba4c:	e7d9      	b.n	800ba02 <sniprintf+0x16>
 800ba4e:	bf00      	nop
 800ba50:	20000070 	.word	0x20000070

0800ba54 <siprintf>:
 800ba54:	b40e      	push	{r1, r2, r3}
 800ba56:	b500      	push	{lr}
 800ba58:	b09c      	sub	sp, #112	@ 0x70
 800ba5a:	ab1d      	add	r3, sp, #116	@ 0x74
 800ba5c:	9002      	str	r0, [sp, #8]
 800ba5e:	9006      	str	r0, [sp, #24]
 800ba60:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ba64:	4809      	ldr	r0, [pc, #36]	@ (800ba8c <siprintf+0x38>)
 800ba66:	9107      	str	r1, [sp, #28]
 800ba68:	9104      	str	r1, [sp, #16]
 800ba6a:	4909      	ldr	r1, [pc, #36]	@ (800ba90 <siprintf+0x3c>)
 800ba6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba70:	9105      	str	r1, [sp, #20]
 800ba72:	6800      	ldr	r0, [r0, #0]
 800ba74:	9301      	str	r3, [sp, #4]
 800ba76:	a902      	add	r1, sp, #8
 800ba78:	f000 f9a2 	bl	800bdc0 <_svfiprintf_r>
 800ba7c:	9b02      	ldr	r3, [sp, #8]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	701a      	strb	r2, [r3, #0]
 800ba82:	b01c      	add	sp, #112	@ 0x70
 800ba84:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba88:	b003      	add	sp, #12
 800ba8a:	4770      	bx	lr
 800ba8c:	20000070 	.word	0x20000070
 800ba90:	ffff0208 	.word	0xffff0208

0800ba94 <memset>:
 800ba94:	4402      	add	r2, r0
 800ba96:	4603      	mov	r3, r0
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d100      	bne.n	800ba9e <memset+0xa>
 800ba9c:	4770      	bx	lr
 800ba9e:	f803 1b01 	strb.w	r1, [r3], #1
 800baa2:	e7f9      	b.n	800ba98 <memset+0x4>

0800baa4 <__errno>:
 800baa4:	4b01      	ldr	r3, [pc, #4]	@ (800baac <__errno+0x8>)
 800baa6:	6818      	ldr	r0, [r3, #0]
 800baa8:	4770      	bx	lr
 800baaa:	bf00      	nop
 800baac:	20000070 	.word	0x20000070

0800bab0 <__libc_init_array>:
 800bab0:	b570      	push	{r4, r5, r6, lr}
 800bab2:	4d0d      	ldr	r5, [pc, #52]	@ (800bae8 <__libc_init_array+0x38>)
 800bab4:	4c0d      	ldr	r4, [pc, #52]	@ (800baec <__libc_init_array+0x3c>)
 800bab6:	1b64      	subs	r4, r4, r5
 800bab8:	10a4      	asrs	r4, r4, #2
 800baba:	2600      	movs	r6, #0
 800babc:	42a6      	cmp	r6, r4
 800babe:	d109      	bne.n	800bad4 <__libc_init_array+0x24>
 800bac0:	4d0b      	ldr	r5, [pc, #44]	@ (800baf0 <__libc_init_array+0x40>)
 800bac2:	4c0c      	ldr	r4, [pc, #48]	@ (800baf4 <__libc_init_array+0x44>)
 800bac4:	f000 fcbc 	bl	800c440 <_init>
 800bac8:	1b64      	subs	r4, r4, r5
 800baca:	10a4      	asrs	r4, r4, #2
 800bacc:	2600      	movs	r6, #0
 800bace:	42a6      	cmp	r6, r4
 800bad0:	d105      	bne.n	800bade <__libc_init_array+0x2e>
 800bad2:	bd70      	pop	{r4, r5, r6, pc}
 800bad4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bad8:	4798      	blx	r3
 800bada:	3601      	adds	r6, #1
 800badc:	e7ee      	b.n	800babc <__libc_init_array+0xc>
 800bade:	f855 3b04 	ldr.w	r3, [r5], #4
 800bae2:	4798      	blx	r3
 800bae4:	3601      	adds	r6, #1
 800bae6:	e7f2      	b.n	800bace <__libc_init_array+0x1e>
 800bae8:	0800cb44 	.word	0x0800cb44
 800baec:	0800cb44 	.word	0x0800cb44
 800baf0:	0800cb44 	.word	0x0800cb44
 800baf4:	0800cb48 	.word	0x0800cb48

0800baf8 <__retarget_lock_acquire_recursive>:
 800baf8:	4770      	bx	lr

0800bafa <__retarget_lock_release_recursive>:
 800bafa:	4770      	bx	lr

0800bafc <memcpy>:
 800bafc:	440a      	add	r2, r1
 800bafe:	4291      	cmp	r1, r2
 800bb00:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb04:	d100      	bne.n	800bb08 <memcpy+0xc>
 800bb06:	4770      	bx	lr
 800bb08:	b510      	push	{r4, lr}
 800bb0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb12:	4291      	cmp	r1, r2
 800bb14:	d1f9      	bne.n	800bb0a <memcpy+0xe>
 800bb16:	bd10      	pop	{r4, pc}

0800bb18 <_free_r>:
 800bb18:	b538      	push	{r3, r4, r5, lr}
 800bb1a:	4605      	mov	r5, r0
 800bb1c:	2900      	cmp	r1, #0
 800bb1e:	d041      	beq.n	800bba4 <_free_r+0x8c>
 800bb20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb24:	1f0c      	subs	r4, r1, #4
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	bfb8      	it	lt
 800bb2a:	18e4      	addlt	r4, r4, r3
 800bb2c:	f000 f8e0 	bl	800bcf0 <__malloc_lock>
 800bb30:	4a1d      	ldr	r2, [pc, #116]	@ (800bba8 <_free_r+0x90>)
 800bb32:	6813      	ldr	r3, [r2, #0]
 800bb34:	b933      	cbnz	r3, 800bb44 <_free_r+0x2c>
 800bb36:	6063      	str	r3, [r4, #4]
 800bb38:	6014      	str	r4, [r2, #0]
 800bb3a:	4628      	mov	r0, r5
 800bb3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb40:	f000 b8dc 	b.w	800bcfc <__malloc_unlock>
 800bb44:	42a3      	cmp	r3, r4
 800bb46:	d908      	bls.n	800bb5a <_free_r+0x42>
 800bb48:	6820      	ldr	r0, [r4, #0]
 800bb4a:	1821      	adds	r1, r4, r0
 800bb4c:	428b      	cmp	r3, r1
 800bb4e:	bf01      	itttt	eq
 800bb50:	6819      	ldreq	r1, [r3, #0]
 800bb52:	685b      	ldreq	r3, [r3, #4]
 800bb54:	1809      	addeq	r1, r1, r0
 800bb56:	6021      	streq	r1, [r4, #0]
 800bb58:	e7ed      	b.n	800bb36 <_free_r+0x1e>
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	b10b      	cbz	r3, 800bb64 <_free_r+0x4c>
 800bb60:	42a3      	cmp	r3, r4
 800bb62:	d9fa      	bls.n	800bb5a <_free_r+0x42>
 800bb64:	6811      	ldr	r1, [r2, #0]
 800bb66:	1850      	adds	r0, r2, r1
 800bb68:	42a0      	cmp	r0, r4
 800bb6a:	d10b      	bne.n	800bb84 <_free_r+0x6c>
 800bb6c:	6820      	ldr	r0, [r4, #0]
 800bb6e:	4401      	add	r1, r0
 800bb70:	1850      	adds	r0, r2, r1
 800bb72:	4283      	cmp	r3, r0
 800bb74:	6011      	str	r1, [r2, #0]
 800bb76:	d1e0      	bne.n	800bb3a <_free_r+0x22>
 800bb78:	6818      	ldr	r0, [r3, #0]
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	6053      	str	r3, [r2, #4]
 800bb7e:	4408      	add	r0, r1
 800bb80:	6010      	str	r0, [r2, #0]
 800bb82:	e7da      	b.n	800bb3a <_free_r+0x22>
 800bb84:	d902      	bls.n	800bb8c <_free_r+0x74>
 800bb86:	230c      	movs	r3, #12
 800bb88:	602b      	str	r3, [r5, #0]
 800bb8a:	e7d6      	b.n	800bb3a <_free_r+0x22>
 800bb8c:	6820      	ldr	r0, [r4, #0]
 800bb8e:	1821      	adds	r1, r4, r0
 800bb90:	428b      	cmp	r3, r1
 800bb92:	bf04      	itt	eq
 800bb94:	6819      	ldreq	r1, [r3, #0]
 800bb96:	685b      	ldreq	r3, [r3, #4]
 800bb98:	6063      	str	r3, [r4, #4]
 800bb9a:	bf04      	itt	eq
 800bb9c:	1809      	addeq	r1, r1, r0
 800bb9e:	6021      	streq	r1, [r4, #0]
 800bba0:	6054      	str	r4, [r2, #4]
 800bba2:	e7ca      	b.n	800bb3a <_free_r+0x22>
 800bba4:	bd38      	pop	{r3, r4, r5, pc}
 800bba6:	bf00      	nop
 800bba8:	200010f0 	.word	0x200010f0

0800bbac <sbrk_aligned>:
 800bbac:	b570      	push	{r4, r5, r6, lr}
 800bbae:	4e0f      	ldr	r6, [pc, #60]	@ (800bbec <sbrk_aligned+0x40>)
 800bbb0:	460c      	mov	r4, r1
 800bbb2:	6831      	ldr	r1, [r6, #0]
 800bbb4:	4605      	mov	r5, r0
 800bbb6:	b911      	cbnz	r1, 800bbbe <sbrk_aligned+0x12>
 800bbb8:	f000 fba6 	bl	800c308 <_sbrk_r>
 800bbbc:	6030      	str	r0, [r6, #0]
 800bbbe:	4621      	mov	r1, r4
 800bbc0:	4628      	mov	r0, r5
 800bbc2:	f000 fba1 	bl	800c308 <_sbrk_r>
 800bbc6:	1c43      	adds	r3, r0, #1
 800bbc8:	d103      	bne.n	800bbd2 <sbrk_aligned+0x26>
 800bbca:	f04f 34ff 	mov.w	r4, #4294967295
 800bbce:	4620      	mov	r0, r4
 800bbd0:	bd70      	pop	{r4, r5, r6, pc}
 800bbd2:	1cc4      	adds	r4, r0, #3
 800bbd4:	f024 0403 	bic.w	r4, r4, #3
 800bbd8:	42a0      	cmp	r0, r4
 800bbda:	d0f8      	beq.n	800bbce <sbrk_aligned+0x22>
 800bbdc:	1a21      	subs	r1, r4, r0
 800bbde:	4628      	mov	r0, r5
 800bbe0:	f000 fb92 	bl	800c308 <_sbrk_r>
 800bbe4:	3001      	adds	r0, #1
 800bbe6:	d1f2      	bne.n	800bbce <sbrk_aligned+0x22>
 800bbe8:	e7ef      	b.n	800bbca <sbrk_aligned+0x1e>
 800bbea:	bf00      	nop
 800bbec:	200010ec 	.word	0x200010ec

0800bbf0 <_malloc_r>:
 800bbf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbf4:	1ccd      	adds	r5, r1, #3
 800bbf6:	f025 0503 	bic.w	r5, r5, #3
 800bbfa:	3508      	adds	r5, #8
 800bbfc:	2d0c      	cmp	r5, #12
 800bbfe:	bf38      	it	cc
 800bc00:	250c      	movcc	r5, #12
 800bc02:	2d00      	cmp	r5, #0
 800bc04:	4606      	mov	r6, r0
 800bc06:	db01      	blt.n	800bc0c <_malloc_r+0x1c>
 800bc08:	42a9      	cmp	r1, r5
 800bc0a:	d904      	bls.n	800bc16 <_malloc_r+0x26>
 800bc0c:	230c      	movs	r3, #12
 800bc0e:	6033      	str	r3, [r6, #0]
 800bc10:	2000      	movs	r0, #0
 800bc12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bcec <_malloc_r+0xfc>
 800bc1a:	f000 f869 	bl	800bcf0 <__malloc_lock>
 800bc1e:	f8d8 3000 	ldr.w	r3, [r8]
 800bc22:	461c      	mov	r4, r3
 800bc24:	bb44      	cbnz	r4, 800bc78 <_malloc_r+0x88>
 800bc26:	4629      	mov	r1, r5
 800bc28:	4630      	mov	r0, r6
 800bc2a:	f7ff ffbf 	bl	800bbac <sbrk_aligned>
 800bc2e:	1c43      	adds	r3, r0, #1
 800bc30:	4604      	mov	r4, r0
 800bc32:	d158      	bne.n	800bce6 <_malloc_r+0xf6>
 800bc34:	f8d8 4000 	ldr.w	r4, [r8]
 800bc38:	4627      	mov	r7, r4
 800bc3a:	2f00      	cmp	r7, #0
 800bc3c:	d143      	bne.n	800bcc6 <_malloc_r+0xd6>
 800bc3e:	2c00      	cmp	r4, #0
 800bc40:	d04b      	beq.n	800bcda <_malloc_r+0xea>
 800bc42:	6823      	ldr	r3, [r4, #0]
 800bc44:	4639      	mov	r1, r7
 800bc46:	4630      	mov	r0, r6
 800bc48:	eb04 0903 	add.w	r9, r4, r3
 800bc4c:	f000 fb5c 	bl	800c308 <_sbrk_r>
 800bc50:	4581      	cmp	r9, r0
 800bc52:	d142      	bne.n	800bcda <_malloc_r+0xea>
 800bc54:	6821      	ldr	r1, [r4, #0]
 800bc56:	1a6d      	subs	r5, r5, r1
 800bc58:	4629      	mov	r1, r5
 800bc5a:	4630      	mov	r0, r6
 800bc5c:	f7ff ffa6 	bl	800bbac <sbrk_aligned>
 800bc60:	3001      	adds	r0, #1
 800bc62:	d03a      	beq.n	800bcda <_malloc_r+0xea>
 800bc64:	6823      	ldr	r3, [r4, #0]
 800bc66:	442b      	add	r3, r5
 800bc68:	6023      	str	r3, [r4, #0]
 800bc6a:	f8d8 3000 	ldr.w	r3, [r8]
 800bc6e:	685a      	ldr	r2, [r3, #4]
 800bc70:	bb62      	cbnz	r2, 800bccc <_malloc_r+0xdc>
 800bc72:	f8c8 7000 	str.w	r7, [r8]
 800bc76:	e00f      	b.n	800bc98 <_malloc_r+0xa8>
 800bc78:	6822      	ldr	r2, [r4, #0]
 800bc7a:	1b52      	subs	r2, r2, r5
 800bc7c:	d420      	bmi.n	800bcc0 <_malloc_r+0xd0>
 800bc7e:	2a0b      	cmp	r2, #11
 800bc80:	d917      	bls.n	800bcb2 <_malloc_r+0xc2>
 800bc82:	1961      	adds	r1, r4, r5
 800bc84:	42a3      	cmp	r3, r4
 800bc86:	6025      	str	r5, [r4, #0]
 800bc88:	bf18      	it	ne
 800bc8a:	6059      	strne	r1, [r3, #4]
 800bc8c:	6863      	ldr	r3, [r4, #4]
 800bc8e:	bf08      	it	eq
 800bc90:	f8c8 1000 	streq.w	r1, [r8]
 800bc94:	5162      	str	r2, [r4, r5]
 800bc96:	604b      	str	r3, [r1, #4]
 800bc98:	4630      	mov	r0, r6
 800bc9a:	f000 f82f 	bl	800bcfc <__malloc_unlock>
 800bc9e:	f104 000b 	add.w	r0, r4, #11
 800bca2:	1d23      	adds	r3, r4, #4
 800bca4:	f020 0007 	bic.w	r0, r0, #7
 800bca8:	1ac2      	subs	r2, r0, r3
 800bcaa:	bf1c      	itt	ne
 800bcac:	1a1b      	subne	r3, r3, r0
 800bcae:	50a3      	strne	r3, [r4, r2]
 800bcb0:	e7af      	b.n	800bc12 <_malloc_r+0x22>
 800bcb2:	6862      	ldr	r2, [r4, #4]
 800bcb4:	42a3      	cmp	r3, r4
 800bcb6:	bf0c      	ite	eq
 800bcb8:	f8c8 2000 	streq.w	r2, [r8]
 800bcbc:	605a      	strne	r2, [r3, #4]
 800bcbe:	e7eb      	b.n	800bc98 <_malloc_r+0xa8>
 800bcc0:	4623      	mov	r3, r4
 800bcc2:	6864      	ldr	r4, [r4, #4]
 800bcc4:	e7ae      	b.n	800bc24 <_malloc_r+0x34>
 800bcc6:	463c      	mov	r4, r7
 800bcc8:	687f      	ldr	r7, [r7, #4]
 800bcca:	e7b6      	b.n	800bc3a <_malloc_r+0x4a>
 800bccc:	461a      	mov	r2, r3
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	42a3      	cmp	r3, r4
 800bcd2:	d1fb      	bne.n	800bccc <_malloc_r+0xdc>
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	6053      	str	r3, [r2, #4]
 800bcd8:	e7de      	b.n	800bc98 <_malloc_r+0xa8>
 800bcda:	230c      	movs	r3, #12
 800bcdc:	6033      	str	r3, [r6, #0]
 800bcde:	4630      	mov	r0, r6
 800bce0:	f000 f80c 	bl	800bcfc <__malloc_unlock>
 800bce4:	e794      	b.n	800bc10 <_malloc_r+0x20>
 800bce6:	6005      	str	r5, [r0, #0]
 800bce8:	e7d6      	b.n	800bc98 <_malloc_r+0xa8>
 800bcea:	bf00      	nop
 800bcec:	200010f0 	.word	0x200010f0

0800bcf0 <__malloc_lock>:
 800bcf0:	4801      	ldr	r0, [pc, #4]	@ (800bcf8 <__malloc_lock+0x8>)
 800bcf2:	f7ff bf01 	b.w	800baf8 <__retarget_lock_acquire_recursive>
 800bcf6:	bf00      	nop
 800bcf8:	200010e8 	.word	0x200010e8

0800bcfc <__malloc_unlock>:
 800bcfc:	4801      	ldr	r0, [pc, #4]	@ (800bd04 <__malloc_unlock+0x8>)
 800bcfe:	f7ff befc 	b.w	800bafa <__retarget_lock_release_recursive>
 800bd02:	bf00      	nop
 800bd04:	200010e8 	.word	0x200010e8

0800bd08 <__ssputs_r>:
 800bd08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd0c:	688e      	ldr	r6, [r1, #8]
 800bd0e:	461f      	mov	r7, r3
 800bd10:	42be      	cmp	r6, r7
 800bd12:	680b      	ldr	r3, [r1, #0]
 800bd14:	4682      	mov	sl, r0
 800bd16:	460c      	mov	r4, r1
 800bd18:	4690      	mov	r8, r2
 800bd1a:	d82d      	bhi.n	800bd78 <__ssputs_r+0x70>
 800bd1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bd20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bd24:	d026      	beq.n	800bd74 <__ssputs_r+0x6c>
 800bd26:	6965      	ldr	r5, [r4, #20]
 800bd28:	6909      	ldr	r1, [r1, #16]
 800bd2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd2e:	eba3 0901 	sub.w	r9, r3, r1
 800bd32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bd36:	1c7b      	adds	r3, r7, #1
 800bd38:	444b      	add	r3, r9
 800bd3a:	106d      	asrs	r5, r5, #1
 800bd3c:	429d      	cmp	r5, r3
 800bd3e:	bf38      	it	cc
 800bd40:	461d      	movcc	r5, r3
 800bd42:	0553      	lsls	r3, r2, #21
 800bd44:	d527      	bpl.n	800bd96 <__ssputs_r+0x8e>
 800bd46:	4629      	mov	r1, r5
 800bd48:	f7ff ff52 	bl	800bbf0 <_malloc_r>
 800bd4c:	4606      	mov	r6, r0
 800bd4e:	b360      	cbz	r0, 800bdaa <__ssputs_r+0xa2>
 800bd50:	6921      	ldr	r1, [r4, #16]
 800bd52:	464a      	mov	r2, r9
 800bd54:	f7ff fed2 	bl	800bafc <memcpy>
 800bd58:	89a3      	ldrh	r3, [r4, #12]
 800bd5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bd5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd62:	81a3      	strh	r3, [r4, #12]
 800bd64:	6126      	str	r6, [r4, #16]
 800bd66:	6165      	str	r5, [r4, #20]
 800bd68:	444e      	add	r6, r9
 800bd6a:	eba5 0509 	sub.w	r5, r5, r9
 800bd6e:	6026      	str	r6, [r4, #0]
 800bd70:	60a5      	str	r5, [r4, #8]
 800bd72:	463e      	mov	r6, r7
 800bd74:	42be      	cmp	r6, r7
 800bd76:	d900      	bls.n	800bd7a <__ssputs_r+0x72>
 800bd78:	463e      	mov	r6, r7
 800bd7a:	6820      	ldr	r0, [r4, #0]
 800bd7c:	4632      	mov	r2, r6
 800bd7e:	4641      	mov	r1, r8
 800bd80:	f000 faa8 	bl	800c2d4 <memmove>
 800bd84:	68a3      	ldr	r3, [r4, #8]
 800bd86:	1b9b      	subs	r3, r3, r6
 800bd88:	60a3      	str	r3, [r4, #8]
 800bd8a:	6823      	ldr	r3, [r4, #0]
 800bd8c:	4433      	add	r3, r6
 800bd8e:	6023      	str	r3, [r4, #0]
 800bd90:	2000      	movs	r0, #0
 800bd92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd96:	462a      	mov	r2, r5
 800bd98:	f000 fac6 	bl	800c328 <_realloc_r>
 800bd9c:	4606      	mov	r6, r0
 800bd9e:	2800      	cmp	r0, #0
 800bda0:	d1e0      	bne.n	800bd64 <__ssputs_r+0x5c>
 800bda2:	6921      	ldr	r1, [r4, #16]
 800bda4:	4650      	mov	r0, sl
 800bda6:	f7ff feb7 	bl	800bb18 <_free_r>
 800bdaa:	230c      	movs	r3, #12
 800bdac:	f8ca 3000 	str.w	r3, [sl]
 800bdb0:	89a3      	ldrh	r3, [r4, #12]
 800bdb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdb6:	81a3      	strh	r3, [r4, #12]
 800bdb8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdbc:	e7e9      	b.n	800bd92 <__ssputs_r+0x8a>
	...

0800bdc0 <_svfiprintf_r>:
 800bdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc4:	4698      	mov	r8, r3
 800bdc6:	898b      	ldrh	r3, [r1, #12]
 800bdc8:	061b      	lsls	r3, r3, #24
 800bdca:	b09d      	sub	sp, #116	@ 0x74
 800bdcc:	4607      	mov	r7, r0
 800bdce:	460d      	mov	r5, r1
 800bdd0:	4614      	mov	r4, r2
 800bdd2:	d510      	bpl.n	800bdf6 <_svfiprintf_r+0x36>
 800bdd4:	690b      	ldr	r3, [r1, #16]
 800bdd6:	b973      	cbnz	r3, 800bdf6 <_svfiprintf_r+0x36>
 800bdd8:	2140      	movs	r1, #64	@ 0x40
 800bdda:	f7ff ff09 	bl	800bbf0 <_malloc_r>
 800bdde:	6028      	str	r0, [r5, #0]
 800bde0:	6128      	str	r0, [r5, #16]
 800bde2:	b930      	cbnz	r0, 800bdf2 <_svfiprintf_r+0x32>
 800bde4:	230c      	movs	r3, #12
 800bde6:	603b      	str	r3, [r7, #0]
 800bde8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdec:	b01d      	add	sp, #116	@ 0x74
 800bdee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdf2:	2340      	movs	r3, #64	@ 0x40
 800bdf4:	616b      	str	r3, [r5, #20]
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdfa:	2320      	movs	r3, #32
 800bdfc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800be00:	f8cd 800c 	str.w	r8, [sp, #12]
 800be04:	2330      	movs	r3, #48	@ 0x30
 800be06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bfa4 <_svfiprintf_r+0x1e4>
 800be0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800be0e:	f04f 0901 	mov.w	r9, #1
 800be12:	4623      	mov	r3, r4
 800be14:	469a      	mov	sl, r3
 800be16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be1a:	b10a      	cbz	r2, 800be20 <_svfiprintf_r+0x60>
 800be1c:	2a25      	cmp	r2, #37	@ 0x25
 800be1e:	d1f9      	bne.n	800be14 <_svfiprintf_r+0x54>
 800be20:	ebba 0b04 	subs.w	fp, sl, r4
 800be24:	d00b      	beq.n	800be3e <_svfiprintf_r+0x7e>
 800be26:	465b      	mov	r3, fp
 800be28:	4622      	mov	r2, r4
 800be2a:	4629      	mov	r1, r5
 800be2c:	4638      	mov	r0, r7
 800be2e:	f7ff ff6b 	bl	800bd08 <__ssputs_r>
 800be32:	3001      	adds	r0, #1
 800be34:	f000 80a7 	beq.w	800bf86 <_svfiprintf_r+0x1c6>
 800be38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be3a:	445a      	add	r2, fp
 800be3c:	9209      	str	r2, [sp, #36]	@ 0x24
 800be3e:	f89a 3000 	ldrb.w	r3, [sl]
 800be42:	2b00      	cmp	r3, #0
 800be44:	f000 809f 	beq.w	800bf86 <_svfiprintf_r+0x1c6>
 800be48:	2300      	movs	r3, #0
 800be4a:	f04f 32ff 	mov.w	r2, #4294967295
 800be4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be52:	f10a 0a01 	add.w	sl, sl, #1
 800be56:	9304      	str	r3, [sp, #16]
 800be58:	9307      	str	r3, [sp, #28]
 800be5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800be5e:	931a      	str	r3, [sp, #104]	@ 0x68
 800be60:	4654      	mov	r4, sl
 800be62:	2205      	movs	r2, #5
 800be64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be68:	484e      	ldr	r0, [pc, #312]	@ (800bfa4 <_svfiprintf_r+0x1e4>)
 800be6a:	f7f4 f9d9 	bl	8000220 <memchr>
 800be6e:	9a04      	ldr	r2, [sp, #16]
 800be70:	b9d8      	cbnz	r0, 800beaa <_svfiprintf_r+0xea>
 800be72:	06d0      	lsls	r0, r2, #27
 800be74:	bf44      	itt	mi
 800be76:	2320      	movmi	r3, #32
 800be78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be7c:	0711      	lsls	r1, r2, #28
 800be7e:	bf44      	itt	mi
 800be80:	232b      	movmi	r3, #43	@ 0x2b
 800be82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be86:	f89a 3000 	ldrb.w	r3, [sl]
 800be8a:	2b2a      	cmp	r3, #42	@ 0x2a
 800be8c:	d015      	beq.n	800beba <_svfiprintf_r+0xfa>
 800be8e:	9a07      	ldr	r2, [sp, #28]
 800be90:	4654      	mov	r4, sl
 800be92:	2000      	movs	r0, #0
 800be94:	f04f 0c0a 	mov.w	ip, #10
 800be98:	4621      	mov	r1, r4
 800be9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be9e:	3b30      	subs	r3, #48	@ 0x30
 800bea0:	2b09      	cmp	r3, #9
 800bea2:	d94b      	bls.n	800bf3c <_svfiprintf_r+0x17c>
 800bea4:	b1b0      	cbz	r0, 800bed4 <_svfiprintf_r+0x114>
 800bea6:	9207      	str	r2, [sp, #28]
 800bea8:	e014      	b.n	800bed4 <_svfiprintf_r+0x114>
 800beaa:	eba0 0308 	sub.w	r3, r0, r8
 800beae:	fa09 f303 	lsl.w	r3, r9, r3
 800beb2:	4313      	orrs	r3, r2
 800beb4:	9304      	str	r3, [sp, #16]
 800beb6:	46a2      	mov	sl, r4
 800beb8:	e7d2      	b.n	800be60 <_svfiprintf_r+0xa0>
 800beba:	9b03      	ldr	r3, [sp, #12]
 800bebc:	1d19      	adds	r1, r3, #4
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	9103      	str	r1, [sp, #12]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	bfbb      	ittet	lt
 800bec6:	425b      	neglt	r3, r3
 800bec8:	f042 0202 	orrlt.w	r2, r2, #2
 800becc:	9307      	strge	r3, [sp, #28]
 800bece:	9307      	strlt	r3, [sp, #28]
 800bed0:	bfb8      	it	lt
 800bed2:	9204      	strlt	r2, [sp, #16]
 800bed4:	7823      	ldrb	r3, [r4, #0]
 800bed6:	2b2e      	cmp	r3, #46	@ 0x2e
 800bed8:	d10a      	bne.n	800bef0 <_svfiprintf_r+0x130>
 800beda:	7863      	ldrb	r3, [r4, #1]
 800bedc:	2b2a      	cmp	r3, #42	@ 0x2a
 800bede:	d132      	bne.n	800bf46 <_svfiprintf_r+0x186>
 800bee0:	9b03      	ldr	r3, [sp, #12]
 800bee2:	1d1a      	adds	r2, r3, #4
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	9203      	str	r2, [sp, #12]
 800bee8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800beec:	3402      	adds	r4, #2
 800beee:	9305      	str	r3, [sp, #20]
 800bef0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bfb4 <_svfiprintf_r+0x1f4>
 800bef4:	7821      	ldrb	r1, [r4, #0]
 800bef6:	2203      	movs	r2, #3
 800bef8:	4650      	mov	r0, sl
 800befa:	f7f4 f991 	bl	8000220 <memchr>
 800befe:	b138      	cbz	r0, 800bf10 <_svfiprintf_r+0x150>
 800bf00:	9b04      	ldr	r3, [sp, #16]
 800bf02:	eba0 000a 	sub.w	r0, r0, sl
 800bf06:	2240      	movs	r2, #64	@ 0x40
 800bf08:	4082      	lsls	r2, r0
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	3401      	adds	r4, #1
 800bf0e:	9304      	str	r3, [sp, #16]
 800bf10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf14:	4824      	ldr	r0, [pc, #144]	@ (800bfa8 <_svfiprintf_r+0x1e8>)
 800bf16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bf1a:	2206      	movs	r2, #6
 800bf1c:	f7f4 f980 	bl	8000220 <memchr>
 800bf20:	2800      	cmp	r0, #0
 800bf22:	d036      	beq.n	800bf92 <_svfiprintf_r+0x1d2>
 800bf24:	4b21      	ldr	r3, [pc, #132]	@ (800bfac <_svfiprintf_r+0x1ec>)
 800bf26:	bb1b      	cbnz	r3, 800bf70 <_svfiprintf_r+0x1b0>
 800bf28:	9b03      	ldr	r3, [sp, #12]
 800bf2a:	3307      	adds	r3, #7
 800bf2c:	f023 0307 	bic.w	r3, r3, #7
 800bf30:	3308      	adds	r3, #8
 800bf32:	9303      	str	r3, [sp, #12]
 800bf34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf36:	4433      	add	r3, r6
 800bf38:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf3a:	e76a      	b.n	800be12 <_svfiprintf_r+0x52>
 800bf3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf40:	460c      	mov	r4, r1
 800bf42:	2001      	movs	r0, #1
 800bf44:	e7a8      	b.n	800be98 <_svfiprintf_r+0xd8>
 800bf46:	2300      	movs	r3, #0
 800bf48:	3401      	adds	r4, #1
 800bf4a:	9305      	str	r3, [sp, #20]
 800bf4c:	4619      	mov	r1, r3
 800bf4e:	f04f 0c0a 	mov.w	ip, #10
 800bf52:	4620      	mov	r0, r4
 800bf54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf58:	3a30      	subs	r2, #48	@ 0x30
 800bf5a:	2a09      	cmp	r2, #9
 800bf5c:	d903      	bls.n	800bf66 <_svfiprintf_r+0x1a6>
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d0c6      	beq.n	800bef0 <_svfiprintf_r+0x130>
 800bf62:	9105      	str	r1, [sp, #20]
 800bf64:	e7c4      	b.n	800bef0 <_svfiprintf_r+0x130>
 800bf66:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf6a:	4604      	mov	r4, r0
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	e7f0      	b.n	800bf52 <_svfiprintf_r+0x192>
 800bf70:	ab03      	add	r3, sp, #12
 800bf72:	9300      	str	r3, [sp, #0]
 800bf74:	462a      	mov	r2, r5
 800bf76:	4b0e      	ldr	r3, [pc, #56]	@ (800bfb0 <_svfiprintf_r+0x1f0>)
 800bf78:	a904      	add	r1, sp, #16
 800bf7a:	4638      	mov	r0, r7
 800bf7c:	f3af 8000 	nop.w
 800bf80:	1c42      	adds	r2, r0, #1
 800bf82:	4606      	mov	r6, r0
 800bf84:	d1d6      	bne.n	800bf34 <_svfiprintf_r+0x174>
 800bf86:	89ab      	ldrh	r3, [r5, #12]
 800bf88:	065b      	lsls	r3, r3, #25
 800bf8a:	f53f af2d 	bmi.w	800bde8 <_svfiprintf_r+0x28>
 800bf8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf90:	e72c      	b.n	800bdec <_svfiprintf_r+0x2c>
 800bf92:	ab03      	add	r3, sp, #12
 800bf94:	9300      	str	r3, [sp, #0]
 800bf96:	462a      	mov	r2, r5
 800bf98:	4b05      	ldr	r3, [pc, #20]	@ (800bfb0 <_svfiprintf_r+0x1f0>)
 800bf9a:	a904      	add	r1, sp, #16
 800bf9c:	4638      	mov	r0, r7
 800bf9e:	f000 f879 	bl	800c094 <_printf_i>
 800bfa2:	e7ed      	b.n	800bf80 <_svfiprintf_r+0x1c0>
 800bfa4:	0800cb08 	.word	0x0800cb08
 800bfa8:	0800cb12 	.word	0x0800cb12
 800bfac:	00000000 	.word	0x00000000
 800bfb0:	0800bd09 	.word	0x0800bd09
 800bfb4:	0800cb0e 	.word	0x0800cb0e

0800bfb8 <_printf_common>:
 800bfb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfbc:	4616      	mov	r6, r2
 800bfbe:	4698      	mov	r8, r3
 800bfc0:	688a      	ldr	r2, [r1, #8]
 800bfc2:	690b      	ldr	r3, [r1, #16]
 800bfc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	bfb8      	it	lt
 800bfcc:	4613      	movlt	r3, r2
 800bfce:	6033      	str	r3, [r6, #0]
 800bfd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bfd4:	4607      	mov	r7, r0
 800bfd6:	460c      	mov	r4, r1
 800bfd8:	b10a      	cbz	r2, 800bfde <_printf_common+0x26>
 800bfda:	3301      	adds	r3, #1
 800bfdc:	6033      	str	r3, [r6, #0]
 800bfde:	6823      	ldr	r3, [r4, #0]
 800bfe0:	0699      	lsls	r1, r3, #26
 800bfe2:	bf42      	ittt	mi
 800bfe4:	6833      	ldrmi	r3, [r6, #0]
 800bfe6:	3302      	addmi	r3, #2
 800bfe8:	6033      	strmi	r3, [r6, #0]
 800bfea:	6825      	ldr	r5, [r4, #0]
 800bfec:	f015 0506 	ands.w	r5, r5, #6
 800bff0:	d106      	bne.n	800c000 <_printf_common+0x48>
 800bff2:	f104 0a19 	add.w	sl, r4, #25
 800bff6:	68e3      	ldr	r3, [r4, #12]
 800bff8:	6832      	ldr	r2, [r6, #0]
 800bffa:	1a9b      	subs	r3, r3, r2
 800bffc:	42ab      	cmp	r3, r5
 800bffe:	dc26      	bgt.n	800c04e <_printf_common+0x96>
 800c000:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c004:	6822      	ldr	r2, [r4, #0]
 800c006:	3b00      	subs	r3, #0
 800c008:	bf18      	it	ne
 800c00a:	2301      	movne	r3, #1
 800c00c:	0692      	lsls	r2, r2, #26
 800c00e:	d42b      	bmi.n	800c068 <_printf_common+0xb0>
 800c010:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c014:	4641      	mov	r1, r8
 800c016:	4638      	mov	r0, r7
 800c018:	47c8      	blx	r9
 800c01a:	3001      	adds	r0, #1
 800c01c:	d01e      	beq.n	800c05c <_printf_common+0xa4>
 800c01e:	6823      	ldr	r3, [r4, #0]
 800c020:	6922      	ldr	r2, [r4, #16]
 800c022:	f003 0306 	and.w	r3, r3, #6
 800c026:	2b04      	cmp	r3, #4
 800c028:	bf02      	ittt	eq
 800c02a:	68e5      	ldreq	r5, [r4, #12]
 800c02c:	6833      	ldreq	r3, [r6, #0]
 800c02e:	1aed      	subeq	r5, r5, r3
 800c030:	68a3      	ldr	r3, [r4, #8]
 800c032:	bf0c      	ite	eq
 800c034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c038:	2500      	movne	r5, #0
 800c03a:	4293      	cmp	r3, r2
 800c03c:	bfc4      	itt	gt
 800c03e:	1a9b      	subgt	r3, r3, r2
 800c040:	18ed      	addgt	r5, r5, r3
 800c042:	2600      	movs	r6, #0
 800c044:	341a      	adds	r4, #26
 800c046:	42b5      	cmp	r5, r6
 800c048:	d11a      	bne.n	800c080 <_printf_common+0xc8>
 800c04a:	2000      	movs	r0, #0
 800c04c:	e008      	b.n	800c060 <_printf_common+0xa8>
 800c04e:	2301      	movs	r3, #1
 800c050:	4652      	mov	r2, sl
 800c052:	4641      	mov	r1, r8
 800c054:	4638      	mov	r0, r7
 800c056:	47c8      	blx	r9
 800c058:	3001      	adds	r0, #1
 800c05a:	d103      	bne.n	800c064 <_printf_common+0xac>
 800c05c:	f04f 30ff 	mov.w	r0, #4294967295
 800c060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c064:	3501      	adds	r5, #1
 800c066:	e7c6      	b.n	800bff6 <_printf_common+0x3e>
 800c068:	18e1      	adds	r1, r4, r3
 800c06a:	1c5a      	adds	r2, r3, #1
 800c06c:	2030      	movs	r0, #48	@ 0x30
 800c06e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c072:	4422      	add	r2, r4
 800c074:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c078:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c07c:	3302      	adds	r3, #2
 800c07e:	e7c7      	b.n	800c010 <_printf_common+0x58>
 800c080:	2301      	movs	r3, #1
 800c082:	4622      	mov	r2, r4
 800c084:	4641      	mov	r1, r8
 800c086:	4638      	mov	r0, r7
 800c088:	47c8      	blx	r9
 800c08a:	3001      	adds	r0, #1
 800c08c:	d0e6      	beq.n	800c05c <_printf_common+0xa4>
 800c08e:	3601      	adds	r6, #1
 800c090:	e7d9      	b.n	800c046 <_printf_common+0x8e>
	...

0800c094 <_printf_i>:
 800c094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c098:	7e0f      	ldrb	r7, [r1, #24]
 800c09a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c09c:	2f78      	cmp	r7, #120	@ 0x78
 800c09e:	4691      	mov	r9, r2
 800c0a0:	4680      	mov	r8, r0
 800c0a2:	460c      	mov	r4, r1
 800c0a4:	469a      	mov	sl, r3
 800c0a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c0aa:	d807      	bhi.n	800c0bc <_printf_i+0x28>
 800c0ac:	2f62      	cmp	r7, #98	@ 0x62
 800c0ae:	d80a      	bhi.n	800c0c6 <_printf_i+0x32>
 800c0b0:	2f00      	cmp	r7, #0
 800c0b2:	f000 80d2 	beq.w	800c25a <_printf_i+0x1c6>
 800c0b6:	2f58      	cmp	r7, #88	@ 0x58
 800c0b8:	f000 80b9 	beq.w	800c22e <_printf_i+0x19a>
 800c0bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c0c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c0c4:	e03a      	b.n	800c13c <_printf_i+0xa8>
 800c0c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c0ca:	2b15      	cmp	r3, #21
 800c0cc:	d8f6      	bhi.n	800c0bc <_printf_i+0x28>
 800c0ce:	a101      	add	r1, pc, #4	@ (adr r1, 800c0d4 <_printf_i+0x40>)
 800c0d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c0d4:	0800c12d 	.word	0x0800c12d
 800c0d8:	0800c141 	.word	0x0800c141
 800c0dc:	0800c0bd 	.word	0x0800c0bd
 800c0e0:	0800c0bd 	.word	0x0800c0bd
 800c0e4:	0800c0bd 	.word	0x0800c0bd
 800c0e8:	0800c0bd 	.word	0x0800c0bd
 800c0ec:	0800c141 	.word	0x0800c141
 800c0f0:	0800c0bd 	.word	0x0800c0bd
 800c0f4:	0800c0bd 	.word	0x0800c0bd
 800c0f8:	0800c0bd 	.word	0x0800c0bd
 800c0fc:	0800c0bd 	.word	0x0800c0bd
 800c100:	0800c241 	.word	0x0800c241
 800c104:	0800c16b 	.word	0x0800c16b
 800c108:	0800c1fb 	.word	0x0800c1fb
 800c10c:	0800c0bd 	.word	0x0800c0bd
 800c110:	0800c0bd 	.word	0x0800c0bd
 800c114:	0800c263 	.word	0x0800c263
 800c118:	0800c0bd 	.word	0x0800c0bd
 800c11c:	0800c16b 	.word	0x0800c16b
 800c120:	0800c0bd 	.word	0x0800c0bd
 800c124:	0800c0bd 	.word	0x0800c0bd
 800c128:	0800c203 	.word	0x0800c203
 800c12c:	6833      	ldr	r3, [r6, #0]
 800c12e:	1d1a      	adds	r2, r3, #4
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	6032      	str	r2, [r6, #0]
 800c134:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c138:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c13c:	2301      	movs	r3, #1
 800c13e:	e09d      	b.n	800c27c <_printf_i+0x1e8>
 800c140:	6833      	ldr	r3, [r6, #0]
 800c142:	6820      	ldr	r0, [r4, #0]
 800c144:	1d19      	adds	r1, r3, #4
 800c146:	6031      	str	r1, [r6, #0]
 800c148:	0606      	lsls	r6, r0, #24
 800c14a:	d501      	bpl.n	800c150 <_printf_i+0xbc>
 800c14c:	681d      	ldr	r5, [r3, #0]
 800c14e:	e003      	b.n	800c158 <_printf_i+0xc4>
 800c150:	0645      	lsls	r5, r0, #25
 800c152:	d5fb      	bpl.n	800c14c <_printf_i+0xb8>
 800c154:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c158:	2d00      	cmp	r5, #0
 800c15a:	da03      	bge.n	800c164 <_printf_i+0xd0>
 800c15c:	232d      	movs	r3, #45	@ 0x2d
 800c15e:	426d      	negs	r5, r5
 800c160:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c164:	4859      	ldr	r0, [pc, #356]	@ (800c2cc <_printf_i+0x238>)
 800c166:	230a      	movs	r3, #10
 800c168:	e011      	b.n	800c18e <_printf_i+0xfa>
 800c16a:	6821      	ldr	r1, [r4, #0]
 800c16c:	6833      	ldr	r3, [r6, #0]
 800c16e:	0608      	lsls	r0, r1, #24
 800c170:	f853 5b04 	ldr.w	r5, [r3], #4
 800c174:	d402      	bmi.n	800c17c <_printf_i+0xe8>
 800c176:	0649      	lsls	r1, r1, #25
 800c178:	bf48      	it	mi
 800c17a:	b2ad      	uxthmi	r5, r5
 800c17c:	2f6f      	cmp	r7, #111	@ 0x6f
 800c17e:	4853      	ldr	r0, [pc, #332]	@ (800c2cc <_printf_i+0x238>)
 800c180:	6033      	str	r3, [r6, #0]
 800c182:	bf14      	ite	ne
 800c184:	230a      	movne	r3, #10
 800c186:	2308      	moveq	r3, #8
 800c188:	2100      	movs	r1, #0
 800c18a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c18e:	6866      	ldr	r6, [r4, #4]
 800c190:	60a6      	str	r6, [r4, #8]
 800c192:	2e00      	cmp	r6, #0
 800c194:	bfa2      	ittt	ge
 800c196:	6821      	ldrge	r1, [r4, #0]
 800c198:	f021 0104 	bicge.w	r1, r1, #4
 800c19c:	6021      	strge	r1, [r4, #0]
 800c19e:	b90d      	cbnz	r5, 800c1a4 <_printf_i+0x110>
 800c1a0:	2e00      	cmp	r6, #0
 800c1a2:	d04b      	beq.n	800c23c <_printf_i+0x1a8>
 800c1a4:	4616      	mov	r6, r2
 800c1a6:	fbb5 f1f3 	udiv	r1, r5, r3
 800c1aa:	fb03 5711 	mls	r7, r3, r1, r5
 800c1ae:	5dc7      	ldrb	r7, [r0, r7]
 800c1b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c1b4:	462f      	mov	r7, r5
 800c1b6:	42bb      	cmp	r3, r7
 800c1b8:	460d      	mov	r5, r1
 800c1ba:	d9f4      	bls.n	800c1a6 <_printf_i+0x112>
 800c1bc:	2b08      	cmp	r3, #8
 800c1be:	d10b      	bne.n	800c1d8 <_printf_i+0x144>
 800c1c0:	6823      	ldr	r3, [r4, #0]
 800c1c2:	07df      	lsls	r7, r3, #31
 800c1c4:	d508      	bpl.n	800c1d8 <_printf_i+0x144>
 800c1c6:	6923      	ldr	r3, [r4, #16]
 800c1c8:	6861      	ldr	r1, [r4, #4]
 800c1ca:	4299      	cmp	r1, r3
 800c1cc:	bfde      	ittt	le
 800c1ce:	2330      	movle	r3, #48	@ 0x30
 800c1d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c1d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c1d8:	1b92      	subs	r2, r2, r6
 800c1da:	6122      	str	r2, [r4, #16]
 800c1dc:	f8cd a000 	str.w	sl, [sp]
 800c1e0:	464b      	mov	r3, r9
 800c1e2:	aa03      	add	r2, sp, #12
 800c1e4:	4621      	mov	r1, r4
 800c1e6:	4640      	mov	r0, r8
 800c1e8:	f7ff fee6 	bl	800bfb8 <_printf_common>
 800c1ec:	3001      	adds	r0, #1
 800c1ee:	d14a      	bne.n	800c286 <_printf_i+0x1f2>
 800c1f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1f4:	b004      	add	sp, #16
 800c1f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1fa:	6823      	ldr	r3, [r4, #0]
 800c1fc:	f043 0320 	orr.w	r3, r3, #32
 800c200:	6023      	str	r3, [r4, #0]
 800c202:	4833      	ldr	r0, [pc, #204]	@ (800c2d0 <_printf_i+0x23c>)
 800c204:	2778      	movs	r7, #120	@ 0x78
 800c206:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c20a:	6823      	ldr	r3, [r4, #0]
 800c20c:	6831      	ldr	r1, [r6, #0]
 800c20e:	061f      	lsls	r7, r3, #24
 800c210:	f851 5b04 	ldr.w	r5, [r1], #4
 800c214:	d402      	bmi.n	800c21c <_printf_i+0x188>
 800c216:	065f      	lsls	r7, r3, #25
 800c218:	bf48      	it	mi
 800c21a:	b2ad      	uxthmi	r5, r5
 800c21c:	6031      	str	r1, [r6, #0]
 800c21e:	07d9      	lsls	r1, r3, #31
 800c220:	bf44      	itt	mi
 800c222:	f043 0320 	orrmi.w	r3, r3, #32
 800c226:	6023      	strmi	r3, [r4, #0]
 800c228:	b11d      	cbz	r5, 800c232 <_printf_i+0x19e>
 800c22a:	2310      	movs	r3, #16
 800c22c:	e7ac      	b.n	800c188 <_printf_i+0xf4>
 800c22e:	4827      	ldr	r0, [pc, #156]	@ (800c2cc <_printf_i+0x238>)
 800c230:	e7e9      	b.n	800c206 <_printf_i+0x172>
 800c232:	6823      	ldr	r3, [r4, #0]
 800c234:	f023 0320 	bic.w	r3, r3, #32
 800c238:	6023      	str	r3, [r4, #0]
 800c23a:	e7f6      	b.n	800c22a <_printf_i+0x196>
 800c23c:	4616      	mov	r6, r2
 800c23e:	e7bd      	b.n	800c1bc <_printf_i+0x128>
 800c240:	6833      	ldr	r3, [r6, #0]
 800c242:	6825      	ldr	r5, [r4, #0]
 800c244:	6961      	ldr	r1, [r4, #20]
 800c246:	1d18      	adds	r0, r3, #4
 800c248:	6030      	str	r0, [r6, #0]
 800c24a:	062e      	lsls	r6, r5, #24
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	d501      	bpl.n	800c254 <_printf_i+0x1c0>
 800c250:	6019      	str	r1, [r3, #0]
 800c252:	e002      	b.n	800c25a <_printf_i+0x1c6>
 800c254:	0668      	lsls	r0, r5, #25
 800c256:	d5fb      	bpl.n	800c250 <_printf_i+0x1bc>
 800c258:	8019      	strh	r1, [r3, #0]
 800c25a:	2300      	movs	r3, #0
 800c25c:	6123      	str	r3, [r4, #16]
 800c25e:	4616      	mov	r6, r2
 800c260:	e7bc      	b.n	800c1dc <_printf_i+0x148>
 800c262:	6833      	ldr	r3, [r6, #0]
 800c264:	1d1a      	adds	r2, r3, #4
 800c266:	6032      	str	r2, [r6, #0]
 800c268:	681e      	ldr	r6, [r3, #0]
 800c26a:	6862      	ldr	r2, [r4, #4]
 800c26c:	2100      	movs	r1, #0
 800c26e:	4630      	mov	r0, r6
 800c270:	f7f3 ffd6 	bl	8000220 <memchr>
 800c274:	b108      	cbz	r0, 800c27a <_printf_i+0x1e6>
 800c276:	1b80      	subs	r0, r0, r6
 800c278:	6060      	str	r0, [r4, #4]
 800c27a:	6863      	ldr	r3, [r4, #4]
 800c27c:	6123      	str	r3, [r4, #16]
 800c27e:	2300      	movs	r3, #0
 800c280:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c284:	e7aa      	b.n	800c1dc <_printf_i+0x148>
 800c286:	6923      	ldr	r3, [r4, #16]
 800c288:	4632      	mov	r2, r6
 800c28a:	4649      	mov	r1, r9
 800c28c:	4640      	mov	r0, r8
 800c28e:	47d0      	blx	sl
 800c290:	3001      	adds	r0, #1
 800c292:	d0ad      	beq.n	800c1f0 <_printf_i+0x15c>
 800c294:	6823      	ldr	r3, [r4, #0]
 800c296:	079b      	lsls	r3, r3, #30
 800c298:	d413      	bmi.n	800c2c2 <_printf_i+0x22e>
 800c29a:	68e0      	ldr	r0, [r4, #12]
 800c29c:	9b03      	ldr	r3, [sp, #12]
 800c29e:	4298      	cmp	r0, r3
 800c2a0:	bfb8      	it	lt
 800c2a2:	4618      	movlt	r0, r3
 800c2a4:	e7a6      	b.n	800c1f4 <_printf_i+0x160>
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	4632      	mov	r2, r6
 800c2aa:	4649      	mov	r1, r9
 800c2ac:	4640      	mov	r0, r8
 800c2ae:	47d0      	blx	sl
 800c2b0:	3001      	adds	r0, #1
 800c2b2:	d09d      	beq.n	800c1f0 <_printf_i+0x15c>
 800c2b4:	3501      	adds	r5, #1
 800c2b6:	68e3      	ldr	r3, [r4, #12]
 800c2b8:	9903      	ldr	r1, [sp, #12]
 800c2ba:	1a5b      	subs	r3, r3, r1
 800c2bc:	42ab      	cmp	r3, r5
 800c2be:	dcf2      	bgt.n	800c2a6 <_printf_i+0x212>
 800c2c0:	e7eb      	b.n	800c29a <_printf_i+0x206>
 800c2c2:	2500      	movs	r5, #0
 800c2c4:	f104 0619 	add.w	r6, r4, #25
 800c2c8:	e7f5      	b.n	800c2b6 <_printf_i+0x222>
 800c2ca:	bf00      	nop
 800c2cc:	0800cb19 	.word	0x0800cb19
 800c2d0:	0800cb2a 	.word	0x0800cb2a

0800c2d4 <memmove>:
 800c2d4:	4288      	cmp	r0, r1
 800c2d6:	b510      	push	{r4, lr}
 800c2d8:	eb01 0402 	add.w	r4, r1, r2
 800c2dc:	d902      	bls.n	800c2e4 <memmove+0x10>
 800c2de:	4284      	cmp	r4, r0
 800c2e0:	4623      	mov	r3, r4
 800c2e2:	d807      	bhi.n	800c2f4 <memmove+0x20>
 800c2e4:	1e43      	subs	r3, r0, #1
 800c2e6:	42a1      	cmp	r1, r4
 800c2e8:	d008      	beq.n	800c2fc <memmove+0x28>
 800c2ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c2ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c2f2:	e7f8      	b.n	800c2e6 <memmove+0x12>
 800c2f4:	4402      	add	r2, r0
 800c2f6:	4601      	mov	r1, r0
 800c2f8:	428a      	cmp	r2, r1
 800c2fa:	d100      	bne.n	800c2fe <memmove+0x2a>
 800c2fc:	bd10      	pop	{r4, pc}
 800c2fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c302:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c306:	e7f7      	b.n	800c2f8 <memmove+0x24>

0800c308 <_sbrk_r>:
 800c308:	b538      	push	{r3, r4, r5, lr}
 800c30a:	4d06      	ldr	r5, [pc, #24]	@ (800c324 <_sbrk_r+0x1c>)
 800c30c:	2300      	movs	r3, #0
 800c30e:	4604      	mov	r4, r0
 800c310:	4608      	mov	r0, r1
 800c312:	602b      	str	r3, [r5, #0]
 800c314:	f7f7 fe7e 	bl	8004014 <_sbrk>
 800c318:	1c43      	adds	r3, r0, #1
 800c31a:	d102      	bne.n	800c322 <_sbrk_r+0x1a>
 800c31c:	682b      	ldr	r3, [r5, #0]
 800c31e:	b103      	cbz	r3, 800c322 <_sbrk_r+0x1a>
 800c320:	6023      	str	r3, [r4, #0]
 800c322:	bd38      	pop	{r3, r4, r5, pc}
 800c324:	200010e4 	.word	0x200010e4

0800c328 <_realloc_r>:
 800c328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c32c:	4680      	mov	r8, r0
 800c32e:	4615      	mov	r5, r2
 800c330:	460c      	mov	r4, r1
 800c332:	b921      	cbnz	r1, 800c33e <_realloc_r+0x16>
 800c334:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c338:	4611      	mov	r1, r2
 800c33a:	f7ff bc59 	b.w	800bbf0 <_malloc_r>
 800c33e:	b92a      	cbnz	r2, 800c34c <_realloc_r+0x24>
 800c340:	f7ff fbea 	bl	800bb18 <_free_r>
 800c344:	2400      	movs	r4, #0
 800c346:	4620      	mov	r0, r4
 800c348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c34c:	f000 f81a 	bl	800c384 <_malloc_usable_size_r>
 800c350:	4285      	cmp	r5, r0
 800c352:	4606      	mov	r6, r0
 800c354:	d802      	bhi.n	800c35c <_realloc_r+0x34>
 800c356:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c35a:	d8f4      	bhi.n	800c346 <_realloc_r+0x1e>
 800c35c:	4629      	mov	r1, r5
 800c35e:	4640      	mov	r0, r8
 800c360:	f7ff fc46 	bl	800bbf0 <_malloc_r>
 800c364:	4607      	mov	r7, r0
 800c366:	2800      	cmp	r0, #0
 800c368:	d0ec      	beq.n	800c344 <_realloc_r+0x1c>
 800c36a:	42b5      	cmp	r5, r6
 800c36c:	462a      	mov	r2, r5
 800c36e:	4621      	mov	r1, r4
 800c370:	bf28      	it	cs
 800c372:	4632      	movcs	r2, r6
 800c374:	f7ff fbc2 	bl	800bafc <memcpy>
 800c378:	4621      	mov	r1, r4
 800c37a:	4640      	mov	r0, r8
 800c37c:	f7ff fbcc 	bl	800bb18 <_free_r>
 800c380:	463c      	mov	r4, r7
 800c382:	e7e0      	b.n	800c346 <_realloc_r+0x1e>

0800c384 <_malloc_usable_size_r>:
 800c384:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c388:	1f18      	subs	r0, r3, #4
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	bfbc      	itt	lt
 800c38e:	580b      	ldrlt	r3, [r1, r0]
 800c390:	18c0      	addlt	r0, r0, r3
 800c392:	4770      	bx	lr

0800c394 <fmaxf>:
 800c394:	b508      	push	{r3, lr}
 800c396:	ed2d 8b02 	vpush	{d8}
 800c39a:	eeb0 8a40 	vmov.f32	s16, s0
 800c39e:	eef0 8a60 	vmov.f32	s17, s1
 800c3a2:	f000 f831 	bl	800c408 <__fpclassifyf>
 800c3a6:	b930      	cbnz	r0, 800c3b6 <fmaxf+0x22>
 800c3a8:	eeb0 8a68 	vmov.f32	s16, s17
 800c3ac:	eeb0 0a48 	vmov.f32	s0, s16
 800c3b0:	ecbd 8b02 	vpop	{d8}
 800c3b4:	bd08      	pop	{r3, pc}
 800c3b6:	eeb0 0a68 	vmov.f32	s0, s17
 800c3ba:	f000 f825 	bl	800c408 <__fpclassifyf>
 800c3be:	2800      	cmp	r0, #0
 800c3c0:	d0f4      	beq.n	800c3ac <fmaxf+0x18>
 800c3c2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c3c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3ca:	dded      	ble.n	800c3a8 <fmaxf+0x14>
 800c3cc:	e7ee      	b.n	800c3ac <fmaxf+0x18>

0800c3ce <fminf>:
 800c3ce:	b508      	push	{r3, lr}
 800c3d0:	ed2d 8b02 	vpush	{d8}
 800c3d4:	eeb0 8a40 	vmov.f32	s16, s0
 800c3d8:	eef0 8a60 	vmov.f32	s17, s1
 800c3dc:	f000 f814 	bl	800c408 <__fpclassifyf>
 800c3e0:	b930      	cbnz	r0, 800c3f0 <fminf+0x22>
 800c3e2:	eeb0 8a68 	vmov.f32	s16, s17
 800c3e6:	eeb0 0a48 	vmov.f32	s0, s16
 800c3ea:	ecbd 8b02 	vpop	{d8}
 800c3ee:	bd08      	pop	{r3, pc}
 800c3f0:	eeb0 0a68 	vmov.f32	s0, s17
 800c3f4:	f000 f808 	bl	800c408 <__fpclassifyf>
 800c3f8:	2800      	cmp	r0, #0
 800c3fa:	d0f4      	beq.n	800c3e6 <fminf+0x18>
 800c3fc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c404:	d5ed      	bpl.n	800c3e2 <fminf+0x14>
 800c406:	e7ee      	b.n	800c3e6 <fminf+0x18>

0800c408 <__fpclassifyf>:
 800c408:	ee10 3a10 	vmov	r3, s0
 800c40c:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800c410:	d00d      	beq.n	800c42e <__fpclassifyf+0x26>
 800c412:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800c416:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800c41a:	d30a      	bcc.n	800c432 <__fpclassifyf+0x2a>
 800c41c:	4b07      	ldr	r3, [pc, #28]	@ (800c43c <__fpclassifyf+0x34>)
 800c41e:	1e42      	subs	r2, r0, #1
 800c420:	429a      	cmp	r2, r3
 800c422:	d908      	bls.n	800c436 <__fpclassifyf+0x2e>
 800c424:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800c428:	4258      	negs	r0, r3
 800c42a:	4158      	adcs	r0, r3
 800c42c:	4770      	bx	lr
 800c42e:	2002      	movs	r0, #2
 800c430:	4770      	bx	lr
 800c432:	2004      	movs	r0, #4
 800c434:	4770      	bx	lr
 800c436:	2003      	movs	r0, #3
 800c438:	4770      	bx	lr
 800c43a:	bf00      	nop
 800c43c:	007ffffe 	.word	0x007ffffe

0800c440 <_init>:
 800c440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c442:	bf00      	nop
 800c444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c446:	bc08      	pop	{r3}
 800c448:	469e      	mov	lr, r3
 800c44a:	4770      	bx	lr

0800c44c <_fini>:
 800c44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c44e:	bf00      	nop
 800c450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c452:	bc08      	pop	{r3}
 800c454:	469e      	mov	lr, r3
 800c456:	4770      	bx	lr
