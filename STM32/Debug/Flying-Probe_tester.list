
Flying-Probe_tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018218  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cf0  080183e8  080183e8  000193e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080190d8  080190d8  0001b244  2**0
                  CONTENTS
  4 .ARM          00000008  080190d8  080190d8  0001a0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080190e0  080190e0  0001b244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080190e0  080190e0  0001a0e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080190e4  080190e4  0001a0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000244  20000000  080190e8  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e480  20000244  0801932c  0001b244  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000e6c4  0801932c  0001b6c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b244  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032124  00000000  00000000  0001b274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006f79  00000000  00000000  0004d398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002658  00000000  00000000  00054318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001de3  00000000  00000000  00056970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fe45  00000000  00000000  00058753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003a81e  00000000  00000000  00088598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001062b4  00000000  00000000  000c2db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c906a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b36c  00000000  00000000  001c90b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001d441c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000244 	.word	0x20000244
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080183d0 	.word	0x080183d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000248 	.word	0x20000248
 800020c:	080183d0 	.word	0x080183d0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c60:	f000 b9a0 	b.w	8000fa4 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f83c 	bl	8000ce8 <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_d2lz>:
 8000c7c:	b538      	push	{r3, r4, r5, lr}
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2300      	movs	r3, #0
 8000c82:	4604      	mov	r4, r0
 8000c84:	460d      	mov	r5, r1
 8000c86:	f7ff ff49 	bl	8000b1c <__aeabi_dcmplt>
 8000c8a:	b928      	cbnz	r0, 8000c98 <__aeabi_d2lz+0x1c>
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	4629      	mov	r1, r5
 8000c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c94:	f000 b80a 	b.w	8000cac <__aeabi_d2ulz>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c9e:	f000 f805 	bl	8000cac <__aeabi_d2ulz>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	bd38      	pop	{r3, r4, r5, pc}
 8000caa:	bf00      	nop

08000cac <__aeabi_d2ulz>:
 8000cac:	b5d0      	push	{r4, r6, r7, lr}
 8000cae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <__aeabi_d2ulz+0x34>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4606      	mov	r6, r0
 8000cb4:	460f      	mov	r7, r1
 8000cb6:	f7ff fcbf 	bl	8000638 <__aeabi_dmul>
 8000cba:	f7ff ff57 	bl	8000b6c <__aeabi_d2uiz>
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	f7ff fc40 	bl	8000544 <__aeabi_ui2d>
 8000cc4:	4b07      	ldr	r3, [pc, #28]	@ (8000ce4 <__aeabi_d2ulz+0x38>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f7ff fcb6 	bl	8000638 <__aeabi_dmul>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	4639      	mov	r1, r7
 8000cd4:	f7ff faf8 	bl	80002c8 <__aeabi_dsub>
 8000cd8:	f7ff ff48 	bl	8000b6c <__aeabi_d2uiz>
 8000cdc:	4621      	mov	r1, r4
 8000cde:	bdd0      	pop	{r4, r6, r7, pc}
 8000ce0:	3df00000 	.word	0x3df00000
 8000ce4:	41f00000 	.word	0x41f00000

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	460c      	mov	r4, r1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d14e      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	458c      	cmp	ip, r1
 8000cf8:	4686      	mov	lr, r0
 8000cfa:	fab2 f282 	clz	r2, r2
 8000cfe:	d962      	bls.n	8000dc6 <__udivmoddi4+0xde>
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0320 	rsb	r3, r2, #32
 8000d06:	4091      	lsls	r1, r2
 8000d08:	fa20 f303 	lsr.w	r3, r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	4319      	orrs	r1, r3
 8000d12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1a:	fa1f f68c 	uxth.w	r6, ip
 8000d1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d26:	fb07 1114 	mls	r1, r7, r4, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb04 f106 	mul.w	r1, r4, r6
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d3e:	f080 8112 	bcs.w	8000f66 <__udivmoddi4+0x27e>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 810f 	bls.w	8000f66 <__udivmoddi4+0x27e>
 8000d48:	3c02      	subs	r4, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a59      	subs	r1, r3, r1
 8000d4e:	fa1f f38e 	uxth.w	r3, lr
 8000d52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d56:	fb07 1110 	mls	r1, r7, r0, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb00 f606 	mul.w	r6, r0, r6
 8000d62:	429e      	cmp	r6, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x94>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d6e:	f080 80fc 	bcs.w	8000f6a <__udivmoddi4+0x282>
 8000d72:	429e      	cmp	r6, r3
 8000d74:	f240 80f9 	bls.w	8000f6a <__udivmoddi4+0x282>
 8000d78:	4463      	add	r3, ip
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d82:	2100      	movs	r1, #0
 8000d84:	b11d      	cbz	r5, 8000d8e <__udivmoddi4+0xa6>
 8000d86:	40d3      	lsrs	r3, r2
 8000d88:	2200      	movs	r2, #0
 8000d8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d905      	bls.n	8000da2 <__udivmoddi4+0xba>
 8000d96:	b10d      	cbz	r5, 8000d9c <__udivmoddi4+0xb4>
 8000d98:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e7f5      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000da2:	fab3 f183 	clz	r1, r3
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d146      	bne.n	8000e38 <__udivmoddi4+0x150>
 8000daa:	42a3      	cmp	r3, r4
 8000dac:	d302      	bcc.n	8000db4 <__udivmoddi4+0xcc>
 8000dae:	4290      	cmp	r0, r2
 8000db0:	f0c0 80f0 	bcc.w	8000f94 <__udivmoddi4+0x2ac>
 8000db4:	1a86      	subs	r6, r0, r2
 8000db6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dba:	2001      	movs	r0, #1
 8000dbc:	2d00      	cmp	r5, #0
 8000dbe:	d0e6      	beq.n	8000d8e <__udivmoddi4+0xa6>
 8000dc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc4:	e7e3      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	f040 8090 	bne.w	8000eec <__udivmoddi4+0x204>
 8000dcc:	eba1 040c 	sub.w	r4, r1, ip
 8000dd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd4:	fa1f f78c 	uxth.w	r7, ip
 8000dd8:	2101      	movs	r1, #1
 8000dda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de2:	fb08 4416 	mls	r4, r8, r6, r4
 8000de6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dea:	fb07 f006 	mul.w	r0, r7, r6
 8000dee:	4298      	cmp	r0, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x11c>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x11a>
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	f200 80cd 	bhi.w	8000f9c <__udivmoddi4+0x2b4>
 8000e02:	4626      	mov	r6, r4
 8000e04:	1a1c      	subs	r4, r3, r0
 8000e06:	fa1f f38e 	uxth.w	r3, lr
 8000e0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e16:	fb00 f707 	mul.w	r7, r0, r7
 8000e1a:	429f      	cmp	r7, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x148>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x146>
 8000e28:	429f      	cmp	r7, r3
 8000e2a:	f200 80b0 	bhi.w	8000f8e <__udivmoddi4+0x2a6>
 8000e2e:	4620      	mov	r0, r4
 8000e30:	1bdb      	subs	r3, r3, r7
 8000e32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e36:	e7a5      	b.n	8000d84 <__udivmoddi4+0x9c>
 8000e38:	f1c1 0620 	rsb	r6, r1, #32
 8000e3c:	408b      	lsls	r3, r1
 8000e3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e42:	431f      	orrs	r7, r3
 8000e44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e48:	fa04 f301 	lsl.w	r3, r4, r1
 8000e4c:	ea43 030c 	orr.w	r3, r3, ip
 8000e50:	40f4      	lsrs	r4, r6
 8000e52:	fa00 f801 	lsl.w	r8, r0, r1
 8000e56:	0c38      	lsrs	r0, r7, #16
 8000e58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e60:	fa1f fc87 	uxth.w	ip, r7
 8000e64:	fb00 441e 	mls	r4, r0, lr, r4
 8000e68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e70:	45a1      	cmp	r9, r4
 8000e72:	fa02 f201 	lsl.w	r2, r2, r1
 8000e76:	d90a      	bls.n	8000e8e <__udivmoddi4+0x1a6>
 8000e78:	193c      	adds	r4, r7, r4
 8000e7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e7e:	f080 8084 	bcs.w	8000f8a <__udivmoddi4+0x2a2>
 8000e82:	45a1      	cmp	r9, r4
 8000e84:	f240 8081 	bls.w	8000f8a <__udivmoddi4+0x2a2>
 8000e88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e8c:	443c      	add	r4, r7
 8000e8e:	eba4 0409 	sub.w	r4, r4, r9
 8000e92:	fa1f f983 	uxth.w	r9, r3
 8000e96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ea6:	45a4      	cmp	ip, r4
 8000ea8:	d907      	bls.n	8000eba <__udivmoddi4+0x1d2>
 8000eaa:	193c      	adds	r4, r7, r4
 8000eac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eb0:	d267      	bcs.n	8000f82 <__udivmoddi4+0x29a>
 8000eb2:	45a4      	cmp	ip, r4
 8000eb4:	d965      	bls.n	8000f82 <__udivmoddi4+0x29a>
 8000eb6:	3b02      	subs	r3, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ebe:	fba0 9302 	umull	r9, r3, r0, r2
 8000ec2:	eba4 040c 	sub.w	r4, r4, ip
 8000ec6:	429c      	cmp	r4, r3
 8000ec8:	46ce      	mov	lr, r9
 8000eca:	469c      	mov	ip, r3
 8000ecc:	d351      	bcc.n	8000f72 <__udivmoddi4+0x28a>
 8000ece:	d04e      	beq.n	8000f6e <__udivmoddi4+0x286>
 8000ed0:	b155      	cbz	r5, 8000ee8 <__udivmoddi4+0x200>
 8000ed2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ed6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eda:	fa04 f606 	lsl.w	r6, r4, r6
 8000ede:	40cb      	lsrs	r3, r1
 8000ee0:	431e      	orrs	r6, r3
 8000ee2:	40cc      	lsrs	r4, r1
 8000ee4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee8:	2100      	movs	r1, #0
 8000eea:	e750      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000eec:	f1c2 0320 	rsb	r3, r2, #32
 8000ef0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa24 f303 	lsr.w	r3, r4, r3
 8000efc:	4094      	lsls	r4, r2
 8000efe:	430c      	orrs	r4, r1
 8000f00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3110 	mls	r1, r8, r0, r3
 8000f14:	0c23      	lsrs	r3, r4, #16
 8000f16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1a:	fb00 f107 	mul.w	r1, r0, r7
 8000f1e:	4299      	cmp	r1, r3
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x24c>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f2a:	d22c      	bcs.n	8000f86 <__udivmoddi4+0x29e>
 8000f2c:	4299      	cmp	r1, r3
 8000f2e:	d92a      	bls.n	8000f86 <__udivmoddi4+0x29e>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1a5b      	subs	r3, r3, r1
 8000f36:	b2a4      	uxth	r4, r4
 8000f38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f44:	fb01 f307 	mul.w	r3, r1, r7
 8000f48:	42a3      	cmp	r3, r4
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x276>
 8000f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f54:	d213      	bcs.n	8000f7e <__udivmoddi4+0x296>
 8000f56:	42a3      	cmp	r3, r4
 8000f58:	d911      	bls.n	8000f7e <__udivmoddi4+0x296>
 8000f5a:	3902      	subs	r1, #2
 8000f5c:	4464      	add	r4, ip
 8000f5e:	1ae4      	subs	r4, r4, r3
 8000f60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f64:	e739      	b.n	8000dda <__udivmoddi4+0xf2>
 8000f66:	4604      	mov	r4, r0
 8000f68:	e6f0      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e706      	b.n	8000d7c <__udivmoddi4+0x94>
 8000f6e:	45c8      	cmp	r8, r9
 8000f70:	d2ae      	bcs.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f7a:	3801      	subs	r0, #1
 8000f7c:	e7a8      	b.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f7e:	4631      	mov	r1, r6
 8000f80:	e7ed      	b.n	8000f5e <__udivmoddi4+0x276>
 8000f82:	4603      	mov	r3, r0
 8000f84:	e799      	b.n	8000eba <__udivmoddi4+0x1d2>
 8000f86:	4630      	mov	r0, r6
 8000f88:	e7d4      	b.n	8000f34 <__udivmoddi4+0x24c>
 8000f8a:	46d6      	mov	lr, sl
 8000f8c:	e77f      	b.n	8000e8e <__udivmoddi4+0x1a6>
 8000f8e:	4463      	add	r3, ip
 8000f90:	3802      	subs	r0, #2
 8000f92:	e74d      	b.n	8000e30 <__udivmoddi4+0x148>
 8000f94:	4606      	mov	r6, r0
 8000f96:	4623      	mov	r3, r4
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e70f      	b.n	8000dbc <__udivmoddi4+0xd4>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	e730      	b.n	8000e04 <__udivmoddi4+0x11c>
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <__lcd_delay_us>:
 * @param[in] htim     : LCD timer handler
 * @param[in] delay_us : Delay period in microseconds
 * @return None
 */
void __lcd_delay_us(LCD_TimerType htim, uint16_t delay_us)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COUNTER(htim, 0);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(htim);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f009 fb37 	bl	800a630 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(htim) < delay_us);
 8000fc2:	bf00      	nop
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fca:	887b      	ldrh	r3, [r7, #2]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d3f9      	bcc.n	8000fc4 <__lcd_delay_us+0x1c>
  HAL_TIM_Base_Stop(htim);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f009 fb9d 	bl	800a710 <HAL_TIM_Base_Stop>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <__lcd_i2c_write>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write(LCD_I2C_HandleTypeDef* hlcd, uint8_t rsRwBits, uint8_t data)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af02      	add	r7, sp, #8
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	70fb      	strb	r3, [r7, #3]
 8000fec:	4613      	mov	r3, r2
 8000fee:	70bb      	strb	r3, [r7, #2]
    /* most significant nibble */
    __lcd_i2c_buffer[0] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 8000ff0:	78bb      	ldrb	r3, [r7, #2]
 8000ff2:	f023 030f 	bic.w	r3, r3, #15
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	f043 030c 	orr.w	r3, r3, #12
 8001002:	b2da      	uxtb	r2, r3
 8001004:	4b21      	ldr	r3, [pc, #132]	@ (800108c <__lcd_i2c_write+0xac>)
 8001006:	701a      	strb	r2, [r3, #0]
    __lcd_i2c_buffer[1] = __lcd_i2c_buffer[0];
 8001008:	4b20      	ldr	r3, [pc, #128]	@ (800108c <__lcd_i2c_write+0xac>)
 800100a:	781a      	ldrb	r2, [r3, #0]
 800100c:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <__lcd_i2c_write+0xac>)
 800100e:	705a      	strb	r2, [r3, #1]
    __lcd_i2c_buffer[2] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 8001010:	78bb      	ldrb	r3, [r7, #2]
 8001012:	f023 030f 	bic.w	r3, r3, #15
 8001016:	b2da      	uxtb	r2, r3
 8001018:	78fb      	ldrb	r3, [r7, #3]
 800101a:	4313      	orrs	r3, r2
 800101c:	b2db      	uxtb	r3, r3
 800101e:	f043 0308 	orr.w	r3, r3, #8
 8001022:	b2da      	uxtb	r2, r3
 8001024:	4b19      	ldr	r3, [pc, #100]	@ (800108c <__lcd_i2c_write+0xac>)
 8001026:	709a      	strb	r2, [r3, #2]

    /* least significant nibble */
    __lcd_i2c_buffer[3] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 8001028:	78bb      	ldrb	r3, [r7, #2]
 800102a:	011b      	lsls	r3, r3, #4
 800102c:	b2da      	uxtb	r2, r3
 800102e:	78fb      	ldrb	r3, [r7, #3]
 8001030:	4313      	orrs	r3, r2
 8001032:	b2db      	uxtb	r3, r3
 8001034:	f043 030c 	orr.w	r3, r3, #12
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4b14      	ldr	r3, [pc, #80]	@ (800108c <__lcd_i2c_write+0xac>)
 800103c:	70da      	strb	r2, [r3, #3]
    __lcd_i2c_buffer[4] = __lcd_i2c_buffer[3];
 800103e:	4b13      	ldr	r3, [pc, #76]	@ (800108c <__lcd_i2c_write+0xac>)
 8001040:	78da      	ldrb	r2, [r3, #3]
 8001042:	4b12      	ldr	r3, [pc, #72]	@ (800108c <__lcd_i2c_write+0xac>)
 8001044:	711a      	strb	r2, [r3, #4]
    __lcd_i2c_buffer[5] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 8001046:	78bb      	ldrb	r3, [r7, #2]
 8001048:	011b      	lsls	r3, r3, #4
 800104a:	b2da      	uxtb	r2, r3
 800104c:	78fb      	ldrb	r3, [r7, #3]
 800104e:	4313      	orrs	r3, r2
 8001050:	b2db      	uxtb	r3, r3
 8001052:	f043 0308 	orr.w	r3, r3, #8
 8001056:	b2da      	uxtb	r2, r3
 8001058:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <__lcd_i2c_write+0xac>)
 800105a:	715a      	strb	r2, [r3, #5]

    HAL_I2C_Master_Transmit(hlcd->I2C, (hlcd->Address << 1), (uint8_t*)__lcd_i2c_buffer, 6, hlcd->Timeout);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6818      	ldr	r0, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	889b      	ldrh	r3, [r3, #4]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	b299      	uxth	r1, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2306      	movs	r3, #6
 8001070:	4a06      	ldr	r2, [pc, #24]	@ (800108c <__lcd_i2c_write+0xac>)
 8001072:	f006 fe7b 	bl	8007d6c <HAL_I2C_Master_Transmit>

    __lcd_delay(hlcd->Timer, 0.05);  // > 41 us
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	2132      	movs	r1, #50	@ 0x32
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff93 	bl	8000fa8 <__lcd_delay_us>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000260 	.word	0x20000260

08001090 <__lcd_i2c_write_command>:
 * @param[in] hlcd    : LCD handler with I2C interface
 * @param[in] command : Display command @see lcd.h/Define
 * @return None
 */
void __lcd_i2c_write_command(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_COMMAND_REG, data);
 800109c:	78fb      	ldrb	r3, [r7, #3]
 800109e:	461a      	mov	r2, r3
 80010a0:	2100      	movs	r1, #0
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ff9c 	bl	8000fe0 <__lcd_i2c_write>
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <__lcd_i2c_write_data>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write_data(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_DATA_REG, data);
 80010bc:	78fb      	ldrb	r3, [r7, #3]
 80010be:	461a      	mov	r2, r3
 80010c0:	2101      	movs	r1, #1
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ff8c 	bl	8000fe0 <__lcd_i2c_write>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <LCD_I2C_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Init(LCD_I2C_HandleTypeDef* hlcd)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
    // Step 1: Initial delay after power-on
    __lcd_delay(hlcd->Timer, 50); // Wait at least 40 ms after power-on
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff61 	bl	8000fa8 <__lcd_delay_us>

    // Step 2: Force LCD into 4-bit mode
    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 80010e6:	2103      	movs	r1, #3
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ffd1 	bl	8001090 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 5);          // Wait > 4.1 ms
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	f241 3188 	movw	r1, #5000	@ 0x1388
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff56 	bl	8000fa8 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 80010fc:	2103      	movs	r1, #3
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff ffc6 	bl	8001090 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Wait > 100 µs
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff4b 	bl	8000fa8 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 8001112:	2103      	movs	r1, #3
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ffbb 	bl	8001090 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Short delay
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ff40 	bl	8000fa8 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x02);  // Function set: 4-bit mode
 8001128:	2102      	movs	r1, #2
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffb0 	bl	8001090 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Short delay
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff35 	bl	8000fa8 <__lcd_delay_us>

    // Step 3: Configure display
    __lcd_i2c_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);        // Function set: 4-bit, 2-line, 5x8 dots
 800113e:	2128      	movs	r1, #40	@ 0x28
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ffa5 	bl	8001090 <__lcd_i2c_write_command>
    __lcd_i2c_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D); // Display on, cursor off, blink off
 8001146:	210c      	movs	r1, #12
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ffa1 	bl	8001090 <__lcd_i2c_write_command>
    __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);                   // Clear display
 800114e:	2101      	movs	r1, #1
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff ff9d 	bl	8001090 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 2);                                        // Wait > 1.52 ms
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff22 	bl	8000fa8 <__lcd_delay_us>
    __lcd_i2c_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);    // Entry mode: increment cursor, no shift
 8001164:	2106      	movs	r1, #6
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff ff92 	bl	8001090 <__lcd_i2c_write_command>

    // Mark as initialized
    hlcd->IsInitialized = 1;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2201      	movs	r2, #1
 8001170:	741a      	strb	r2, [r3, #16]
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <LCD_I2C_printCustomChar>:
 * @param[in] hlcd   : LCD custom character handler with I2C interface
 * @return None
 */


void LCD_I2C_printCustomChar(LCD_I2C_HandleTypeDef* hlcd, uint8_t code) {
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	460b      	mov	r3, r1
 8001184:	70fb      	strb	r3, [r7, #3]
  // Assuming __lcd_i2c_write_data allows sending custom character code directly
  __lcd_i2c_write_data(hlcd, code);
 8001186:	78fb      	ldrb	r3, [r7, #3]
 8001188:	4619      	mov	r1, r3
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ff90 	bl	80010b0 <__lcd_i2c_write_data>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <LCD_I2C_printStr>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] str  : Null-terminated string
 * @return None
 */
void LCD_I2C_printStr(LCD_I2C_HandleTypeDef* hlcd, char* str)
{
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  for(uint8_t i = 0; i < strlen(str); i++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	73fb      	strb	r3, [r7, #15]
 80011a6:	e00a      	b.n	80011be <LCD_I2C_printStr+0x26>
    __lcd_i2c_write_data(hlcd, str[i]);
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	4413      	add	r3, r2
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ff7c 	bl	80010b0 <__lcd_i2c_write_data>
  for(uint8_t i = 0; i < strlen(str); i++)
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	3301      	adds	r3, #1
 80011bc:	73fb      	strb	r3, [r7, #15]
 80011be:	7bfc      	ldrb	r4, [r7, #15]
 80011c0:	6838      	ldr	r0, [r7, #0]
 80011c2:	f7ff f825 	bl	8000210 <strlen>
 80011c6:	4603      	mov	r3, r0
 80011c8:	429c      	cmp	r4, r3
 80011ca:	d3ed      	bcc.n	80011a8 <LCD_I2C_printStr+0x10>
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd90      	pop	{r4, r7, pc}
	...

080011d8 <LCD_I2C_Cursor>:
 * @param[in] row  : Display row (line): 0 to N
 * @param[in] col  : Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None
 */
void LCD_I2C_Cursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	70fb      	strb	r3, [r7, #3]
 80011e4:	4613      	mov	r3, r2
 80011e6:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 80011e8:	78fb      	ldrb	r3, [r7, #3]
 80011ea:	4a07      	ldr	r2, [pc, #28]	@ (8001208 <LCD_I2C_Cursor+0x30>)
 80011ec:	5cd2      	ldrb	r2, [r2, r3]
 80011ee:	78bb      	ldrb	r3, [r7, #2]
 80011f0:	4413      	add	r3, r2
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	3b80      	subs	r3, #128	@ 0x80
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	4619      	mov	r1, r3
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ff48 	bl	8001090 <__lcd_i2c_write_command>
  #endif
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	080188b8 	.word	0x080188b8

0800120c <LCD_I2C_SetCursor>:
void LCD_I2C_SetCursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col){
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	70fb      	strb	r3, [r7, #3]
 8001218:	4613      	mov	r3, r2
 800121a:	70bb      	strb	r3, [r7, #2]
	if(row >=2){
 800121c:	78fb      	ldrb	r3, [r7, #3]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d90a      	bls.n	8001238 <LCD_I2C_SetCursor+0x2c>
		LCD_I2C_Cursor(hlcd,row-2,col+20);
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	3b02      	subs	r3, #2
 8001226:	b2d9      	uxtb	r1, r3
 8001228:	78bb      	ldrb	r3, [r7, #2]
 800122a:	3314      	adds	r3, #20
 800122c:	b2db      	uxtb	r3, r3
 800122e:	461a      	mov	r2, r3
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ffd1 	bl	80011d8 <LCD_I2C_Cursor>
}
	else{
		LCD_I2C_Cursor(hlcd,row,col);
	}
}
 8001236:	e005      	b.n	8001244 <LCD_I2C_SetCursor+0x38>
		LCD_I2C_Cursor(hlcd,row,col);
 8001238:	78ba      	ldrb	r2, [r7, #2]
 800123a:	78fb      	ldrb	r3, [r7, #3]
 800123c:	4619      	mov	r1, r3
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ffca 	bl	80011d8 <LCD_I2C_Cursor>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <LCD_I2C_Clear>:
 * @brief Clear the screen.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Clear(LCD_I2C_HandleTypeDef * hlcd)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);
 8001254:	2101      	movs	r1, #1
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ff1a 	bl	8001090 <__lcd_i2c_write_command>
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <LCD_I2C_ClearAllLines>:
void LCD_I2C_ClearAllLines(LCD_I2C_HandleTypeDef * hlcd){
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 4; i++) {
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	e00d      	b.n	800128e <LCD_I2C_ClearAllLines+0x2a>
        LCD_I2C_SetCursor(hlcd, i, 0);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2200      	movs	r2, #0
 8001278:	4619      	mov	r1, r3
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffc6 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "                    "); // 20 spaces
 8001280:	4907      	ldr	r1, [pc, #28]	@ (80012a0 <LCD_I2C_ClearAllLines+0x3c>)
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ff88 	bl	8001198 <LCD_I2C_printStr>
    for (int i = 0; i < 4; i++) {
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	3301      	adds	r3, #1
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2b03      	cmp	r3, #3
 8001292:	ddee      	ble.n	8001272 <LCD_I2C_ClearAllLines+0xe>
   }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	080183f4 	.word	0x080183f4

080012a4 <LCD_I2C_DefineChar>:
 * @param[in] code   : Defined character code in display memory @see HD44780 technical note.
 * @param[in] bitmap : Defined character array @see HD44780 technical note.
 * @return None
 */
void LCD_I2C_DefineChar(LCD_I2C_HandleTypeDef* hlcd, uint8_t code, uint8_t bitmap[])
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	460b      	mov	r3, r1
 80012ae:	607a      	str	r2, [r7, #4]
 80012b0:	72fb      	strb	r3, [r7, #11]
  __lcd_i2c_write_command(hlcd, LCD_SETCGRAM_ADDR + (code << 3));
 80012b2:	7afb      	ldrb	r3, [r7, #11]
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	3340      	adds	r3, #64	@ 0x40
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	4619      	mov	r1, r3
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f7ff fee6 	bl	8001090 <__lcd_i2c_write_command>

  for(uint8_t i=0; i < 8; ++i)
 80012c4:	2300      	movs	r3, #0
 80012c6:	75fb      	strb	r3, [r7, #23]
 80012c8:	e00a      	b.n	80012e0 <LCD_I2C_DefineChar+0x3c>
    __lcd_i2c_write_data(hlcd, bitmap[i]);
 80012ca:	7dfb      	ldrb	r3, [r7, #23]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	4413      	add	r3, r2
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	4619      	mov	r1, r3
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	f7ff feeb 	bl	80010b0 <__lcd_i2c_write_data>
  for(uint8_t i=0; i < 8; ++i)
 80012da:	7dfb      	ldrb	r3, [r7, #23]
 80012dc:	3301      	adds	r3, #1
 80012de:	75fb      	strb	r3, [r7, #23]
 80012e0:	7dfb      	ldrb	r3, [r7, #23]
 80012e2:	2b07      	cmp	r3, #7
 80012e4:	d9f1      	bls.n	80012ca <LCD_I2C_DefineChar+0x26>
}
 80012e6:	bf00      	nop
 80012e8:	bf00      	nop
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <LCD_I2C_DisplaySequentialGlossyText>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] row  : Row number to display the text
 * @return None
 */
void LCD_I2C_DisplaySequentialGlossyText(LCD_I2C_HandleTypeDef* hlcd, uint8_t row)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	70fb      	strb	r3, [r7, #3]
    // Ensure row is valid (0 or 1 for a 2x16 LCD)


    const char* text = "BONGO BONG";
 80012fc:	4b23      	ldr	r3, [pc, #140]	@ (800138c <LCD_I2C_DisplaySequentialGlossyText+0x9c>)
 80012fe:	61bb      	str	r3, [r7, #24]
    uint8_t len = strlen(text);
 8001300:	69b8      	ldr	r0, [r7, #24]
 8001302:	f7fe ff85 	bl	8000210 <strlen>
 8001306:	4603      	mov	r3, r0
 8001308:	75fb      	strb	r3, [r7, #23]

    // Create a highlight custom character
    uint8_t highlight_char[8] = {
 800130a:	4a21      	ldr	r2, [pc, #132]	@ (8001390 <LCD_I2C_DisplaySequentialGlossyText+0xa0>)
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001314:	e883 0003 	stmia.w	r3, {r0, r1}
        0b11111,
        0b11111
    };

    // Define the custom character in CGRAM
    LCD_I2C_DefineChar(hlcd, 0, highlight_char);
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	461a      	mov	r2, r3
 800131e:	2100      	movs	r1, #0
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ffbf 	bl	80012a4 <LCD_I2C_DefineChar>

    // Start from the first character
    for (uint8_t i = 0; i < len; i++) {
 8001326:	2300      	movs	r3, #0
 8001328:	77fb      	strb	r3, [r7, #31]
 800132a:	e025      	b.n	8001378 <LCD_I2C_DisplaySequentialGlossyText+0x88>
        // Highlight the current character
        LCD_I2C_SetCursor(hlcd, row, i+3);
 800132c:	7ffb      	ldrb	r3, [r7, #31]
 800132e:	3303      	adds	r3, #3
 8001330:	b2da      	uxtb	r2, r3
 8001332:	78fb      	ldrb	r3, [r7, #3]
 8001334:	4619      	mov	r1, r3
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ff68 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printCustomChar(hlcd, 0);
 800133c:	2100      	movs	r1, #0
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ff1b 	bl	800117a <LCD_I2C_printCustomChar>

        // Wait to create the glossy effect
        __lcd_delay(hlcd->Timer, 200); // Adjust delay for visual preference
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fe2b 	bl	8000fa8 <__lcd_delay_us>

        // Replace the highlighted character with the original character
        LCD_I2C_SetCursor(hlcd, row, i+3);
 8001352:	7ffb      	ldrb	r3, [r7, #31]
 8001354:	3303      	adds	r3, #3
 8001356:	b2da      	uxtb	r2, r3
 8001358:	78fb      	ldrb	r3, [r7, #3]
 800135a:	4619      	mov	r1, r3
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ff55 	bl	800120c <LCD_I2C_SetCursor>
        __lcd_i2c_write_data(hlcd, text[i]);
 8001362:	7ffb      	ldrb	r3, [r7, #31]
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4413      	add	r3, r2
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	4619      	mov	r1, r3
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff fe9f 	bl	80010b0 <__lcd_i2c_write_data>
    for (uint8_t i = 0; i < len; i++) {
 8001372:	7ffb      	ldrb	r3, [r7, #31]
 8001374:	3301      	adds	r3, #1
 8001376:	77fb      	strb	r3, [r7, #31]
 8001378:	7ffa      	ldrb	r2, [r7, #31]
 800137a:	7dfb      	ldrb	r3, [r7, #23]
 800137c:	429a      	cmp	r2, r3
 800137e:	d3d5      	bcc.n	800132c <LCD_I2C_DisplaySequentialGlossyText+0x3c>
    }
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3720      	adds	r7, #32
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	0801840c 	.word	0x0801840c
 8001390:	08018418 	.word	0x08018418

08001394 <LCD_I2C_menuTemplate>:
uint8_t LCD_I2C_menuTemplate(LCD_I2C_HandleTypeDef* hlcd,
                             ENC_Handle_TypeDef* henc,
                             const char* displayItems[],
                             uint8_t numItems,
                             bool backOption)
{
 8001394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001398:	b091      	sub	sp, #68	@ 0x44
 800139a:	af00      	add	r7, sp, #0
 800139c:	60f8      	str	r0, [r7, #12]
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	70fb      	strb	r3, [r7, #3]
 80013a4:	466b      	mov	r3, sp
 80013a6:	461e      	mov	r6, r3
    LCD_I2C_ClearAllLines(hlcd);
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f7ff ff5b 	bl	8001264 <LCD_I2C_ClearAllLines>

    // Determine total options based on whether a back option is added
    uint8_t totalOptions = backOption ? numItems + 1 : numItems;
 80013ae:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <LCD_I2C_menuTemplate+0x2a>
 80013b6:	78fb      	ldrb	r3, [r7, #3]
 80013b8:	3301      	adds	r3, #1
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	e000      	b.n	80013c0 <LCD_I2C_menuTemplate+0x2c>
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    // Create a local array to hold the menu items
    const char* menuItems[totalOptions];
 80013c4:	f897 103b 	ldrb.w	r1, [r7, #59]	@ 0x3b
 80013c8:	460b      	mov	r3, r1
 80013ca:	3b01      	subs	r3, #1
 80013cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80013ce:	b2cb      	uxtb	r3, r1
 80013d0:	2200      	movs	r2, #0
 80013d2:	4698      	mov	r8, r3
 80013d4:	4691      	mov	r9, r2
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	f04f 0300 	mov.w	r3, #0
 80013de:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80013e2:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80013e6:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80013ea:	b2cb      	uxtb	r3, r1
 80013ec:	2200      	movs	r2, #0
 80013ee:	461c      	mov	r4, r3
 80013f0:	4615      	mov	r5, r2
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	f04f 0300 	mov.w	r3, #0
 80013fa:	016b      	lsls	r3, r5, #5
 80013fc:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001400:	0162      	lsls	r2, r4, #5
 8001402:	460b      	mov	r3, r1
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	3307      	adds	r3, #7
 8001408:	08db      	lsrs	r3, r3, #3
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	ebad 0d03 	sub.w	sp, sp, r3
 8001410:	466b      	mov	r3, sp
 8001412:	3303      	adds	r3, #3
 8001414:	089b      	lsrs	r3, r3, #2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	633b      	str	r3, [r7, #48]	@ 0x30

    // Populate the menu items array, inserting "Back" at index 0 if needed.
    if (backOption) {
 800141a:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 800141e:	2b00      	cmp	r3, #0
 8001420:	d01e      	beq.n	8001460 <LCD_I2C_menuTemplate+0xcc>
        menuItems[0] = "Back";
 8001422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001424:	4a5e      	ldr	r2, [pc, #376]	@ (80015a0 <LCD_I2C_menuTemplate+0x20c>)
 8001426:	601a      	str	r2, [r3, #0]
        for (uint8_t i = 0; i < totalOptions; i++) {
 8001428:	2300      	movs	r3, #0
 800142a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800142e:	e010      	b.n	8001452 <LCD_I2C_menuTemplate+0xbe>
            menuItems[i+1] = displayItems[i];
 8001430:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800143e:	3201      	adds	r2, #1
 8001440:	6819      	ldr	r1, [r3, #0]
 8001442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint8_t i = 0; i < totalOptions; i++) {
 8001448:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800144c:	3301      	adds	r3, #1
 800144e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001452:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8001456:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800145a:	429a      	cmp	r2, r3
 800145c:	d3e8      	bcc.n	8001430 <LCD_I2C_menuTemplate+0x9c>
 800145e:	e019      	b.n	8001494 <LCD_I2C_menuTemplate+0x100>
        }
    } else {
        for (uint8_t i = 0; i < totalOptions; i++) {
 8001460:	2300      	movs	r3, #0
 8001462:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8001466:	e00f      	b.n	8001488 <LCD_I2C_menuTemplate+0xf4>
            menuItems[i] = displayItems[i];
 8001468:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8001476:	6819      	ldr	r1, [r3, #0]
 8001478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800147a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint8_t i = 0; i < totalOptions; i++) {
 800147e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001482:	3301      	adds	r3, #1
 8001484:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8001488:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800148c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001490:	429a      	cmp	r2, r3
 8001492:	d3e9      	bcc.n	8001468 <LCD_I2C_menuTemplate+0xd4>
        }
    }

    uint8_t selectedOption = 0;       // Current selected menu item
 8001494:	2300      	movs	r3, #0
 8001496:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t previousOption = 255;     // Set to an invalid option to force the first update
 800149a:	23ff      	movs	r3, #255	@ 0xff
 800149c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
//        AddBackOption(menuItems, totalOptions);
//    }

    while (1) {
        // Get the current encoder step count (assuming ENC_GetCounter returns a signed value if needed)
        uint32_t encoderStep = ENC_GetCounter(henc);
 80014a0:	68b8      	ldr	r0, [r7, #8]
 80014a2:	f002 f813 	bl	80034cc <ENC_GetCounter>
 80014a6:	62b8      	str	r0, [r7, #40]	@ 0x28

        // Normalize encoder steps to the range of [0, totalOptions-1]
        selectedOption = encoderStep % totalOptions;
 80014a8:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 80014ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80014b2:	fb01 f202 	mul.w	r2, r1, r2
 80014b6:	1a9b      	subs	r3, r3, r2
 80014b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        // (Since selectedOption is unsigned, the check for negative values is unnecessary.)

        // Update the display only if the selection has changed
        if (selectedOption != previousOption) {
 80014bc:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80014c0:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d042      	beq.n	800154e <LCD_I2C_menuTemplate+0x1ba>
            previousOption = selectedOption;
 80014c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014cc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

            // Clear the display lines
            LCD_I2C_ClearAllLines(hlcd);
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f7ff fec7 	bl	8001264 <LCD_I2C_ClearAllLines>

            // Update menu display with the current menu items
            for (uint8_t i = 0; i < totalOptions; i++) {
 80014d6:	2300      	movs	r3, #0
 80014d8:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 80014dc:	e031      	b.n	8001542 <LCD_I2C_menuTemplate+0x1ae>
                LCD_I2C_SetCursor(hlcd, i, 0);
 80014de:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80014e2:	2200      	movs	r2, #0
 80014e4:	4619      	mov	r1, r3
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f7ff fe90 	bl	800120c <LCD_I2C_SetCursor>

                char formattedLine[21];
                if (i == selectedOption) {
 80014ec:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80014f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d10b      	bne.n	8001510 <LCD_I2C_menuTemplate+0x17c>
                    // Highlight the selected item
                    snprintf(formattedLine, sizeof(formattedLine), ">%-19s", menuItems[i]);
 80014f8:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80014fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001502:	f107 0010 	add.w	r0, r7, #16
 8001506:	4a27      	ldr	r2, [pc, #156]	@ (80015a4 <LCD_I2C_menuTemplate+0x210>)
 8001508:	2115      	movs	r1, #21
 800150a:	f014 fdbb 	bl	8016084 <sniprintf>
 800150e:	e00a      	b.n	8001526 <LCD_I2C_menuTemplate+0x192>
                } else {
                    snprintf(formattedLine, sizeof(formattedLine), " %-19s", menuItems[i]);
 8001510:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8001514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800151a:	f107 0010 	add.w	r0, r7, #16
 800151e:	4a22      	ldr	r2, [pc, #136]	@ (80015a8 <LCD_I2C_menuTemplate+0x214>)
 8001520:	2115      	movs	r1, #21
 8001522:	f014 fdaf 	bl	8016084 <sniprintf>
                }
                LCD_I2C_printStr(hlcd, formattedLine);
 8001526:	f107 0310 	add.w	r3, r7, #16
 800152a:	4619      	mov	r1, r3
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f7ff fe33 	bl	8001198 <LCD_I2C_printStr>
                osDelay(1);
 8001532:	2001      	movs	r0, #1
 8001534:	f010 fee9 	bl	801230a <osDelay>
            for (uint8_t i = 0; i < totalOptions; i++) {
 8001538:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800153c:	3301      	adds	r3, #1
 800153e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 8001542:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8001546:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800154a:	429a      	cmp	r2, r3
 800154c:	d3c7      	bcc.n	80014de <LCD_I2C_menuTemplate+0x14a>
            }
        }

        // Check for the selection button press
        bool buttonInput = read_buttons();
 800154e:	f000 f82f 	bl	80015b0 <read_buttons>
 8001552:	4603      	mov	r3, r0
 8001554:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (buttonInput == 0) {
 8001558:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800155c:	f083 0301 	eor.w	r3, r3, #1
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d013      	beq.n	800158e <LCD_I2C_menuTemplate+0x1fa>
            osDelay(200); // Debounce delay
 8001566:	20c8      	movs	r0, #200	@ 0xc8
 8001568:	f010 fecf 	bl	801230a <osDelay>
            if (selectedOption == 0 && backOption) {
 800156c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001570:	2b00      	cmp	r3, #0
 8001572:	d108      	bne.n	8001586 <LCD_I2C_menuTemplate+0x1f2>
 8001574:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8001578:	2b00      	cmp	r3, #0
 800157a:	d004      	beq.n	8001586 <LCD_I2C_menuTemplate+0x1f2>
                currentState = MENU_STATE_PREPARE_MACHINE;
 800157c:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <LCD_I2C_menuTemplate+0x218>)
 800157e:	2206      	movs	r2, #6
 8001580:	701a      	strb	r2, [r3, #0]

                return ;
 8001582:	46b5      	mov	sp, r6
 8001584:	e007      	b.n	8001596 <LCD_I2C_menuTemplate+0x202>
            } else {
                return selectedOption;
 8001586:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800158a:	46b5      	mov	sp, r6
 800158c:	e003      	b.n	8001596 <LCD_I2C_menuTemplate+0x202>
            }
        }

        // Delay for smoother updates
        osDelay(100);
 800158e:	2064      	movs	r0, #100	@ 0x64
 8001590:	f010 febb 	bl	801230a <osDelay>
    while (1) {
 8001594:	e784      	b.n	80014a0 <LCD_I2C_menuTemplate+0x10c>
    }
}
 8001596:	4618      	mov	r0, r3
 8001598:	3744      	adds	r7, #68	@ 0x44
 800159a:	46bd      	mov	sp, r7
 800159c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015a0:	0801848c 	.word	0x0801848c
 80015a4:	08018494 	.word	0x08018494
 80015a8:	0801849c 	.word	0x0801849c
 80015ac:	20002354 	.word	0x20002354

080015b0 <read_buttons>:
//}



bool read_buttons(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(EncoderBtn_GPIO_Port, EncoderBtn_Pin) == GPIO_PIN_SET) return 1; // Down
 80015b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015b8:	4805      	ldr	r0, [pc, #20]	@ (80015d0 <read_buttons+0x20>)
 80015ba:	f006 faf1 	bl	8007ba0 <HAL_GPIO_ReadPin>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d101      	bne.n	80015c8 <read_buttons+0x18>
 80015c4:	2301      	movs	r3, #1
 80015c6:	e000      	b.n	80015ca <read_buttons+0x1a>
    else return 0;
 80015c8:	2300      	movs	r3, #0

}
 80015ca:	4618      	mov	r0, r3
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40020c00 	.word	0x40020c00

080015d4 <MountSDCard>:


FRESULT MountSDCard(FATFS* FatFs) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
    return f_mount(FatFs, "", 1);
 80015dc:	2201      	movs	r2, #1
 80015de:	4904      	ldr	r1, [pc, #16]	@ (80015f0 <MountSDCard+0x1c>)
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f00f fc79 	bl	8010ed8 <f_mount>
 80015e6:	4603      	mov	r3, r0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	080184a4 	.word	0x080184a4

080015f4 <OpenRootDir>:

FRESULT OpenRootDir(DIR* dir) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
    return f_opendir(dir, "/");
 80015fc:	4904      	ldr	r1, [pc, #16]	@ (8001610 <OpenRootDir+0x1c>)
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f010 fb53 	bl	8011caa <f_opendir>
 8001604:	4603      	mov	r3, r0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	080184a8 	.word	0x080184a8

08001614 <ReadFiles>:

uint8_t ReadFiles(DIR* dir, char fileList[][20 + 1], uint8_t maxFiles) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b0cc      	sub	sp, #304	@ 0x130
 8001618:	af00      	add	r7, sp, #0
 800161a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800161e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001622:	6018      	str	r0, [r3, #0]
 8001624:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001628:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800162c:	6019      	str	r1, [r3, #0]
 800162e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001632:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8001636:	701a      	strb	r2, [r3, #0]
    FILINFO fno;
    uint8_t count = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    FRESULT fres;

    while (count < maxFiles) {
 800163e:	e039      	b.n	80016b4 <ReadFiles+0xa0>
        fres = f_readdir(dir, &fno);
 8001640:	f107 0214 	add.w	r2, r7, #20
 8001644:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001648:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800164c:	4611      	mov	r1, r2
 800164e:	6818      	ldr	r0, [r3, #0]
 8001650:	f010 fc1b 	bl	8011e8a <f_readdir>
 8001654:	4603      	mov	r3, r0
 8001656:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
        if (fres != FR_OK || fno.fname[0] == '\0') break;
 800165a:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800165e:	2b00      	cmp	r3, #0
 8001660:	d131      	bne.n	80016c6 <ReadFiles+0xb2>
 8001662:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001666:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800166a:	7d9b      	ldrb	r3, [r3, #22]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d02a      	beq.n	80016c6 <ReadFiles+0xb2>
        if (!(fno.fattrib & AM_DIR)) {
 8001670:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001674:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001678:	7a1b      	ldrb	r3, [r3, #8]
 800167a:	f003 0310 	and.w	r3, r3, #16
 800167e:	2b00      	cmp	r3, #0
 8001680:	d118      	bne.n	80016b4 <ReadFiles+0xa0>
            snprintf(fileList[count], 20 + 1, "%-20s", fno.fname);
 8001682:	f897 212f 	ldrb.w	r2, [r7, #303]	@ 0x12f
 8001686:	4613      	mov	r3, r2
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4413      	add	r3, r2
 800168c:	00da      	lsls	r2, r3, #3
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8001694:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8001698:	6812      	ldr	r2, [r2, #0]
 800169a:	18d0      	adds	r0, r2, r3
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	3316      	adds	r3, #22
 80016a2:	4a0c      	ldr	r2, [pc, #48]	@ (80016d4 <ReadFiles+0xc0>)
 80016a4:	2115      	movs	r1, #21
 80016a6:	f014 fced 	bl	8016084 <sniprintf>
            count++;
 80016aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80016ae:	3301      	adds	r3, #1
 80016b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    while (count < maxFiles) {
 80016b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80016b8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80016bc:	f897 212f 	ldrb.w	r2, [r7, #303]	@ 0x12f
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d3bc      	bcc.n	8001640 <ReadFiles+0x2c>
        }
    }

    return count;
 80016c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	080184ac 	.word	0x080184ac

080016d8 <DisplayMenu>:

void AddBackOption(char menuItems[][20 + 1], uint8_t index) {
    snprintf(menuItems[index], 20 + 1, "%-20s", "Back");
}

void DisplayMenu(LCD_I2C_HandleTypeDef* hlcd, char fileList[][20 + 1], uint8_t fileCount, uint8_t selectedIndex) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08c      	sub	sp, #48	@ 0x30
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	4611      	mov	r1, r2
 80016e4:	461a      	mov	r2, r3
 80016e6:	460b      	mov	r3, r1
 80016e8:	71fb      	strb	r3, [r7, #7]
 80016ea:	4613      	mov	r3, r2
 80016ec:	71bb      	strb	r3, [r7, #6]
    // Clear the LCD
    for (uint8_t i = 0; i < LCD_ROWS; i++) {
 80016ee:	2300      	movs	r3, #0
 80016f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80016f4:	e00f      	b.n	8001716 <DisplayMenu+0x3e>
        LCD_I2C_SetCursor(hlcd, i, 0);
 80016f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016fa:	2200      	movs	r2, #0
 80016fc:	4619      	mov	r1, r3
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f7ff fd84 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "                    "); // Clear line
 8001704:	493d      	ldr	r1, [pc, #244]	@ (80017fc <DisplayMenu+0x124>)
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f7ff fd46 	bl	8001198 <LCD_I2C_printStr>
    for (uint8_t i = 0; i < LCD_ROWS; i++) {
 800170c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001710:	3301      	adds	r3, #1
 8001712:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001716:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800171a:	2b03      	cmp	r3, #3
 800171c:	d9eb      	bls.n	80016f6 <DisplayMenu+0x1e>
    }

    // Determine the window of files to display
    uint8_t startIdx = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    if (selectedIndex >= LCD_ROWS) {
 8001724:	79bb      	ldrb	r3, [r7, #6]
 8001726:	2b03      	cmp	r3, #3
 8001728:	d903      	bls.n	8001732 <DisplayMenu+0x5a>
        startIdx = selectedIndex - (LCD_ROWS - 1);
 800172a:	79bb      	ldrb	r3, [r7, #6]
 800172c:	3b03      	subs	r3, #3
 800172e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    }

    for (uint8_t i = 0; i < LCD_ROWS; i++) {
 8001732:	2300      	movs	r3, #0
 8001734:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001738:	e057      	b.n	80017ea <DisplayMenu+0x112>
        uint8_t displayIdx = startIdx + i;
 800173a:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800173e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001742:	4413      	add	r3, r2
 8001744:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        if (displayIdx >= fileCount) {
 8001748:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	429a      	cmp	r2, r3
 8001750:	d30b      	bcc.n	800176a <DisplayMenu+0x92>
            // Clear remaining lines if any
            LCD_I2C_SetCursor(hlcd, i, 0);
 8001752:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001756:	2200      	movs	r2, #0
 8001758:	4619      	mov	r1, r3
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f7ff fd56 	bl	800120c <LCD_I2C_SetCursor>
            LCD_I2C_printStr(hlcd, "                    ");
 8001760:	4926      	ldr	r1, [pc, #152]	@ (80017fc <DisplayMenu+0x124>)
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f7ff fd18 	bl	8001198 <LCD_I2C_printStr>
 8001768:	e03a      	b.n	80017e0 <DisplayMenu+0x108>
            continue;
        }

        // Prepare the formatted line with cursor
        char formattedLine[20 + 1] = {0};
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	f107 0318 	add.w	r3, r7, #24
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
 800177c:	741a      	strb	r2, [r3, #16]
        if (displayIdx == selectedIndex) {
 800177e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001782:	79bb      	ldrb	r3, [r7, #6]
 8001784:	429a      	cmp	r2, r3
 8001786:	d10f      	bne.n	80017a8 <DisplayMenu+0xd0>
            snprintf(formattedLine, sizeof(formattedLine), "> %-19s", fileList[displayIdx]);
 8001788:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800178c:	4613      	mov	r3, r2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4413      	add	r3, r2
 8001792:	00da      	lsls	r2, r3, #3
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	4413      	add	r3, r2
 800179a:	f107 0014 	add.w	r0, r7, #20
 800179e:	4a18      	ldr	r2, [pc, #96]	@ (8001800 <DisplayMenu+0x128>)
 80017a0:	2115      	movs	r1, #21
 80017a2:	f014 fc6f 	bl	8016084 <sniprintf>
 80017a6:	e00e      	b.n	80017c6 <DisplayMenu+0xee>
        } else {
            snprintf(formattedLine, sizeof(formattedLine), "  %-19s", fileList[displayIdx]);
 80017a8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80017ac:	4613      	mov	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4413      	add	r3, r2
 80017b2:	00da      	lsls	r2, r3, #3
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	4413      	add	r3, r2
 80017ba:	f107 0014 	add.w	r0, r7, #20
 80017be:	4a11      	ldr	r2, [pc, #68]	@ (8001804 <DisplayMenu+0x12c>)
 80017c0:	2115      	movs	r1, #21
 80017c2:	f014 fc5f 	bl	8016084 <sniprintf>
        }

        // Write to the LCD
        LCD_I2C_SetCursor(hlcd, i, 0);
 80017c6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80017ca:	2200      	movs	r2, #0
 80017cc:	4619      	mov	r1, r3
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f7ff fd1c 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, formattedLine);
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4619      	mov	r1, r3
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f7ff fcdc 	bl	8001198 <LCD_I2C_printStr>
    for (uint8_t i = 0; i < LCD_ROWS; i++) {
 80017e0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80017e4:	3301      	adds	r3, #1
 80017e6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80017ea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d9a3      	bls.n	800173a <DisplayMenu+0x62>
    }
}
 80017f2:	bf00      	nop
 80017f4:	bf00      	nop
 80017f6:	3730      	adds	r7, #48	@ 0x30
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	080183f4 	.word	0x080183f4
 8001800:	080184b4 	.word	0x080184b4
 8001804:	080184bc 	.word	0x080184bc

08001808 <LCD_I2C_DisplaySDMenu>:

void LCD_I2C_DisplaySDMenu(LCD_I2C_HandleTypeDef* hlcd, ENC_Handle_TypeDef* henc) {
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	f2ad 4d5c 	subw	sp, sp, #1116	@ 0x45c
 800180e:	af00      	add	r7, sp, #0
 8001810:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001814:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001818:	6018      	str	r0, [r3, #0]
 800181a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800181e:	f5a3 638b 	sub.w	r3, r3, #1112	@ 0x458
 8001822:	6019      	str	r1, [r3, #0]
    FATFS FatFs;
    FRESULT fres;
    DIR dir;
    char fileList[MAX_FILES + 1][20 + 1]; // +1 for "Back"
    char fileListBackoption[MAX_FILES + 1][20 + 1]; // +1 for "Back"
    uint8_t fileCount = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	f887 344b 	strb.w	r3, [r7, #1099]	@ 0x44b

    fres = MountSDCard(&FatFs);
 800182a:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fed0 	bl	80015d4 <MountSDCard>
 8001834:	4603      	mov	r3, r0
 8001836:	f887 344a 	strb.w	r3, [r7, #1098]	@ 0x44a
    if (fres != FR_OK) {
 800183a:	f897 344a 	ldrb.w	r3, [r7, #1098]	@ 0x44a
 800183e:	2b00      	cmp	r3, #0
 8001840:	d01c      	beq.n	800187c <LCD_I2C_DisplaySDMenu+0x74>
    	LCD_I2C_ClearAllLines(hlcd);
 8001842:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001846:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	f7ff fd0a 	bl	8001264 <LCD_I2C_ClearAllLines>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 8001850:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001854:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001858:	2200      	movs	r2, #0
 800185a:	2100      	movs	r1, #0
 800185c:	6818      	ldr	r0, [r3, #0]
 800185e:	f7ff fcd5 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "Failed to mount");
 8001862:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001866:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 800186a:	49d8      	ldr	r1, [pc, #864]	@ (8001bcc <LCD_I2C_DisplaySDMenu+0x3c4>)
 800186c:	6818      	ldr	r0, [r3, #0]
 800186e:	f7ff fc93 	bl	8001198 <LCD_I2C_printStr>
        HAL_Delay(2000);
 8001872:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001876:	f005 fad7 	bl	8006e28 <HAL_Delay>
        return;
 800187a:	e1a3      	b.n	8001bc4 <LCD_I2C_DisplaySDMenu+0x3bc>
    }
    else{
    fres = OpenRootDir(&dir);
 800187c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff feb7 	bl	80015f4 <OpenRootDir>
 8001886:	4603      	mov	r3, r0
 8001888:	f887 344a 	strb.w	r3, [r7, #1098]	@ 0x44a
    if (fres != FR_OK) {
 800188c:	f897 344a 	ldrb.w	r3, [r7, #1098]	@ 0x44a
 8001890:	2b00      	cmp	r3, #0
 8001892:	d021      	beq.n	80018d8 <LCD_I2C_DisplaySDMenu+0xd0>
    	LCD_I2C_ClearAllLines(hlcd);
 8001894:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001898:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 800189c:	6818      	ldr	r0, [r3, #0]
 800189e:	f7ff fce1 	bl	8001264 <LCD_I2C_ClearAllLines>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 80018a2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80018a6:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 80018aa:	2200      	movs	r2, #0
 80018ac:	2100      	movs	r1, #0
 80018ae:	6818      	ldr	r0, [r3, #0]
 80018b0:	f7ff fcac 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "Open dir failed");
 80018b4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80018b8:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 80018bc:	49c4      	ldr	r1, [pc, #784]	@ (8001bd0 <LCD_I2C_DisplaySDMenu+0x3c8>)
 80018be:	6818      	ldr	r0, [r3, #0]
 80018c0:	f7ff fc6a 	bl	8001198 <LCD_I2C_printStr>
        f_mount(NULL, "", 0);
 80018c4:	2200      	movs	r2, #0
 80018c6:	49c3      	ldr	r1, [pc, #780]	@ (8001bd4 <LCD_I2C_DisplaySDMenu+0x3cc>)
 80018c8:	2000      	movs	r0, #0
 80018ca:	f00f fb05 	bl	8010ed8 <f_mount>
        HAL_Delay(2000);
 80018ce:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80018d2:	f005 faa9 	bl	8006e28 <HAL_Delay>
        return;
 80018d6:	e175      	b.n	8001bc4 <LCD_I2C_DisplaySDMenu+0x3bc>
    }

    fileCount = ReadFiles(&dir, fileList, MAX_FILES);
 80018d8:	f107 01f0 	add.w	r1, r7, #240	@ 0xf0
 80018dc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80018e0:	220a      	movs	r2, #10
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fe96 	bl	8001614 <ReadFiles>
 80018e8:	4603      	mov	r3, r0
 80018ea:	f887 344b 	strb.w	r3, [r7, #1099]	@ 0x44b
    f_closedir(&dir);
 80018ee:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80018f2:	4618      	mov	r0, r3
 80018f4:	f010 fa9e 	bl	8011e34 <f_closedir>
    f_mount(NULL, "", 0);
 80018f8:	2200      	movs	r2, #0
 80018fa:	49b6      	ldr	r1, [pc, #728]	@ (8001bd4 <LCD_I2C_DisplaySDMenu+0x3cc>)
 80018fc:	2000      	movs	r0, #0
 80018fe:	f00f faeb 	bl	8010ed8 <f_mount>

    // Add "Back" option

    strncpy(fileListBackoption[0], "Back", 20);
 8001902:	f107 0308 	add.w	r3, r7, #8
 8001906:	2214      	movs	r2, #20
 8001908:	49b3      	ldr	r1, [pc, #716]	@ (8001bd8 <LCD_I2C_DisplaySDMenu+0x3d0>)
 800190a:	4618      	mov	r0, r3
 800190c:	f014 fc83 	bl	8016216 <strncpy>
    for (uint8_t i = 0; i < fileCount; i++) {
 8001910:	2300      	movs	r3, #0
 8001912:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 8001916:	e02d      	b.n	8001974 <LCD_I2C_DisplaySDMenu+0x16c>
    	strncpy(fileListBackoption[i + 1], fileList[i], 20);
 8001918:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800191c:	1c5a      	adds	r2, r3, #1
 800191e:	f107 0108 	add.w	r1, r7, #8
 8001922:	4613      	mov	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4413      	add	r3, r2
 8001928:	00da      	lsls	r2, r3, #3
 800192a:	1ad2      	subs	r2, r2, r3
 800192c:	1888      	adds	r0, r1, r2
 800192e:	f897 2457 	ldrb.w	r2, [r7, #1111]	@ 0x457
 8001932:	f107 01f0 	add.w	r1, r7, #240	@ 0xf0
 8001936:	4613      	mov	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4413      	add	r3, r2
 800193c:	00da      	lsls	r2, r3, #3
 800193e:	1ad2      	subs	r2, r2, r3
 8001940:	188b      	adds	r3, r1, r2
 8001942:	2214      	movs	r2, #20
 8001944:	4619      	mov	r1, r3
 8001946:	f014 fc66 	bl	8016216 <strncpy>
    	fileListBackoption[i + 1][20] = '\0'; // Explicitly null-terminate
 800194a:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001954:	f5a3 618a 	sub.w	r1, r3, #1104	@ 0x450
 8001958:	4613      	mov	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4413      	add	r3, r2
 800195e:	00da      	lsls	r2, r3, #3
 8001960:	1ad2      	subs	r2, r2, r3
 8001962:	188b      	adds	r3, r1, r2
 8001964:	3314      	adds	r3, #20
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < fileCount; i++) {
 800196a:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800196e:	3301      	adds	r3, #1
 8001970:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 8001974:	f897 2457 	ldrb.w	r2, [r7, #1111]	@ 0x457
 8001978:	f897 344b 	ldrb.w	r3, [r7, #1099]	@ 0x44b
 800197c:	429a      	cmp	r2, r3
 800197e:	d3cb      	bcc.n	8001918 <LCD_I2C_DisplaySDMenu+0x110>
        }
    fileCount++;
 8001980:	f897 344b 	ldrb.w	r3, [r7, #1099]	@ 0x44b
 8001984:	3301      	adds	r3, #1
 8001986:	f887 344b 	strb.w	r3, [r7, #1099]	@ 0x44b
   // AddBackOption(fileList, 0);

    if (fileCount == 1) { // Only "Back" is available
 800198a:	f897 344b 	ldrb.w	r3, [r7, #1099]	@ 0x44b
 800198e:	2b01      	cmp	r3, #1
 8001990:	d115      	bne.n	80019be <LCD_I2C_DisplaySDMenu+0x1b6>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 8001992:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001996:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 800199a:	2200      	movs	r2, #0
 800199c:	2100      	movs	r1, #0
 800199e:	6818      	ldr	r0, [r3, #0]
 80019a0:	f7ff fc34 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "No files found");
 80019a4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80019a8:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 80019ac:	498b      	ldr	r1, [pc, #556]	@ (8001bdc <LCD_I2C_DisplaySDMenu+0x3d4>)
 80019ae:	6818      	ldr	r0, [r3, #0]
 80019b0:	f7ff fbf2 	bl	8001198 <LCD_I2C_printStr>
        HAL_Delay(2000);
 80019b4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80019b8:	f005 fa36 	bl	8006e28 <HAL_Delay>
        return;
 80019bc:	e102      	b.n	8001bc4 <LCD_I2C_DisplaySDMenu+0x3bc>
    }

    uint8_t selectedIndex = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	f887 3449 	strb.w	r3, [r7, #1097]	@ 0x449
    uint8_t previousIndex = 255;
 80019c4:	23ff      	movs	r3, #255	@ 0xff
 80019c6:	f887 3456 	strb.w	r3, [r7, #1110]	@ 0x456

    while (1) {
        uint32_t encoderStep = ENC_GetCounter(henc);
 80019ca:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80019ce:	f5a3 638b 	sub.w	r3, r3, #1112	@ 0x458
 80019d2:	6818      	ldr	r0, [r3, #0]
 80019d4:	f001 fd7a 	bl	80034cc <ENC_GetCounter>
 80019d8:	f8c7 0444 	str.w	r0, [r7, #1092]	@ 0x444
        selectedIndex = encoderStep % fileCount;
 80019dc:	f897 244b 	ldrb.w	r2, [r7, #1099]	@ 0x44b
 80019e0:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 80019e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80019e8:	fb01 f202 	mul.w	r2, r1, r2
 80019ec:	1a9b      	subs	r3, r3, r2
 80019ee:	f887 3449 	strb.w	r3, [r7, #1097]	@ 0x449

        if (selectedIndex != previousIndex) {
 80019f2:	f897 2449 	ldrb.w	r2, [r7, #1097]	@ 0x449
 80019f6:	f897 3456 	ldrb.w	r3, [r7, #1110]	@ 0x456
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d010      	beq.n	8001a20 <LCD_I2C_DisplaySDMenu+0x218>
            previousIndex = selectedIndex;
 80019fe:	f897 3449 	ldrb.w	r3, [r7, #1097]	@ 0x449
 8001a02:	f887 3456 	strb.w	r3, [r7, #1110]	@ 0x456
            DisplayMenu(hlcd, fileListBackoption, fileCount, selectedIndex);
 8001a06:	f897 3449 	ldrb.w	r3, [r7, #1097]	@ 0x449
 8001a0a:	f897 244b 	ldrb.w	r2, [r7, #1099]	@ 0x44b
 8001a0e:	f107 0108 	add.w	r1, r7, #8
 8001a12:	f507 608b 	add.w	r0, r7, #1112	@ 0x458
 8001a16:	f2a0 4054 	subw	r0, r0, #1108	@ 0x454
 8001a1a:	6800      	ldr	r0, [r0, #0]
 8001a1c:	f7ff fe5c 	bl	80016d8 <DisplayMenu>
        }

        // Handle button press for selection
        if (read_buttons() == 0) {
 8001a20:	f7ff fdc6 	bl	80015b0 <read_buttons>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f083 0301 	eor.w	r3, r3, #1
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 80c4 	beq.w	8001bba <LCD_I2C_DisplaySDMenu+0x3b2>
            HAL_Delay(200); // Debounce
 8001a32:	20c8      	movs	r0, #200	@ 0xc8
 8001a34:	f005 f9f8 	bl	8006e28 <HAL_Delay>
            // Clear the LCD
            for (uint8_t i = 0; i < LCD_ROWS; i++) {
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f887 3455 	strb.w	r3, [r7, #1109]	@ 0x455
 8001a3e:	e016      	b.n	8001a6e <LCD_I2C_DisplaySDMenu+0x266>
                LCD_I2C_SetCursor(hlcd, i, 0);
 8001a40:	f897 1455 	ldrb.w	r1, [r7, #1109]	@ 0x455
 8001a44:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001a48:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	6818      	ldr	r0, [r3, #0]
 8001a50:	f7ff fbdc 	bl	800120c <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "                    "); // Clear line
 8001a54:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001a58:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001a5c:	4960      	ldr	r1, [pc, #384]	@ (8001be0 <LCD_I2C_DisplaySDMenu+0x3d8>)
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	f7ff fb9a 	bl	8001198 <LCD_I2C_printStr>
            for (uint8_t i = 0; i < LCD_ROWS; i++) {
 8001a64:	f897 3455 	ldrb.w	r3, [r7, #1109]	@ 0x455
 8001a68:	3301      	adds	r3, #1
 8001a6a:	f887 3455 	strb.w	r3, [r7, #1109]	@ 0x455
 8001a6e:	f897 3455 	ldrb.w	r3, [r7, #1109]	@ 0x455
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d9e4      	bls.n	8001a40 <LCD_I2C_DisplaySDMenu+0x238>
            }

            if (selectedIndex == 0 ) {
 8001a76:	f897 3449 	ldrb.w	r3, [r7, #1097]	@ 0x449
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 80a1 	beq.w	8001bc2 <LCD_I2C_DisplaySDMenu+0x3ba>
                // "Back" selected
                return; // Exit the menu to go back to the previous menu
            } else {
                // "Loading..." selected
                LCD_I2C_SetCursor(hlcd, 0, 0);
 8001a80:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001a84:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	6818      	ldr	r0, [r3, #0]
 8001a8e:	f7ff fbbd 	bl	800120c <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "Loading...");
 8001a92:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001a96:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001a9a:	4952      	ldr	r1, [pc, #328]	@ (8001be4 <LCD_I2C_DisplaySDMenu+0x3dc>)
 8001a9c:	6818      	ldr	r0, [r3, #0]
 8001a9e:	f7ff fb7b 	bl	8001198 <LCD_I2C_printStr>
                char* start = fileListBackoption[selectedIndex];
 8001aa2:	f897 2449 	ldrb.w	r2, [r7, #1097]	@ 0x449
 8001aa6:	f107 0108 	add.w	r1, r7, #8
 8001aaa:	4613      	mov	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4413      	add	r3, r2
 8001ab0:	00da      	lsls	r2, r3, #3
 8001ab2:	1ad2      	subs	r2, r2, r3
 8001ab4:	188b      	adds	r3, r1, r2
 8001ab6:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
                while (*start == ' ' || *start == '\t' || *start == '\n' || *start == '\r') {
 8001aba:	e004      	b.n	8001ac6 <LCD_I2C_DisplaySDMenu+0x2be>
                    start++; // Skip leading spaces/tabs/newlines
 8001abc:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
                while (*start == ' ' || *start == '\t' || *start == '\n' || *start == '\r') {
 8001ac6:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b20      	cmp	r3, #32
 8001ace:	d0f5      	beq.n	8001abc <LCD_I2C_DisplaySDMenu+0x2b4>
 8001ad0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b09      	cmp	r3, #9
 8001ad8:	d0f0      	beq.n	8001abc <LCD_I2C_DisplaySDMenu+0x2b4>
 8001ada:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b0a      	cmp	r3, #10
 8001ae2:	d0eb      	beq.n	8001abc <LCD_I2C_DisplaySDMenu+0x2b4>
 8001ae4:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b0d      	cmp	r3, #13
 8001aec:	d0e6      	beq.n	8001abc <LCD_I2C_DisplaySDMenu+0x2b4>
                }

                char* end = start + strlen(start) - 1;
 8001aee:	f8d7 0450 	ldr.w	r0, [r7, #1104]	@ 0x450
 8001af2:	f7fe fb8d 	bl	8000210 <strlen>
 8001af6:	4603      	mov	r3, r0
 8001af8:	3b01      	subs	r3, #1
 8001afa:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 8001afe:	4413      	add	r3, r2
 8001b00:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
                while (end >= start && (*end == ' ' || *end == '\t' || *end == '\n' || *end == '\r')) {
 8001b04:	e008      	b.n	8001b18 <LCD_I2C_DisplaySDMenu+0x310>
                    *end = '\0'; // Remove trailing spaces/tabs/newlines
 8001b06:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
                    end--;
 8001b0e:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 8001b12:	3b01      	subs	r3, #1
 8001b14:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
                while (end >= start && (*end == ' ' || *end == '\t' || *end == '\n' || *end == '\r')) {
 8001b18:	f8d7 244c 	ldr.w	r2, [r7, #1100]	@ 0x44c
 8001b1c:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d313      	bcc.n	8001b4c <LCD_I2C_DisplaySDMenu+0x344>
 8001b24:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b20      	cmp	r3, #32
 8001b2c:	d0eb      	beq.n	8001b06 <LCD_I2C_DisplaySDMenu+0x2fe>
 8001b2e:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b09      	cmp	r3, #9
 8001b36:	d0e6      	beq.n	8001b06 <LCD_I2C_DisplaySDMenu+0x2fe>
 8001b38:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b0a      	cmp	r3, #10
 8001b40:	d0e1      	beq.n	8001b06 <LCD_I2C_DisplaySDMenu+0x2fe>
 8001b42:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b0d      	cmp	r3, #13
 8001b4a:	d0dc      	beq.n	8001b06 <LCD_I2C_DisplaySDMenu+0x2fe>
                }

                // Move the trimmed string into the original buffer
                if (start != fileListBackoption[selectedIndex]) {
 8001b4c:	f897 2449 	ldrb.w	r2, [r7, #1097]	@ 0x449
 8001b50:	f107 0108 	add.w	r1, r7, #8
 8001b54:	4613      	mov	r3, r2
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	4413      	add	r3, r2
 8001b5a:	00da      	lsls	r2, r3, #3
 8001b5c:	1ad2      	subs	r2, r2, r3
 8001b5e:	188b      	adds	r3, r1, r2
 8001b60:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d015      	beq.n	8001b94 <LCD_I2C_DisplaySDMenu+0x38c>
                    memmove(fileListBackoption[selectedIndex], start, strlen(start) + 1);
 8001b68:	f897 2449 	ldrb.w	r2, [r7, #1097]	@ 0x449
 8001b6c:	f107 0108 	add.w	r1, r7, #8
 8001b70:	4613      	mov	r3, r2
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4413      	add	r3, r2
 8001b76:	00da      	lsls	r2, r3, #3
 8001b78:	1ad2      	subs	r2, r2, r3
 8001b7a:	188c      	adds	r4, r1, r2
 8001b7c:	f8d7 0450 	ldr.w	r0, [r7, #1104]	@ 0x450
 8001b80:	f7fe fb46 	bl	8000210 <strlen>
 8001b84:	4603      	mov	r3, r0
 8001b86:	3301      	adds	r3, #1
 8001b88:	461a      	mov	r2, r3
 8001b8a:	f8d7 1450 	ldr.w	r1, [r7, #1104]	@ 0x450
 8001b8e:	4620      	mov	r0, r4
 8001b90:	f014 faef 	bl	8016172 <memmove>
                }
                process_file(hlcd, fileListBackoption[selectedIndex]);
 8001b94:	f897 2449 	ldrb.w	r2, [r7, #1097]	@ 0x449
 8001b98:	f107 0108 	add.w	r1, r7, #8
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	4413      	add	r3, r2
 8001ba2:	00da      	lsls	r2, r3, #3
 8001ba4:	1ad2      	subs	r2, r2, r3
 8001ba6:	440a      	add	r2, r1
 8001ba8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001bac:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001bb0:	4611      	mov	r1, r2
 8001bb2:	6818      	ldr	r0, [r3, #0]
 8001bb4:	f000 f818 	bl	8001be8 <process_file>

                // Add your file processing logic here
                return;
 8001bb8:	e004      	b.n	8001bc4 <LCD_I2C_DisplaySDMenu+0x3bc>
            }
        }

        HAL_Delay(100);
 8001bba:	2064      	movs	r0, #100	@ 0x64
 8001bbc:	f005 f934 	bl	8006e28 <HAL_Delay>
    while (1) {
 8001bc0:	e703      	b.n	80019ca <LCD_I2C_DisplaySDMenu+0x1c2>
                return; // Exit the menu to go back to the previous menu
 8001bc2:	bf00      	nop
    }
    }
}
 8001bc4:	f207 475c 	addw	r7, r7, #1116	@ 0x45c
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd90      	pop	{r4, r7, pc}
 8001bcc:	080184c4 	.word	0x080184c4
 8001bd0:	080184d4 	.word	0x080184d4
 8001bd4:	080184a4 	.word	0x080184a4
 8001bd8:	0801848c 	.word	0x0801848c
 8001bdc:	080184e4 	.word	0x080184e4
 8001be0:	080183f4 	.word	0x080183f4
 8001be4:	080184f4 	.word	0x080184f4

08001be8 <process_file>:
void process_file(LCD_I2C_HandleTypeDef* hlcd, const char *filename) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	f5ad 6d90 	sub.w	sp, sp, #1152	@ 0x480
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001bf4:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001bf8:	6018      	str	r0, [r3, #0]
 8001bfa:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001bfe:	f5a3 6390 	sub.w	r3, r3, #1152	@ 0x480
 8001c02:	6019      	str	r1, [r3, #0]
    FATFS FatFs;

    FRESULT fres;
    uint8_t numLines = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 347f 	strb.w	r3, [r7, #1151]	@ 0x47f

    // Mount the SD card
    fres = f_mount(&FatFs, "", 1);
 8001c0a:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 8001c0e:	2201      	movs	r2, #1
 8001c10:	495e      	ldr	r1, [pc, #376]	@ (8001d8c <process_file+0x1a4>)
 8001c12:	4618      	mov	r0, r3
 8001c14:	f00f f960 	bl	8010ed8 <f_mount>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	f887 3477 	strb.w	r3, [r7, #1143]	@ 0x477
    if (fres != FR_OK) {
 8001c1e:	f897 3477 	ldrb.w	r3, [r7, #1143]	@ 0x477
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d018      	beq.n	8001c58 <process_file+0x70>
    	LCD_I2C_ClearAllLines(hlcd);
 8001c26:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001c2a:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	f7ff fb18 	bl	8001264 <LCD_I2C_ClearAllLines>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 8001c34:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001c38:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2100      	movs	r1, #0
 8001c40:	6818      	ldr	r0, [r3, #0]
 8001c42:	f7ff fae3 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "SD mount failed");
 8001c46:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001c4a:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001c4e:	4950      	ldr	r1, [pc, #320]	@ (8001d90 <process_file+0x1a8>)
 8001c50:	6818      	ldr	r0, [r3, #0]
 8001c52:	f7ff faa1 	bl	8001198 <LCD_I2C_printStr>
       // HAL_Delay(2000);
        return;
 8001c56:	e094      	b.n	8001d82 <process_file+0x19a>
    }
    else{
    // Open the file for reading
    FIL file;
    fres = f_open(&file, filename, FA_READ);
 8001c58:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001c5c:	f5a3 6390 	sub.w	r3, r3, #1152	@ 0x480
 8001c60:	f107 000c 	add.w	r0, r7, #12
 8001c64:	2201      	movs	r2, #1
 8001c66:	6819      	ldr	r1, [r3, #0]
 8001c68:	f00f f99a 	bl	8010fa0 <f_open>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f887 3477 	strb.w	r3, [r7, #1143]	@ 0x477
    if (fres != FR_OK) {
 8001c72:	f897 3477 	ldrb.w	r3, [r7, #1143]	@ 0x477
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d067      	beq.n	8001d4a <process_file+0x162>
    	LCD_I2C_ClearAllLines(hlcd);
 8001c7a:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001c7e:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001c82:	6818      	ldr	r0, [r3, #0]
 8001c84:	f7ff faee 	bl	8001264 <LCD_I2C_ClearAllLines>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 8001c88:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001c8c:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001c90:	2200      	movs	r2, #0
 8001c92:	2100      	movs	r1, #0
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	f7ff fab9 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "Open file failed");
 8001c9a:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001c9e:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001ca2:	493c      	ldr	r1, [pc, #240]	@ (8001d94 <process_file+0x1ac>)
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	f7ff fa77 	bl	8001198 <LCD_I2C_printStr>
        f_mount(NULL, "", 1);
 8001caa:	2201      	movs	r2, #1
 8001cac:	4937      	ldr	r1, [pc, #220]	@ (8001d8c <process_file+0x1a4>)
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f00f f912 	bl	8010ed8 <f_mount>
 8001cb4:	e065      	b.n	8001d82 <process_file+0x19a>
    }

    // Read the file line by line and store in the array
    while ((numLines < MAX_LINES) && (f_gets(lines[numLines], MAX_LINE_LENGTH, &file) != NULL)) {
        // Remove trailing newline characters (both '\n' and '\r' if present)
        size_t len = strlen(lines[numLines]);
 8001cb6:	f897 347f 	ldrb.w	r3, [r7, #1151]	@ 0x47f
 8001cba:	019b      	lsls	r3, r3, #6
 8001cbc:	4a36      	ldr	r2, [pc, #216]	@ (8001d98 <process_file+0x1b0>)
 8001cbe:	4413      	add	r3, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe faa5 	bl	8000210 <strlen>
 8001cc6:	f8c7 0478 	str.w	r0, [r7, #1144]	@ 0x478
        if (len > 0 && lines[numLines][len - 1] == '\n') {
 8001cca:	f8d7 3478 	ldr.w	r3, [r7, #1144]	@ 0x478
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d01b      	beq.n	8001d0a <process_file+0x122>
 8001cd2:	f897 247f 	ldrb.w	r2, [r7, #1151]	@ 0x47f
 8001cd6:	f8d7 3478 	ldr.w	r3, [r7, #1144]	@ 0x478
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	492e      	ldr	r1, [pc, #184]	@ (8001d98 <process_file+0x1b0>)
 8001cde:	0192      	lsls	r2, r2, #6
 8001ce0:	440a      	add	r2, r1
 8001ce2:	4413      	add	r3, r2
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b0a      	cmp	r3, #10
 8001ce8:	d10f      	bne.n	8001d0a <process_file+0x122>
            lines[numLines][len - 1] = '\0';
 8001cea:	f897 247f 	ldrb.w	r2, [r7, #1151]	@ 0x47f
 8001cee:	f8d7 3478 	ldr.w	r3, [r7, #1144]	@ 0x478
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	4928      	ldr	r1, [pc, #160]	@ (8001d98 <process_file+0x1b0>)
 8001cf6:	0192      	lsls	r2, r2, #6
 8001cf8:	440a      	add	r2, r1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
            len--;
 8001d00:	f8d7 3478 	ldr.w	r3, [r7, #1144]	@ 0x478
 8001d04:	3b01      	subs	r3, #1
 8001d06:	f8c7 3478 	str.w	r3, [r7, #1144]	@ 0x478
        }
        if (len > 0 && lines[numLines][len - 1] == '\r') {
 8001d0a:	f8d7 3478 	ldr.w	r3, [r7, #1144]	@ 0x478
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d016      	beq.n	8001d40 <process_file+0x158>
 8001d12:	f897 247f 	ldrb.w	r2, [r7, #1151]	@ 0x47f
 8001d16:	f8d7 3478 	ldr.w	r3, [r7, #1144]	@ 0x478
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	491e      	ldr	r1, [pc, #120]	@ (8001d98 <process_file+0x1b0>)
 8001d1e:	0192      	lsls	r2, r2, #6
 8001d20:	440a      	add	r2, r1
 8001d22:	4413      	add	r3, r2
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b0d      	cmp	r3, #13
 8001d28:	d10a      	bne.n	8001d40 <process_file+0x158>
            lines[numLines][len - 1]= '\0';
 8001d2a:	f897 247f 	ldrb.w	r2, [r7, #1151]	@ 0x47f
 8001d2e:	f8d7 3478 	ldr.w	r3, [r7, #1144]	@ 0x478
 8001d32:	3b01      	subs	r3, #1
 8001d34:	4918      	ldr	r1, [pc, #96]	@ (8001d98 <process_file+0x1b0>)
 8001d36:	0192      	lsls	r2, r2, #6
 8001d38:	440a      	add	r2, r1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
        }
        numLines++;
 8001d40:	f897 347f 	ldrb.w	r3, [r7, #1151]	@ 0x47f
 8001d44:	3301      	adds	r3, #1
 8001d46:	f887 347f 	strb.w	r3, [r7, #1151]	@ 0x47f
    while ((numLines < MAX_LINES) && (f_gets(lines[numLines], MAX_LINE_LENGTH, &file) != NULL)) {
 8001d4a:	f897 347f 	ldrb.w	r3, [r7, #1151]	@ 0x47f
 8001d4e:	2b63      	cmp	r3, #99	@ 0x63
 8001d50:	d80d      	bhi.n	8001d6e <process_file+0x186>
 8001d52:	f897 347f 	ldrb.w	r3, [r7, #1151]	@ 0x47f
 8001d56:	019b      	lsls	r3, r3, #6
 8001d58:	4a0f      	ldr	r2, [pc, #60]	@ (8001d98 <process_file+0x1b0>)
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f107 020c 	add.w	r2, r7, #12
 8001d60:	2140      	movs	r1, #64	@ 0x40
 8001d62:	4618      	mov	r0, r3
 8001d64:	f010 f90c 	bl	8011f80 <f_gets>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1a3      	bne.n	8001cb6 <process_file+0xce>
    }
    f_close(&file);
 8001d6e:	f107 030c 	add.w	r3, r7, #12
 8001d72:	4618      	mov	r0, r3
 8001d74:	f00f ff6a 	bl	8011c4c <f_close>
    f_mount(NULL, "", 1);
 8001d78:	2201      	movs	r2, #1
 8001d7a:	4904      	ldr	r1, [pc, #16]	@ (8001d8c <process_file+0x1a4>)
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f00f f8ab 	bl	8010ed8 <f_mount>
    }
}
 8001d82:	f507 6790 	add.w	r7, r7, #1152	@ 0x480
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	080184a4 	.word	0x080184a4
 8001d90:	08018500 	.word	0x08018500
 8001d94:	08018510 	.word	0x08018510
 8001d98:	20000268 	.word	0x20000268

08001d9c <generate_report>:

void generate_report(LCD_I2C_HandleTypeDef* hlcd)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	f2ad 6d5c 	subw	sp, sp, #1628	@ 0x65c
 8001da2:	af04      	add	r7, sp, #16
 8001da4:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8001da8:	f2a3 6344 	subw	r3, r3, #1604	@ 0x644
 8001dac:	6018      	str	r0, [r3, #0]
    // Mount the SD card

	FATFS FatFs;
	FRESULT fres;
	DIR dir;
    fres = MountSDCard(&FatFs);
 8001dae:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff fc0e 	bl	80015d4 <MountSDCard>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f887 3643 	strb.w	r3, [r7, #1603]	@ 0x643
    if (fres != FR_OK) {
 8001dbe:	f897 3643 	ldrb.w	r3, [r7, #1603]	@ 0x643
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d018      	beq.n	8001df8 <generate_report+0x5c>
    	LCD_I2C_ClearAllLines(hlcd);
 8001dc6:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8001dca:	f2a3 6344 	subw	r3, r3, #1604	@ 0x644
 8001dce:	6818      	ldr	r0, [r3, #0]
 8001dd0:	f7ff fa48 	bl	8001264 <LCD_I2C_ClearAllLines>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 8001dd4:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8001dd8:	f2a3 6344 	subw	r3, r3, #1604	@ 0x644
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2100      	movs	r1, #0
 8001de0:	6818      	ldr	r0, [r3, #0]
 8001de2:	f7ff fa13 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "SD mount failed");
 8001de6:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8001dea:	f2a3 6344 	subw	r3, r3, #1604	@ 0x644
 8001dee:	4985      	ldr	r1, [pc, #532]	@ (8002004 <generate_report+0x268>)
 8001df0:	6818      	ldr	r0, [r3, #0]
 8001df2:	f7ff f9d1 	bl	8001198 <LCD_I2C_printStr>
        return;
 8001df6:	e101      	b.n	8001ffc <generate_report+0x260>
    }
    else{
    const char *reportFilename = "test13.txt";
 8001df8:	4b83      	ldr	r3, [pc, #524]	@ (8002008 <generate_report+0x26c>)
 8001dfa:	f8c7 363c 	str.w	r3, [r7, #1596]	@ 0x63c
	FIL file;

    // Open (or create) the report file for writing
    fres = f_open(&file, reportFilename, FA_WRITE | FA_CREATE_ALWAYS);
 8001dfe:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8001e02:	220a      	movs	r2, #10
 8001e04:	f8d7 163c 	ldr.w	r1, [r7, #1596]	@ 0x63c
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f00f f8c9 	bl	8010fa0 <f_open>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	f887 3643 	strb.w	r3, [r7, #1603]	@ 0x643
    if (fres != FR_OK) {
 8001e14:	f897 3643 	ldrb.w	r3, [r7, #1603]	@ 0x643
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d01d      	beq.n	8001e58 <generate_report+0xbc>
    	LCD_I2C_ClearAllLines(hlcd);
 8001e1c:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8001e20:	f2a3 6344 	subw	r3, r3, #1604	@ 0x644
 8001e24:	6818      	ldr	r0, [r3, #0]
 8001e26:	f7ff fa1d 	bl	8001264 <LCD_I2C_ClearAllLines>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 8001e2a:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8001e2e:	f2a3 6344 	subw	r3, r3, #1604	@ 0x644
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	6818      	ldr	r0, [r3, #0]
 8001e38:	f7ff f9e8 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "Report file open failed");
 8001e3c:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8001e40:	f2a3 6344 	subw	r3, r3, #1604	@ 0x644
 8001e44:	4971      	ldr	r1, [pc, #452]	@ (800200c <generate_report+0x270>)
 8001e46:	6818      	ldr	r0, [r3, #0]
 8001e48:	f7ff f9a6 	bl	8001198 <LCD_I2C_printStr>
        f_mount(NULL, "", 1);
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	4970      	ldr	r1, [pc, #448]	@ (8002010 <generate_report+0x274>)
 8001e50:	2000      	movs	r0, #0
 8001e52:	f00f f841 	bl	8010ed8 <f_mount>
 8001e56:	e0d1      	b.n	8001ffc <generate_report+0x260>
        return;
    }
    UINT bw;
    // Write the header line
    const char *header = "  Net           Test Points          Test result\r\n";
 8001e58:	4b6e      	ldr	r3, [pc, #440]	@ (8002014 <generate_report+0x278>)
 8001e5a:	f8c7 3638 	str.w	r3, [r7, #1592]	@ 0x638
    f_write(&file, header, strlen(header), &bw);
 8001e5e:	f8d7 0638 	ldr.w	r0, [r7, #1592]	@ 0x638
 8001e62:	f7fe f9d5 	bl	8000210 <strlen>
 8001e66:	4602      	mov	r2, r0
 8001e68:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8001e6c:	f507 70cc 	add.w	r0, r7, #408	@ 0x198
 8001e70:	f8d7 1638 	ldr.w	r1, [r7, #1592]	@ 0x638
 8001e74:	f00f fcbd 	bl	80117f2 <f_write>
    char resultStr[10][40];

            for(int i =0 ; i < commandsGcode;i++){
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f8c7 3644 	str.w	r3, [r7, #1604]	@ 0x644
 8001e7e:	e0a1      	b.n	8001fc4 <generate_report+0x228>
                snprintf(testPointsStr[i], sizeof(testPointsStr[i]), "%.d, %.d, %.d, %.d",
 8001e80:	f8d7 2644 	ldr.w	r2, [r7, #1604]	@ 0x644
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4a62      	ldr	r2, [pc, #392]	@ (8002018 <generate_report+0x27c>)
 8001e8e:	1898      	adds	r0, r3, r2
                         (int)coordinates[i].x, (int)coordinates[i].y,
 8001e90:	4a62      	ldr	r2, [pc, #392]	@ (800201c <generate_report+0x280>)
 8001e92:	f8d7 3644 	ldr.w	r3, [r7, #1604]	@ 0x644
 8001e96:	015b      	lsls	r3, r3, #5
 8001e98:	4413      	add	r3, r2
 8001e9a:	edd3 7a00 	vldr	s15, [r3]
                snprintf(testPointsStr[i], sizeof(testPointsStr[i]), "%.d, %.d, %.d, %.d",
 8001e9e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
                         (int)coordinates[i].x, (int)coordinates[i].y,
 8001ea2:	4a5e      	ldr	r2, [pc, #376]	@ (800201c <generate_report+0x280>)
 8001ea4:	f8d7 3644 	ldr.w	r3, [r7, #1604]	@ 0x644
 8001ea8:	015b      	lsls	r3, r3, #5
 8001eaa:	4413      	add	r3, r2
 8001eac:	3304      	adds	r3, #4
 8001eae:	edd3 7a00 	vldr	s15, [r3]
                snprintf(testPointsStr[i], sizeof(testPointsStr[i]), "%.d, %.d, %.d, %.d",
 8001eb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eb6:	ee17 1a90 	vmov	r1, s15
                         (int)coordinates[i+1].x, (int)coordinates[i+1].y);
 8001eba:	f8d7 3644 	ldr.w	r3, [r7, #1604]	@ 0x644
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	4a56      	ldr	r2, [pc, #344]	@ (800201c <generate_report+0x280>)
 8001ec2:	015b      	lsls	r3, r3, #5
 8001ec4:	4413      	add	r3, r2
 8001ec6:	edd3 7a00 	vldr	s15, [r3]
                snprintf(testPointsStr[i], sizeof(testPointsStr[i]), "%.d, %.d, %.d, %.d",
 8001eca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ece:	ee17 4a90 	vmov	r4, s15
                         (int)coordinates[i+1].x, (int)coordinates[i+1].y);
 8001ed2:	f8d7 3644 	ldr.w	r3, [r7, #1604]	@ 0x644
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	4a50      	ldr	r2, [pc, #320]	@ (800201c <generate_report+0x280>)
 8001eda:	015b      	lsls	r3, r3, #5
 8001edc:	4413      	add	r3, r2
 8001ede:	3304      	adds	r3, #4
 8001ee0:	edd3 7a00 	vldr	s15, [r3]
                snprintf(testPointsStr[i], sizeof(testPointsStr[i]), "%.d, %.d, %.d, %.d",
 8001ee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ee8:	ee17 3a90 	vmov	r3, s15
 8001eec:	9302      	str	r3, [sp, #8]
 8001eee:	9401      	str	r4, [sp, #4]
 8001ef0:	9100      	str	r1, [sp, #0]
 8001ef2:	ee17 3a10 	vmov	r3, s14
 8001ef6:	4a4a      	ldr	r2, [pc, #296]	@ (8002020 <generate_report+0x284>)
 8001ef8:	2128      	movs	r1, #40	@ 0x28
 8001efa:	f014 f8c3 	bl	8016084 <sniprintf>

            	if((i+1 % 2) == 0){
 8001efe:	f8d7 3644 	ldr.w	r3, [r7, #1604]	@ 0x644
 8001f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f06:	d118      	bne.n	8001f3a <generate_report+0x19e>
		            strcpy(resultStr[i], coordinates[i].testResult ? "PASS" : "FAIL");
 8001f08:	f107 0108 	add.w	r1, r7, #8
 8001f0c:	f8d7 2644 	ldr.w	r2, [r7, #1604]	@ 0x644
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	18ca      	adds	r2, r1, r3
 8001f1a:	4940      	ldr	r1, [pc, #256]	@ (800201c <generate_report+0x280>)
 8001f1c:	f8d7 3644 	ldr.w	r3, [r7, #1604]	@ 0x644
 8001f20:	015b      	lsls	r3, r3, #5
 8001f22:	440b      	add	r3, r1
 8001f24:	3308      	adds	r3, #8
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <generate_report+0x194>
 8001f2c:	4b3d      	ldr	r3, [pc, #244]	@ (8002024 <generate_report+0x288>)
 8001f2e:	e000      	b.n	8001f32 <generate_report+0x196>
 8001f30:	4b3d      	ldr	r3, [pc, #244]	@ (8002028 <generate_report+0x28c>)
 8001f32:	4619      	mov	r1, r3
 8001f34:	4610      	mov	r0, r2
 8001f36:	f014 fa0a 	bl	801634e <strcpy>

            	}

            	snprintf(reportLine[i], sizeof(reportLine[i]),
 8001f3a:	f8d7 2644 	ldr.w	r2, [r7, #1604]	@ 0x644
 8001f3e:	4613      	mov	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4a39      	ldr	r2, [pc, #228]	@ (800202c <generate_report+0x290>)
 8001f48:	1898      	adds	r0, r3, r2
            			 "%-15s %-30s %-10s\n",
            			 coordinates[i].netName, testPointsStr[i], resultStr);
 8001f4a:	f8d7 3644 	ldr.w	r3, [r7, #1604]	@ 0x644
 8001f4e:	015b      	lsls	r3, r3, #5
 8001f50:	3308      	adds	r3, #8
 8001f52:	4a32      	ldr	r2, [pc, #200]	@ (800201c <generate_report+0x280>)
 8001f54:	4413      	add	r3, r2
 8001f56:	1c59      	adds	r1, r3, #1
 8001f58:	f8d7 2644 	ldr.w	r2, [r7, #1604]	@ 0x644
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4a2c      	ldr	r2, [pc, #176]	@ (8002018 <generate_report+0x27c>)
 8001f66:	4413      	add	r3, r2
            	snprintf(reportLine[i], sizeof(reportLine[i]),
 8001f68:	f107 0208 	add.w	r2, r7, #8
 8001f6c:	9201      	str	r2, [sp, #4]
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	460b      	mov	r3, r1
 8001f72:	4a2f      	ldr	r2, [pc, #188]	@ (8002030 <generate_report+0x294>)
 8001f74:	2128      	movs	r1, #40	@ 0x28
 8001f76:	f014 f885 	bl	8016084 <sniprintf>
                f_write(&file, reportLine[i], strlen(reportLine[i]), &bw);
 8001f7a:	f8d7 2644 	ldr.w	r2, [r7, #1604]	@ 0x644
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	4a29      	ldr	r2, [pc, #164]	@ (800202c <generate_report+0x290>)
 8001f88:	189c      	adds	r4, r3, r2
 8001f8a:	f8d7 2644 	ldr.w	r2, [r7, #1604]	@ 0x644
 8001f8e:	4613      	mov	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4a25      	ldr	r2, [pc, #148]	@ (800202c <generate_report+0x290>)
 8001f98:	4413      	add	r3, r2
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe f938 	bl	8000210 <strlen>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8001fa6:	f507 70cc 	add.w	r0, r7, #408	@ 0x198
 8001faa:	4621      	mov	r1, r4
 8001fac:	f00f fc21 	bl	80117f2 <f_write>
                i++;
 8001fb0:	f8d7 3644 	ldr.w	r3, [r7, #1604]	@ 0x644
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	f8c7 3644 	str.w	r3, [r7, #1604]	@ 0x644
            for(int i =0 ; i < commandsGcode;i++){
 8001fba:	f8d7 3644 	ldr.w	r3, [r7, #1604]	@ 0x644
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	f8c7 3644 	str.w	r3, [r7, #1604]	@ 0x644
 8001fc4:	f8d7 2644 	ldr.w	r2, [r7, #1604]	@ 0x644
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002034 <generate_report+0x298>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	f4ff af57 	bcc.w	8001e80 <generate_report+0xe4>


            }
    f_write(&file, reportLine, strlen(reportLine), &bw);
 8001fd2:	4816      	ldr	r0, [pc, #88]	@ (800202c <generate_report+0x290>)
 8001fd4:	f7fe f91c 	bl	8000210 <strlen>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8001fde:	f507 70cc 	add.w	r0, r7, #408	@ 0x198
 8001fe2:	4912      	ldr	r1, [pc, #72]	@ (800202c <generate_report+0x290>)
 8001fe4:	f00f fc05 	bl	80117f2 <f_write>
    f_close(&file);
 8001fe8:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8001fec:	4618      	mov	r0, r3
 8001fee:	f00f fe2d 	bl	8011c4c <f_close>
    f_mount(NULL, "", 1);
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	4906      	ldr	r1, [pc, #24]	@ (8002010 <generate_report+0x274>)
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f00e ff6e 	bl	8010ed8 <f_mount>
}
}
 8001ffc:	f207 674c 	addw	r7, r7, #1612	@ 0x64c
 8002000:	46bd      	mov	sp, r7
 8002002:	bd90      	pop	{r4, r7, pc}
 8002004:	08018500 	.word	0x08018500
 8002008:	08018524 	.word	0x08018524
 800200c:	08018530 	.word	0x08018530
 8002010:	080184a4 	.word	0x080184a4
 8002014:	08018548 	.word	0x08018548
 8002018:	200021a8 	.word	0x200021a8
 800201c:	20002374 	.word	0x20002374
 8002020:	0801857c 	.word	0x0801857c
 8002024:	08018590 	.word	0x08018590
 8002028:	08018598 	.word	0x08018598
 800202c:	20001b68 	.word	0x20001b68
 8002030:	080185a0 	.word	0x080185a0
 8002034:	200048f4 	.word	0x200048f4

08002038 <HAL_TIM_PWM_PulseFinishedCallback>:

////////// HAL FUNCTIONS //////////

// PWM callback for step counting
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < MAX_MOTORS; i++){
 8002040:	2300      	movs	r3, #0
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	e0a4      	b.n	8002190 <HAL_TIM_PWM_PulseFinishedCallback+0x158>
	  if (htim->Instance == motors[i].driver.htim->Instance){ // Check which motor's timer called back
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4956      	ldr	r1, [pc, #344]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	20a4      	movs	r0, #164	@ 0xa4
 8002050:	fb00 f303 	mul.w	r3, r0, r3
 8002054:	440b      	add	r3, r1
 8002056:	3310      	adds	r3, #16
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	f040 8094 	bne.w	800218a <HAL_TIM_PWM_PulseFinishedCallback+0x152>
		  motors[i].stepsTaken++;
 8002062:	4a50      	ldr	r2, [pc, #320]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	21a4      	movs	r1, #164	@ 0xa4
 8002068:	fb01 f303 	mul.w	r3, r1, r3
 800206c:	4413      	add	r3, r2
 800206e:	3370      	adds	r3, #112	@ 0x70
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	494b      	ldr	r1, [pc, #300]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	20a4      	movs	r0, #164	@ 0xa4
 800207a:	fb00 f303 	mul.w	r3, r0, r3
 800207e:	440b      	add	r3, r1
 8002080:	3370      	adds	r3, #112	@ 0x70
 8002082:	601a      	str	r2, [r3, #0]
		  //TMC2209_CountDistance(&motors[i]);
		  if(HAL_GPIO_ReadPin(motors[i].driver.dir_port, motors[i].driver.dir_pin) == GPIO_PIN_SET){
 8002084:	4a47      	ldr	r2, [pc, #284]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	21a4      	movs	r1, #164	@ 0xa4
 800208a:	fb01 f303 	mul.w	r3, r1, r3
 800208e:	4413      	add	r3, r2
 8002090:	3344      	adds	r3, #68	@ 0x44
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4943      	ldr	r1, [pc, #268]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	20a4      	movs	r0, #164	@ 0xa4
 800209a:	fb00 f303 	mul.w	r3, r0, r3
 800209e:	440b      	add	r3, r1
 80020a0:	3348      	adds	r3, #72	@ 0x48
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	4619      	mov	r1, r3
 80020a6:	4610      	mov	r0, r2
 80020a8:	f005 fd7a 	bl	8007ba0 <HAL_GPIO_ReadPin>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d111      	bne.n	80020d6 <HAL_TIM_PWM_PulseFinishedCallback+0x9e>
		  		  motors[i].StepsFront++;
 80020b2:	4a3c      	ldr	r2, [pc, #240]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	21a4      	movs	r1, #164	@ 0xa4
 80020b8:	fb01 f303 	mul.w	r3, r1, r3
 80020bc:	4413      	add	r3, r2
 80020be:	3390      	adds	r3, #144	@ 0x90
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	4937      	ldr	r1, [pc, #220]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	20a4      	movs	r0, #164	@ 0xa4
 80020ca:	fb00 f303 	mul.w	r3, r0, r3
 80020ce:	440b      	add	r3, r1
 80020d0:	3390      	adds	r3, #144	@ 0x90
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	e027      	b.n	8002126 <HAL_TIM_PWM_PulseFinishedCallback+0xee>
		  }
		  else if(HAL_GPIO_ReadPin(motors[i].driver.dir_port, motors[i].driver.dir_pin) == GPIO_PIN_RESET){
 80020d6:	4a33      	ldr	r2, [pc, #204]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	21a4      	movs	r1, #164	@ 0xa4
 80020dc:	fb01 f303 	mul.w	r3, r1, r3
 80020e0:	4413      	add	r3, r2
 80020e2:	3344      	adds	r3, #68	@ 0x44
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	492f      	ldr	r1, [pc, #188]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	20a4      	movs	r0, #164	@ 0xa4
 80020ec:	fb00 f303 	mul.w	r3, r0, r3
 80020f0:	440b      	add	r3, r1
 80020f2:	3348      	adds	r3, #72	@ 0x48
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	4619      	mov	r1, r3
 80020f8:	4610      	mov	r0, r2
 80020fa:	f005 fd51 	bl	8007ba0 <HAL_GPIO_ReadPin>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d110      	bne.n	8002126 <HAL_TIM_PWM_PulseFinishedCallback+0xee>
			  	  motors[i].StepsBack++;
 8002104:	4a27      	ldr	r2, [pc, #156]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	21a4      	movs	r1, #164	@ 0xa4
 800210a:	fb01 f303 	mul.w	r3, r1, r3
 800210e:	4413      	add	r3, r2
 8002110:	3394      	adds	r3, #148	@ 0x94
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	4923      	ldr	r1, [pc, #140]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	20a4      	movs	r0, #164	@ 0xa4
 800211c:	fb00 f303 	mul.w	r3, r0, r3
 8002120:	440b      	add	r3, r1
 8002122:	3394      	adds	r3, #148	@ 0x94
 8002124:	601a      	str	r2, [r3, #0]
		  }
          if (motors[i].stepsTaken % motors[i].stepsPerRevolution == 0){ // Count Full steps
 8002126:	4a1f      	ldr	r2, [pc, #124]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	21a4      	movs	r1, #164	@ 0xa4
 800212c:	fb01 f303 	mul.w	r3, r1, r3
 8002130:	4413      	add	r3, r2
 8002132:	3370      	adds	r3, #112	@ 0x70
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	491a      	ldr	r1, [pc, #104]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	20a4      	movs	r0, #164	@ 0xa4
 800213e:	fb00 f303 	mul.w	r3, r0, r3
 8002142:	440b      	add	r3, r1
 8002144:	3364      	adds	r3, #100	@ 0x64
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	fbb2 f1f3 	udiv	r1, r2, r3
 800214c:	fb01 f303 	mul.w	r3, r1, r3
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d119      	bne.n	800218a <HAL_TIM_PWM_PulseFinishedCallback+0x152>
              motors[i].driver.checkSG_RESULT = 1;
 8002156:	4a13      	ldr	r2, [pc, #76]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	21a4      	movs	r1, #164	@ 0xa4
 800215c:	fb01 f303 	mul.w	r3, r1, r3
 8002160:	4413      	add	r3, r2
 8002162:	3330      	adds	r3, #48	@ 0x30
 8002164:	2201      	movs	r2, #1
 8002166:	701a      	strb	r2, [r3, #0]
              motors[i].fullSteps++;
 8002168:	4a0e      	ldr	r2, [pc, #56]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	21a4      	movs	r1, #164	@ 0xa4
 800216e:	fb01 f303 	mul.w	r3, r1, r3
 8002172:	4413      	add	r3, r2
 8002174:	3374      	adds	r3, #116	@ 0x74
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	1c5a      	adds	r2, r3, #1
 800217a:	490a      	ldr	r1, [pc, #40]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	20a4      	movs	r0, #164	@ 0xa4
 8002180:	fb00 f303 	mul.w	r3, r0, r3
 8002184:	440b      	add	r3, r1
 8002186:	3374      	adds	r3, #116	@ 0x74
 8002188:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < MAX_MOTORS; i++){
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	3301      	adds	r3, #1
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2b03      	cmp	r3, #3
 8002194:	f77f af57 	ble.w	8002046 <HAL_TIM_PWM_PulseFinishedCallback+0xe>
          }
      }

    }
}
 8002198:	bf00      	nop
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20005844 	.word	0x20005844

080021a8 <TMC2209_SetDirection>:


// Set the direction of the motor
void TMC2209_SetDirection(Motor *motor, GPIO_PinState state) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(motor->driver.dir_port, motor->driver.dir_pin, state);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80021be:	78fa      	ldrb	r2, [r7, #3]
 80021c0:	4619      	mov	r1, r3
 80021c2:	f005 fd05 	bl	8007bd0 <HAL_GPIO_WritePin>
    motor->direction = state;
 80021c6:	78fa      	ldrb	r2, [r7, #3]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <TMC2209_EnableDriver>:

// Enable or disable the driver
void TMC2209_EnableDriver(Motor *motor, GPIO_PinState state) {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(motor->driver.enn_port, motor->driver.enn_pin, state); // LOW = motor enabled, HIGH = motor disabled
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021ea:	78fa      	ldrb	r2, [r7, #3]
 80021ec:	4619      	mov	r1, r3
 80021ee:	f005 fcef 	bl	8007bd0 <HAL_GPIO_WritePin>
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <TMC2209_SetSpeed>:
    return HAL_GPIO_ReadPin(motor->driver.index_port, motor->driver.index_pin); // Returns the INDEX pin state
}


// Start stepping with PWM
void TMC2209_SetSpeed(Motor *motor, uint32_t StepFrequency) {
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b086      	sub	sp, #24
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	6039      	str	r1, [r7, #0]
	uint32_t prescaler = motor->driver.htim->Init.Prescaler;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	617b      	str	r3, [r7, #20]
    uint32_t timerClock = HAL_RCC_GetHCLKFreq() / prescaler ;
 800220c:	f006 ff98 	bl	8009140 <HAL_RCC_GetHCLKFreq>
 8002210:	4602      	mov	r2, r0
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	fbb2 f3f3 	udiv	r3, r2, r3
 8002218:	613b      	str	r3, [r7, #16]
    uint32_t ARR = (timerClock / StepFrequency) - 1; // Auto-reload value
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002222:	3b01      	subs	r3, #1
 8002224:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(motor->driver.htim, ARR); // Period
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d106      	bne.n	800224e <TMC2209_SetSpeed+0x54>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	0852      	lsrs	r2, r2, #1
 800224a:	635a      	str	r2, [r3, #52]	@ 0x34
 800224c:	e031      	b.n	80022b2 <TMC2209_SetSpeed+0xb8>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	2b04      	cmp	r3, #4
 8002254:	d106      	bne.n	8002264 <TMC2209_SetSpeed+0x6a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	085b      	lsrs	r3, r3, #1
 8002260:	6393      	str	r3, [r2, #56]	@ 0x38
 8002262:	e026      	b.n	80022b2 <TMC2209_SetSpeed+0xb8>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	2b08      	cmp	r3, #8
 800226a:	d106      	bne.n	800227a <TMC2209_SetSpeed+0x80>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	085b      	lsrs	r3, r3, #1
 8002276:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002278:	e01b      	b.n	80022b2 <TMC2209_SetSpeed+0xb8>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	2b0c      	cmp	r3, #12
 8002280:	d106      	bne.n	8002290 <TMC2209_SetSpeed+0x96>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	085b      	lsrs	r3, r3, #1
 800228c:	6413      	str	r3, [r2, #64]	@ 0x40
 800228e:	e010      	b.n	80022b2 <TMC2209_SetSpeed+0xb8>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	2b10      	cmp	r3, #16
 8002296:	d106      	bne.n	80022a6 <TMC2209_SetSpeed+0xac>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	085b      	lsrs	r3, r3, #1
 80022a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80022a4:	e005      	b.n	80022b2 <TMC2209_SetSpeed+0xb8>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	085b      	lsrs	r3, r3, #1
 80022b0:	65d3      	str	r3, [r2, #92]	@ 0x5c
    motor->driver.stepFrequency = StepFrequency;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	619a      	str	r2, [r3, #24]
}
 80022b8:	bf00      	nop
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <TMC2209_Stop>:


// Stop stepping
void TMC2209_Stop(Motor *motor) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = motor->driver.htim;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	60fb      	str	r3, [r7, #12]
	uint32_t channel = motor->driver.step_channel;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	60bb      	str	r3, [r7, #8]
	TMC2209_EnableDriver(motor, GPIO_PIN_SET);
 80022d4:	2101      	movs	r1, #1
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff ff7c 	bl	80021d4 <TMC2209_EnableDriver>
    HAL_TIM_PWM_Stop_IT(htim, channel);
 80022dc:	68b9      	ldr	r1, [r7, #8]
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f008 fd50 	bl	800ad84 <HAL_TIM_PWM_Stop_IT>
}
 80022e4:	bf00      	nop
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <TMC2209_Start>:

void TMC2209_Start(Motor *motor) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = motor->driver.htim;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	60fb      	str	r3, [r7, #12]
	uint32_t channel = motor->driver.step_channel;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	60bb      	str	r3, [r7, #8]

	TMC2209_EnableDriver(motor, GPIO_PIN_RESET);
 8002300:	2100      	movs	r1, #0
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff ff66 	bl	80021d4 <TMC2209_EnableDriver>
    HAL_TIM_PWM_Start_IT(htim, channel);
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f008 fbf2 	bl	800aaf4 <HAL_TIM_PWM_Start_IT>
    motor->isStepping = true;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
}
 8002318:	bf00      	nop
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <TMC2209_CountSteps>:


static void TMC2209_CountSteps(Motor *motor, uint32_t totalSteps){ // Static for now unless we need to expose it later
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
	motor->nextTotalSteps = totalSteps;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	679a      	str	r2, [r3, #120]	@ 0x78
	motor->stepsTaken = 0;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	671a      	str	r2, [r3, #112]	@ 0x70

	while (motor->stepsTaken <= motor->nextTotalSteps) {// Wait until we reach required steps and increment position on every step
 8002336:	bf00      	nop
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800233c:	461a      	mov	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002342:	429a      	cmp	r2, r3
 8002344:	d9f8      	bls.n	8002338 <TMC2209_CountSteps+0x18>
    // vTaskDelay(10);
	}
	//HAL_Delay(1); // To not fad the cpu --NOTE: CHECK IF THERE SHOULD BE A DELAY

	motor->nextTotalSteps = 0;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	679a      	str	r2, [r3, #120]	@ 0x78
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <TMC2209_MoveTo>:

void TMC2209_checkStatus(Motor *motor, bool *isStepping, uint32_t *nextTotalSteps){
	 *isStepping = motor->isStepping;
     *nextTotalSteps = motor->nextTotalSteps;
}
void TMC2209_MoveTo(Axis *axis, uint8_t motorIndex, float targetPositionMM) {
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	460b      	mov	r3, r1
 8002362:	ed87 0a01 	vstr	s0, [r7, #4]
 8002366:	72fb      	strb	r3, [r7, #11]
    // Validate the motor index

    if (motorIndex >= MAX_MOTORS_PER_AXIS) {
 8002368:	7afb      	ldrb	r3, [r7, #11]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d903      	bls.n	8002376 <TMC2209_MoveTo+0x1e>
        debug_print("Invalid motor index.\r\n");
 800236e:	4830      	ldr	r0, [pc, #192]	@ (8002430 <TMC2209_MoveTo+0xd8>)
 8002370:	f000 f92a 	bl	80025c8 <debug_print>
        return;
 8002374:	e059      	b.n	800242a <TMC2209_MoveTo+0xd2>
//    }

    // Calculate the distance to move in millimeters
    //motor->currentPositionMM =0;

    float distanceToMoveMM = targetPositionMM - axis->motors[motorIndex]->currentPositionMM;
 8002376:	7afa      	ldrb	r2, [r7, #11]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800237e:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8002382:	ed97 7a01 	vldr	s14, [r7, #4]
 8002386:	ee77 7a67 	vsub.f32	s15, s14, s15
 800238a:	edc7 7a04 	vstr	s15, [r7, #16]

    // Convert the distance to move into steps
    int32_t stepsToMove = (int32_t)(distanceToMoveMM * axis->stepPerUnit);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	ed93 7a04 	vldr	s14, [r3, #16]
 8002394:	edd7 7a04 	vldr	s15, [r7, #16]
 8002398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800239c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023a0:	ee17 3a90 	vmov	r3, s15
 80023a4:	617b      	str	r3, [r7, #20]

    // Update the target position in the motor structure
    axis->motors[motorIndex]->nextPositionMM = targetPositionMM;
 80023a6:	7afa      	ldrb	r2, [r7, #11]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    // Decide the direction based on the sign of the steps
    if (stepsToMove > 0) {
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	dd08      	ble.n	80023cc <TMC2209_MoveTo+0x74>
        TMC2209_SetDirection(axis->motors[motorIndex], GPIO_PIN_RESET); // Forward direction
 80023ba:	7afa      	ldrb	r2, [r7, #11]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c2:	2100      	movs	r1, #0
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff feef 	bl	80021a8 <TMC2209_SetDirection>
 80023ca:	e00a      	b.n	80023e2 <TMC2209_MoveTo+0x8a>
    } else {
        TMC2209_SetDirection(axis->motors[motorIndex], GPIO_PIN_SET); // Reverse direction
 80023cc:	7afa      	ldrb	r2, [r7, #11]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d4:	2101      	movs	r1, #1
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fee6 	bl	80021a8 <TMC2209_SetDirection>
        stepsToMove = -stepsToMove; // Convert to positive for step count
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	425b      	negs	r3, r3
 80023e0:	617b      	str	r3, [r7, #20]
    }

    // Start the motor

    TMC2209_Start(axis->motors[motorIndex]);
 80023e2:	7afa      	ldrb	r2, [r7, #11]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff ff7e 	bl	80022ec <TMC2209_Start>

    // Set the total steps to move
    axis->motors[motorIndex]->nextTotalSteps = stepsToMove;
 80023f0:	7afa      	ldrb	r2, [r7, #11]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	679a      	str	r2, [r3, #120]	@ 0x78
	TMC2209_CountSteps(axis->motors[motorIndex], stepsToMove);
 80023fc:	7afa      	ldrb	r2, [r7, #11]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	4611      	mov	r1, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff ff89 	bl	8002320 <TMC2209_CountSteps>

    // Stop the motor
    TMC2209_Stop(axis->motors[motorIndex]);
 800240e:	7afa      	ldrb	r2, [r7, #11]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff ff52 	bl	80022c0 <TMC2209_Stop>

    // Update the current position in the motor structure
    axis->motors[motorIndex]->currentPositionMM = targetPositionMM;
 800241c:	7afa      	ldrb	r2, [r7, #11]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

}
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	080185b8 	.word	0x080185b8

08002434 <TMC2209_MoveAllMotorsTo>:
// Function to move all motors concurrently to their target positions.
// The targetPositionsMM array should have one target position (in millimeters)
// for each motor in the axis. We assume that MAX_MOTORS_PER_AXIS is defined.
void TMC2209_MoveAllMotorsTo(Axis axes[2], float targetPositions[4]) {
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
    uint8_t axisIndex, motorIndex;

    // Initialize each motor on both axes.
    // The mapping is:
    //   targetPositions[ axisIndex * MAX_MOTORS_PER_AXIS + motorIndex ]
    for (axisIndex = 0; axisIndex < 2; axisIndex++) {
 800243e:	2300      	movs	r3, #0
 8002440:	77fb      	strb	r3, [r7, #31]
 8002442:	e06d      	b.n	8002520 <TMC2209_MoveAllMotorsTo+0xec>
        for (motorIndex = 0; motorIndex < MAX_MOTORS_PER_AXIS; motorIndex++) {
 8002444:	2300      	movs	r3, #0
 8002446:	77bb      	strb	r3, [r7, #30]
 8002448:	e064      	b.n	8002514 <TMC2209_MoveAllMotorsTo+0xe0>
            int targetIndex = axisIndex * MAX_MOTORS_PER_AXIS + motorIndex;
 800244a:	7ffb      	ldrb	r3, [r7, #31]
 800244c:	005a      	lsls	r2, r3, #1
 800244e:	7fbb      	ldrb	r3, [r7, #30]
 8002450:	4413      	add	r3, r2
 8002452:	617b      	str	r3, [r7, #20]
            Motor *motor = axes[axisIndex].motors[motorIndex];
 8002454:	7ffa      	ldrb	r2, [r7, #31]
 8002456:	4613      	mov	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	461a      	mov	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4413      	add	r3, r2
 8002464:	7fba      	ldrb	r2, [r7, #30]
 8002466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800246a:	613b      	str	r3, [r7, #16]
            if (motor == NULL) {
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d04c      	beq.n	800250c <TMC2209_MoveAllMotorsTo+0xd8>
                continue;
            }

            // Calculate the distance (in mm) and convert to steps.
            float distanceToMoveMM = targetPositions[targetIndex] - motor->currentPositionMM;
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	4413      	add	r3, r2
 800247a:	ed93 7a00 	vldr	s14, [r3]
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8002484:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002488:	edc7 7a03 	vstr	s15, [r7, #12]
            int32_t stepsToMove = (int32_t)(distanceToMoveMM * axes[axisIndex].stepPerUnit);
 800248c:	7ffa      	ldrb	r2, [r7, #31]
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	461a      	mov	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4413      	add	r3, r2
 800249c:	ed93 7a04 	vldr	s14, [r3, #16]
 80024a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80024a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ac:	ee17 3a90 	vmov	r3, s15
 80024b0:	60bb      	str	r3, [r7, #8]

            // Save the absolute number of steps required.
            motor->nextTotalSteps = (stepsToMove >= 0) ? stepsToMove : -stepsToMove;
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	bfb8      	it	lt
 80024b8:	425b      	neglt	r3, r3
 80024ba:	461a      	mov	r2, r3
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	679a      	str	r2, [r3, #120]	@ 0x78
            // Reset the steps counter.
            motor->stepsTaken = 0;
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	2200      	movs	r2, #0
 80024c4:	671a      	str	r2, [r3, #112]	@ 0x70
            // Store the target position.
            motor->nextPositionMM = targetPositions[targetIndex];
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	4413      	add	r3, r2
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

            // Set the motor direction.
            if (stepsToMove >= 0) {
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	db04      	blt.n	80024e6 <TMC2209_MoveAllMotorsTo+0xb2>
                TMC2209_SetDirection(motor, GPIO_PIN_RESET);  // Forward
 80024dc:	2100      	movs	r1, #0
 80024de:	6938      	ldr	r0, [r7, #16]
 80024e0:	f7ff fe62 	bl	80021a8 <TMC2209_SetDirection>
 80024e4:	e003      	b.n	80024ee <TMC2209_MoveAllMotorsTo+0xba>
            } else {
                TMC2209_SetDirection(motor, GPIO_PIN_SET);      // Reverse
 80024e6:	2101      	movs	r1, #1
 80024e8:	6938      	ldr	r0, [r7, #16]
 80024ea:	f7ff fe5d 	bl	80021a8 <TMC2209_SetDirection>
            }

            // Start the motor.
            if(motor->currentPositionMM != motor->nextPositionMM)	TMC2209_Start(motor);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 80024fa:	eeb4 7a67 	vcmp.f32	s14, s15
 80024fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002502:	d004      	beq.n	800250e <TMC2209_MoveAllMotorsTo+0xda>
 8002504:	6938      	ldr	r0, [r7, #16]
 8002506:	f7ff fef1 	bl	80022ec <TMC2209_Start>
 800250a:	e000      	b.n	800250e <TMC2209_MoveAllMotorsTo+0xda>
                continue;
 800250c:	bf00      	nop
        for (motorIndex = 0; motorIndex < MAX_MOTORS_PER_AXIS; motorIndex++) {
 800250e:	7fbb      	ldrb	r3, [r7, #30]
 8002510:	3301      	adds	r3, #1
 8002512:	77bb      	strb	r3, [r7, #30]
 8002514:	7fbb      	ldrb	r3, [r7, #30]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d997      	bls.n	800244a <TMC2209_MoveAllMotorsTo+0x16>
    for (axisIndex = 0; axisIndex < 2; axisIndex++) {
 800251a:	7ffb      	ldrb	r3, [r7, #31]
 800251c:	3301      	adds	r3, #1
 800251e:	77fb      	strb	r3, [r7, #31]
 8002520:	7ffb      	ldrb	r3, [r7, #31]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d98e      	bls.n	8002444 <TMC2209_MoveAllMotorsTo+0x10>

        }
    }

    // Poll all motors concurrently. Each motor will be stopped as soon as it finishes.
    bool motorsStillRunning = true;
 8002526:	2301      	movs	r3, #1
 8002528:	777b      	strb	r3, [r7, #29]
    while (motorsStillRunning) {
 800252a:	e044      	b.n	80025b6 <TMC2209_MoveAllMotorsTo+0x182>
        motorsStillRunning = false;  // Assume all motors are finished unless one is still moving.
 800252c:	2300      	movs	r3, #0
 800252e:	777b      	strb	r3, [r7, #29]

        for (axisIndex = 0; axisIndex < 2; axisIndex++) {
 8002530:	2300      	movs	r3, #0
 8002532:	77fb      	strb	r3, [r7, #31]
 8002534:	e03c      	b.n	80025b0 <TMC2209_MoveAllMotorsTo+0x17c>
            for (motorIndex = 0; motorIndex < MAX_MOTORS_PER_AXIS; motorIndex++) {
 8002536:	2300      	movs	r3, #0
 8002538:	77bb      	strb	r3, [r7, #30]
 800253a:	e033      	b.n	80025a4 <TMC2209_MoveAllMotorsTo+0x170>
                Motor *motor = axes[axisIndex].motors[motorIndex];
 800253c:	7ffa      	ldrb	r2, [r7, #31]
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	461a      	mov	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4413      	add	r3, r2
 800254c:	7fba      	ldrb	r2, [r7, #30]
 800254e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002552:	61bb      	str	r3, [r7, #24]
                if (motor == NULL) {
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d020      	beq.n	800259c <TMC2209_MoveAllMotorsTo+0x168>
                    continue;
                }
                // If this motor still has steps to take...
                if (motor->nextTotalSteps > 0) {
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800255e:	2b00      	cmp	r3, #0
 8002560:	d01d      	beq.n	800259e <TMC2209_MoveAllMotorsTo+0x16a>
                    if (motor->stepsTaken >= motor->nextTotalSteps) {
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002566:	461a      	mov	r2, r3
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800256c:	429a      	cmp	r2, r3
 800256e:	d312      	bcc.n	8002596 <TMC2209_MoveAllMotorsTo+0x162>
                        // This motor has reached its target: stop it and update its current position.
                        TMC2209_Stop(motor);
 8002570:	69b8      	ldr	r0, [r7, #24]
 8002572:	f7ff fea5 	bl	80022c0 <TMC2209_Stop>
                        motor->prevPositionMM = motor->currentPositionMM;
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                        motor->currentPositionMM = motor->nextPositionMM;
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                        // Mark this motor as finished.
                        motor->nextTotalSteps = 0;
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	2200      	movs	r2, #0
 8002592:	679a      	str	r2, [r3, #120]	@ 0x78
 8002594:	e003      	b.n	800259e <TMC2209_MoveAllMotorsTo+0x16a>
                    } else {
                        // At least one motor is still moving.
                        motorsStillRunning = true;
 8002596:	2301      	movs	r3, #1
 8002598:	777b      	strb	r3, [r7, #29]
 800259a:	e000      	b.n	800259e <TMC2209_MoveAllMotorsTo+0x16a>
                    continue;
 800259c:	bf00      	nop
            for (motorIndex = 0; motorIndex < MAX_MOTORS_PER_AXIS; motorIndex++) {
 800259e:	7fbb      	ldrb	r3, [r7, #30]
 80025a0:	3301      	adds	r3, #1
 80025a2:	77bb      	strb	r3, [r7, #30]
 80025a4:	7fbb      	ldrb	r3, [r7, #30]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d9c8      	bls.n	800253c <TMC2209_MoveAllMotorsTo+0x108>
        for (axisIndex = 0; axisIndex < 2; axisIndex++) {
 80025aa:	7ffb      	ldrb	r3, [r7, #31]
 80025ac:	3301      	adds	r3, #1
 80025ae:	77fb      	strb	r3, [r7, #31]
 80025b0:	7ffb      	ldrb	r3, [r7, #31]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d9bf      	bls.n	8002536 <TMC2209_MoveAllMotorsTo+0x102>
    while (motorsStillRunning) {
 80025b6:	7f7b      	ldrb	r3, [r7, #29]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1b7      	bne.n	800252c <TMC2209_MoveAllMotorsTo+0xf8>
        }
        // Delay briefly to avoid hogging the CPU.
        // If you're not using an RTOS, replace vTaskDelay(1) with a suitable delay function (e.g., HAL_Delay(1)).
        //vTaskDelay(1);
    }
}
 80025bc:	bf00      	nop
 80025be:	bf00      	nop
 80025c0:	3720      	adds	r7, #32
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <debug_print>:
    }
    (void)dummy;
}


void debug_print(const char* msg) {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit_DMA(&huart3, (uint8_t*)msg, strlen(msg));
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7fd fe1d 	bl	8000210 <strlen>
 80025d6:	4603      	mov	r3, r0
 80025d8:	b29b      	uxth	r3, r3
 80025da:	461a      	mov	r2, r3
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	4803      	ldr	r0, [pc, #12]	@ (80025ec <debug_print+0x24>)
 80025e0:	f009 fea2 	bl	800c328 <HAL_UART_Transmit_DMA>
}
 80025e4:	bf00      	nop
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20005014 	.word	0x20005014

080025f0 <calculate_CRC>:
    ptr += sprintf(ptr, "]\r\n");

    debug_print(buffer);
}

uint8_t calculate_CRC(uint8_t *datagram, uint8_t length) {
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < length; i++) {
 8002600:	2300      	movs	r3, #0
 8002602:	73bb      	strb	r3, [r7, #14]
 8002604:	e027      	b.n	8002656 <calculate_CRC+0x66>
        uint8_t currentByte = datagram[i];
 8002606:	7bbb      	ldrb	r3, [r7, #14]
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	4413      	add	r3, r2
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	737b      	strb	r3, [r7, #13]
        for(uint8_t j = 0; j < 8; j++) {
 8002610:	2300      	movs	r3, #0
 8002612:	733b      	strb	r3, [r7, #12]
 8002614:	e019      	b.n	800264a <calculate_CRC+0x5a>
            if((crc >> 7) ^ (currentByte & 0x01)) {
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	09db      	lsrs	r3, r3, #7
 800261a:	b2db      	uxtb	r3, r3
 800261c:	461a      	mov	r2, r3
 800261e:	7b7b      	ldrb	r3, [r7, #13]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	429a      	cmp	r2, r3
 8002626:	d007      	beq.n	8002638 <calculate_CRC+0x48>
                crc = (crc << 1) ^ 0x07;
 8002628:	7bfb      	ldrb	r3, [r7, #15]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	b25b      	sxtb	r3, r3
 800262e:	f083 0307 	eor.w	r3, r3, #7
 8002632:	b25b      	sxtb	r3, r3
 8002634:	73fb      	strb	r3, [r7, #15]
 8002636:	e002      	b.n	800263e <calculate_CRC+0x4e>
            } else {
                crc = crc << 1;
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
            }
            currentByte >>= 1;
 800263e:	7b7b      	ldrb	r3, [r7, #13]
 8002640:	085b      	lsrs	r3, r3, #1
 8002642:	737b      	strb	r3, [r7, #13]
        for(uint8_t j = 0; j < 8; j++) {
 8002644:	7b3b      	ldrb	r3, [r7, #12]
 8002646:	3301      	adds	r3, #1
 8002648:	733b      	strb	r3, [r7, #12]
 800264a:	7b3b      	ldrb	r3, [r7, #12]
 800264c:	2b07      	cmp	r3, #7
 800264e:	d9e2      	bls.n	8002616 <calculate_CRC+0x26>
    for(uint8_t i = 0; i < length; i++) {
 8002650:	7bbb      	ldrb	r3, [r7, #14]
 8002652:	3301      	adds	r3, #1
 8002654:	73bb      	strb	r3, [r7, #14]
 8002656:	7bba      	ldrb	r2, [r7, #14]
 8002658:	78fb      	ldrb	r3, [r7, #3]
 800265a:	429a      	cmp	r2, r3
 800265c:	d3d3      	bcc.n	8002606 <calculate_CRC+0x16>
        }
    }
    return crc;
 800265e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <TMC2209_WaitForReply>:




uint8_t TMC2209_WaitForReply(uint32_t timeout) {
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
     uint32_t startTime = HAL_GetTick();
 8002674:	f004 fbcc 	bl	8006e10 <HAL_GetTick>
 8002678:	60f8      	str	r0, [r7, #12]
     while (!rxBufferReady) {
 800267a:	e00c      	b.n	8002696 <TMC2209_WaitForReply+0x2a>
         if ((HAL_GetTick() - startTime) > timeout) {
 800267c:	f004 fbc8 	bl	8006e10 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	429a      	cmp	r2, r3
 800268a:	d204      	bcs.n	8002696 <TMC2209_WaitForReply+0x2a>
             debug_print("Timeout waiting for reply.\r\n");
 800268c:	4808      	ldr	r0, [pc, #32]	@ (80026b0 <TMC2209_WaitForReply+0x44>)
 800268e:	f7ff ff9b 	bl	80025c8 <debug_print>
             return 0; // Timeout
 8002692:	2300      	movs	r3, #0
 8002694:	e008      	b.n	80026a8 <TMC2209_WaitForReply+0x3c>
     while (!rxBufferReady) {
 8002696:	4b07      	ldr	r3, [pc, #28]	@ (80026b4 <TMC2209_WaitForReply+0x48>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0ed      	beq.n	800267c <TMC2209_WaitForReply+0x10>
         }
     }
     rxBufferReady = 0; // Clear flag for next use
 80026a0:	4b04      	ldr	r3, [pc, #16]	@ (80026b4 <TMC2209_WaitForReply+0x48>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
     return 1; // Success
 80026a6:	2301      	movs	r3, #1
 }
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	080185fc 	.word	0x080185fc
 80026b4:	2000234c 	.word	0x2000234c

080026b8 <TMC2209_sendCommand>:


uint8_t *TMC2209_sendCommand(uint8_t *command, size_t writeLength, size_t readLength, Motor *tmc2209) {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
 80026c4:	603b      	str	r3, [r7, #0]
	//clear_UART_buffers(&huart2);
     // Send the command
     if (HAL_UART_Transmit(tmc2209->driver.huart, command, writeLength, HAL_MAX_DELAY) != HAL_OK) {
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	6858      	ldr	r0, [r3, #4]
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	f04f 33ff 	mov.w	r3, #4294967295
 80026d2:	68f9      	ldr	r1, [r7, #12]
 80026d4:	f009 fd9e 	bl	800c214 <HAL_UART_Transmit>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d004      	beq.n	80026e8 <TMC2209_sendCommand+0x30>
         if(ENABLE_DEBUG) debug_print("Failed to send command to driver.\r\n");
         tmc2209->driver.STATUS = TMC_SEND_ERROR;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2214      	movs	r2, #20
 80026e2:	60da      	str	r2, [r3, #12]
         return	NULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	e01e      	b.n	8002726 <TMC2209_sendCommand+0x6e>
     }

     if(readLength && (tmc2209->driver.STATUS == TMC_OK)){
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d01a      	beq.n	8002724 <TMC2209_sendCommand+0x6c>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d116      	bne.n	8002724 <TMC2209_sendCommand+0x6c>

     // Wait for reply
     HAL_UART_Receive_DMA(tmc2209->driver.huart, rxData, readLength + 1);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	6858      	ldr	r0, [r3, #4]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3301      	adds	r3, #1
 8002700:	b29b      	uxth	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	490a      	ldr	r1, [pc, #40]	@ (8002730 <TMC2209_sendCommand+0x78>)
 8002706:	f009 fe8b 	bl	800c420 <HAL_UART_Receive_DMA>
     if (!TMC2209_WaitForReply(200)) { // Wait 200ms if no reply, timeout
 800270a:	20c8      	movs	r0, #200	@ 0xc8
 800270c:	f7ff ffae 	bl	800266c <TMC2209_WaitForReply>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d104      	bne.n	8002720 <TMC2209_sendCommand+0x68>
    	 if(ENABLE_DEBUG) debug_print("No reply received from driver.\r\n");
    	 tmc2209->driver.STATUS = TMC_NOREPLY_ERROR;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	221e      	movs	r2, #30
 800271a:	60da      	str	r2, [r3, #12]
         return NULL; // command failed
 800271c:	2300      	movs	r3, #0
 800271e:	e002      	b.n	8002726 <TMC2209_sendCommand+0x6e>
     debug_print_hex(command, writeLength);
     // Process received data in rxBuffer
     debug_print("Reply received:\r\n");
     debug_print_hex(rxBuffer, TMC_REPLY_SIZE);
     }
     return rxBuffer; // Success
 8002720:	4b04      	ldr	r3, [pc, #16]	@ (8002734 <TMC2209_sendCommand+0x7c>)
 8002722:	e000      	b.n	8002726 <TMC2209_sendCommand+0x6e>
     }
     return NULL;
 8002724:	2300      	movs	r3, #0
 }
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20002338 	.word	0x20002338
 8002734:	20002344 	.word	0x20002344

08002738 <TMC2209_writeInit>:


void TMC2209_writeInit(Motor *tmc2209, uint8_t regAddress, int32_t value){
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	460b      	mov	r3, r1
 8002742:	607a      	str	r2, [r7, #4]
 8002744:	72fb      	strb	r3, [r7, #11]
 	uint8_t write_request_command[8];
 	write_request_command[0] = SYNC; // SYNC Byte for TMC2209
 8002746:	2305      	movs	r3, #5
 8002748:	743b      	strb	r3, [r7, #16]
 	write_request_command[1] = tmc2209->driver.address; // Driver address configure it using MS1(LSB) AND MS2
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	7a1b      	ldrb	r3, [r3, #8]
 800274e:	747b      	strb	r3, [r7, #17]
 	write_request_command[2] = regAddress | 0x80; // Register address to write 0x80 for writing
 8002750:	7afb      	ldrb	r3, [r7, #11]
 8002752:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002756:	b2db      	uxtb	r3, r3
 8002758:	74bb      	strb	r3, [r7, #18]
 	write_request_command[3] = (value >> 24) & 0xFF;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	0e1b      	lsrs	r3, r3, #24
 800275e:	b2db      	uxtb	r3, r3
 8002760:	74fb      	strb	r3, [r7, #19]
 	write_request_command[4] = (value >> 16) & 0xFF;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	141b      	asrs	r3, r3, #16
 8002766:	b2db      	uxtb	r3, r3
 8002768:	753b      	strb	r3, [r7, #20]
 	write_request_command[5] = (value >> 8 ) & 0xFF;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	121b      	asrs	r3, r3, #8
 800276e:	b2db      	uxtb	r3, r3
 8002770:	757b      	strb	r3, [r7, #21]
 	write_request_command[6] = (value      ) & 0xFF;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	75bb      	strb	r3, [r7, #22]
 	write_request_command[7] = calculate_CRC(write_request_command, 7); // checksum
 8002778:	f107 0310 	add.w	r3, r7, #16
 800277c:	2107      	movs	r1, #7
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff ff36 	bl	80025f0 <calculate_CRC>
 8002784:	4603      	mov	r3, r0
 8002786:	75fb      	strb	r3, [r7, #23]
 	TMC2209_sendCommand(&write_request_command[0], TMC_WRITE_DATAGRAM_SIZE, 0, tmc2209); // We don't actually need receive buffer here when we call ReadWrite so we just pass data
 8002788:	f107 0010 	add.w	r0, r7, #16
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	2108      	movs	r1, #8
 8002792:	f7ff ff91 	bl	80026b8 <TMC2209_sendCommand>

 }
 8002796:	bf00      	nop
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <TMC2209_readInit>:

int32_t TMC2209_readInit(Motor *tmc2209, uint8_t regAddress){
 800279e:	b590      	push	{r4, r7, lr}
 80027a0:	b087      	sub	sp, #28
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	460b      	mov	r3, r1
 80027a8:	70fb      	strb	r3, [r7, #3]
	if(tmc2209->driver.STATUS != TMC_OK) return tmc2209->driver.STATUS;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <TMC2209_readInit+0x1a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	e059      	b.n	800286c <TMC2209_readInit+0xce>
 	uint8_t read_request_command[8] = { 0 };
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	2300      	movs	r3, #0
 80027be:	613b      	str	r3, [r7, #16]
 	read_request_command[0] = SYNC;
 80027c0:	2305      	movs	r3, #5
 80027c2:	733b      	strb	r3, [r7, #12]
 	read_request_command[1] = tmc2209->driver.address;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	7a1b      	ldrb	r3, [r3, #8]
 80027c8:	737b      	strb	r3, [r7, #13]
 	read_request_command[2] = regAddress;
 80027ca:	78fb      	ldrb	r3, [r7, #3]
 80027cc:	73bb      	strb	r3, [r7, #14]
 	read_request_command[3] = calculate_CRC(read_request_command, 3);
 80027ce:	f107 030c 	add.w	r3, r7, #12
 80027d2:	2103      	movs	r1, #3
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ff0b 	bl	80025f0 <calculate_CRC>
 80027da:	4603      	mov	r3, r0
 80027dc:	73fb      	strb	r3, [r7, #15]

 	uint8_t *verifyBuffer = TMC2209_sendCommand(read_request_command, TMC_READ_REQUEST_DATAGRAM_SIZE, TMC_REPLY_SIZE, tmc2209);
 80027de:	f107 000c 	add.w	r0, r7, #12
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2208      	movs	r2, #8
 80027e6:	2104      	movs	r1, #4
 80027e8:	f7ff ff66 	bl	80026b8 <TMC2209_sendCommand>
 80027ec:	6178      	str	r0, [r7, #20]
 	// Byte 0: Sync nibble correct?
 	if (verifyBuffer[0] != 0x05){
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b05      	cmp	r3, #5
 80027f4:	d004      	beq.n	8002800 <TMC2209_readInit+0x62>
 		// If first byte equals 0 then it means no reply so return
 		if(ENABLE_DEBUG) debug_print("Invalid data received!(SYNC Byte)\r\n");
 		return tmc2209->driver.STATUS = TMC_SYNC_REPLY_ERROR;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2228      	movs	r2, #40	@ 0x28
 80027fa:	60da      	str	r2, [r3, #12]
 80027fc:	2328      	movs	r3, #40	@ 0x28
 80027fe:	e035      	b.n	800286c <TMC2209_readInit+0xce>
 	}
 	// Byte 1: Master address correct?
 	if (verifyBuffer[1] != 0xFF){
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	3301      	adds	r3, #1
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2bff      	cmp	r3, #255	@ 0xff
 8002808:	d004      	beq.n	8002814 <TMC2209_readInit+0x76>
 		if(ENABLE_DEBUG) debug_print("Invalid data received!(MCU Address)\r\n");
 		return tmc2209->driver.STATUS = TMC_MCU_REPLY_ERROR;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2232      	movs	r2, #50	@ 0x32
 800280e:	60da      	str	r2, [r3, #12]
 8002810:	2332      	movs	r3, #50	@ 0x32
 8002812:	e02b      	b.n	800286c <TMC2209_readInit+0xce>
 	}
 	// Byte 2: Register address correct?
 	if (verifyBuffer[2] != regAddress){
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	3302      	adds	r3, #2
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	429a      	cmp	r2, r3
 800281e:	d004      	beq.n	800282a <TMC2209_readInit+0x8c>
 		if(ENABLE_DEBUG) debug_print("Invalid data received!(Register Address)\r\n");
 		return tmc2209->driver.STATUS = TMC_REG_REPLY_ERROR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	223c      	movs	r2, #60	@ 0x3c
 8002824:	60da      	str	r2, [r3, #12]
 8002826:	233c      	movs	r3, #60	@ 0x3c
 8002828:	e020      	b.n	800286c <TMC2209_readInit+0xce>
 	}
 	// Byte 7: CRC correct?
 	if (verifyBuffer[7] != calculate_CRC(verifyBuffer, 7)){
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	3307      	adds	r3, #7
 800282e:	781c      	ldrb	r4, [r3, #0]
 8002830:	2107      	movs	r1, #7
 8002832:	6978      	ldr	r0, [r7, #20]
 8002834:	f7ff fedc 	bl	80025f0 <calculate_CRC>
 8002838:	4603      	mov	r3, r0
 800283a:	429c      	cmp	r4, r3
 800283c:	d004      	beq.n	8002848 <TMC2209_readInit+0xaa>
 		if(ENABLE_DEBUG) debug_print("Invalid data received!(CRC)\r\n");
 		return tmc2209->driver.STATUS = TMC_CRC_REPLY_ERROR;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2246      	movs	r2, #70	@ 0x46
 8002842:	60da      	str	r2, [r3, #12]
 8002844:	2346      	movs	r3, #70	@ 0x46
 8002846:	e011      	b.n	800286c <TMC2209_readInit+0xce>
 	}
 	return (verifyBuffer[3] << 24) | (verifyBuffer[4] << 16) | (verifyBuffer[5] << 8) | verifyBuffer[6];
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	3303      	adds	r3, #3
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	061a      	lsls	r2, r3, #24
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	3304      	adds	r3, #4
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	041b      	lsls	r3, r3, #16
 8002858:	431a      	orrs	r2, r3
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	3305      	adds	r3, #5
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	021b      	lsls	r3, r3, #8
 8002862:	4313      	orrs	r3, r2
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	3206      	adds	r2, #6
 8002868:	7812      	ldrb	r2, [r2, #0]
 800286a:	4313      	orrs	r3, r2
 }
 800286c:	4618      	mov	r0, r3
 800286e:	371c      	adds	r7, #28
 8002870:	46bd      	mov	sp, r7
 8002872:	bd90      	pop	{r4, r7, pc}

08002874 <TMC2209_setPDNuart>:

bool TMC2209_setPDNuart(Motor *tmc2209, bool enable) {
 8002874:	b580      	push	{r7, lr}
 8002876:	b0aa      	sub	sp, #168	@ 0xa8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	70fb      	strb	r3, [r7, #3]
    // Read current GCONF register value from TMC2209_REG_GCONF
    uint32_t currentGCONF = TMC2209_readInit(tmc2209, TMC2209_REG_GCONF);
 8002880:	2100      	movs	r1, #0
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff ff8b 	bl	800279e <TMC2209_readInit>
 8002888:	4603      	mov	r3, r0
 800288a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        debug_print(debug_msg);
    }

    // Modify the pdn_disable bit (bit 6). When set to 1, pdn_disable is enabled (UART controls the driver).
    // When cleared (0), PDN function is active.
    if (enable) {
 800288e:	78fb      	ldrb	r3, [r7, #3]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d006      	beq.n	80028a2 <TMC2209_setPDNuart+0x2e>
        currentGCONF |= 0x00000040; // Set bit 6 to enable PDN_UART
 8002894:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002898:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800289c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80028a0:	e005      	b.n	80028ae <TMC2209_setPDNuart+0x3a>
        if (ENABLE_DEBUG) {
            debug_print("Enabling PDN_UART (pdn_disable=1).\r\n");
        }
    } else {
        currentGCONF &= ~(0x00000040); // Clear bit 6 to disable PDN_UART
 80028a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80028a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            debug_print("Disabling PDN_UART (pdn_disable=0).\r\n");
        }
    }

    // Write back the updated GCONF register value
    TMC2209_writeInit(tmc2209, TMC2209_REG_GCONF, currentGCONF);
 80028ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80028b2:	461a      	mov	r2, r3
 80028b4:	2100      	movs	r1, #0
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff ff3e 	bl	8002738 <TMC2209_writeInit>
    HAL_Delay(2); // Allow time for the write to complete
 80028bc:	2002      	movs	r0, #2
 80028be:	f004 fab3 	bl	8006e28 <HAL_Delay>

    // Optionally, check if the write was successful by re-reading the register
    uint32_t updatedGCONF = TMC2209_readInit(tmc2209, TMC2209_REG_GCONF);
 80028c2:	2100      	movs	r1, #0
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff ff6a 	bl	800279e <TMC2209_readInit>
 80028ca:	4603      	mov	r3, r0
 80028cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    HAL_Delay(2);
 80028d0:	2002      	movs	r0, #2
 80028d2:	f004 faa9 	bl	8006e28 <HAL_Delay>
        sprintf(verify_msg, sizeof(verify_msg), "Updated GCONF = 0x%08lX\r\n", updatedGCONF);
        debug_print(verify_msg);
    }

    // Verify that the pdn_disable bit matches the intended configuration
    bool bitSet = (updatedGCONF & 0x00000040) ? true : false;
 80028d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028da:	099b      	lsrs	r3, r3, #6
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	bf14      	ite	ne
 80028e4:	2301      	movne	r3, #1
 80028e6:	2300      	moveq	r3, #0
 80028e8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    if (bitSet == enable) {
 80028ec:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d105      	bne.n	8002902 <TMC2209_setPDNuart+0x8e>
        return tmc2209->driver.pdn_disable = 1;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80028fe:	2301      	movs	r3, #1
 8002900:	e004      	b.n	800290c <TMC2209_setPDNuart+0x98>
    } else {
        if (ENABLE_DEBUG) {
            debug_print("PDN_UART configuration failed to update correctly!\r\n");
        }
        return tmc2209->driver.pdn_disable = 0;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800290a:	2300      	movs	r3, #0
    }
}
 800290c:	4618      	mov	r0, r3
 800290e:	37a8      	adds	r7, #168	@ 0xa8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <TMC2209_read_ifcnt>:



void TMC2209_read_ifcnt(Motor *tmc2209) {
 8002914:	b580      	push	{r7, lr}
 8002916:	b09c      	sub	sp, #112	@ 0x70
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
     int32_t ifcnt_value = TMC2209_readInit(tmc2209, TMC2209_REG_IFCNT); // IFCNT register address is 0x02
 800291c:	2102      	movs	r1, #2
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff ff3d 	bl	800279e <TMC2209_readInit>
 8002924:	66f8      	str	r0, [r7, #108]	@ 0x6c
     if (ifcnt_value >= 0) { // This value gets incremented with every sucessful UART write access 0 to 255 then wraps around.
 8002926:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002928:	2b00      	cmp	r3, #0
 800292a:	db03      	blt.n	8002934 <TMC2209_read_ifcnt+0x20>
    	 if(ENABLE_DEBUG){
         char debug_msg[100];
         sprintf(debug_msg, "IFCNT Value: %d\r\n",  (int)ifcnt_value);
         debug_print(debug_msg);
    	 }
         tmc2209->driver.IFCNT = ifcnt_value;
 800292c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	621a      	str	r2, [r3, #32]
    	 if (ENABLE_DEBUG)
         debug_print("Failed to read IFCNT register!\r\n");
         tmc2209->driver.IFCNT = TMC_IFCNT_ERROR;
     }

 }
 8002932:	e003      	b.n	800293c <TMC2209_read_ifcnt+0x28>
         tmc2209->driver.IFCNT = TMC_IFCNT_ERROR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f06f 024f 	mvn.w	r2, #79	@ 0x4f
 800293a:	621a      	str	r2, [r3, #32]
 }
 800293c:	bf00      	nop
 800293e:	3770      	adds	r7, #112	@ 0x70
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <TMC2209_setSpreadCycle>:
    }
    return (tmc2209->driver.GCONF = true);
}


uint16_t TMC2209_setSpreadCycle(Motor *tmc2209, uint8_t enable) {
 8002944:	b580      	push	{r7, lr}
 8002946:	b0ac      	sub	sp, #176	@ 0xb0
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	70fb      	strb	r3, [r7, #3]
	uint32_t gconf;
	uint32_t check_gconf;
	uint8_t driverID = tmc2209->driver.id;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
	int32_t IFCNT = tmc2209->driver.IFCNT;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	char debug_msg[150];
	snprintf(debug_msg, sizeof(debug_msg), "Setting SpreadCycle Mode for Driver: %u\r\n", driverID);
	debug_print(debug_msg);
	}

	gconf = TMC2209_readInit(tmc2209, TMC2209_REG_GCONF);
 8002960:	2100      	movs	r1, #0
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff ff1b 	bl	800279e <TMC2209_readInit>
 8002968:	4603      	mov	r3, r0
 800296a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

    if(tmc2209->driver.STATUS != TMC_OK){
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <TMC2209_setSpreadCycle+0x3a>
    	if (ENABLE_DEBUG) debug_print("Failed to set SpreadCycle Mode!(Invalid Reply 1)\r\n");
    	return gconf;
 8002976:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800297a:	b29b      	uxth	r3, r3
 800297c:	e03c      	b.n	80029f8 <TMC2209_setSpreadCycle+0xb4>
    }

    check_gconf = gconf;
 800297e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002982:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if(enable) {
 8002986:	78fb      	ldrb	r3, [r7, #3]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d006      	beq.n	800299a <TMC2209_setSpreadCycle+0x56>
    	gconf |= (1 << TMC2209_EN_SPREADCYCLE_POS);
 800298c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002990:	f043 0304 	orr.w	r3, r3, #4
 8002994:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002998:	e005      	b.n	80029a6 <TMC2209_setSpreadCycle+0x62>
    } else {
    	gconf &= ~(1 << TMC2209_EN_SPREADCYCLE_POS);
 800299a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800299e:	f023 0304 	bic.w	r3, r3, #4
 80029a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    if(gconf == check_gconf){ //Setpread is already EN/DIS ABLED so skip and return
 80029a6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80029aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d102      	bne.n	80029b8 <TMC2209_setSpreadCycle+0x74>
    	if (ENABLE_DEBUG) debug_print("Failed to set SpreadCycle Mode! (Spread is already on that Mode!)\r\n");
    	return enable;
 80029b2:	78fb      	ldrb	r3, [r7, #3]
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	e01f      	b.n	80029f8 <TMC2209_setSpreadCycle+0xb4>
    }

    TMC2209_writeInit(tmc2209, TMC2209_REG_GCONF, gconf);
 80029b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029bc:	461a      	mov	r2, r3
 80029be:	2100      	movs	r1, #0
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff feb9 	bl	8002738 <TMC2209_writeInit>
    TMC2209_read_ifcnt(tmc2209);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff ffa4 	bl	8002914 <TMC2209_read_ifcnt>
    if(tmc2209->driver.IFCNT <= IFCNT){
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1a      	ldr	r2, [r3, #32]
 80029d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d804      	bhi.n	80029e2 <TMC2209_setSpreadCycle+0x9e>
    	tmc2209->driver.chopperMode = 0;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	779a      	strb	r2, [r3, #30]
    	if (ENABLE_DEBUG) debug_print("Failed to set SpreadCycle Mode!\r\n");
    	return TMC_SET_SPREADCYCLE_ERROR;
 80029de:	2369      	movs	r3, #105	@ 0x69
 80029e0:	e00a      	b.n	80029f8 <TMC2209_setSpreadCycle+0xb4>
    }

    check_gconf = TMC2209_readInit(tmc2209, TMC2209_REG_GCONF);
 80029e2:	2100      	movs	r1, #0
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff feda 	bl	800279e <TMC2209_readInit>
 80029ea:	4603      	mov	r3, r0
 80029ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if(check_gconf != gconf){
    	if (ENABLE_DEBUG) debug_print("Failed to set SpreadCycle Mode!(invalid Reply 2)\r\n");
    }

    tmc2209->driver.chopperMode = 1;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	779a      	strb	r2, [r3, #30]
    return TMC_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	37b0      	adds	r7, #176	@ 0xb0
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <TMC2209_setMicrosteppingResolution>:
    tmc2209->driver.chopperMode = spreadCycleEnabled; // Return 1 if SpreadCycle is enabled, 0 otherwise
}


// Function to set the microstepping resolution through UART
uint32_t TMC2209_setMicrosteppingResolution(Motor *tmc2209, uint16_t resolution) {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b0ae      	sub	sp, #184	@ 0xb8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	807b      	strh	r3, [r7, #2]
    uint8_t driverID = tmc2209->driver.id;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
    int32_t IFCNT = tmc2209->driver.IFCNT;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    snprintf(debug_msg, sizeof(debug_msg), "Setting Microstepping For Driver ID: %u \r\n", driverID);
    debug_print(debug_msg);
    memset(debug_msg, 0, sizeof(debug_msg)); // clear buffer
    }
    // Ensure GCONF is set to enable UART control for microstepping resolution
    uint8_t gconf = 0x80; // Bit 7 (mstep_reg_select) set to 1. This to change the option to control mstepping using UART instead of MS1 & MS2 pins
 8002a1c:	2380      	movs	r3, #128	@ 0x80
 8002a1e:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
    TMC2209_writeInit(tmc2209, TMC2209_REG_GCONF, gconf);
 8002a22:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8002a26:	461a      	mov	r2, r3
 8002a28:	2100      	movs	r1, #0
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff fe84 	bl	8002738 <TMC2209_writeInit>

    HAL_Delay(2);
 8002a30:	2002      	movs	r0, #2
 8002a32:	f004 f9f9 	bl	8006e28 <HAL_Delay>
    // Read the current CHOPCONF register value
    uint32_t currentCHOPCONF = TMC2209_readInit(tmc2209, TMC2209_REG_CHOPCONF);
 8002a36:	216c      	movs	r1, #108	@ 0x6c
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff feb0 	bl	800279e <TMC2209_readInit>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

    HAL_Delay(2);
 8002a44:	2002      	movs	r0, #2
 8002a46:	f004 f9ef 	bl	8006e28 <HAL_Delay>

    // Extract the current microstepping resolution (MRES) bits [24:27]
    uint8_t currentMRES = (currentCHOPCONF >> 24) & 0x0F;
 8002a4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a4e:	0e1b      	lsrs	r3, r3, #24
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

    // Determine the MRES value for the new resolution
    uint8_t newMRES;
    switch (resolution) {
 8002a5a:	887b      	ldrh	r3, [r7, #2]
 8002a5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a60:	d053      	beq.n	8002b0a <TMC2209_setMicrosteppingResolution+0x10a>
 8002a62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a66:	dc74      	bgt.n	8002b52 <TMC2209_setMicrosteppingResolution+0x152>
 8002a68:	2b80      	cmp	r3, #128	@ 0x80
 8002a6a:	d052      	beq.n	8002b12 <TMC2209_setMicrosteppingResolution+0x112>
 8002a6c:	2b80      	cmp	r3, #128	@ 0x80
 8002a6e:	dc70      	bgt.n	8002b52 <TMC2209_setMicrosteppingResolution+0x152>
 8002a70:	2b20      	cmp	r3, #32
 8002a72:	dc47      	bgt.n	8002b04 <TMC2209_setMicrosteppingResolution+0x104>
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	dd6c      	ble.n	8002b52 <TMC2209_setMicrosteppingResolution+0x152>
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	2b1f      	cmp	r3, #31
 8002a7c:	d869      	bhi.n	8002b52 <TMC2209_setMicrosteppingResolution+0x152>
 8002a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8002a84 <TMC2209_setMicrosteppingResolution+0x84>)
 8002a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a84:	08002b4b 	.word	0x08002b4b
 8002a88:	08002b43 	.word	0x08002b43
 8002a8c:	08002b53 	.word	0x08002b53
 8002a90:	08002b3b 	.word	0x08002b3b
 8002a94:	08002b53 	.word	0x08002b53
 8002a98:	08002b53 	.word	0x08002b53
 8002a9c:	08002b53 	.word	0x08002b53
 8002aa0:	08002b33 	.word	0x08002b33
 8002aa4:	08002b53 	.word	0x08002b53
 8002aa8:	08002b53 	.word	0x08002b53
 8002aac:	08002b53 	.word	0x08002b53
 8002ab0:	08002b53 	.word	0x08002b53
 8002ab4:	08002b53 	.word	0x08002b53
 8002ab8:	08002b53 	.word	0x08002b53
 8002abc:	08002b53 	.word	0x08002b53
 8002ac0:	08002b2b 	.word	0x08002b2b
 8002ac4:	08002b53 	.word	0x08002b53
 8002ac8:	08002b53 	.word	0x08002b53
 8002acc:	08002b53 	.word	0x08002b53
 8002ad0:	08002b53 	.word	0x08002b53
 8002ad4:	08002b53 	.word	0x08002b53
 8002ad8:	08002b53 	.word	0x08002b53
 8002adc:	08002b53 	.word	0x08002b53
 8002ae0:	08002b53 	.word	0x08002b53
 8002ae4:	08002b53 	.word	0x08002b53
 8002ae8:	08002b53 	.word	0x08002b53
 8002aec:	08002b53 	.word	0x08002b53
 8002af0:	08002b53 	.word	0x08002b53
 8002af4:	08002b53 	.word	0x08002b53
 8002af8:	08002b53 	.word	0x08002b53
 8002afc:	08002b53 	.word	0x08002b53
 8002b00:	08002b23 	.word	0x08002b23
 8002b04:	2b40      	cmp	r3, #64	@ 0x40
 8002b06:	d008      	beq.n	8002b1a <TMC2209_setMicrosteppingResolution+0x11a>
 8002b08:	e023      	b.n	8002b52 <TMC2209_setMicrosteppingResolution+0x152>
        case 256:
            newMRES = 0x00; // %0000 -> 256 microsteps
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b10:	e024      	b.n	8002b5c <TMC2209_setMicrosteppingResolution+0x15c>
        case 128:
            newMRES = 0x01; // %0001 -> 128 microsteps
 8002b12:	2301      	movs	r3, #1
 8002b14:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b18:	e020      	b.n	8002b5c <TMC2209_setMicrosteppingResolution+0x15c>
        case 64:
            newMRES = 0x02; // %0010 -> 64 microsteps
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b20:	e01c      	b.n	8002b5c <TMC2209_setMicrosteppingResolution+0x15c>
        case 32:
            newMRES = 0x03; // %0011 -> 32 microsteps
 8002b22:	2303      	movs	r3, #3
 8002b24:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b28:	e018      	b.n	8002b5c <TMC2209_setMicrosteppingResolution+0x15c>
        case 16:
            newMRES = 0x04; // %0100 -> 16 microsteps
 8002b2a:	2304      	movs	r3, #4
 8002b2c:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b30:	e014      	b.n	8002b5c <TMC2209_setMicrosteppingResolution+0x15c>
        case 8:
            newMRES = 0x05; // %0101 -> 8 microsteps
 8002b32:	2305      	movs	r3, #5
 8002b34:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b38:	e010      	b.n	8002b5c <TMC2209_setMicrosteppingResolution+0x15c>
        case 4:
            newMRES = 0x06; // %0110 -> 4 microsteps
 8002b3a:	2306      	movs	r3, #6
 8002b3c:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b40:	e00c      	b.n	8002b5c <TMC2209_setMicrosteppingResolution+0x15c>
        case 2:
            newMRES = 0x07; // %0111 -> 2 microsteps
 8002b42:	2307      	movs	r3, #7
 8002b44:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b48:	e008      	b.n	8002b5c <TMC2209_setMicrosteppingResolution+0x15c>
        case 1:
            newMRES = 0x08; // %1000 -> Full step
 8002b4a:	2308      	movs	r3, #8
 8002b4c:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b50:	e004      	b.n	8002b5c <TMC2209_setMicrosteppingResolution+0x15c>
        default:
            newMRES = currentMRES; // Keep the current resolution if invalid value is provided
 8002b52:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002b56:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b5a:	bf00      	nop
    }

    // If the resolution has not changed, do nothing
    if (newMRES == currentMRES) {
 8002b5c:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 8002b60:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d105      	bne.n	8002b74 <TMC2209_setMicrosteppingResolution+0x174>
    	if (ENABLE_DEBUG) debug_print("Resolution unchanged, no update needed.\r\n");
        return tmc2209->driver.mstep = resolution;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	887a      	ldrh	r2, [r7, #2]
 8002b6c:	839a      	strh	r2, [r3, #28]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	8b9b      	ldrh	r3, [r3, #28]
 8002b72:	e025      	b.n	8002bc0 <TMC2209_setMicrosteppingResolution+0x1c0>
    }
   // HAL_Delay(2);
    // Update the CHOPCONF register with the new MRES value
    uint32_t updatedCHOPCONF = (currentCHOPCONF & ~(0x0F << 24)) | (newMRES << 24);
 8002b74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b78:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8002b7c:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8002b80:	061b      	lsls	r3, r3, #24
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    TMC2209_writeInit(tmc2209, TMC2209_REG_CHOPCONF, updatedCHOPCONF);
 8002b88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	216c      	movs	r1, #108	@ 0x6c
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7ff fdd1 	bl	8002738 <TMC2209_writeInit>
    HAL_Delay(2);
 8002b96:	2002      	movs	r0, #2
 8002b98:	f004 f946 	bl	8006e28 <HAL_Delay>

    TMC2209_read_ifcnt(tmc2209);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff feb9 	bl	8002914 <TMC2209_read_ifcnt>

    if(tmc2209->driver.IFCNT <= IFCNT){
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1a      	ldr	r2, [r3, #32]
 8002ba6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d804      	bhi.n	8002bb8 <TMC2209_setMicrosteppingResolution+0x1b8>
    	if (ENABLE_DEBUG) debug_print("Failed to set microstepping.\r\n");
    	return tmc2209->driver.mstep = TMC_SET_MSTEP_ERROR;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	226e      	movs	r2, #110	@ 0x6e
 8002bb2:	839a      	strh	r2, [r3, #28]
 8002bb4:	236e      	movs	r3, #110	@ 0x6e
 8002bb6:	e003      	b.n	8002bc0 <TMC2209_setMicrosteppingResolution+0x1c0>
    }
    // Debug
    tmc2209->driver.mstep = resolution;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	887a      	ldrh	r2, [r7, #2]
 8002bbc:	839a      	strh	r2, [r3, #28]

    if (ENABLE_DEBUG) {
    	sprintf(debug_msg, "Updated microstepping resolution to: %d\r\n", resolution);
    	debug_print(debug_msg);
    }
    return TMC_OK;
 8002bbe:	2300      	movs	r3, #0

}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	37b8      	adds	r7, #184	@ 0xb8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <TMC2209_enableStallDetection>:

    return 25.0f;
}


uint8_t TMC2209_enableStallDetection(Motor *tmc2209, uint8_t sgthrs) {
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	70fb      	strb	r3, [r7, #3]
	int32_t IFCNT = tmc2209->driver.IFCNT;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	60fb      	str	r3, [r7, #12]

    TMC2209_writeInit(tmc2209, TMC2209_REG_SGTHRS, sgthrs);    // Set StallGuard threshold (SGTHRS)
 8002bda:	78fb      	ldrb	r3, [r7, #3]
 8002bdc:	461a      	mov	r2, r3
 8002bde:	2140      	movs	r1, #64	@ 0x40
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff fda9 	bl	8002738 <TMC2209_writeInit>

    TMC2209_read_ifcnt(tmc2209);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff fe94 	bl	8002914 <TMC2209_read_ifcnt>
    if (tmc2209->driver.IFCNT <= IFCNT){
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a1a      	ldr	r2, [r3, #32]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d807      	bhi.n	8002c06 <TMC2209_enableStallDetection+0x3e>
    	if(ENABLE_DEBUG) debug_print("Failed to set Send Delay! \r\n");
    	return tmc2209->driver.stallEnabled = TMC_ENABLESTALL_ERROR;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	220a      	movs	r2, #10
 8002bfa:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002c04:	e006      	b.n	8002c14 <TMC2209_enableStallDetection+0x4c>
    }


    return tmc2209->driver.stallEnabled = 1;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29

}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <TMC2209_SetTCoolThrs>:

void TMC2209_SetTCoolThrs(Motor *tmc2209, uint32_t stepFrequency) {
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
    const uint32_t fCLK = 12000000; // TMC2209 Internal clock frequency: 12 MHz
 8002c26:	4b13      	ldr	r3, [pc, #76]	@ (8002c74 <TMC2209_SetTCoolThrs+0x58>)
 8002c28:	613b      	str	r3, [r7, #16]
    uint32_t tStep = fCLK / stepFrequency; // The internal clokc trims step frequency that's why we divied it.
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c32:	617b      	str	r3, [r7, #20]

    // Ensure tStep doesn't exceed 20 bits (valid for TCOOLTHRS register)
    if (tStep > 0xFFFFF) {
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c3a:	d301      	bcc.n	8002c40 <TMC2209_SetTCoolThrs+0x24>
        tStep = 0xFFFFF;
 8002c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c78 <TMC2209_SetTCoolThrs+0x5c>)
 8002c3e:	617b      	str	r3, [r7, #20]
    }

    int32_t IFCNT = tmc2209->driver.IFCNT;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	60fb      	str	r3, [r7, #12]

    if (tmc2209->driver.IFCNT <= IFCNT){
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1a      	ldr	r2, [r3, #32]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d803      	bhi.n	8002c58 <TMC2209_SetTCoolThrs+0x3c>
    	if(ENABLE_DEBUG) debug_print("Failed to set Send Delay! \r\n");
    	tmc2209->driver.TCoolThrs = TMC2209_TCOOLTHRS_ERROR;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f06f 0209 	mvn.w	r2, #9
 8002c56:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    TMC2209_writeInit(tmc2209, TMC2209_REG_TCOOLTHRS, tStep);
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	2114      	movs	r1, #20
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7ff fd6a 	bl	8002738 <TMC2209_writeInit>
    tmc2209->driver.TCoolThrs = tStep;
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002c6a:	bf00      	nop
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	00b71b00 	.word	0x00b71b00
 8002c78:	000fffff 	.word	0x000fffff

08002c7c <TMC2209_readStandstillIndicator>:
    }

    tmc2209->driver.SG_RESULT = sg_result;
}

bool TMC2209_readStandstillIndicator(Motor *tmc2209) {
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
    // Read the DRV_STATUS register. Ensure that TMC2209_REG_DRV_STATUS is defined, typically 0x6F.
    uint32_t drvStatus = TMC2209_readInit(tmc2209, TMC2209_REG_DRVSTATUS);
 8002c84:	216f      	movs	r1, #111	@ 0x6f
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff fd89 	bl	800279e <TMC2209_readInit>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	60fb      	str	r3, [r7, #12]
        sprintf(debug_msg, "DRV_STATUS = 0x%08lX\r\n", drvStatus);
        debug_print(debug_msg);
    #endif

    // Check the standstill bit. stst is typically bit 31.
    if(drvStatus & (1UL << 31)) {
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	da08      	bge.n	8002ca8 <TMC2209_readStandstillIndicator+0x2c>
        return tmc2209->driver.standstill;  // Motor is at standstill
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf14      	ite	ne
 8002ca0:	2301      	movne	r3, #1
 8002ca2:	2300      	moveq	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	e007      	b.n	8002cb8 <TMC2209_readStandstillIndicator+0x3c>
    } else {
        return tmc2209->driver.standstill; // Motor is not at standstill
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	bf14      	ite	ne
 8002cb2:	2301      	movne	r3, #1
 8002cb4:	2300      	moveq	r3, #0
 8002cb6:	b2db      	uxtb	r3, r3
    }
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <initializeMotors>:
// Motors & axis
extern Motor motors[MAX_MOTORS];
extern Axis axes[MAX_MOTORS_PER_AXIS];


void initializeMotors() {
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
    // Initialize each motor in the array
    for (int i = 0; i < MAX_MOTORS; i++) {
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	e2ad      	b.n	8003228 <initializeMotors+0x568>
    	// Setting all for all drivers/motors
    	 // UART handler
    	motors[i].driver.address = 0x03; // Address : 0x00, 0x01 ... Depends on MS1 AND MS2 // All drivers address 3 since they're on different uarts. If uart failed MSTEP 16 by default.
 8002ccc:	4abd      	ldr	r2, [pc, #756]	@ (8002fc4 <initializeMotors+0x304>)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	21a4      	movs	r1, #164	@ 0xa4
 8002cd2:	fb01 f303 	mul.w	r3, r1, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3308      	adds	r3, #8
 8002cda:	2203      	movs	r2, #3
 8002cdc:	701a      	strb	r2, [r3, #0]

    	// Motor Parameters
    	motors[i].driver.id = i ;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	b2d8      	uxtb	r0, r3
 8002ce2:	4ab8      	ldr	r2, [pc, #736]	@ (8002fc4 <initializeMotors+0x304>)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	21a4      	movs	r1, #164	@ 0xa4
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	4413      	add	r3, r2
 8002cee:	4602      	mov	r2, r0
 8002cf0:	701a      	strb	r2, [r3, #0]
    	motors[i].driver.STATUS = TMC_OK;
 8002cf2:	4ab4      	ldr	r2, [pc, #720]	@ (8002fc4 <initializeMotors+0x304>)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	21a4      	movs	r1, #164	@ 0xa4
 8002cf8:	fb01 f303 	mul.w	r3, r1, r3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	330c      	adds	r3, #12
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
        motors[i].driver.GCONF = 0;
 8002d04:	4aaf      	ldr	r2, [pc, #700]	@ (8002fc4 <initializeMotors+0x304>)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	21a4      	movs	r1, #164	@ 0xa4
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	3325      	adds	r3, #37	@ 0x25
 8002d12:	2200      	movs	r2, #0
 8002d14:	701a      	strb	r2, [r3, #0]
        motors[i].driver.IFCNT = 0;
 8002d16:	4aab      	ldr	r2, [pc, #684]	@ (8002fc4 <initializeMotors+0x304>)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	21a4      	movs	r1, #164	@ 0xa4
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	4413      	add	r3, r2
 8002d22:	3320      	adds	r3, #32
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
        motors[i].driver.chopperMode = 0;
 8002d28:	4aa6      	ldr	r2, [pc, #664]	@ (8002fc4 <initializeMotors+0x304>)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	21a4      	movs	r1, #164	@ 0xa4
 8002d2e:	fb01 f303 	mul.w	r3, r1, r3
 8002d32:	4413      	add	r3, r2
 8002d34:	331e      	adds	r3, #30
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]
        motors[i].driver.SG_RESULT = 0;
 8002d3a:	4aa2      	ldr	r2, [pc, #648]	@ (8002fc4 <initializeMotors+0x304>)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	21a4      	movs	r1, #164	@ 0xa4
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	4413      	add	r3, r2
 8002d46:	332c      	adds	r3, #44	@ 0x2c
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
        motors[i].driver.checkSG_RESULT = 0;
 8002d4c:	4a9d      	ldr	r2, [pc, #628]	@ (8002fc4 <initializeMotors+0x304>)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	21a4      	movs	r1, #164	@ 0xa4
 8002d52:	fb01 f303 	mul.w	r3, r1, r3
 8002d56:	4413      	add	r3, r2
 8002d58:	3330      	adds	r3, #48	@ 0x30
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	701a      	strb	r2, [r3, #0]
        motors[i].driver.TCoolThrs = 0;
 8002d5e:	4a99      	ldr	r2, [pc, #612]	@ (8002fc4 <initializeMotors+0x304>)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	21a4      	movs	r1, #164	@ 0xa4
 8002d64:	fb01 f303 	mul.w	r3, r1, r3
 8002d68:	4413      	add	r3, r2
 8002d6a:	3334      	adds	r3, #52	@ 0x34
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
        motors[i].driver.stepFrequency = 0;
 8002d70:	4a94      	ldr	r2, [pc, #592]	@ (8002fc4 <initializeMotors+0x304>)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	21a4      	movs	r1, #164	@ 0xa4
 8002d76:	fb01 f303 	mul.w	r3, r1, r3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3318      	adds	r3, #24
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
        motors[i].driver.IRUN = 0;
 8002d82:	4a90      	ldr	r2, [pc, #576]	@ (8002fc4 <initializeMotors+0x304>)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	21a4      	movs	r1, #164	@ 0xa4
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3326      	adds	r3, #38	@ 0x26
 8002d90:	2200      	movs	r2, #0
 8002d92:	701a      	strb	r2, [r3, #0]
        motors[i].driver.IHOLD = 0;
 8002d94:	4a8b      	ldr	r2, [pc, #556]	@ (8002fc4 <initializeMotors+0x304>)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	21a4      	movs	r1, #164	@ 0xa4
 8002d9a:	fb01 f303 	mul.w	r3, r1, r3
 8002d9e:	4413      	add	r3, r2
 8002da0:	3327      	adds	r3, #39	@ 0x27
 8002da2:	2200      	movs	r2, #0
 8002da4:	701a      	strb	r2, [r3, #0]


        motors[i].fullSteps = 0;
 8002da6:	4a87      	ldr	r2, [pc, #540]	@ (8002fc4 <initializeMotors+0x304>)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	21a4      	movs	r1, #164	@ 0xa4
 8002dac:	fb01 f303 	mul.w	r3, r1, r3
 8002db0:	4413      	add	r3, r2
 8002db2:	3374      	adds	r3, #116	@ 0x74
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
        motors[i].stepsTaken = 0;
 8002db8:	4a82      	ldr	r2, [pc, #520]	@ (8002fc4 <initializeMotors+0x304>)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	21a4      	movs	r1, #164	@ 0xa4
 8002dbe:	fb01 f303 	mul.w	r3, r1, r3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3370      	adds	r3, #112	@ 0x70
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]
        motors[i].nextTotalSteps = 0;
 8002dca:	4a7e      	ldr	r2, [pc, #504]	@ (8002fc4 <initializeMotors+0x304>)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	21a4      	movs	r1, #164	@ 0xa4
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3378      	adds	r3, #120	@ 0x78
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
        motors[i].currentPositionMM = 0;
 8002ddc:	4a79      	ldr	r2, [pc, #484]	@ (8002fc4 <initializeMotors+0x304>)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	21a4      	movs	r1, #164	@ 0xa4
 8002de2:	fb01 f303 	mul.w	r3, r1, r3
 8002de6:	4413      	add	r3, r2
 8002de8:	3384      	adds	r3, #132	@ 0x84
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
        motors[i].nextPositionMM = 0;
 8002df0:	4a74      	ldr	r2, [pc, #464]	@ (8002fc4 <initializeMotors+0x304>)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	21a4      	movs	r1, #164	@ 0xa4
 8002df6:	fb01 f303 	mul.w	r3, r1, r3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3388      	adds	r3, #136	@ 0x88
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
        motors[i].isStepping = false;
 8002e04:	4a6f      	ldr	r2, [pc, #444]	@ (8002fc4 <initializeMotors+0x304>)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	21a4      	movs	r1, #164	@ 0xa4
 8002e0a:	fb01 f303 	mul.w	r3, r1, r3
 8002e0e:	4413      	add	r3, r2
 8002e10:	338c      	adds	r3, #140	@ 0x8c
 8002e12:	2200      	movs	r2, #0
 8002e14:	701a      	strb	r2, [r3, #0]
        motors[i].STALL = 0;
 8002e16:	4a6b      	ldr	r2, [pc, #428]	@ (8002fc4 <initializeMotors+0x304>)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	21a4      	movs	r1, #164	@ 0xa4
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	4413      	add	r3, r2
 8002e22:	33a0      	adds	r3, #160	@ 0xa0
 8002e24:	2200      	movs	r2, #0
 8002e26:	701a      	strb	r2, [r3, #0]


        if(i == 0){
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d178      	bne.n	8002f20 <initializeMotors+0x260>
         // Configure motor 1 X-axis

        // TIMER configurations
        motors[i].driver.huart = &huart2;
 8002e2e:	4a65      	ldr	r2, [pc, #404]	@ (8002fc4 <initializeMotors+0x304>)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	21a4      	movs	r1, #164	@ 0xa4
 8002e34:	fb01 f303 	mul.w	r3, r1, r3
 8002e38:	4413      	add	r3, r2
 8002e3a:	3304      	adds	r3, #4
 8002e3c:	4a62      	ldr	r2, [pc, #392]	@ (8002fc8 <initializeMotors+0x308>)
 8002e3e:	601a      	str	r2, [r3, #0]
        motors[i].driver.htim = &htim2;				 // TIMER HANDLER
 8002e40:	4a60      	ldr	r2, [pc, #384]	@ (8002fc4 <initializeMotors+0x304>)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	21a4      	movs	r1, #164	@ 0xa4
 8002e46:	fb01 f303 	mul.w	r3, r1, r3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3310      	adds	r3, #16
 8002e4e:	4a5f      	ldr	r2, [pc, #380]	@ (8002fcc <initializeMotors+0x30c>)
 8002e50:	601a      	str	r2, [r3, #0]
        motors[i].driver.step_channel = TIM_CHANNEL_3; // PWM channel for motor 1
 8002e52:	4a5c      	ldr	r2, [pc, #368]	@ (8002fc4 <initializeMotors+0x304>)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	21a4      	movs	r1, #164	@ 0xa4
 8002e58:	fb01 f303 	mul.w	r3, r1, r3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3314      	adds	r3, #20
 8002e60:	2208      	movs	r2, #8
 8002e62:	601a      	str	r2, [r3, #0]
        motors[i].driver.mstep = 0;
 8002e64:	4a57      	ldr	r2, [pc, #348]	@ (8002fc4 <initializeMotors+0x304>)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	21a4      	movs	r1, #164	@ 0xa4
 8002e6a:	fb01 f303 	mul.w	r3, r1, r3
 8002e6e:	4413      	add	r3, r2
 8002e70:	331c      	adds	r3, #28
 8002e72:	2200      	movs	r2, #0
 8002e74:	801a      	strh	r2, [r3, #0]

        motors[i].stepsPerRevolution = 200;
 8002e76:	4a53      	ldr	r2, [pc, #332]	@ (8002fc4 <initializeMotors+0x304>)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	21a4      	movs	r1, #164	@ 0xa4
 8002e7c:	fb01 f303 	mul.w	r3, r1, r3
 8002e80:	4413      	add	r3, r2
 8002e82:	3364      	adds	r3, #100	@ 0x64
 8002e84:	22c8      	movs	r2, #200	@ 0xc8
 8002e86:	601a      	str	r2, [r3, #0]
        // GPIO PINS
        motors[i].driver.step_port = STEP1_GPIO_Port;
 8002e88:	4a4e      	ldr	r2, [pc, #312]	@ (8002fc4 <initializeMotors+0x304>)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	21a4      	movs	r1, #164	@ 0xa4
 8002e8e:	fb01 f303 	mul.w	r3, r1, r3
 8002e92:	4413      	add	r3, r2
 8002e94:	333c      	adds	r3, #60	@ 0x3c
 8002e96:	4a4e      	ldr	r2, [pc, #312]	@ (8002fd0 <initializeMotors+0x310>)
 8002e98:	601a      	str	r2, [r3, #0]
        motors[i].driver.step_pin = STEP1_Pin;
 8002e9a:	4a4a      	ldr	r2, [pc, #296]	@ (8002fc4 <initializeMotors+0x304>)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	21a4      	movs	r1, #164	@ 0xa4
 8002ea0:	fb01 f303 	mul.w	r3, r1, r3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3340      	adds	r3, #64	@ 0x40
 8002ea8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002eac:	801a      	strh	r2, [r3, #0]
        motors[i].driver.dir_port = DIR1_GPIO_Port;
 8002eae:	4a45      	ldr	r2, [pc, #276]	@ (8002fc4 <initializeMotors+0x304>)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	21a4      	movs	r1, #164	@ 0xa4
 8002eb4:	fb01 f303 	mul.w	r3, r1, r3
 8002eb8:	4413      	add	r3, r2
 8002eba:	3344      	adds	r3, #68	@ 0x44
 8002ebc:	4a45      	ldr	r2, [pc, #276]	@ (8002fd4 <initializeMotors+0x314>)
 8002ebe:	601a      	str	r2, [r3, #0]
        motors[i].driver.dir_pin = DIR1_Pin;
 8002ec0:	4a40      	ldr	r2, [pc, #256]	@ (8002fc4 <initializeMotors+0x304>)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	21a4      	movs	r1, #164	@ 0xa4
 8002ec6:	fb01 f303 	mul.w	r3, r1, r3
 8002eca:	4413      	add	r3, r2
 8002ecc:	3348      	adds	r3, #72	@ 0x48
 8002ece:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002ed2:	801a      	strh	r2, [r3, #0]
        motors[i].driver.enn_port = ENN1_GPIO_Port;
 8002ed4:	4a3b      	ldr	r2, [pc, #236]	@ (8002fc4 <initializeMotors+0x304>)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	21a4      	movs	r1, #164	@ 0xa4
 8002eda:	fb01 f303 	mul.w	r3, r1, r3
 8002ede:	4413      	add	r3, r2
 8002ee0:	334c      	adds	r3, #76	@ 0x4c
 8002ee2:	4a3b      	ldr	r2, [pc, #236]	@ (8002fd0 <initializeMotors+0x310>)
 8002ee4:	601a      	str	r2, [r3, #0]
        motors[i].driver.enn_pin = ENN1_Pin;
 8002ee6:	4a37      	ldr	r2, [pc, #220]	@ (8002fc4 <initializeMotors+0x304>)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	21a4      	movs	r1, #164	@ 0xa4
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3350      	adds	r3, #80	@ 0x50
 8002ef4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ef8:	801a      	strh	r2, [r3, #0]
        motors[i].driver.diag_port = DIAG1_GPIO_Port;
 8002efa:	4a32      	ldr	r2, [pc, #200]	@ (8002fc4 <initializeMotors+0x304>)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	21a4      	movs	r1, #164	@ 0xa4
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	4413      	add	r3, r2
 8002f06:	3354      	adds	r3, #84	@ 0x54
 8002f08:	4a33      	ldr	r2, [pc, #204]	@ (8002fd8 <initializeMotors+0x318>)
 8002f0a:	601a      	str	r2, [r3, #0]
        motors[i].driver.diag_pin = DIAG1_Pin;
 8002f0c:	4a2d      	ldr	r2, [pc, #180]	@ (8002fc4 <initializeMotors+0x304>)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	21a4      	movs	r1, #164	@ 0xa4
 8002f12:	fb01 f303 	mul.w	r3, r1, r3
 8002f16:	4413      	add	r3, r2
 8002f18:	3358      	adds	r3, #88	@ 0x58
 8002f1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f1e:	801a      	strh	r2, [r3, #0]


        }


        if(i == 1){
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	f040 808a 	bne.w	800303c <initializeMotors+0x37c>
        	// Configure motor 2 X-axis
            // TIMER configurations
            motors[i].driver.htim = &htim1;				 // TIMER HANDLER
 8002f28:	4a26      	ldr	r2, [pc, #152]	@ (8002fc4 <initializeMotors+0x304>)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	21a4      	movs	r1, #164	@ 0xa4
 8002f2e:	fb01 f303 	mul.w	r3, r1, r3
 8002f32:	4413      	add	r3, r2
 8002f34:	3310      	adds	r3, #16
 8002f36:	4a29      	ldr	r2, [pc, #164]	@ (8002fdc <initializeMotors+0x31c>)
 8002f38:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_channel = TIM_CHANNEL_4; // PWM channel for motor 1
 8002f3a:	4a22      	ldr	r2, [pc, #136]	@ (8002fc4 <initializeMotors+0x304>)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	21a4      	movs	r1, #164	@ 0xa4
 8002f40:	fb01 f303 	mul.w	r3, r1, r3
 8002f44:	4413      	add	r3, r2
 8002f46:	3314      	adds	r3, #20
 8002f48:	220c      	movs	r2, #12
 8002f4a:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 0;
 8002f4c:	4a1d      	ldr	r2, [pc, #116]	@ (8002fc4 <initializeMotors+0x304>)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	21a4      	movs	r1, #164	@ 0xa4
 8002f52:	fb01 f303 	mul.w	r3, r1, r3
 8002f56:	4413      	add	r3, r2
 8002f58:	331c      	adds	r3, #28
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	801a      	strh	r2, [r3, #0]
            motors[i].driver.huart = &huart4;
 8002f5e:	4a19      	ldr	r2, [pc, #100]	@ (8002fc4 <initializeMotors+0x304>)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	21a4      	movs	r1, #164	@ 0xa4
 8002f64:	fb01 f303 	mul.w	r3, r1, r3
 8002f68:	4413      	add	r3, r2
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe0 <initializeMotors+0x320>)
 8002f6e:	601a      	str	r2, [r3, #0]
            motors[i].stepsPerRevolution = 200;
 8002f70:	4a14      	ldr	r2, [pc, #80]	@ (8002fc4 <initializeMotors+0x304>)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	21a4      	movs	r1, #164	@ 0xa4
 8002f76:	fb01 f303 	mul.w	r3, r1, r3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3364      	adds	r3, #100	@ 0x64
 8002f7e:	22c8      	movs	r2, #200	@ 0xc8
 8002f80:	601a      	str	r2, [r3, #0]
            // GPIO PINS
            motors[i].driver.step_port = STEP2_GPIO_Port;
 8002f82:	4a10      	ldr	r2, [pc, #64]	@ (8002fc4 <initializeMotors+0x304>)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	21a4      	movs	r1, #164	@ 0xa4
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	333c      	adds	r3, #60	@ 0x3c
 8002f90:	4a10      	ldr	r2, [pc, #64]	@ (8002fd4 <initializeMotors+0x314>)
 8002f92:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = STEP2_Pin;
 8002f94:	4a0b      	ldr	r2, [pc, #44]	@ (8002fc4 <initializeMotors+0x304>)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	21a4      	movs	r1, #164	@ 0xa4
 8002f9a:	fb01 f303 	mul.w	r3, r1, r3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3340      	adds	r3, #64	@ 0x40
 8002fa2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002fa6:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = DIR2_GPIO_Port;
 8002fa8:	4a06      	ldr	r2, [pc, #24]	@ (8002fc4 <initializeMotors+0x304>)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	21a4      	movs	r1, #164	@ 0xa4
 8002fae:	fb01 f303 	mul.w	r3, r1, r3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3344      	adds	r3, #68	@ 0x44
 8002fb6:	4a07      	ldr	r2, [pc, #28]	@ (8002fd4 <initializeMotors+0x314>)
 8002fb8:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = DIR2_Pin;
 8002fba:	4a02      	ldr	r2, [pc, #8]	@ (8002fc4 <initializeMotors+0x304>)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	21a4      	movs	r1, #164	@ 0xa4
 8002fc0:	e010      	b.n	8002fe4 <initializeMotors+0x324>
 8002fc2:	bf00      	nop
 8002fc4:	20005844 	.word	0x20005844
 8002fc8:	20004f8c 	.word	0x20004f8c
 8002fcc:	20004c68 	.word	0x20004c68
 8002fd0:	40020400 	.word	0x40020400
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	40021800 	.word	0x40021800
 8002fdc:	20004c1c 	.word	0x20004c1c
 8002fe0:	20004e7c 	.word	0x20004e7c
 8002fe4:	fb01 f303 	mul.w	r3, r1, r3
 8002fe8:	4413      	add	r3, r2
 8002fea:	3348      	adds	r3, #72	@ 0x48
 8002fec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002ff0:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = ENN2_GPIO_Port;
 8002ff2:	4a93      	ldr	r2, [pc, #588]	@ (8003240 <initializeMotors+0x580>)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	21a4      	movs	r1, #164	@ 0xa4
 8002ff8:	fb01 f303 	mul.w	r3, r1, r3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	334c      	adds	r3, #76	@ 0x4c
 8003000:	4a90      	ldr	r2, [pc, #576]	@ (8003244 <initializeMotors+0x584>)
 8003002:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = ENN2_Pin;
 8003004:	4a8e      	ldr	r2, [pc, #568]	@ (8003240 <initializeMotors+0x580>)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	21a4      	movs	r1, #164	@ 0xa4
 800300a:	fb01 f303 	mul.w	r3, r1, r3
 800300e:	4413      	add	r3, r2
 8003010:	3350      	adds	r3, #80	@ 0x50
 8003012:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003016:	801a      	strh	r2, [r3, #0]
            motors[i].driver.diag_port = DIAG2_GPIO_Port;
 8003018:	4a89      	ldr	r2, [pc, #548]	@ (8003240 <initializeMotors+0x580>)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	21a4      	movs	r1, #164	@ 0xa4
 800301e:	fb01 f303 	mul.w	r3, r1, r3
 8003022:	4413      	add	r3, r2
 8003024:	3354      	adds	r3, #84	@ 0x54
 8003026:	4a88      	ldr	r2, [pc, #544]	@ (8003248 <initializeMotors+0x588>)
 8003028:	601a      	str	r2, [r3, #0]
            motors[i].driver.diag_pin = DIAG2_Pin;
 800302a:	4a85      	ldr	r2, [pc, #532]	@ (8003240 <initializeMotors+0x580>)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	21a4      	movs	r1, #164	@ 0xa4
 8003030:	fb01 f303 	mul.w	r3, r1, r3
 8003034:	4413      	add	r3, r2
 8003036:	3358      	adds	r3, #88	@ 0x58
 8003038:	2204      	movs	r2, #4
 800303a:	801a      	strh	r2, [r3, #0]


        }
        if(i == 2){
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d175      	bne.n	800312e <initializeMotors+0x46e>
        	        	// Configure motor 3 Y-axis
        	            // TIMER configurations
            motors[i].driver.htim = &htim5;				 // TIMER HANDLER
 8003042:	4a7f      	ldr	r2, [pc, #508]	@ (8003240 <initializeMotors+0x580>)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	21a4      	movs	r1, #164	@ 0xa4
 8003048:	fb01 f303 	mul.w	r3, r1, r3
 800304c:	4413      	add	r3, r2
 800304e:	3310      	adds	r3, #16
 8003050:	4a7e      	ldr	r2, [pc, #504]	@ (800324c <initializeMotors+0x58c>)
 8003052:	601a      	str	r2, [r3, #0]
        	motors[i].driver.step_channel = TIM_CHANNEL_1; // PWM channel for motor 1
 8003054:	4a7a      	ldr	r2, [pc, #488]	@ (8003240 <initializeMotors+0x580>)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	21a4      	movs	r1, #164	@ 0xa4
 800305a:	fb01 f303 	mul.w	r3, r1, r3
 800305e:	4413      	add	r3, r2
 8003060:	3314      	adds	r3, #20
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 0;
 8003066:	4a76      	ldr	r2, [pc, #472]	@ (8003240 <initializeMotors+0x580>)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	21a4      	movs	r1, #164	@ 0xa4
 800306c:	fb01 f303 	mul.w	r3, r1, r3
 8003070:	4413      	add	r3, r2
 8003072:	331c      	adds	r3, #28
 8003074:	2200      	movs	r2, #0
 8003076:	801a      	strh	r2, [r3, #0]
            motors[i].driver.huart = &huart5;
 8003078:	4a71      	ldr	r2, [pc, #452]	@ (8003240 <initializeMotors+0x580>)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	21a4      	movs	r1, #164	@ 0xa4
 800307e:	fb01 f303 	mul.w	r3, r1, r3
 8003082:	4413      	add	r3, r2
 8003084:	3304      	adds	r3, #4
 8003086:	4a72      	ldr	r2, [pc, #456]	@ (8003250 <initializeMotors+0x590>)
 8003088:	601a      	str	r2, [r3, #0]
        	motors[i].stepsPerRevolution = 400;
 800308a:	4a6d      	ldr	r2, [pc, #436]	@ (8003240 <initializeMotors+0x580>)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	21a4      	movs	r1, #164	@ 0xa4
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	4413      	add	r3, r2
 8003096:	3364      	adds	r3, #100	@ 0x64
 8003098:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800309c:	601a      	str	r2, [r3, #0]
        	            // GPIO PINS
            motors[i].driver.step_port = STEP3_GPIO_Port;
 800309e:	4a68      	ldr	r2, [pc, #416]	@ (8003240 <initializeMotors+0x580>)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	21a4      	movs	r1, #164	@ 0xa4
 80030a4:	fb01 f303 	mul.w	r3, r1, r3
 80030a8:	4413      	add	r3, r2
 80030aa:	333c      	adds	r3, #60	@ 0x3c
 80030ac:	4a69      	ldr	r2, [pc, #420]	@ (8003254 <initializeMotors+0x594>)
 80030ae:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = STEP3_Pin;
 80030b0:	4a63      	ldr	r2, [pc, #396]	@ (8003240 <initializeMotors+0x580>)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	21a4      	movs	r1, #164	@ 0xa4
 80030b6:	fb01 f303 	mul.w	r3, r1, r3
 80030ba:	4413      	add	r3, r2
 80030bc:	3340      	adds	r3, #64	@ 0x40
 80030be:	2201      	movs	r2, #1
 80030c0:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = DIR3_GPIO_Port;
 80030c2:	4a5f      	ldr	r2, [pc, #380]	@ (8003240 <initializeMotors+0x580>)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	21a4      	movs	r1, #164	@ 0xa4
 80030c8:	fb01 f303 	mul.w	r3, r1, r3
 80030cc:	4413      	add	r3, r2
 80030ce:	3344      	adds	r3, #68	@ 0x44
 80030d0:	4a5c      	ldr	r2, [pc, #368]	@ (8003244 <initializeMotors+0x584>)
 80030d2:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = DIR3_Pin;
 80030d4:	4a5a      	ldr	r2, [pc, #360]	@ (8003240 <initializeMotors+0x580>)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	21a4      	movs	r1, #164	@ 0xa4
 80030da:	fb01 f303 	mul.w	r3, r1, r3
 80030de:	4413      	add	r3, r2
 80030e0:	3348      	adds	r3, #72	@ 0x48
 80030e2:	2204      	movs	r2, #4
 80030e4:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = ENN3_GPIO_Port;
 80030e6:	4a56      	ldr	r2, [pc, #344]	@ (8003240 <initializeMotors+0x580>)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	21a4      	movs	r1, #164	@ 0xa4
 80030ec:	fb01 f303 	mul.w	r3, r1, r3
 80030f0:	4413      	add	r3, r2
 80030f2:	334c      	adds	r3, #76	@ 0x4c
 80030f4:	4a53      	ldr	r2, [pc, #332]	@ (8003244 <initializeMotors+0x584>)
 80030f6:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = ENN3_Pin;
 80030f8:	4a51      	ldr	r2, [pc, #324]	@ (8003240 <initializeMotors+0x580>)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	21a4      	movs	r1, #164	@ 0xa4
 80030fe:	fb01 f303 	mul.w	r3, r1, r3
 8003102:	4413      	add	r3, r2
 8003104:	3350      	adds	r3, #80	@ 0x50
 8003106:	2280      	movs	r2, #128	@ 0x80
 8003108:	801a      	strh	r2, [r3, #0]
            motors[i].driver.diag_port = DIAG3_GPIO_Port;
 800310a:	4a4d      	ldr	r2, [pc, #308]	@ (8003240 <initializeMotors+0x580>)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	21a4      	movs	r1, #164	@ 0xa4
 8003110:	fb01 f303 	mul.w	r3, r1, r3
 8003114:	4413      	add	r3, r2
 8003116:	3354      	adds	r3, #84	@ 0x54
 8003118:	4a4b      	ldr	r2, [pc, #300]	@ (8003248 <initializeMotors+0x588>)
 800311a:	601a      	str	r2, [r3, #0]
            motors[i].driver.diag_pin = DIAG3_Pin;
 800311c:	4a48      	ldr	r2, [pc, #288]	@ (8003240 <initializeMotors+0x580>)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	21a4      	movs	r1, #164	@ 0xa4
 8003122:	fb01 f303 	mul.w	r3, r1, r3
 8003126:	4413      	add	r3, r2
 8003128:	3358      	adds	r3, #88	@ 0x58
 800312a:	2240      	movs	r2, #64	@ 0x40
 800312c:	801a      	strh	r2, [r3, #0]


        }

        if(i == 3){
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b03      	cmp	r3, #3
 8003132:	d176      	bne.n	8003222 <initializeMotors+0x562>
        	// Configure motor 4 Y-axis
            // TIMER configurations
            motors[i].driver.htim = &htim3;				 // TIMER HANDLER
 8003134:	4a42      	ldr	r2, [pc, #264]	@ (8003240 <initializeMotors+0x580>)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	21a4      	movs	r1, #164	@ 0xa4
 800313a:	fb01 f303 	mul.w	r3, r1, r3
 800313e:	4413      	add	r3, r2
 8003140:	3310      	adds	r3, #16
 8003142:	4a45      	ldr	r2, [pc, #276]	@ (8003258 <initializeMotors+0x598>)
 8003144:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_channel = TIM_CHANNEL_3; // PWM channel for motor 1
 8003146:	4a3e      	ldr	r2, [pc, #248]	@ (8003240 <initializeMotors+0x580>)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	21a4      	movs	r1, #164	@ 0xa4
 800314c:	fb01 f303 	mul.w	r3, r1, r3
 8003150:	4413      	add	r3, r2
 8003152:	3314      	adds	r3, #20
 8003154:	2208      	movs	r2, #8
 8003156:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 0;
 8003158:	4a39      	ldr	r2, [pc, #228]	@ (8003240 <initializeMotors+0x580>)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	21a4      	movs	r1, #164	@ 0xa4
 800315e:	fb01 f303 	mul.w	r3, r1, r3
 8003162:	4413      	add	r3, r2
 8003164:	331c      	adds	r3, #28
 8003166:	2200      	movs	r2, #0
 8003168:	801a      	strh	r2, [r3, #0]
            motors[i].driver.huart = &huart6;
 800316a:	4a35      	ldr	r2, [pc, #212]	@ (8003240 <initializeMotors+0x580>)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	21a4      	movs	r1, #164	@ 0xa4
 8003170:	fb01 f303 	mul.w	r3, r1, r3
 8003174:	4413      	add	r3, r2
 8003176:	3304      	adds	r3, #4
 8003178:	4a38      	ldr	r2, [pc, #224]	@ (800325c <initializeMotors+0x59c>)
 800317a:	601a      	str	r2, [r3, #0]
            motors[i].stepsPerRevolution = 400;
 800317c:	4a30      	ldr	r2, [pc, #192]	@ (8003240 <initializeMotors+0x580>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	21a4      	movs	r1, #164	@ 0xa4
 8003182:	fb01 f303 	mul.w	r3, r1, r3
 8003186:	4413      	add	r3, r2
 8003188:	3364      	adds	r3, #100	@ 0x64
 800318a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800318e:	601a      	str	r2, [r3, #0]
            // GPIO PINS
            motors[i].driver.step_port = STEP4_GPIO_Port;
 8003190:	4a2b      	ldr	r2, [pc, #172]	@ (8003240 <initializeMotors+0x580>)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	21a4      	movs	r1, #164	@ 0xa4
 8003196:	fb01 f303 	mul.w	r3, r1, r3
 800319a:	4413      	add	r3, r2
 800319c:	333c      	adds	r3, #60	@ 0x3c
 800319e:	4a2a      	ldr	r2, [pc, #168]	@ (8003248 <initializeMotors+0x588>)
 80031a0:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = STEP4_Pin;
 80031a2:	4a27      	ldr	r2, [pc, #156]	@ (8003240 <initializeMotors+0x580>)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	21a4      	movs	r1, #164	@ 0xa4
 80031a8:	fb01 f303 	mul.w	r3, r1, r3
 80031ac:	4413      	add	r3, r2
 80031ae:	3340      	adds	r3, #64	@ 0x40
 80031b0:	2201      	movs	r2, #1
 80031b2:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = DIR4_GPIO_Port;
 80031b4:	4a22      	ldr	r2, [pc, #136]	@ (8003240 <initializeMotors+0x580>)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	21a4      	movs	r1, #164	@ 0xa4
 80031ba:	fb01 f303 	mul.w	r3, r1, r3
 80031be:	4413      	add	r3, r2
 80031c0:	3344      	adds	r3, #68	@ 0x44
 80031c2:	4a20      	ldr	r2, [pc, #128]	@ (8003244 <initializeMotors+0x584>)
 80031c4:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = DIR4_Pin;
 80031c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003240 <initializeMotors+0x580>)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	21a4      	movs	r1, #164	@ 0xa4
 80031cc:	fb01 f303 	mul.w	r3, r1, r3
 80031d0:	4413      	add	r3, r2
 80031d2:	3348      	adds	r3, #72	@ 0x48
 80031d4:	2201      	movs	r2, #1
 80031d6:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = ENN4_GPIO_Port;
 80031d8:	4a19      	ldr	r2, [pc, #100]	@ (8003240 <initializeMotors+0x580>)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	21a4      	movs	r1, #164	@ 0xa4
 80031de:	fb01 f303 	mul.w	r3, r1, r3
 80031e2:	4413      	add	r3, r2
 80031e4:	334c      	adds	r3, #76	@ 0x4c
 80031e6:	4a17      	ldr	r2, [pc, #92]	@ (8003244 <initializeMotors+0x584>)
 80031e8:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = ENN4_Pin;
 80031ea:	4a15      	ldr	r2, [pc, #84]	@ (8003240 <initializeMotors+0x580>)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	21a4      	movs	r1, #164	@ 0xa4
 80031f0:	fb01 f303 	mul.w	r3, r1, r3
 80031f4:	4413      	add	r3, r2
 80031f6:	3350      	adds	r3, #80	@ 0x50
 80031f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031fc:	801a      	strh	r2, [r3, #0]
            motors[i].driver.diag_port = DIAG4_GPIO_Port;
 80031fe:	4a10      	ldr	r2, [pc, #64]	@ (8003240 <initializeMotors+0x580>)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	21a4      	movs	r1, #164	@ 0xa4
 8003204:	fb01 f303 	mul.w	r3, r1, r3
 8003208:	4413      	add	r3, r2
 800320a:	3354      	adds	r3, #84	@ 0x54
 800320c:	4a14      	ldr	r2, [pc, #80]	@ (8003260 <initializeMotors+0x5a0>)
 800320e:	601a      	str	r2, [r3, #0]
            motors[i].driver.diag_pin = DIAG4_Pin;
 8003210:	4a0b      	ldr	r2, [pc, #44]	@ (8003240 <initializeMotors+0x580>)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	21a4      	movs	r1, #164	@ 0xa4
 8003216:	fb01 f303 	mul.w	r3, r1, r3
 800321a:	4413      	add	r3, r2
 800321c:	3358      	adds	r3, #88	@ 0x58
 800321e:	2210      	movs	r2, #16
 8003220:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < MAX_MOTORS; i++) {
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3301      	adds	r3, #1
 8003226:	607b      	str	r3, [r7, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b03      	cmp	r3, #3
 800322c:	f77f ad4e 	ble.w	8002ccc <initializeMotors+0xc>


    }


}
 8003230:	bf00      	nop
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	20005844 	.word	0x20005844
 8003244:	40021000 	.word	0x40021000
 8003248:	40020400 	.word	0x40020400
 800324c:	20004d4c 	.word	0x20004d4c
 8003250:	20004f04 	.word	0x20004f04
 8003254:	40020000 	.word	0x40020000
 8003258:	20004cb4 	.word	0x20004cb4
 800325c:	2000509c 	.word	0x2000509c
 8003260:	40021400 	.word	0x40021400

08003264 <TMC2209_setMotorsConfiguration>:

void TMC2209_setMotorsConfiguration(Motor *motors){	// Set all motor configurations based on their variables set from init function
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < MAX_MOTORS; i++) {
 800326c:	2300      	movs	r3, #0
 800326e:	75fb      	strb	r3, [r7, #23]
 8003270:	e05f      	b.n	8003332 <TMC2209_setMotorsConfiguration+0xce>
    	// DEFAULT VALUES
    	uint16_t mstep = 16;
 8003272:	2310      	movs	r3, #16
 8003274:	82bb      	strh	r3, [r7, #20]
    	uint8_t IHOLD = 16;
 8003276:	2310      	movs	r3, #16
 8003278:	74fb      	strb	r3, [r7, #19]
    	uint8_t IRUN = 31;
 800327a:	231f      	movs	r3, #31
 800327c:	74bb      	strb	r3, [r7, #18]
    	uint8_t IDELAY = 8;
 800327e:	2308      	movs	r3, #8
 8003280:	747b      	strb	r3, [r7, #17]
    	uint8_t sgthrs = 70;
 8003282:	2346      	movs	r3, #70	@ 0x46
 8003284:	743b      	strb	r3, [r7, #16]
    	uint32_t coolThrs = 5000;
 8003286:	f241 3388 	movw	r3, #5000	@ 0x1388
 800328a:	60fb      	str	r3, [r7, #12]

    	TMC2209_EnableDriver(&motors[i], 1);
 800328c:	7dfb      	ldrb	r3, [r7, #23]
 800328e:	22a4      	movs	r2, #164	@ 0xa4
 8003290:	fb02 f303 	mul.w	r3, r2, r3
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	4413      	add	r3, r2
 8003298:	2101      	movs	r1, #1
 800329a:	4618      	mov	r0, r3
 800329c:	f7fe ff9a 	bl	80021d4 <TMC2209_EnableDriver>
    	HAL_Delay(100);
 80032a0:	2064      	movs	r0, #100	@ 0x64
 80032a2:	f003 fdc1 	bl	8006e28 <HAL_Delay>
    	TMC2209_setPDNuart(&motors[i], 1);
 80032a6:	7dfb      	ldrb	r3, [r7, #23]
 80032a8:	22a4      	movs	r2, #164	@ 0xa4
 80032aa:	fb02 f303 	mul.w	r3, r2, r3
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	4413      	add	r3, r2
 80032b2:	2101      	movs	r1, #1
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fadd 	bl	8002874 <TMC2209_setPDNuart>
    	HAL_Delay(100);
 80032ba:	2064      	movs	r0, #100	@ 0x64
 80032bc:	f003 fdb4 	bl	8006e28 <HAL_Delay>
    	//TMC2209_configureCurrent(motors, IHOLD, IRUN, IDELAY); -- DISABLED
    	HAL_Delay(10);
 80032c0:	200a      	movs	r0, #10
 80032c2:	f003 fdb1 	bl	8006e28 <HAL_Delay>
    	TMC2209_setMicrosteppingResolution(&motors[i], mstep);
 80032c6:	7dfb      	ldrb	r3, [r7, #23]
 80032c8:	22a4      	movs	r2, #164	@ 0xa4
 80032ca:	fb02 f303 	mul.w	r3, r2, r3
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	4413      	add	r3, r2
 80032d2:	8aba      	ldrh	r2, [r7, #20]
 80032d4:	4611      	mov	r1, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff fb92 	bl	8002a00 <TMC2209_setMicrosteppingResolution>
    	HAL_Delay(500);
 80032dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80032e0:	f003 fda2 	bl	8006e28 <HAL_Delay>
    	TMC2209_enableStallDetection(&motors[i], sgthrs);
 80032e4:	7dfb      	ldrb	r3, [r7, #23]
 80032e6:	22a4      	movs	r2, #164	@ 0xa4
 80032e8:	fb02 f303 	mul.w	r3, r2, r3
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	4413      	add	r3, r2
 80032f0:	7c3a      	ldrb	r2, [r7, #16]
 80032f2:	4611      	mov	r1, r2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff fc67 	bl	8002bc8 <TMC2209_enableStallDetection>
    	HAL_Delay(10);
 80032fa:	200a      	movs	r0, #10
 80032fc:	f003 fd94 	bl	8006e28 <HAL_Delay>
    	TMC2209_SetTCoolThrs(&motors[i], coolThrs);
 8003300:	7dfb      	ldrb	r3, [r7, #23]
 8003302:	22a4      	movs	r2, #164	@ 0xa4
 8003304:	fb02 f303 	mul.w	r3, r2, r3
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	4413      	add	r3, r2
 800330c:	68f9      	ldr	r1, [r7, #12]
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff fc84 	bl	8002c1c <TMC2209_SetTCoolThrs>
    	HAL_Delay(10);
 8003314:	200a      	movs	r0, #10
 8003316:	f003 fd87 	bl	8006e28 <HAL_Delay>
    	TMC2209_readStandstillIndicator(&motors[i]);
 800331a:	7dfb      	ldrb	r3, [r7, #23]
 800331c:	22a4      	movs	r2, #164	@ 0xa4
 800331e:	fb02 f303 	mul.w	r3, r2, r3
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	4413      	add	r3, r2
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff fca8 	bl	8002c7c <TMC2209_readStandstillIndicator>
    for (uint8_t i = 0; i < MAX_MOTORS; i++) {
 800332c:	7dfb      	ldrb	r3, [r7, #23]
 800332e:	3301      	adds	r3, #1
 8003330:	75fb      	strb	r3, [r7, #23]
 8003332:	7dfb      	ldrb	r3, [r7, #23]
 8003334:	2b03      	cmp	r3, #3
 8003336:	d99c      	bls.n	8003272 <TMC2209_setMotorsConfiguration+0xe>
    }
    TMC2209_SetSpeed(&motors[0], 8000);
 8003338:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f7fe ff5c 	bl	80021fa <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[1], 8000);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	33a4      	adds	r3, #164	@ 0xa4
 8003346:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 800334a:	4618      	mov	r0, r3
 800334c:	f7fe ff55 	bl	80021fa <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[2], 8000);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003356:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 800335a:	4618      	mov	r0, r3
 800335c:	f7fe ff4d 	bl	80021fa <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[3], 8000);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8003366:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 800336a:	4618      	mov	r0, r3
 800336c:	f7fe ff45 	bl	80021fa <TMC2209_SetSpeed>
}
 8003370:	bf00      	nop
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <initializeAxis>:


void initializeAxis(Axis *axis, Motor *motor1, Motor *motor2, uint8_t circumference, const char *axisName) {
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af02      	add	r7, sp, #8
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
 8003384:	70fb      	strb	r3, [r7, #3]
    // Assign motors to the axis
    axis->motors[0] = motor1;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	601a      	str	r2, [r3, #0]
    axis->motors[1] = motor2;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	605a      	str	r2, [r3, #4]
    // The circumference variable is calculated based on the physical setup. For example: GT2 20-tooth pulley with 2mm pitch(Pulley Circumference = Number of Teeth * Belt Pitch)

    // Axis dimensions and step calculations
    axis->motors[0]->currentPositionMM = 0;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f04f 0200 	mov.w	r2, #0
 800339a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    axis->motors[1]->currentPositionMM = 0;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    axis->motors[0]->prevPositionMM = 0;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    axis->motors[1]->prevPositionMM = 0;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    axis->motors[0]->nextPositionMM = 0;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    axis->motors[1]->nextPositionMM = 0;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    uint32_t totalStepsPerRevolution = motor1->stepsPerRevolution * motor1->driver.mstep; // Both motors use the same microstepping
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	8b92      	ldrh	r2, [r2, #28]
 80033e2:	fb02 f303 	mul.w	r3, r2, r3
 80033e6:	617b      	str	r3, [r7, #20]
    motor1->totalStepsPerRevolution = totalStepsPerRevolution;
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	669a      	str	r2, [r3, #104]	@ 0x68
    motor2->totalStepsPerRevolution = totalStepsPerRevolution;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	669a      	str	r2, [r3, #104]	@ 0x68
    axis->stepPerUnit = totalStepsPerRevolution / circumference;
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fc:	ee07 3a90 	vmov	s15, r3
 8003400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	edc3 7a04 	vstr	s15, [r3, #16]

    // IDs for motors controlling the axis, eg. X1, X2
    snprintf(axis->id[0], sizeof(axis->id[0]), "%s%d", axisName, motor1->driver.id);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f103 0014 	add.w	r0, r3, #20
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	4a0a      	ldr	r2, [pc, #40]	@ (8003444 <initializeAxis+0xcc>)
 800341a:	210a      	movs	r1, #10
 800341c:	f012 fe32 	bl	8016084 <sniprintf>
    if (motor2 != NULL) {
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <initializeAxis+0xc4>
        snprintf(axis->id[1], sizeof(axis->id[1]), "%s%d", axisName, motor2->driver.id);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f103 001e 	add.w	r0, r3, #30
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	4a03      	ldr	r2, [pc, #12]	@ (8003444 <initializeAxis+0xcc>)
 8003436:	210a      	movs	r1, #10
 8003438:	f012 fe24 	bl	8016084 <sniprintf>
    }
}
 800343c:	bf00      	nop
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	0801861c 	.word	0x0801861c

08003448 <initializeSystem>:

void initializeSystem(){
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af02      	add	r7, sp, #8
	// motors
	 initializeMotors();
 800344e:	f7ff fc37 	bl	8002cc0 <initializeMotors>
    // motor configurations
	TMC2209_setMotorsConfiguration(&motors);
 8003452:	480e      	ldr	r0, [pc, #56]	@ (800348c <initializeSystem+0x44>)
 8003454:	f7ff ff06 	bl	8003264 <TMC2209_setMotorsConfiguration>
    // axis
	initializeAxis(&axes[0], &motors[0],&motors[1], 8, "Y");
 8003458:	4b0d      	ldr	r3, [pc, #52]	@ (8003490 <initializeSystem+0x48>)
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	2308      	movs	r3, #8
 800345e:	4a0d      	ldr	r2, [pc, #52]	@ (8003494 <initializeSystem+0x4c>)
 8003460:	490a      	ldr	r1, [pc, #40]	@ (800348c <initializeSystem+0x44>)
 8003462:	480d      	ldr	r0, [pc, #52]	@ (8003498 <initializeSystem+0x50>)
 8003464:	f7ff ff88 	bl	8003378 <initializeAxis>
	initializeAxis(&axes[1], &motors[2],&motors[3], 40, "X");
 8003468:	4b0c      	ldr	r3, [pc, #48]	@ (800349c <initializeSystem+0x54>)
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	2328      	movs	r3, #40	@ 0x28
 800346e:	4a0c      	ldr	r2, [pc, #48]	@ (80034a0 <initializeSystem+0x58>)
 8003470:	490c      	ldr	r1, [pc, #48]	@ (80034a4 <initializeSystem+0x5c>)
 8003472:	480d      	ldr	r0, [pc, #52]	@ (80034a8 <initializeSystem+0x60>)
 8003474:	f7ff ff80 	bl	8003378 <initializeAxis>



		xSemaphoreGive(xInitSemaphore); // signal welcome menu state to proceed with next state
 8003478:	4b0c      	ldr	r3, [pc, #48]	@ (80034ac <initializeSystem+0x64>)
 800347a:	6818      	ldr	r0, [r3, #0]
 800347c:	2300      	movs	r3, #0
 800347e:	2200      	movs	r2, #0
 8003480:	2100      	movs	r1, #0
 8003482:	f00f fc07 	bl	8012c94 <xQueueGenericSend>

}
 8003486:	bf00      	nop
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	20005844 	.word	0x20005844
 8003490:	08018624 	.word	0x08018624
 8003494:	200058e8 	.word	0x200058e8
 8003498:	20005ad4 	.word	0x20005ad4
 800349c:	08018628 	.word	0x08018628
 80034a0:	20005a30 	.word	0x20005a30
 80034a4:	2000598c 	.word	0x2000598c
 80034a8:	20005afc 	.word	0x20005afc
 80034ac:	20002364 	.word	0x20002364

080034b0 <ENC_Init>:
 * @brief Rotary quadrature encoder hardware initialization.
 * @param[in] henc : Encoder handler
 * @return None
 */
void ENC_Init(ENC_Handle_TypeDef* henc)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(henc->Timer, TIM_CHANNEL_ALL); // Start Timer 4 in encoder mode with interrupts enabled
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	213c      	movs	r1, #60	@ 0x3c
 80034be:	4618      	mov	r0, r3
 80034c0:	f007 fdd4 	bl	800b06c <HAL_TIM_Encoder_Start>
}
 80034c4:	bf00      	nop
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <ENC_GetCounter>:
 * @brief Rotary quadrature encoder hardware counter read.
 * @param[in] henc : Encoder handler
 * @return Current counter value
 */
uint32_t ENC_GetCounter(ENC_Handle_TypeDef* henc)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t cnt = henc->Counter;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	60fb      	str	r3, [r7, #12]
  henc->Counter = __HAL_TIM_GET_COUNTER(henc->Timer);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	605a      	str	r2, [r3, #4]
  henc->CounterInc = (henc->Counter > cnt);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	bf34      	ite	cc
 80034f0:	2301      	movcc	r3, #1
 80034f2:	2300      	movcs	r3, #0
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	741a      	strb	r2, [r3, #16]
  henc->CounterDec = (henc->Counter < cnt);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	429a      	cmp	r2, r3
 8003502:	bf8c      	ite	hi
 8003504:	2301      	movhi	r3, #1
 8003506:	2300      	movls	r3, #0
 8003508:	b2da      	uxtb	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	745a      	strb	r2, [r3, #17]
  return henc->Counter / henc->TicksPerStep;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
	...

08003528 <CheckConnection>:


#include "extras.h"


bool CheckConnection(SERVO_Handle_TypeDef* hservo,SERVO_Handle_TypeDef* hservo2){
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]

	SERVO_WritePosition(hservo, SERVO1_CHECK_POS);
 8003532:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8003588 <CheckConnection+0x60>
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f8f4 	bl	8003724 <SERVO_WritePosition>
	SERVO_WritePosition(hservo2, SERVO2_CHECK_POS);
 800353c:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 800358c <CheckConnection+0x64>
 8003540:	6838      	ldr	r0, [r7, #0]
 8003542:	f000 f8ef 	bl	8003724 <SERVO_WritePosition>
	HAL_Delay(100);
 8003546:	2064      	movs	r0, #100	@ 0x64
 8003548:	f003 fc6e 	bl	8006e28 <HAL_Delay>
	bool x =0;
 800354c:	2300      	movs	r3, #0
 800354e:	73fb      	strb	r3, [r7, #15]
	if(HAL_GPIO_ReadPin(Probe_GPIO_Port,Probe_Pin) == GPIO_PIN_SET){
 8003550:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003554:	480e      	ldr	r0, [pc, #56]	@ (8003590 <CheckConnection+0x68>)
 8003556:	f004 fb23 	bl	8007ba0 <HAL_GPIO_ReadPin>
 800355a:	4603      	mov	r3, r0
 800355c:	2b01      	cmp	r3, #1
 800355e:	d102      	bne.n	8003566 <CheckConnection+0x3e>
	     x = true;
 8003560:	2301      	movs	r3, #1
 8003562:	73fb      	strb	r3, [r7, #15]
 8003564:	e001      	b.n	800356a <CheckConnection+0x42>
	}
	else{
		 x=false;
 8003566:	2300      	movs	r3, #0
 8003568:	73fb      	strb	r3, [r7, #15]
	}
	SERVO_WritePosition(hservo, SERVO2_HOME_POS);
 800356a:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8003594 <CheckConnection+0x6c>
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f8d8 	bl	8003724 <SERVO_WritePosition>
	SERVO_WritePosition(hservo2, SERVO2_HOME_POS);
 8003574:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8003594 <CheckConnection+0x6c>
 8003578:	6838      	ldr	r0, [r7, #0]
 800357a:	f000 f8d3 	bl	8003724 <SERVO_WritePosition>
	return x;
 800357e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	42900000 	.word	0x42900000
 800358c:	42280000 	.word	0x42280000
 8003590:	40021000 	.word	0x40021000
 8003594:	42700000 	.word	0x42700000

08003598 <IsSensorTriggered>:
bool IsSensorTriggered(GPIO_TypeDef *sensorPort, uint16_t sensorPin)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	460b      	mov	r3, r1
 80035a2:	807b      	strh	r3, [r7, #2]
    // Read the sensor state
    GPIO_PinState sensor_state = HAL_GPIO_ReadPin(sensorPort, sensorPin);
 80035a4:	887b      	ldrh	r3, [r7, #2]
 80035a6:	4619      	mov	r1, r3
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f004 faf9 	bl	8007ba0 <HAL_GPIO_ReadPin>
 80035ae:	4603      	mov	r3, r0
 80035b0:	73fb      	strb	r3, [r7, #15]

    // Small delay to avoid button bounce or noise
    if(sensor_state == GPIO_PIN_SET){
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <IsSensorTriggered+0x24>
    	return false;
 80035b8:	2300      	movs	r3, #0
 80035ba:	e000      	b.n	80035be <IsSensorTriggered+0x26>

    }
    else{
    	return true;
 80035bc:	2301      	movs	r3, #1
    }
    // Return true if the sensor is triggered (GPIO_PIN_SET), false otherwise

}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <PWM_Init>:
  * @param[in/out] hpwm   : PWM output handler
  * @retval None
  */

void PWM_Init(PWM_Handle_TypeDef* hpwm)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  PWM_WriteDuty(hpwm, hpwm->Duty);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80035d4:	eeb0 0a67 	vmov.f32	s0, s15
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f80d 	bl	80035f8 <PWM_WriteDuty>
  HAL_TIM_PWM_Start(hpwm->Timer, hpwm->Channel);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4619      	mov	r1, r3
 80035e8:	4610      	mov	r0, r2
 80035ea:	f007 f989 	bl	800a900 <HAL_TIM_PWM_Start>
}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <PWM_WriteDuty>:
  * @param[in/out] hpwm   : PWM output handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void PWM_WriteDuty(PWM_Handle_TypeDef* hpwm, float duty)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	ed87 0a00 	vstr	s0, [r7]
  // Saturate duty cycle value
  if(duty < 0.0f)
 8003604:	edd7 7a00 	vldr	s15, [r7]
 8003608:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800360c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003610:	d503      	bpl.n	800361a <PWM_WriteDuty+0x22>
    duty = 0.0;
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	603b      	str	r3, [r7, #0]
 8003618:	e00a      	b.n	8003630 <PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 800361a:	edd7 7a00 	vldr	s15, [r7]
 800361e:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80036dc <PWM_WriteDuty+0xe4>
 8003622:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800362a:	dd01      	ble.n	8003630 <PWM_WriteDuty+0x38>
    duty = 100.0f;
 800362c:	4b2c      	ldr	r3, [pc, #176]	@ (80036e0 <PWM_WriteDuty+0xe8>)
 800362e:	603b      	str	r3, [r7, #0]
  // Write duty to handle field
  hpwm->Duty = duty;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	609a      	str	r2, [r3, #8]
  // Compute Capture/Compare Register value
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hpwm->Timer)+1)) / 100;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363e:	3301      	adds	r3, #1
 8003640:	ee07 3a90 	vmov	s15, r3
 8003644:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003648:	edd7 7a00 	vldr	s15, [r7]
 800364c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003650:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80036dc <PWM_WriteDuty+0xe4>
 8003654:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003658:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800365c:	ee17 3a90 	vmov	r3, s15
 8003660:	60fb      	str	r3, [r7, #12]
  // Write value to register
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d105      	bne.n	8003676 <PWM_WriteDuty+0x7e>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003674:	e02c      	b.n	80036d0 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b04      	cmp	r3, #4
 800367c:	d105      	bne.n	800368a <PWM_WriteDuty+0x92>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003688:	e022      	b.n	80036d0 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b08      	cmp	r3, #8
 8003690:	d105      	bne.n	800369e <PWM_WriteDuty+0xa6>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800369c:	e018      	b.n	80036d0 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b0c      	cmp	r3, #12
 80036a4:	d105      	bne.n	80036b2 <PWM_WriteDuty+0xba>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80036b0:	e00e      	b.n	80036d0 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b10      	cmp	r3, #16
 80036b8:	d105      	bne.n	80036c6 <PWM_WriteDuty+0xce>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80036c4:	e004      	b.n	80036d0 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 80036d0:	bf00      	nop
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	42c80000 	.word	0x42c80000
 80036e0:	42c80000 	.word	0x42c80000

080036e4 <SERVO_Init>:
float PWM_ReadDuty(const PWM_Handle_TypeDef* hpwm)
{
  return hpwm->Duty;
}
void SERVO_Init(SERVO_Handle_TypeDef* hservo)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
	if(hservo->ID == 1 ){
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	7c1b      	ldrb	r3, [r3, #16]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d105      	bne.n	8003700 <SERVO_Init+0x1c>
	SERVO_WritePosition(hservo, SERVO1_HOME_POS); // Home position is 90 deg, Down is 72 deg.
 80036f4:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800371c <SERVO_Init+0x38>
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f813 	bl	8003724 <SERVO_WritePosition>
 80036fe:	e004      	b.n	800370a <SERVO_Init+0x26>
	}
	else{
	SERVO_WritePosition(hservo, SERVO2_HOME_POS); // Home position is 50 deg, down is 40.
 8003700:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8003720 <SERVO_Init+0x3c>
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f80d 	bl	8003724 <SERVO_WritePosition>
	}

	PWM_Init(&(hservo->PwmOut));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff ff5a 	bl	80035c6 <PWM_Init>
}
 8003712:	bf00      	nop
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	42b40000 	.word	0x42b40000
 8003720:	42700000 	.word	0x42700000

08003724 <SERVO_WritePosition>:

void SERVO_WritePosition(SERVO_Handle_TypeDef* hservo, float pos)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	ed87 0a00 	vstr	s0, [r7]
	hservo->Position = __SATURATION(pos, 0.0f, 180.0f);
 8003730:	eddf 0a16 	vldr	s1, [pc, #88]	@ 800378c <SERVO_WritePosition+0x68>
 8003734:	ed97 0a00 	vldr	s0, [r7]
 8003738:	f014 fe11 	bl	801835e <fminf>
 800373c:	eef0 7a40 	vmov.f32	s15, s0
 8003740:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8003790 <SERVO_WritePosition+0x6c>
 8003744:	eeb0 0a67 	vmov.f32	s0, s15
 8003748:	f014 fdec 	bl	8018324 <fmaxf>
 800374c:	eef0 7a40 	vmov.f32	s15, s0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	edc3 7a03 	vstr	s15, [r3, #12]
	float duty = __LINEAR_TRANSFORM(hservo->Position, 0.0f, 180.0f, SERVO_MIN_DUTY, SERVO_MAX_DUTY);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	ed93 7a03 	vldr	s14, [r3, #12]
 800375c:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800378c <SERVO_WritePosition+0x68>
 8003760:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003764:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003768:	ee67 7a87 	vmul.f32	s15, s15, s14
 800376c:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8003770:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003774:	edc7 7a03 	vstr	s15, [r7, #12]
	PWM_WriteDuty(&(hservo->PwmOut), duty);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	ed97 0a03 	vldr	s0, [r7, #12]
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff ff3a 	bl	80035f8 <PWM_WriteDuty>
}
 8003784:	bf00      	nop
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	43340000 	.word	0x43340000
 8003790:	00000000 	.word	0x00000000

08003794 <HAL_UART_RxCpltCallback>:

uint8_t uart3_rxData[PCB2GCODE_REPLY_SIZE];
volatile bool uart3_commandReceived = false;

// UART Receive Complete Callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
	// UART callback for read from TMC2209
    if (huart->Instance == USART2 || huart->Instance == USART6 || huart->Instance == UART4 || huart->Instance == UART5) {
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a0f      	ldr	r2, [pc, #60]	@ (80037e0 <HAL_UART_RxCpltCallback+0x4c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00e      	beq.n	80037c4 <HAL_UART_RxCpltCallback+0x30>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a0e      	ldr	r2, [pc, #56]	@ (80037e4 <HAL_UART_RxCpltCallback+0x50>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d009      	beq.n	80037c4 <HAL_UART_RxCpltCallback+0x30>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a0c      	ldr	r2, [pc, #48]	@ (80037e8 <HAL_UART_RxCpltCallback+0x54>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d004      	beq.n	80037c4 <HAL_UART_RxCpltCallback+0x30>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a0b      	ldr	r2, [pc, #44]	@ (80037ec <HAL_UART_RxCpltCallback+0x58>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d108      	bne.n	80037d6 <HAL_UART_RxCpltCallback+0x42>
        // Prevent buffer overflow by iterating only up to TMC_REPLY_SIZE
        memcpy(rxBuffer, rxData + 1, TMC_REPLY_SIZE+1);
 80037c4:	4b0a      	ldr	r3, [pc, #40]	@ (80037f0 <HAL_UART_RxCpltCallback+0x5c>)
 80037c6:	2209      	movs	r2, #9
 80037c8:	4619      	mov	r1, r3
 80037ca:	480a      	ldr	r0, [pc, #40]	@ (80037f4 <HAL_UART_RxCpltCallback+0x60>)
 80037cc:	f012 fdc7 	bl	801635e <memcpy>
        rxBufferReady = 1;
 80037d0:	4b09      	ldr	r3, [pc, #36]	@ (80037f8 <HAL_UART_RxCpltCallback+0x64>)
 80037d2:	2201      	movs	r2, #1
 80037d4:	701a      	strb	r2, [r3, #0]

    }

    // TODO: UART callback for read from PCB2Gcode

}
 80037d6:	bf00      	nop
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40004400 	.word	0x40004400
 80037e4:	40011400 	.word	0x40011400
 80037e8:	40004c00 	.word	0x40004c00
 80037ec:	40005000 	.word	0x40005000
 80037f0:	20002339 	.word	0x20002339
 80037f4:	20002344 	.word	0x20002344
 80037f8:	2000234c 	.word	0x2000234c

080037fc <calibProcessTask>:
  RunCalibrationStateMachine(): Encapsulates the calibration logic.
  Parameters can include pointers to LCD, motors, and any other state
  needed to update the calibration instructions.
-------------------------------------------------------------------*/

void calibProcessTask(void *pvParameters){
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af02      	add	r7, sp, #8
 8003802:	6078      	str	r0, [r7, #4]

	for(;;){
		EventBits_t uxBits = xEventGroupWaitBits(calibEventGroup, CALIB_START_BIT | CALIB_STOP_BIT, pdTRUE, pdFALSE, portMAX_DELAY);
 8003804:	4b21      	ldr	r3, [pc, #132]	@ (800388c <calibProcessTask+0x90>)
 8003806:	6818      	ldr	r0, [r3, #0]
 8003808:	f04f 33ff 	mov.w	r3, #4294967295
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	2300      	movs	r3, #0
 8003810:	2201      	movs	r2, #1
 8003812:	2105      	movs	r1, #5
 8003814:	f00e fe72 	bl	80124fc <xEventGroupWaitBits>
 8003818:	60f8      	str	r0, [r7, #12]
    if(uxBits & CALIB_STOP_BIT) return; // CALIB ABORTED TODO: Display calib aborted on LCD
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	d12f      	bne.n	8003884 <calibProcessTask+0x88>
	if (uxBits & CALIB_START_BIT) {
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d026      	beq.n	800387c <calibProcessTask+0x80>

     switch(g_calibSelection){
 800382e:	4b18      	ldr	r3, [pc, #96]	@ (8003890 <calibProcessTask+0x94>)
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b01      	cmp	r3, #1
 8003836:	d002      	beq.n	800383e <calibProcessTask+0x42>
 8003838:	2b02      	cmp	r3, #2
 800383a:	d00b      	beq.n	8003854 <calibProcessTask+0x58>
//                       // xEventGroupSetBits(calibEventGroup, CALIB_COMPLETE_BIT);
//        //RunManualCalibrationStateMachine(&hlcd3, &motors);
//        currentState = MENU_STATE_TESTING; // TODO: Add Test Process
//        break;
        default:
        break;
 800383c:	e018      	b.n	8003870 <calibProcessTask+0x74>
        AutoCalibration(&axes,&motors); 
 800383e:	4915      	ldr	r1, [pc, #84]	@ (8003894 <calibProcessTask+0x98>)
 8003840:	4815      	ldr	r0, [pc, #84]	@ (8003898 <calibProcessTask+0x9c>)
 8003842:	f000 fe6b 	bl	800451c <AutoCalibration>
        xEventGroupSetBits(calibEventGroup, CALIB_COMPLETE_BIT);
 8003846:	4b11      	ldr	r3, [pc, #68]	@ (800388c <calibProcessTask+0x90>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2102      	movs	r1, #2
 800384c:	4618      	mov	r0, r3
 800384e:	f00e ff2f 	bl	80126b0 <xEventGroupSetBits>
        break;
 8003852:	e00d      	b.n	8003870 <calibProcessTask+0x74>
        	ManualCalibration(&axes,&motors);
 8003854:	490f      	ldr	r1, [pc, #60]	@ (8003894 <calibProcessTask+0x98>)
 8003856:	4810      	ldr	r0, [pc, #64]	@ (8003898 <calibProcessTask+0x9c>)
 8003858:	f000 ff3a 	bl	80046d0 <ManualCalibration>
            xEventGroupSetBits(calibEventGroup, CALIB_COMPLETE_BIT);
 800385c:	4b0b      	ldr	r3, [pc, #44]	@ (800388c <calibProcessTask+0x90>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2102      	movs	r1, #2
 8003862:	4618      	mov	r0, r3
 8003864:	f00e ff24 	bl	80126b0 <xEventGroupSetBits>
            currentState = MENU_STATE_TESTING; // TODO: Add Test Process
 8003868:	4b0c      	ldr	r3, [pc, #48]	@ (800389c <calibProcessTask+0xa0>)
 800386a:	2207      	movs	r2, #7
 800386c:	701a      	strb	r2, [r3, #0]
        break;
 800386e:	bf00      	nop
//            xSemaphoreGive(lcdMutex);
//        }

    }
        // Short delay to let other tasks run.
     xEventGroupSetBits(calibEventGroup, CALIB_COMPLETE_BIT);
 8003870:	4b06      	ldr	r3, [pc, #24]	@ (800388c <calibProcessTask+0x90>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2102      	movs	r1, #2
 8003876:	4618      	mov	r0, r3
 8003878:	f00e ff1a 	bl	80126b0 <xEventGroupSetBits>

       }
		vTaskDelay(pdMS_TO_TICKS(10));
 800387c:	200a      	movs	r0, #10
 800387e:	f010 f959 	bl	8013b34 <vTaskDelay>
	for(;;){
 8003882:	e7bf      	b.n	8003804 <calibProcessTask+0x8>
    if(uxBits & CALIB_STOP_BIT) return; // CALIB ABORTED TODO: Display calib aborted on LCD
 8003884:	bf00      	nop
   }
}
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	20002358 	.word	0x20002358
 8003890:	20002368 	.word	0x20002368
 8003894:	20005844 	.word	0x20005844
 8003898:	20005ad4 	.word	0x20005ad4
 800389c:	20002354 	.word	0x20002354

080038a0 <motorControlTask>:


void motorControlTask(void *argument) {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08e      	sub	sp, #56	@ 0x38
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
		// Queue for motor cmds
	motorCommandQueue = xQueueCreate(256, sizeof(MotorCommand));
 80038a8:	2200      	movs	r2, #0
 80038aa:	212c      	movs	r1, #44	@ 0x2c
 80038ac:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80038b0:	f00f f957 	bl	8012b62 <xQueueGenericCreate>
 80038b4:	4603      	mov	r3, r0
 80038b6:	4a62      	ldr	r2, [pc, #392]	@ (8003a40 <motorControlTask+0x1a0>)
 80038b8:	6013      	str	r3, [r2, #0]
	configASSERT(motorCommandQueue != NULL);
 80038ba:	4b61      	ldr	r3, [pc, #388]	@ (8003a40 <motorControlTask+0x1a0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10d      	bne.n	80038de <motorControlTask+0x3e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038c6:	b672      	cpsid	i
 80038c8:	f383 8811 	msr	BASEPRI, r3
 80038cc:	f3bf 8f6f 	isb	sy
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	b662      	cpsie	i
 80038d6:	637b      	str	r3, [r7, #52]	@ 0x34
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80038d8:	bf00      	nop
 80038da:	bf00      	nop
 80038dc:	e7fd      	b.n	80038da <motorControlTask+0x3a>

	MotorCommand cmd;

    for(;;) {
    // Wait for a command from the queue
    	if(xQueueReceive(motorCommandQueue, &cmd, portMAX_DELAY) == pdPASS){
 80038de:	4b58      	ldr	r3, [pc, #352]	@ (8003a40 <motorControlTask+0x1a0>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f107 0108 	add.w	r1, r7, #8
 80038e6:	f04f 32ff 	mov.w	r2, #4294967295
 80038ea:	4618      	mov	r0, r3
 80038ec:	f00f fb74 	bl	8012fd8 <xQueueReceive>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	f040 809b 	bne.w	8003a2e <motorControlTask+0x18e>
    		switch (cmd.command){
 80038f8:	7a3b      	ldrb	r3, [r7, #8]
 80038fa:	2b09      	cmp	r3, #9
 80038fc:	f200 8096 	bhi.w	8003a2c <motorControlTask+0x18c>
 8003900:	a201      	add	r2, pc, #4	@ (adr r2, 8003908 <motorControlTask+0x68>)
 8003902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003906:	bf00      	nop
 8003908:	08003947 	.word	0x08003947
 800390c:	0800396b 	.word	0x0800396b
 8003910:	08003931 	.word	0x08003931
 8003914:	08003981 	.word	0x08003981
 8003918:	0800399b 	.word	0x0800399b
 800391c:	080039b5 	.word	0x080039b5
 8003920:	080039e9 	.word	0x080039e9
 8003924:	08003a03 	.word	0x08003a03
 8003928:	080039cf 	.word	0x080039cf
 800392c:	08003a1d 	.word	0x08003a1d

    		case	MOTOR_CMD_START: // Start the motor
    				TMC2209_Start(&motors[cmd.motorIndex]);
 8003930:	7abb      	ldrb	r3, [r7, #10]
 8003932:	461a      	mov	r2, r3
 8003934:	23a4      	movs	r3, #164	@ 0xa4
 8003936:	fb02 f303 	mul.w	r3, r2, r3
 800393a:	4a42      	ldr	r2, [pc, #264]	@ (8003a44 <motorControlTask+0x1a4>)
 800393c:	4413      	add	r3, r2
 800393e:	4618      	mov	r0, r3
 8003940:	f7fe fcd4 	bl	80022ec <TMC2209_Start>
    				break;
 8003944:	e073      	b.n	8003a2e <motorControlTask+0x18e>

    		case	MOTOR_CMD_MOVETO: // Move the motor to a target position
    				TMC2209_MoveTo(&axes[cmd.axisIndex], cmd.motorIndex, cmd.targetPositionMM);
 8003946:	7a7b      	ldrb	r3, [r7, #9]
 8003948:	461a      	mov	r2, r3
 800394a:	4613      	mov	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	4a3d      	ldr	r2, [pc, #244]	@ (8003a48 <motorControlTask+0x1a8>)
 8003954:	4413      	add	r3, r2
 8003956:	7aba      	ldrb	r2, [r7, #10]
 8003958:	edd7 7a03 	vldr	s15, [r7, #12]
 800395c:	eeb0 0a67 	vmov.f32	s0, s15
 8003960:	4611      	mov	r1, r2
 8003962:	4618      	mov	r0, r3
 8003964:	f7fe fcf8 	bl	8002358 <TMC2209_MoveTo>
    				break;
 8003968:	e061      	b.n	8003a2e <motorControlTask+0x18e>

    		case	MOTOR_CMD_STOP:	// Stop the motor
    				TMC2209_Stop(&motors[cmd.motorIndex]);
 800396a:	7abb      	ldrb	r3, [r7, #10]
 800396c:	461a      	mov	r2, r3
 800396e:	23a4      	movs	r3, #164	@ 0xa4
 8003970:	fb02 f303 	mul.w	r3, r2, r3
 8003974:	4a33      	ldr	r2, [pc, #204]	@ (8003a44 <motorControlTask+0x1a4>)
 8003976:	4413      	add	r3, r2
 8003978:	4618      	mov	r0, r3
 800397a:	f7fe fca1 	bl	80022c0 <TMC2209_Stop>

    				break;
 800397e:	e056      	b.n	8003a2e <motorControlTask+0x18e>

    		case 	MOTOR_CMD_DIRECTION:
    				TMC2209_SetDirection(&motors[cmd.motorIndex], cmd.direction);
 8003980:	7abb      	ldrb	r3, [r7, #10]
 8003982:	461a      	mov	r2, r3
 8003984:	23a4      	movs	r3, #164	@ 0xa4
 8003986:	fb02 f303 	mul.w	r3, r2, r3
 800398a:	4a2e      	ldr	r2, [pc, #184]	@ (8003a44 <motorControlTask+0x1a4>)
 800398c:	4413      	add	r3, r2
 800398e:	7c3a      	ldrb	r2, [r7, #16]
 8003990:	4611      	mov	r1, r2
 8003992:	4618      	mov	r0, r3
 8003994:	f7fe fc08 	bl	80021a8 <TMC2209_SetDirection>
    				break;
 8003998:	e049      	b.n	8003a2e <motorControlTask+0x18e>

    		case 	MOTOR_CMD_SETSPEED:
    				TMC2209_SetSpeed(&motors[cmd.motorIndex], cmd.speed);
 800399a:	7abb      	ldrb	r3, [r7, #10]
 800399c:	461a      	mov	r2, r3
 800399e:	23a4      	movs	r3, #164	@ 0xa4
 80039a0:	fb02 f303 	mul.w	r3, r2, r3
 80039a4:	4a27      	ldr	r2, [pc, #156]	@ (8003a44 <motorControlTask+0x1a4>)
 80039a6:	4413      	add	r3, r2
 80039a8:	8a7a      	ldrh	r2, [r7, #18]
 80039aa:	4611      	mov	r1, r2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fe fc24 	bl	80021fa <TMC2209_SetSpeed>
    				break;
 80039b2:	e03c      	b.n	8003a2e <motorControlTask+0x18e>

    		case 	MOTOR_CMD_CONFIG_MSTEP:
    				TMC2209_setMicrosteppingResolution(&motors[cmd.motorIndex], cmd.mstep);
 80039b4:	7abb      	ldrb	r3, [r7, #10]
 80039b6:	461a      	mov	r2, r3
 80039b8:	23a4      	movs	r3, #164	@ 0xa4
 80039ba:	fb02 f303 	mul.w	r3, r2, r3
 80039be:	4a21      	ldr	r2, [pc, #132]	@ (8003a44 <motorControlTask+0x1a4>)
 80039c0:	4413      	add	r3, r2
 80039c2:	8aba      	ldrh	r2, [r7, #20]
 80039c4:	4611      	mov	r1, r2
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff f81a 	bl	8002a00 <TMC2209_setMicrosteppingResolution>
    				break;
 80039cc:	e02f      	b.n	8003a2e <motorControlTask+0x18e>

    		case 	MOTOR_CMD_CONFIG_CHOPPER:
    			    TMC2209_setSpreadCycle(&motors[cmd.motorIndex], cmd.chopper);
 80039ce:	7abb      	ldrb	r3, [r7, #10]
 80039d0:	461a      	mov	r2, r3
 80039d2:	23a4      	movs	r3, #164	@ 0xa4
 80039d4:	fb02 f303 	mul.w	r3, r2, r3
 80039d8:	4a1a      	ldr	r2, [pc, #104]	@ (8003a44 <motorControlTask+0x1a4>)
 80039da:	4413      	add	r3, r2
 80039dc:	7eba      	ldrb	r2, [r7, #26]
 80039de:	4611      	mov	r1, r2
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fe ffaf 	bl	8002944 <TMC2209_setSpreadCycle>
    			    break;
 80039e6:	e022      	b.n	8003a2e <motorControlTask+0x18e>

    		case	MOTOR_CMD_CONFIG_SGTHRS:
    				TMC2209_enableStallDetection(&motors[cmd.motorIndex], cmd.sgthrs);
 80039e8:	7abb      	ldrb	r3, [r7, #10]
 80039ea:	461a      	mov	r2, r3
 80039ec:	23a4      	movs	r3, #164	@ 0xa4
 80039ee:	fb02 f303 	mul.w	r3, r2, r3
 80039f2:	4a14      	ldr	r2, [pc, #80]	@ (8003a44 <motorControlTask+0x1a4>)
 80039f4:	4413      	add	r3, r2
 80039f6:	7dba      	ldrb	r2, [r7, #22]
 80039f8:	4611      	mov	r1, r2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff f8e4 	bl	8002bc8 <TMC2209_enableStallDetection>
    				break;
 8003a00:	e015      	b.n	8003a2e <motorControlTask+0x18e>

    		case 	MOTOR_CMD_CONFIG_COOLTHRS:
    				TMC2209_SetTCoolThrs(&motors[cmd.motorIndex], cmd.coolThrs);
 8003a02:	7abb      	ldrb	r3, [r7, #10]
 8003a04:	461a      	mov	r2, r3
 8003a06:	23a4      	movs	r3, #164	@ 0xa4
 8003a08:	fb02 f303 	mul.w	r3, r2, r3
 8003a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8003a44 <motorControlTask+0x1a4>)
 8003a0e:	4413      	add	r3, r2
 8003a10:	8b3a      	ldrh	r2, [r7, #24]
 8003a12:	4611      	mov	r1, r2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff f901 	bl	8002c1c <TMC2209_SetTCoolThrs>
    				break;
 8003a1a:	e008      	b.n	8003a2e <motorControlTask+0x18e>
       		case 	MOTOR_CMD_MOVE_ALL_MOTORS:
       		{
       			   // Move all motors on axis 0 concurrently.
       			TMC2209_MoveAllMotorsTo(&axes, cmd.targetPositionsAxis0);
 8003a1c:	f107 0308 	add.w	r3, r7, #8
 8003a20:	3314      	adds	r3, #20
 8003a22:	4619      	mov	r1, r3
 8003a24:	4808      	ldr	r0, [pc, #32]	@ (8003a48 <motorControlTask+0x1a8>)
 8003a26:	f7fe fd05 	bl	8002434 <TMC2209_MoveAllMotorsTo>

       			    break;
 8003a2a:	e000      	b.n	8003a2e <motorControlTask+0x18e>
//    		case 	MOTOR_CMD_CHECK_CHOPPER:
//    		case	MOTOR_CMD_CHECK_SGTHRS:
//    		case 	MOTOR_CMD_CHECK_COOLTHRS:
//    				break;
    		default: // unkown command
    				break;
 8003a2c:	bf00      	nop
    		}
    	}



    	taskYIELD();
 8003a2e:	4b07      	ldr	r3, [pc, #28]	@ (8003a4c <motorControlTask+0x1ac>)
 8003a30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	f3bf 8f4f 	dsb	sy
 8003a3a:	f3bf 8f6f 	isb	sy
    	if(xQueueReceive(motorCommandQueue, &cmd, portMAX_DELAY) == pdPASS){
 8003a3e:	e74e      	b.n	80038de <motorControlTask+0x3e>
 8003a40:	20002350 	.word	0x20002350
 8003a44:	20005844 	.word	0x20005844
 8003a48:	20005ad4 	.word	0x20005ad4
 8003a4c:	e000ed04 	.word	0xe000ed04

08003a50 <stallMonitorTask>:

/*
 * Stall Monitor Task
 * This task will check the diag pin of each motor and send a stop command for the motor that stalled.
 */
void stallMonitorTask(void *argument) {
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b090      	sub	sp, #64	@ 0x40
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
	MotorCommand stallCmd;

    for(;;) {
        for(int i = 0; i < MAX_MOTORS; i++) {
 8003a58:	2300      	movs	r3, #0
 8003a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a5c:	e050      	b.n	8003b00 <stallMonitorTask+0xb0>
        	motors[i].STALL = HAL_GPIO_ReadPin(motors[i].driver.diag_port, motors[i].driver.diag_pin);
 8003a5e:	4a2c      	ldr	r2, [pc, #176]	@ (8003b10 <stallMonitorTask+0xc0>)
 8003a60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a62:	21a4      	movs	r1, #164	@ 0xa4
 8003a64:	fb01 f303 	mul.w	r3, r1, r3
 8003a68:	4413      	add	r3, r2
 8003a6a:	3354      	adds	r3, #84	@ 0x54
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	4928      	ldr	r1, [pc, #160]	@ (8003b10 <stallMonitorTask+0xc0>)
 8003a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a72:	20a4      	movs	r0, #164	@ 0xa4
 8003a74:	fb00 f303 	mul.w	r3, r0, r3
 8003a78:	440b      	add	r3, r1
 8003a7a:	3358      	adds	r3, #88	@ 0x58
 8003a7c:	881b      	ldrh	r3, [r3, #0]
 8003a7e:	4619      	mov	r1, r3
 8003a80:	4610      	mov	r0, r2
 8003a82:	f004 f88d 	bl	8007ba0 <HAL_GPIO_ReadPin>
 8003a86:	4603      	mov	r3, r0
 8003a88:	4618      	mov	r0, r3
 8003a8a:	4a21      	ldr	r2, [pc, #132]	@ (8003b10 <stallMonitorTask+0xc0>)
 8003a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a8e:	21a4      	movs	r1, #164	@ 0xa4
 8003a90:	fb01 f303 	mul.w	r3, r1, r3
 8003a94:	4413      	add	r3, r2
 8003a96:	33a0      	adds	r3, #160	@ 0xa0
 8003a98:	4602      	mov	r2, r0
 8003a9a:	701a      	strb	r2, [r3, #0]

            if(motors[i].STALL == GPIO_PIN_SET) {  // Stall detecte
 8003a9c:	4a1c      	ldr	r2, [pc, #112]	@ (8003b10 <stallMonitorTask+0xc0>)
 8003a9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aa0:	21a4      	movs	r1, #164	@ 0xa4
 8003aa2:	fb01 f303 	mul.w	r3, r1, r3
 8003aa6:	4413      	add	r3, r2
 8003aa8:	33a0      	adds	r3, #160	@ 0xa0
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d124      	bne.n	8003afa <stallMonitorTask+0xaa>

                xEventGroupSetBits(testingEvent, TEST_STOP_BIT); // Abort Testing task
 8003ab0:	4b18      	ldr	r3, [pc, #96]	@ (8003b14 <stallMonitorTask+0xc4>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2102      	movs	r1, #2
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f00e fdfa 	bl	80126b0 <xEventGroupSetBits>
                TMC2209_Stop(&motors[i]); // Stop stalled motor first
 8003abc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003abe:	22a4      	movs	r2, #164	@ 0xa4
 8003ac0:	fb02 f303 	mul.w	r3, r2, r3
 8003ac4:	4a12      	ldr	r2, [pc, #72]	@ (8003b10 <stallMonitorTask+0xc0>)
 8003ac6:	4413      	add	r3, r2
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7fe fbf9 	bl	80022c0 <TMC2209_Stop>
                for(int j = 0; j<MAX_MOTORS; j++){ // Stop the other motors
 8003ace:	2300      	movs	r3, #0
 8003ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ad2:	e00f      	b.n	8003af4 <stallMonitorTask+0xa4>
                   if(j != i) TMC2209_Stop(&motors[j]);
 8003ad4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d008      	beq.n	8003aee <stallMonitorTask+0x9e>
 8003adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ade:	22a4      	movs	r2, #164	@ 0xa4
 8003ae0:	fb02 f303 	mul.w	r3, r2, r3
 8003ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8003b10 <stallMonitorTask+0xc0>)
 8003ae6:	4413      	add	r3, r2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fe fbe9 	bl	80022c0 <TMC2209_Stop>
                for(int j = 0; j<MAX_MOTORS; j++){ // Stop the other motors
 8003aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af0:	3301      	adds	r3, #1
 8003af2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af6:	2b03      	cmp	r3, #3
 8003af8:	ddec      	ble.n	8003ad4 <stallMonitorTask+0x84>
        for(int i = 0; i < MAX_MOTORS; i++) {
 8003afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003afc:	3301      	adds	r3, #1
 8003afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b02:	2b03      	cmp	r3, #3
 8003b04:	ddab      	ble.n	8003a5e <stallMonitorTask+0xe>

                }
            }
        }
        vTaskDelay(pdMS_TO_TICKS(STALL_CHECK_INTERVAL_MS));
 8003b06:	2032      	movs	r0, #50	@ 0x32
 8003b08:	f010 f814 	bl	8013b34 <vTaskDelay>
        for(int i = 0; i < MAX_MOTORS; i++) {
 8003b0c:	e7a4      	b.n	8003a58 <stallMonitorTask+0x8>
 8003b0e:	bf00      	nop
 8003b10:	20005844 	.word	0x20005844
 8003b14:	2000235c 	.word	0x2000235c

08003b18 <vMainMenuTask>:
 * FreeRTOS task to handle the main menu.
 * This task will display the menu, wait for a selection,
 * and then call the handler for that selection.
 */
void vMainMenuTask(void *pvParameters)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08c      	sub	sp, #48	@ 0x30
 8003b1c:	af02      	add	r7, sp, #8
 8003b1e:	6078      	str	r0, [r7, #4]
    currentState = MENU_STATE_WELCOME;
 8003b20:	4b76      	ldr	r3, [pc, #472]	@ (8003cfc <vMainMenuTask+0x1e4>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	701a      	strb	r2, [r3, #0]
    for (;;) {

        switch (currentState) {
 8003b26:	4b75      	ldr	r3, [pc, #468]	@ (8003cfc <vMainMenuTask+0x1e4>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b07      	cmp	r3, #7
 8003b2c:	f200 80da 	bhi.w	8003ce4 <vMainMenuTask+0x1cc>
 8003b30:	a201      	add	r2, pc, #4	@ (adr r2, 8003b38 <vMainMenuTask+0x20>)
 8003b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b36:	bf00      	nop
 8003b38:	08003b59 	.word	0x08003b59
 8003b3c:	08003ba3 	.word	0x08003ba3
 8003b40:	08003be5 	.word	0x08003be5
 8003b44:	08003c1d 	.word	0x08003c1d
 8003b48:	08003ce5 	.word	0x08003ce5
 8003b4c:	08003ce5 	.word	0x08003ce5
 8003b50:	08003c83 	.word	0x08003c83
 8003b54:	08003cbd 	.word	0x08003cbd
        	case MENU_STATE_WELCOME:
        	{
        		LCD_I2C_DisplaySequentialGlossyText(&hlcd3, 2);
 8003b58:	2102      	movs	r1, #2
 8003b5a:	4869      	ldr	r0, [pc, #420]	@ (8003d00 <vMainMenuTask+0x1e8>)
 8003b5c:	f7fd fbc8 	bl	80012f0 <LCD_I2C_DisplaySequentialGlossyText>
        		osDelay(500);
 8003b60:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003b64:	f00e fbd1 	bl	801230a <osDelay>
        		LCD_I2C_ClearAllLines(&hlcd3);
 8003b68:	4865      	ldr	r0, [pc, #404]	@ (8003d00 <vMainMenuTask+0x1e8>)
 8003b6a:	f7fd fb7b 	bl	8001264 <LCD_I2C_ClearAllLines>
        		LCD_I2C_SetCursor(&hlcd3, 0, 1);
 8003b6e:	2201      	movs	r2, #1
 8003b70:	2100      	movs	r1, #0
 8003b72:	4863      	ldr	r0, [pc, #396]	@ (8003d00 <vMainMenuTask+0x1e8>)
 8003b74:	f7fd fb4a 	bl	800120c <LCD_I2C_SetCursor>
        		LCD_I2C_printStr(&hlcd3, "Setting up machine, please wait...");
 8003b78:	4962      	ldr	r1, [pc, #392]	@ (8003d04 <vMainMenuTask+0x1ec>)
 8003b7a:	4861      	ldr	r0, [pc, #388]	@ (8003d00 <vMainMenuTask+0x1e8>)
 8003b7c:	f7fd fb0c 	bl	8001198 <LCD_I2C_printStr>
        		initializeSystem();
 8003b80:	f7ff fc62 	bl	8003448 <initializeSystem>
                // Wait here until the initialization semaphore is given.
                if (xSemaphoreTake(xInitSemaphore, portMAX_DELAY) == pdTRUE) {
 8003b84:	4b60      	ldr	r3, [pc, #384]	@ (8003d08 <vMainMenuTask+0x1f0>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f04f 31ff 	mov.w	r1, #4294967295
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f00f fb0b 	bl	80131a8 <xQueueSemaphoreTake>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	f040 80a9 	bne.w	8003cec <vMainMenuTask+0x1d4>
                    currentState = MENU_STATE_MAIN;
 8003b9a:	4b58      	ldr	r3, [pc, #352]	@ (8003cfc <vMainMenuTask+0x1e4>)
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	701a      	strb	r2, [r3, #0]
                }
        }
        	break;
 8003ba0:	e0a4      	b.n	8003cec <vMainMenuTask+0x1d4>

            case MENU_STATE_MAIN:
                {
                    // Display main menu and get selection.
                	const char* menuItems[] = {"Test from SD", "Prepare Machine"};
 8003ba2:	4a5a      	ldr	r2, [pc, #360]	@ (8003d0c <vMainMenuTask+0x1f4>)
 8003ba4:	f107 0314 	add.w	r3, r7, #20
 8003ba8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bac:	e883 0003 	stmia.w	r3, {r0, r1}
                    uint8_t mainSelection = LCD_I2C_menuTemplate(&hlcd3, &henc1, menuItems,2, 0);
 8003bb0:	f107 0214 	add.w	r2, r7, #20
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	2302      	movs	r3, #2
 8003bba:	4955      	ldr	r1, [pc, #340]	@ (8003d10 <vMainMenuTask+0x1f8>)
 8003bbc:	4850      	ldr	r0, [pc, #320]	@ (8003d00 <vMainMenuTask+0x1e8>)
 8003bbe:	f7fd fbe9 	bl	8001394 <LCD_I2C_menuTemplate>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	77fb      	strb	r3, [r7, #31]
                    if (mainSelection == 0) {
 8003bc6:	7ffb      	ldrb	r3, [r7, #31]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d103      	bne.n	8003bd4 <vMainMenuTask+0xbc>
                        currentState = MENU_STATE_SD_TEST;
 8003bcc:	4b4b      	ldr	r3, [pc, #300]	@ (8003cfc <vMainMenuTask+0x1e4>)
 8003bce:	2202      	movs	r2, #2
 8003bd0:	701a      	strb	r2, [r3, #0]
                    } else if (mainSelection == 1) {
                        currentState = MENU_STATE_PREPARE_MACHINE;
                    } 
                }
                break;
 8003bd2:	e08d      	b.n	8003cf0 <vMainMenuTask+0x1d8>
                    } else if (mainSelection == 1) {
 8003bd4:	7ffb      	ldrb	r3, [r7, #31]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	f040 808a 	bne.w	8003cf0 <vMainMenuTask+0x1d8>
                        currentState = MENU_STATE_PREPARE_MACHINE;
 8003bdc:	4b47      	ldr	r3, [pc, #284]	@ (8003cfc <vMainMenuTask+0x1e4>)
 8003bde:	2206      	movs	r2, #6
 8003be0:	701a      	strb	r2, [r3, #0]
                break;
 8003be2:	e085      	b.n	8003cf0 <vMainMenuTask+0x1d8>

            case MENU_STATE_SD_TEST:
                {
                    // Display SD card test menu or process SD card files.
                	  LCD_I2C_Clear(&hlcd3);
 8003be4:	4846      	ldr	r0, [pc, #280]	@ (8003d00 <vMainMenuTask+0x1e8>)
 8003be6:	f7fd fb31 	bl	800124c <LCD_I2C_Clear>
                	  LCD_I2C_SetCursor(&hlcd3, 0, 1);
 8003bea:	2201      	movs	r2, #1
 8003bec:	2100      	movs	r1, #0
 8003bee:	4844      	ldr	r0, [pc, #272]	@ (8003d00 <vMainMenuTask+0x1e8>)
 8003bf0:	f7fd fb0c 	bl	800120c <LCD_I2C_SetCursor>
                	  LCD_I2C_printStr(&hlcd3, "Performing Tests");
 8003bf4:	4947      	ldr	r1, [pc, #284]	@ (8003d14 <vMainMenuTask+0x1fc>)
 8003bf6:	4842      	ldr	r0, [pc, #264]	@ (8003d00 <vMainMenuTask+0x1e8>)
 8003bf8:	f7fd face 	bl	8001198 <LCD_I2C_printStr>
                      LCD_I2C_DisplaySDMenu(&hlcd3, &henc1);
 8003bfc:	4944      	ldr	r1, [pc, #272]	@ (8003d10 <vMainMenuTask+0x1f8>)
 8003bfe:	4840      	ldr	r0, [pc, #256]	@ (8003d00 <vMainMenuTask+0x1e8>)
 8003c00:	f7fd fe02 	bl	8001808 <LCD_I2C_DisplaySDMenu>

                       size_t numLines = sizeof(lines);
 8003c04:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8003c08:	623b      	str	r3, [r7, #32]
                       ProcessGcode(&axes, &lines, numLines);
 8003c0a:	6a3a      	ldr	r2, [r7, #32]
 8003c0c:	4942      	ldr	r1, [pc, #264]	@ (8003d18 <vMainMenuTask+0x200>)
 8003c0e:	4843      	ldr	r0, [pc, #268]	@ (8003d1c <vMainMenuTask+0x204>)
 8003c10:	f000 f92e 	bl	8003e70 <ProcessGcode>
            	 currentState = MENU_STATE_CALIBRATION;
 8003c14:	4b39      	ldr	r3, [pc, #228]	@ (8003cfc <vMainMenuTask+0x1e4>)
 8003c16:	2203      	movs	r2, #3
 8003c18:	701a      	strb	r2, [r3, #0]


                        //currentState = MENU_STATE_MAIN;
                }
                break;
 8003c1a:	e06a      	b.n	8003cf2 <vMainMenuTask+0x1da>

            case MENU_STATE_CALIBRATION:
                {
                    const char* calibMenuItems[] = {"Auto Calibartion", "Manual Calibration" };
 8003c1c:	4a40      	ldr	r2, [pc, #256]	@ (8003d20 <vMainMenuTask+0x208>)
 8003c1e:	f107 030c 	add.w	r3, r7, #12
 8003c22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c26:	e883 0003 	stmia.w	r3, {r0, r1}
                    uint8_t calibSelection = LCD_I2C_menuTemplate(&hlcd3, &henc1,calibMenuItems,2, 1);
 8003c2a:	f107 020c 	add.w	r2, r7, #12
 8003c2e:	2301      	movs	r3, #1
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	2302      	movs	r3, #2
 8003c34:	4936      	ldr	r1, [pc, #216]	@ (8003d10 <vMainMenuTask+0x1f8>)
 8003c36:	4832      	ldr	r0, [pc, #200]	@ (8003d00 <vMainMenuTask+0x1e8>)
 8003c38:	f7fd fbac 	bl	8001394 <LCD_I2C_menuTemplate>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                    if (calibSelection == 0) {  // "Back"
 8003c42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d103      	bne.n	8003c52 <vMainMenuTask+0x13a>
                        currentState = MENU_STATE_MAIN;
 8003c4a:	4b2c      	ldr	r3, [pc, #176]	@ (8003cfc <vMainMenuTask+0x1e4>)
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	701a      	strb	r2, [r3, #0]

                         //Calibration is complete. Return to the main menu or update as needed.
                        currentState = MENU_STATE_TESTING;
                    }
                }
                break;
 8003c50:	e04f      	b.n	8003cf2 <vMainMenuTask+0x1da>
                    	g_calibSelection = calibSelection;
 8003c52:	4a34      	ldr	r2, [pc, #208]	@ (8003d24 <vMainMenuTask+0x20c>)
 8003c54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c58:	7013      	strb	r3, [r2, #0]
                    	xEventGroupSetBits(calibEventGroup, CALIB_START_BIT);
 8003c5a:	4b33      	ldr	r3, [pc, #204]	@ (8003d28 <vMainMenuTask+0x210>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2101      	movs	r1, #1
 8003c60:	4618      	mov	r0, r3
 8003c62:	f00e fd25 	bl	80126b0 <xEventGroupSetBits>
                    	xEventGroupWaitBits(calibEventGroup, CALIB_COMPLETE_BIT,
 8003c66:	4b30      	ldr	r3, [pc, #192]	@ (8003d28 <vMainMenuTask+0x210>)
 8003c68:	6818      	ldr	r0, [r3, #0]
 8003c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	2300      	movs	r3, #0
 8003c72:	2201      	movs	r2, #1
 8003c74:	2102      	movs	r1, #2
 8003c76:	f00e fc41 	bl	80124fc <xEventGroupWaitBits>
                        currentState = MENU_STATE_TESTING;
 8003c7a:	4b20      	ldr	r3, [pc, #128]	@ (8003cfc <vMainMenuTask+0x1e4>)
 8003c7c:	2207      	movs	r2, #7
 8003c7e:	701a      	strb	r2, [r3, #0]
                break;
 8003c80:	e037      	b.n	8003cf2 <vMainMenuTask+0x1da>


            case MENU_STATE_PREPARE_MACHINE:
                {
                	LCD_I2C_ClearAllLines(&hlcd3);
 8003c82:	481f      	ldr	r0, [pc, #124]	@ (8003d00 <vMainMenuTask+0x1e8>)
 8003c84:	f7fd faee 	bl	8001264 <LCD_I2C_ClearAllLines>
                	LCD_I2C_SetCursor(&hlcd3, 0, 1);
 8003c88:	2201      	movs	r2, #1
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	481c      	ldr	r0, [pc, #112]	@ (8003d00 <vMainMenuTask+0x1e8>)
 8003c8e:	f7fd fabd 	bl	800120c <LCD_I2C_SetCursor>
                    LCD_I2C_printStr(&hlcd3, "Preparing...");
 8003c92:	4926      	ldr	r1, [pc, #152]	@ (8003d2c <vMainMenuTask+0x214>)
 8003c94:	481a      	ldr	r0, [pc, #104]	@ (8003d00 <vMainMenuTask+0x1e8>)
 8003c96:	f7fd fa7f 	bl	8001198 <LCD_I2C_printStr>
                    if(MotorsHoming(&motors) == 1){
 8003c9a:	4825      	ldr	r0, [pc, #148]	@ (8003d30 <vMainMenuTask+0x218>)
 8003c9c:	f000 fa96 	bl	80041cc <MotorsHoming>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d10a      	bne.n	8003cbc <vMainMenuTask+0x1a4>
                       if(!calibrationState()){
 8003ca6:	f000 fce7 	bl	8004678 <calibrationState>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d102      	bne.n	8003cb6 <vMainMenuTask+0x19e>
                           currentState =MENU_STATE_CALIBRATION;
 8003cb0:	4b12      	ldr	r3, [pc, #72]	@ (8003cfc <vMainMenuTask+0x1e4>)
 8003cb2:	2203      	movs	r2, #3
 8003cb4:	701a      	strb	r2, [r3, #0]
                        }
                       currentState = MENU_STATE_MAIN;
 8003cb6:	4b11      	ldr	r3, [pc, #68]	@ (8003cfc <vMainMenuTask+0x1e4>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	701a      	strb	r2, [r3, #0]

                 }
            case MENU_STATE_TESTING:
            {
            	// TDOD: MENU FOR TESTING -- SHOW PROGRESS OF TESTING
            	xEventGroupSetBits(testingEvent, TEST_START_BIT); // Start Testing task
 8003cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8003d34 <vMainMenuTask+0x21c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f00e fcf4 	bl	80126b0 <xEventGroupSetBits>
            	xEventGroupWaitBits(testingEvent, TEST_COMPLETE_BIT, pdTRUE, pdFALSE, portMAX_DELAY); // Test Finished.
 8003cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8003d34 <vMainMenuTask+0x21c>)
 8003cca:	6818      	ldr	r0, [r3, #0]
 8003ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	2104      	movs	r1, #4
 8003cd8:	f00e fc10 	bl	80124fc <xEventGroupWaitBits>
            	currentState = MENU_STATE_MAIN;
 8003cdc:	4b07      	ldr	r3, [pc, #28]	@ (8003cfc <vMainMenuTask+0x1e4>)
 8003cde:	2201      	movs	r2, #1
 8003ce0:	701a      	strb	r2, [r3, #0]
            }
                break;
 8003ce2:	e006      	b.n	8003cf2 <vMainMenuTask+0x1da>
            default:
                currentState = MENU_STATE_MAIN;
 8003ce4:	4b05      	ldr	r3, [pc, #20]	@ (8003cfc <vMainMenuTask+0x1e4>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	701a      	strb	r2, [r3, #0]
                break;
 8003cea:	e002      	b.n	8003cf2 <vMainMenuTask+0x1da>
        	break;
 8003cec:	bf00      	nop
 8003cee:	e000      	b.n	8003cf2 <vMainMenuTask+0x1da>
                break;
 8003cf0:	bf00      	nop
        }

        osDelay(1);  // Allow other tasks to run
 8003cf2:	2001      	movs	r0, #1
 8003cf4:	f00e fb09 	bl	801230a <osDelay>
        switch (currentState) {
 8003cf8:	e715      	b.n	8003b26 <vMainMenuTask+0xe>
 8003cfa:	bf00      	nop
 8003cfc:	20002354 	.word	0x20002354
 8003d00:	20000018 	.word	0x20000018
 8003d04:	0801862c 	.word	0x0801862c
 8003d08:	20002364 	.word	0x20002364
 8003d0c:	08018694 	.word	0x08018694
 8003d10:	20000000 	.word	0x20000000
 8003d14:	08018650 	.word	0x08018650
 8003d18:	20000268 	.word	0x20000268
 8003d1c:	20005ad4 	.word	0x20005ad4
 8003d20:	080186c4 	.word	0x080186c4
 8003d24:	20002368 	.word	0x20002368
 8003d28:	20002358 	.word	0x20002358
 8003d2c:	08018664 	.word	0x08018664
 8003d30:	20005844 	.word	0x20005844
 8003d34:	2000235c 	.word	0x2000235c

08003d38 <vTestingTask>:
    }
}

void vTestingTask(void *arugment){
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af02      	add	r7, sp, #8
 8003d3e:	6078      	str	r0, [r7, #4]
	for(;;){

		EventBits_t testingBits = xEventGroupWaitBits(testingEvent, TEST_START_BIT | TEST_STOP_BIT,
 8003d40:	4b11      	ldr	r3, [pc, #68]	@ (8003d88 <vTestingTask+0x50>)
 8003d42:	6818      	ldr	r0, [r3, #0]
 8003d44:	f04f 33ff 	mov.w	r3, #4294967295
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	2103      	movs	r1, #3
 8003d50:	f00e fbd4 	bl	80124fc <xEventGroupWaitBits>
 8003d54:	60f8      	str	r0, [r7, #12]
		                                                   pdTRUE, pdFALSE, portMAX_DELAY); // Trigger testing
		if(testingBits & TEST_STOP_BIT){ // Stall detected during test
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d110      	bne.n	8003d82 <vTestingTask+0x4a>

			continue;	// Abort test
		}
		if (testingBits & TEST_START_BIT) { // Start Test
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d007      	beq.n	8003d7a <vTestingTask+0x42>

		preformTest();
 8003d6a:	f000 f80f 	bl	8003d8c <preformTest>
		xEventGroupSetBits(testingEvent, TEST_COMPLETE_BIT);
 8003d6e:	4b06      	ldr	r3, [pc, #24]	@ (8003d88 <vTestingTask+0x50>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2104      	movs	r1, #4
 8003d74:	4618      	mov	r0, r3
 8003d76:	f00e fc9b 	bl	80126b0 <xEventGroupSetBits>
       // xEventGroupClearBits(testingEvent, TEST_STOP_BIT); // clear bit incase we want to restart test

		}

		vTaskDelay(pdMS_TO_TICKS(10));
 8003d7a:	200a      	movs	r0, #10
 8003d7c:	f00f feda 	bl	8013b34 <vTaskDelay>
 8003d80:	e7de      	b.n	8003d40 <vTestingTask+0x8>
			continue;	// Abort test
 8003d82:	bf00      	nop
	for(;;){
 8003d84:	e7dc      	b.n	8003d40 <vTestingTask+0x8>
 8003d86:	bf00      	nop
 8003d88:	2000235c 	.word	0x2000235c

08003d8c <preformTest>:
}



//// FUNCTIONS //////
void preformTest(){
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08e      	sub	sp, #56	@ 0x38
 8003d90:	af00      	add	r7, sp, #0

	MotorCommand testingCMD;
	uint16_t j = 0;
 8003d92:	2300      	movs	r3, #0
 8003d94:	86fb      	strh	r3, [r7, #54]	@ 0x36
		const char reportFilename = {"results.txt"};
 8003d96:	4b2e      	ldr	r3, [pc, #184]	@ (8003e50 <preformTest+0xc4>)
 8003d98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for(int i = 0; i < commandsGcode; i++){
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003da0:	e046      	b.n	8003e30 <preformTest+0xa4>
		if(i % 2 == 0){
 8003da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10d      	bne.n	8003dc8 <preformTest+0x3c>
			testingCMD.targetPositionsAxis0[2] = coordinates[i].x;
 8003dac:	4a29      	ldr	r2, [pc, #164]	@ (8003e54 <preformTest+0xc8>)
 8003dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db0:	015b      	lsls	r3, r3, #5
 8003db2:	4413      	add	r3, r2
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	61fb      	str	r3, [r7, #28]
			testingCMD.targetPositionsAxis0[0] = coordinates[i].y;
 8003db8:	4a26      	ldr	r2, [pc, #152]	@ (8003e54 <preformTest+0xc8>)
 8003dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dbc:	015b      	lsls	r3, r3, #5
 8003dbe:	4413      	add	r3, r2
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	617b      	str	r3, [r7, #20]
 8003dc6:	e00c      	b.n	8003de2 <preformTest+0x56>
		}
		else{
			testingCMD.targetPositionsAxis0[3] = coordinates[i].x;
 8003dc8:	4a22      	ldr	r2, [pc, #136]	@ (8003e54 <preformTest+0xc8>)
 8003dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dcc:	015b      	lsls	r3, r3, #5
 8003dce:	4413      	add	r3, r2
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	623b      	str	r3, [r7, #32]
			testingCMD.targetPositionsAxis0[1] = coordinates[i].y;
 8003dd4:	4a1f      	ldr	r2, [pc, #124]	@ (8003e54 <preformTest+0xc8>)
 8003dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd8:	015b      	lsls	r3, r3, #5
 8003dda:	4413      	add	r3, r2
 8003ddc:	3304      	adds	r3, #4
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	61bb      	str	r3, [r7, #24]
		}
		if(i >= 1 && (i+1)%2 == 0){
 8003de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	dd20      	ble.n	8003e2a <preformTest+0x9e>
 8003de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dea:	3301      	adds	r3, #1
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d11a      	bne.n	8003e2a <preformTest+0x9e>
		testingCMD.command = MOTOR_CMD_MOVE_ALL_MOTORS;
 8003df4:	2309      	movs	r3, #9
 8003df6:	703b      	strb	r3, [r7, #0]
		xQueueSend(motorCommandQueue, &testingCMD, portMAX_DELAY);
 8003df8:	4b17      	ldr	r3, [pc, #92]	@ (8003e58 <preformTest+0xcc>)
 8003dfa:	6818      	ldr	r0, [r3, #0]
 8003dfc:	4639      	mov	r1, r7
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f04f 32ff 	mov.w	r2, #4294967295
 8003e04:	f00e ff46 	bl	8012c94 <xQueueGenericSend>
		 coordinates[j].testResult = CheckConnection(&hservo1,&hservo2);
 8003e08:	4914      	ldr	r1, [pc, #80]	@ (8003e5c <preformTest+0xd0>)
 8003e0a:	4815      	ldr	r0, [pc, #84]	@ (8003e60 <preformTest+0xd4>)
 8003e0c:	f7ff fb8c 	bl	8003528 <CheckConnection>
 8003e10:	4603      	mov	r3, r0
 8003e12:	461a      	mov	r2, r3
 8003e14:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003e16:	4611      	mov	r1, r2
 8003e18:	4a0e      	ldr	r2, [pc, #56]	@ (8003e54 <preformTest+0xc8>)
 8003e1a:	015b      	lsls	r3, r3, #5
 8003e1c:	4413      	add	r3, r2
 8003e1e:	3308      	adds	r3, #8
 8003e20:	460a      	mov	r2, r1
 8003e22:	701a      	strb	r2, [r3, #0]
		        j++;
 8003e24:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003e26:	3301      	adds	r3, #1
 8003e28:	86fb      	strh	r3, [r7, #54]	@ 0x36
	for(int i = 0; i < commandsGcode; i++){
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e32:	4b0c      	ldr	r3, [pc, #48]	@ (8003e64 <preformTest+0xd8>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d3b3      	bcc.n	8003da2 <preformTest+0x16>
		}
	}
	generate_report(&hlcd3);
 8003e3a:	480b      	ldr	r0, [pc, #44]	@ (8003e68 <preformTest+0xdc>)
 8003e3c:	f7fd ffae 	bl	8001d9c <generate_report>

	MotorsHoming(&motors);
 8003e40:	480a      	ldr	r0, [pc, #40]	@ (8003e6c <preformTest+0xe0>)
 8003e42:	f000 f9c3 	bl	80041cc <MotorsHoming>

		//osDelay(2000);

}
 8003e46:	bf00      	nop
 8003e48:	3738      	adds	r7, #56	@ 0x38
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	080186cc 	.word	0x080186cc
 8003e54:	20002374 	.word	0x20002374
 8003e58:	20002350 	.word	0x20002350
 8003e5c:	20000040 	.word	0x20000040
 8003e60:	2000002c 	.word	0x2000002c
 8003e64:	200048f4 	.word	0x200048f4
 8003e68:	20000018 	.word	0x20000018
 8003e6c:	20005844 	.word	0x20005844

08003e70 <ProcessGcode>:


void ProcessGcode(Axis *axisGroup[], const char *gcodeArray[][MAX_LINE_LENGTH], size_t gcodeCount) {
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b092      	sub	sp, #72	@ 0x48
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]

    // Variables to hold PCB dimensions
	uint16_t netTestCount = 0;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	86fb      	strh	r3, [r7, #54]	@ 0x36
	    int inNetBlock = 0;
 8003e80:	2300      	movs	r3, #0
 8003e82:	633b      	str	r3, [r7, #48]	@ 0x30
	    size_t currentNetIndex = 0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    for(size_t i = 0; i < gcodeCount; i++) {
 8003e88:	2300      	movs	r3, #0
 8003e8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e8c:	e12a      	b.n	80040e4 <ProcessGcode+0x274>
	            const char *line = gcodeArray[i];
 8003e8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e90:	021b      	lsls	r3, r3, #8
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	4413      	add	r3, r2
 8003e96:	62bb      	str	r3, [r7, #40]	@ 0x28
	        // Check for a net definition line.



        if (line[0] == ';') {
 8003e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b3b      	cmp	r3, #59	@ 0x3b
 8003e9e:	d166      	bne.n	8003f6e <ProcessGcode+0xfe>
            if (strncmp(line, "; G54", 5) == 0) { // G54: actual PCB dimensions. Format G54 X.. Y..
 8003ea0:	2205      	movs	r2, #5
 8003ea2:	4993      	ldr	r1, [pc, #588]	@ (80040f0 <ProcessGcode+0x280>)
 8003ea4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ea6:	f012 f9a4 	bl	80161f2 <strncmp>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d12b      	bne.n	8003f08 <ProcessGcode+0x98>

                const char *ptr = strchr(line, 'X');
 8003eb0:	2158      	movs	r1, #88	@ 0x58
 8003eb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003eb4:	f012 f97f 	bl	80161b6 <strchr>
 8003eb8:	6178      	str	r0, [r7, #20]
                if (ptr) {
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00d      	beq.n	8003edc <ProcessGcode+0x6c>
                    pcbWidth = (float)atof(ptr + 1);
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f011 fa09 	bl	80152dc <atof>
 8003eca:	ec53 2b10 	vmov	r2, r3, d0
 8003ece:	4610      	mov	r0, r2
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	f7fc fe6b 	bl	8000bac <__aeabi_d2f>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	4a86      	ldr	r2, [pc, #536]	@ (80040f4 <ProcessGcode+0x284>)
 8003eda:	6013      	str	r3, [r2, #0]
                }

                ptr = strchr(line, 'Y');
 8003edc:	2159      	movs	r1, #89	@ 0x59
 8003ede:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ee0:	f012 f969 	bl	80161b6 <strchr>
 8003ee4:	6178      	str	r0, [r7, #20]
                if (ptr) {
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00d      	beq.n	8003f08 <ProcessGcode+0x98>
                    pcbHeight = (float)atof(ptr + 1);
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f011 f9f3 	bl	80152dc <atof>
 8003ef6:	ec53 2b10 	vmov	r2, r3, d0
 8003efa:	4610      	mov	r0, r2
 8003efc:	4619      	mov	r1, r3
 8003efe:	f7fc fe55 	bl	8000bac <__aeabi_d2f>
 8003f02:	4603      	mov	r3, r0
 8003f04:	4a7c      	ldr	r2, [pc, #496]	@ (80040f8 <ProcessGcode+0x288>)
 8003f06:	6013      	str	r3, [r2, #0]
                }

            }

        if (strncmp(line, "; Net:", 6) == 0) {
 8003f08:	2206      	movs	r2, #6
 8003f0a:	497c      	ldr	r1, [pc, #496]	@ (80040fc <ProcessGcode+0x28c>)
 8003f0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f0e:	f012 f970 	bl	80161f2 <strncmp>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f040 80e1 	bne.w	80040dc <ProcessGcode+0x26c>

        	const char *netName = strchr(line, 'Net-(');
 8003f1a:	4979      	ldr	r1, [pc, #484]	@ (8004100 <ProcessGcode+0x290>)
 8003f1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f1e:	f012 f94a 	bl	80161b6 <strchr>
 8003f22:	6138      	str	r0, [r7, #16]

        		if(netName != NULL){
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 80d8 	beq.w	80040dc <ProcessGcode+0x26c>
              	  //netName = strlen(line);
              	  size_t len = strcspn(netName,"\r\n");
 8003f2c:	4975      	ldr	r1, [pc, #468]	@ (8004104 <ProcessGcode+0x294>)
 8003f2e:	6938      	ldr	r0, [r7, #16]
 8003f30:	f012 f94e 	bl	80161d0 <strcspn>
 8003f34:	6438      	str	r0, [r7, #64]	@ 0x40
              	  if( len >= 20){
 8003f36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f38:	2b13      	cmp	r3, #19
 8003f3a:	d901      	bls.n	8003f40 <ProcessGcode+0xd0>
              		  len = 20-1;
 8003f3c:	2313      	movs	r3, #19
 8003f3e:	643b      	str	r3, [r7, #64]	@ 0x40
              	  }
        			strncpy(coordinates[commandsGcode].netName, netName, len);
 8003f40:	4b71      	ldr	r3, [pc, #452]	@ (8004108 <ProcessGcode+0x298>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	015b      	lsls	r3, r3, #5
 8003f46:	3308      	adds	r3, #8
 8003f48:	4a70      	ldr	r2, [pc, #448]	@ (800410c <ProcessGcode+0x29c>)
 8003f4a:	4413      	add	r3, r2
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f50:	6939      	ldr	r1, [r7, #16]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f012 f95f 	bl	8016216 <strncpy>
        			coordinates[commandsGcode].netName[len] ='\0';
 8003f58:	4b6b      	ldr	r3, [pc, #428]	@ (8004108 <ProcessGcode+0x298>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a6b      	ldr	r2, [pc, #428]	@ (800410c <ProcessGcode+0x29c>)
 8003f5e:	015b      	lsls	r3, r3, #5
 8003f60:	441a      	add	r2, r3
 8003f62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f64:	4413      	add	r3, r2
 8003f66:	3309      	adds	r3, #9
 8003f68:	2200      	movs	r2, #0
 8003f6a:	701a      	strb	r2, [r3, #0]
        		}
        	}

        continue;
 8003f6c:	e0b6      	b.n	80040dc <ProcessGcode+0x26c>

        }

        if (strncmp(line, "G0", 2) == 0) { // G0: move command
 8003f6e:	2202      	movs	r2, #2
 8003f70:	4967      	ldr	r1, [pc, #412]	@ (8004110 <ProcessGcode+0x2a0>)
 8003f72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f74:	f012 f93d 	bl	80161f2 <strncmp>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f040 8093 	bne.w	80040a6 <ProcessGcode+0x236>
            float xTarget = 0.0f, yTarget = 0.0f, zTarget = 0.0f;
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f86:	f04f 0300 	mov.w	r3, #0
 8003f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f8c:	f04f 0300 	mov.w	r3, #0
 8003f90:	627b      	str	r3, [r7, #36]	@ 0x24
            uint8_t probe = (strstr(line, "P1") != NULL) ? 1 : ((strstr(line, "P2") != NULL) ? 2 : 0); // P1 or P2
 8003f92:	4960      	ldr	r1, [pc, #384]	@ (8004114 <ProcessGcode+0x2a4>)
 8003f94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f96:	f012 f951 	bl	801623c <strstr>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10a      	bne.n	8003fb6 <ProcessGcode+0x146>
 8003fa0:	495d      	ldr	r1, [pc, #372]	@ (8004118 <ProcessGcode+0x2a8>)
 8003fa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fa4:	f012 f94a 	bl	801623c <strstr>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <ProcessGcode+0x142>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e002      	b.n	8003fb8 <ProcessGcode+0x148>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	e000      	b.n	8003fb8 <ProcessGcode+0x148>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            // Extract axis coordinates from the line
             const char *ptr = strchr(line, 'X');
 8003fbc:	2158      	movs	r1, #88	@ 0x58
 8003fbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fc0:	f012 f8f9 	bl	80161b6 <strchr>
 8003fc4:	61f8      	str	r0, [r7, #28]
             if (ptr) xTarget = (float)atof(ptr + 1);
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00c      	beq.n	8003fe6 <ProcessGcode+0x176>
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f011 f983 	bl	80152dc <atof>
 8003fd6:	ec53 2b10 	vmov	r2, r3, d0
 8003fda:	4610      	mov	r0, r2
 8003fdc:	4619      	mov	r1, r3
 8003fde:	f7fc fde5 	bl	8000bac <__aeabi_d2f>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                ptr = strchr(line, 'Y');
 8003fe6:	2159      	movs	r1, #89	@ 0x59
 8003fe8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fea:	f012 f8e4 	bl	80161b6 <strchr>
 8003fee:	61f8      	str	r0, [r7, #28]
             if (ptr) yTarget = (float)atof(ptr + 1);
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00c      	beq.n	8004010 <ProcessGcode+0x1a0>
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f011 f96e 	bl	80152dc <atof>
 8004000:	ec53 2b10 	vmov	r2, r3, d0
 8004004:	4610      	mov	r0, r2
 8004006:	4619      	mov	r1, r3
 8004008:	f7fc fdd0 	bl	8000bac <__aeabi_d2f>
 800400c:	4603      	mov	r3, r0
 800400e:	63bb      	str	r3, [r7, #56]	@ 0x38

             uint8_t motorIndex = (probe == 2) ? 1 : 0; // Select motor index based on P1 or P2
 8004010:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004014:	2b02      	cmp	r3, #2
 8004016:	bf0c      	ite	eq
 8004018:	2301      	moveq	r3, #1
 800401a:	2300      	movne	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	76fb      	strb	r3, [r7, #27]
             // Send MoveTo commands
            if (xTarget >= 0) {
 8004020:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004024:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800402c:	db15      	blt.n	800405a <ProcessGcode+0x1ea>
                //cmd.motorIndex = motorIndex;
               // cmd.axisIndex = 1;

                if(motorIndex == 0){
 800402e:	7efb      	ldrb	r3, [r7, #27]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10b      	bne.n	800404c <ProcessGcode+0x1dc>
                	coordinates[commandsGcode].x = -xTarget;
 8004034:	4b34      	ldr	r3, [pc, #208]	@ (8004108 <ProcessGcode+0x298>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800403c:	eef1 7a67 	vneg.f32	s15, s15
 8004040:	4a32      	ldr	r2, [pc, #200]	@ (800410c <ProcessGcode+0x29c>)
 8004042:	015b      	lsls	r3, r3, #5
 8004044:	4413      	add	r3, r2
 8004046:	edc3 7a00 	vstr	s15, [r3]
 800404a:	e006      	b.n	800405a <ProcessGcode+0x1ea>
            }
                else{
                	coordinates[commandsGcode].x = xTarget;
 800404c:	4b2e      	ldr	r3, [pc, #184]	@ (8004108 <ProcessGcode+0x298>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a2e      	ldr	r2, [pc, #184]	@ (800410c <ProcessGcode+0x29c>)
 8004052:	015b      	lsls	r3, r3, #5
 8004054:	4413      	add	r3, r2
 8004056:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004058:	601a      	str	r2, [r3, #0]
           }
                }
                //cmd.command = MOTOR_CMD_MOVETO;
                //xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);

            if (yTarget >= 0) {
 800405a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800405e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004066:	db3a      	blt.n	80040de <ProcessGcode+0x26e>
               // cmd.motorIndex = motorIndex;
               // cmd.axisIndex = 0;
                if(motorIndex == 0){
 8004068:	7efb      	ldrb	r3, [r7, #27]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10d      	bne.n	800408a <ProcessGcode+0x21a>
                	coordinates[commandsGcode].y = yTarget;
 800406e:	4b26      	ldr	r3, [pc, #152]	@ (8004108 <ProcessGcode+0x298>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a26      	ldr	r2, [pc, #152]	@ (800410c <ProcessGcode+0x29c>)
 8004074:	015b      	lsls	r3, r3, #5
 8004076:	4413      	add	r3, r2
 8004078:	3304      	adds	r3, #4
 800407a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800407c:	601a      	str	r2, [r3, #0]
                	commandsGcode++;
 800407e:	4b22      	ldr	r3, [pc, #136]	@ (8004108 <ProcessGcode+0x298>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3301      	adds	r3, #1
 8004084:	4a20      	ldr	r2, [pc, #128]	@ (8004108 <ProcessGcode+0x298>)
 8004086:	6013      	str	r3, [r2, #0]
 8004088:	e029      	b.n	80040de <ProcessGcode+0x26e>
                }
                else{
                	coordinates[commandsGcode].y = yTarget;
 800408a:	4b1f      	ldr	r3, [pc, #124]	@ (8004108 <ProcessGcode+0x298>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a1f      	ldr	r2, [pc, #124]	@ (800410c <ProcessGcode+0x29c>)
 8004090:	015b      	lsls	r3, r3, #5
 8004092:	4413      	add	r3, r2
 8004094:	3304      	adds	r3, #4
 8004096:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004098:	601a      	str	r2, [r3, #0]
                	commandsGcode++;
 800409a:	4b1b      	ldr	r3, [pc, #108]	@ (8004108 <ProcessGcode+0x298>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3301      	adds	r3, #1
 80040a0:	4a19      	ldr	r2, [pc, #100]	@ (8004108 <ProcessGcode+0x298>)
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	e01b      	b.n	80040de <ProcessGcode+0x26e>
//          if(i == gcodeCount - 1){
//        	   num_elements = i;
//
//          }

        else if (strncmp(line, "T1", 2) == 0) { // T : perform test
 80040a6:	2202      	movs	r2, #2
 80040a8:	491c      	ldr	r1, [pc, #112]	@ (800411c <ProcessGcode+0x2ac>)
 80040aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80040ac:	f012 f8a1 	bl	80161f2 <strncmp>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d105      	bne.n	80040c2 <ProcessGcode+0x252>
        	testResultsCount++;
 80040b6:	4b1a      	ldr	r3, [pc, #104]	@ (8004120 <ProcessGcode+0x2b0>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	3301      	adds	r3, #1
 80040bc:	4a18      	ldr	r2, [pc, #96]	@ (8004120 <ProcessGcode+0x2b0>)
 80040be:	6013      	str	r3, [r2, #0]
 80040c0:	e00d      	b.n	80040de <ProcessGcode+0x26e>
        	//inNetBlock = 0;
        //CheckConnection(&hservo1, &hservo2);
        }

        else if (line[0] == 'M') {
 80040c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	2b4d      	cmp	r3, #77	@ 0x4d
 80040c8:	d109      	bne.n	80040de <ProcessGcode+0x26e>
            if (strncmp(line, "M30", 3) == 0) { // M30: end of program
 80040ca:	2203      	movs	r2, #3
 80040cc:	4915      	ldr	r1, [pc, #84]	@ (8004124 <ProcessGcode+0x2b4>)
 80040ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80040d0:	f012 f88f 	bl	80161f2 <strncmp>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d026      	beq.n	8004128 <ProcessGcode+0x2b8>
 80040da:	e000      	b.n	80040de <ProcessGcode+0x26e>
        continue;
 80040dc:	bf00      	nop
	    for(size_t i = 0; i < gcodeCount; i++) {
 80040de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040e0:	3301      	adds	r3, #1
 80040e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80040e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	f4ff aed0 	bcc.w	8003e8e <ProcessGcode+0x1e>
 80040ee:	e01c      	b.n	800412a <ProcessGcode+0x2ba>
 80040f0:	080186d8 	.word	0x080186d8
 80040f4:	2000236c 	.word	0x2000236c
 80040f8:	20002370 	.word	0x20002370
 80040fc:	080186e0 	.word	0x080186e0
 8004100:	65742d28 	.word	0x65742d28
 8004104:	080186e8 	.word	0x080186e8
 8004108:	200048f4 	.word	0x200048f4
 800410c:	20002374 	.word	0x20002374
 8004110:	080186ec 	.word	0x080186ec
 8004114:	080186f0 	.word	0x080186f0
 8004118:	080186f4 	.word	0x080186f4
 800411c:	080186f8 	.word	0x080186f8
 8004120:	200048f8 	.word	0x200048f8
 8004124:	080186fc 	.word	0x080186fc
                break;  // End processing
 8004128:	bf00      	nop
            }
            //vTaskDelay(100);
        }
        // TODO: Some delay?
    }
	    commandsGcode++;
 800412a:	4b18      	ldr	r3, [pc, #96]	@ (800418c <ProcessGcode+0x31c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3301      	adds	r3, #1
 8004130:	4a16      	ldr	r2, [pc, #88]	@ (800418c <ProcessGcode+0x31c>)
 8004132:	6013      	str	r3, [r2, #0]
	    coordinates[commandsGcode].x = 1.5f;
 8004134:	4b15      	ldr	r3, [pc, #84]	@ (800418c <ProcessGcode+0x31c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a15      	ldr	r2, [pc, #84]	@ (8004190 <ProcessGcode+0x320>)
 800413a:	015b      	lsls	r3, r3, #5
 800413c:	4413      	add	r3, r2
 800413e:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8004142:	601a      	str	r2, [r3, #0]
	    coordinates[commandsGcode].y = 1.5f;
 8004144:	4b11      	ldr	r3, [pc, #68]	@ (800418c <ProcessGcode+0x31c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a11      	ldr	r2, [pc, #68]	@ (8004190 <ProcessGcode+0x320>)
 800414a:	015b      	lsls	r3, r3, #5
 800414c:	4413      	add	r3, r2
 800414e:	3304      	adds	r3, #4
 8004150:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8004154:	601a      	str	r2, [r3, #0]
	    commandsGcode++;
 8004156:	4b0d      	ldr	r3, [pc, #52]	@ (800418c <ProcessGcode+0x31c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	3301      	adds	r3, #1
 800415c:	4a0b      	ldr	r2, [pc, #44]	@ (800418c <ProcessGcode+0x31c>)
 800415e:	6013      	str	r3, [r2, #0]
	    coordinates[commandsGcode].x = 1.5f;
 8004160:	4b0a      	ldr	r3, [pc, #40]	@ (800418c <ProcessGcode+0x31c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a0a      	ldr	r2, [pc, #40]	@ (8004190 <ProcessGcode+0x320>)
 8004166:	015b      	lsls	r3, r3, #5
 8004168:	4413      	add	r3, r2
 800416a:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 800416e:	601a      	str	r2, [r3, #0]
	    coordinates[commandsGcode].y = 1.5f;
 8004170:	4b06      	ldr	r3, [pc, #24]	@ (800418c <ProcessGcode+0x31c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a06      	ldr	r2, [pc, #24]	@ (8004190 <ProcessGcode+0x320>)
 8004176:	015b      	lsls	r3, r3, #5
 8004178:	4413      	add	r3, r2
 800417a:	3304      	adds	r3, #4
 800417c:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8004180:	601a      	str	r2, [r3, #0]

}
 8004182:	bf00      	nop
 8004184:	3748      	adds	r7, #72	@ 0x48
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	200048f4 	.word	0x200048f4
 8004190:	20002374 	.word	0x20002374

08004194 <ResetMotorState>:
int32_t StepsBack[4]={0,0};
uint32_t LastSteps[3] = {0,0,0,0};
uint8_t x = 0;
bool testing = 0;

static void ResetMotorState(Motor *m, float homePosition) {
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	ed87 0a00 	vstr	s0, [r7]
    m->currentPositionMM = homePosition;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    m->stepsTaken = 0;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	671a      	str	r2, [r3, #112]	@ 0x70
    m->StepsBack = 0;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    m->StepsFront = 0;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
	...

080041cc <MotorsHoming>:
      reset its state.
    • Then poll (with a short delay) until each motor reaches its home.
    • When a sensor is triggered during polling, a STOP command is sent,
      and the motor state is reset.
------------------------------------------------------------------*/
bool MotorsHoming(Motor *motor) {
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b08e      	sub	sp, #56	@ 0x38
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
    bool homed[4] = { false, false, false, false };
 80041d4:	2300      	movs	r3, #0
 80041d6:	637b      	str	r3, [r7, #52]	@ 0x34
    //SERVO_WritePosition(&hservo1, 115);
    //SERVO_WritePosition(&hservo2, 115);

    /* --- Start each motor if not already at its home sensor --- */
    /* Motor 0: Uses EndStop2, home position = 0, direction = 1 */
    if (IsSensorTriggered(EndStop2_GPIO_Port, EndStop2_Pin) == 0) {
 80041d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80041dc:	48cb      	ldr	r0, [pc, #812]	@ (800450c <MotorsHoming+0x340>)
 80041de:	f7ff f9db 	bl	8003598 <IsSensorTriggered>
 80041e2:	4603      	mov	r3, r0
 80041e4:	f083 0301 	eor.w	r3, r3, #1
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d01f      	beq.n	800422e <MotorsHoming+0x62>
        TMC2209_SetSpeed(&motor[0], 8000);
 80041ee:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7fe f801 	bl	80021fa <TMC2209_SetSpeed>
        cmd.motorIndex = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	72bb      	strb	r3, [r7, #10]
        cmd.command = MOTOR_CMD_DIRECTION;
 80041fc:	2303      	movs	r3, #3
 80041fe:	723b      	strb	r3, [r7, #8]
        cmd.direction = 1;
 8004200:	2301      	movs	r3, #1
 8004202:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004204:	4bc2      	ldr	r3, [pc, #776]	@ (8004510 <MotorsHoming+0x344>)
 8004206:	6818      	ldr	r0, [r3, #0]
 8004208:	f107 0108 	add.w	r1, r7, #8
 800420c:	2300      	movs	r3, #0
 800420e:	f04f 32ff 	mov.w	r2, #4294967295
 8004212:	f00e fd3f 	bl	8012c94 <xQueueGenericSend>
        cmd.command = MOTOR_CMD_START;
 8004216:	2302      	movs	r3, #2
 8004218:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 800421a:	4bbd      	ldr	r3, [pc, #756]	@ (8004510 <MotorsHoming+0x344>)
 800421c:	6818      	ldr	r0, [r3, #0]
 800421e:	f107 0108 	add.w	r1, r7, #8
 8004222:	2300      	movs	r3, #0
 8004224:	f04f 32ff 	mov.w	r2, #4294967295
 8004228:	f00e fd34 	bl	8012c94 <xQueueGenericSend>
 800422c:	e007      	b.n	800423e <MotorsHoming+0x72>
    } else {
        homed[0] = true;
 800422e:	2301      	movs	r3, #1
 8004230:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        ResetMotorState(&motor[0], 0);
 8004234:	ed9f 0ab7 	vldr	s0, [pc, #732]	@ 8004514 <MotorsHoming+0x348>
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff ffab 	bl	8004194 <ResetMotorState>
    }

    /* Motor 1: Uses EndStop4, home position = 450, direction = 0 */
    if (IsSensorTriggered(EndStop4_GPIO_Port, EndStop4_Pin) == 0) {
 800423e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004242:	48b5      	ldr	r0, [pc, #724]	@ (8004518 <MotorsHoming+0x34c>)
 8004244:	f7ff f9a8 	bl	8003598 <IsSensorTriggered>
 8004248:	4603      	mov	r3, r0
 800424a:	f083 0301 	eor.w	r3, r3, #1
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	d021      	beq.n	8004298 <MotorsHoming+0xcc>
        TMC2209_SetSpeed(&motor[1], 8000);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	33a4      	adds	r3, #164	@ 0xa4
 8004258:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 800425c:	4618      	mov	r0, r3
 800425e:	f7fd ffcc 	bl	80021fa <TMC2209_SetSpeed>
        cmd.motorIndex = 1;
 8004262:	2301      	movs	r3, #1
 8004264:	72bb      	strb	r3, [r7, #10]
        cmd.command = MOTOR_CMD_DIRECTION;
 8004266:	2303      	movs	r3, #3
 8004268:	723b      	strb	r3, [r7, #8]
        cmd.direction = 0;
 800426a:	2300      	movs	r3, #0
 800426c:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 800426e:	4ba8      	ldr	r3, [pc, #672]	@ (8004510 <MotorsHoming+0x344>)
 8004270:	6818      	ldr	r0, [r3, #0]
 8004272:	f107 0108 	add.w	r1, r7, #8
 8004276:	2300      	movs	r3, #0
 8004278:	f04f 32ff 	mov.w	r2, #4294967295
 800427c:	f00e fd0a 	bl	8012c94 <xQueueGenericSend>
        cmd.command = MOTOR_CMD_START;
 8004280:	2302      	movs	r3, #2
 8004282:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004284:	4ba2      	ldr	r3, [pc, #648]	@ (8004510 <MotorsHoming+0x344>)
 8004286:	6818      	ldr	r0, [r3, #0]
 8004288:	f107 0108 	add.w	r1, r7, #8
 800428c:	2300      	movs	r3, #0
 800428e:	f04f 32ff 	mov.w	r2, #4294967295
 8004292:	f00e fcff 	bl	8012c94 <xQueueGenericSend>
 8004296:	e009      	b.n	80042ac <MotorsHoming+0xe0>
    } else {
        homed[1] = true;
 8004298:	2301      	movs	r3, #1
 800429a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        ResetMotorState(&motor[1], 0);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	33a4      	adds	r3, #164	@ 0xa4
 80042a2:	ed9f 0a9c 	vldr	s0, [pc, #624]	@ 8004514 <MotorsHoming+0x348>
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff ff74 	bl	8004194 <ResetMotorState>
    }

    /* Motor 2: Uses EndStop1, home position = 0, direction = 0 */
    if (IsSensorTriggered(EndStop1_GPIO_Port, EndStop1_Pin) == 0) {
 80042ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80042b0:	4899      	ldr	r0, [pc, #612]	@ (8004518 <MotorsHoming+0x34c>)
 80042b2:	f7ff f971 	bl	8003598 <IsSensorTriggered>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f083 0301 	eor.w	r3, r3, #1
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d022      	beq.n	8004308 <MotorsHoming+0x13c>
        TMC2209_SetSpeed(&motor[2], 8000);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80042c8:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fd ff94 	bl	80021fa <TMC2209_SetSpeed>
        cmd.motorIndex = 2;
 80042d2:	2302      	movs	r3, #2
 80042d4:	72bb      	strb	r3, [r7, #10]
        cmd.command = MOTOR_CMD_DIRECTION;
 80042d6:	2303      	movs	r3, #3
 80042d8:	723b      	strb	r3, [r7, #8]
        cmd.direction = 0;
 80042da:	2300      	movs	r3, #0
 80042dc:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 80042de:	4b8c      	ldr	r3, [pc, #560]	@ (8004510 <MotorsHoming+0x344>)
 80042e0:	6818      	ldr	r0, [r3, #0]
 80042e2:	f107 0108 	add.w	r1, r7, #8
 80042e6:	2300      	movs	r3, #0
 80042e8:	f04f 32ff 	mov.w	r2, #4294967295
 80042ec:	f00e fcd2 	bl	8012c94 <xQueueGenericSend>
        cmd.command = MOTOR_CMD_START;
 80042f0:	2302      	movs	r3, #2
 80042f2:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 80042f4:	4b86      	ldr	r3, [pc, #536]	@ (8004510 <MotorsHoming+0x344>)
 80042f6:	6818      	ldr	r0, [r3, #0]
 80042f8:	f107 0108 	add.w	r1, r7, #8
 80042fc:	2300      	movs	r3, #0
 80042fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004302:	f00e fcc7 	bl	8012c94 <xQueueGenericSend>
 8004306:	e00a      	b.n	800431e <MotorsHoming+0x152>
    } else {
        homed[2] = true;
 8004308:	2301      	movs	r3, #1
 800430a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        ResetMotorState(&motor[2], 0);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004314:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 8004514 <MotorsHoming+0x348>
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff ff3b 	bl	8004194 <ResetMotorState>
    }

    /* Motor 3: Uses EndStop3, home position = 0, direction = 1 */
    if (IsSensorTriggered(EndStop3_GPIO_Port, EndStop3_Pin) == 0) {
 800431e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004322:	487a      	ldr	r0, [pc, #488]	@ (800450c <MotorsHoming+0x340>)
 8004324:	f7ff f938 	bl	8003598 <IsSensorTriggered>
 8004328:	4603      	mov	r3, r0
 800432a:	f083 0301 	eor.w	r3, r3, #1
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d022      	beq.n	800437a <MotorsHoming+0x1ae>
        TMC2209_SetSpeed(&motor[3], 8000);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800433a:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 800433e:	4618      	mov	r0, r3
 8004340:	f7fd ff5b 	bl	80021fa <TMC2209_SetSpeed>
        cmd.motorIndex = 3;
 8004344:	2303      	movs	r3, #3
 8004346:	72bb      	strb	r3, [r7, #10]
        cmd.command = MOTOR_CMD_DIRECTION;
 8004348:	2303      	movs	r3, #3
 800434a:	723b      	strb	r3, [r7, #8]
        cmd.direction = 1;
 800434c:	2301      	movs	r3, #1
 800434e:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004350:	4b6f      	ldr	r3, [pc, #444]	@ (8004510 <MotorsHoming+0x344>)
 8004352:	6818      	ldr	r0, [r3, #0]
 8004354:	f107 0108 	add.w	r1, r7, #8
 8004358:	2300      	movs	r3, #0
 800435a:	f04f 32ff 	mov.w	r2, #4294967295
 800435e:	f00e fc99 	bl	8012c94 <xQueueGenericSend>
        cmd.command = MOTOR_CMD_START;
 8004362:	2302      	movs	r3, #2
 8004364:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004366:	4b6a      	ldr	r3, [pc, #424]	@ (8004510 <MotorsHoming+0x344>)
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	f107 0108 	add.w	r1, r7, #8
 800436e:	2300      	movs	r3, #0
 8004370:	f04f 32ff 	mov.w	r2, #4294967295
 8004374:	f00e fc8e 	bl	8012c94 <xQueueGenericSend>
 8004378:	e0a3      	b.n	80044c2 <MotorsHoming+0x2f6>
    } else {
        homed[3] = true;
 800437a:	2301      	movs	r3, #1
 800437c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        ResetMotorState(&motor[3], 0);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8004386:	ed9f 0a63 	vldr	s0, [pc, #396]	@ 8004514 <MotorsHoming+0x348>
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff ff02 	bl	8004194 <ResetMotorState>
    }

    /* --- Poll sensors until all motors are homed --- */
    while (!(homed[0] && homed[1] && homed[2] && homed[3])) {
 8004390:	e097      	b.n	80044c2 <MotorsHoming+0x2f6>
        if (!homed[0] && (IsSensorTriggered(EndStop2_GPIO_Port, EndStop2_Pin) == 1)) {
 8004392:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004396:	f083 0301 	eor.w	r3, r3, #1
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d01c      	beq.n	80043da <MotorsHoming+0x20e>
 80043a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80043a4:	4859      	ldr	r0, [pc, #356]	@ (800450c <MotorsHoming+0x340>)
 80043a6:	f7ff f8f7 	bl	8003598 <IsSensorTriggered>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d014      	beq.n	80043da <MotorsHoming+0x20e>
            cmd.motorIndex = 0;
 80043b0:	2300      	movs	r3, #0
 80043b2:	72bb      	strb	r3, [r7, #10]
            cmd.command = MOTOR_CMD_STOP;
 80043b4:	2301      	movs	r3, #1
 80043b6:	723b      	strb	r3, [r7, #8]
            xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 80043b8:	4b55      	ldr	r3, [pc, #340]	@ (8004510 <MotorsHoming+0x344>)
 80043ba:	6818      	ldr	r0, [r3, #0]
 80043bc:	f107 0108 	add.w	r1, r7, #8
 80043c0:	2300      	movs	r3, #0
 80043c2:	f04f 32ff 	mov.w	r2, #4294967295
 80043c6:	f00e fc65 	bl	8012c94 <xQueueGenericSend>
            ResetMotorState(&motor[0], 0);
 80043ca:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 8004514 <MotorsHoming+0x348>
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7ff fee0 	bl	8004194 <ResetMotorState>
            homed[0] = true;
 80043d4:	2301      	movs	r3, #1
 80043d6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }
        if (!homed[1] && (IsSensorTriggered(EndStop4_GPIO_Port, EndStop4_Pin) == 1)) {
 80043da:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80043de:	f083 0301 	eor.w	r3, r3, #1
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d01e      	beq.n	8004426 <MotorsHoming+0x25a>
 80043e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80043ec:	484a      	ldr	r0, [pc, #296]	@ (8004518 <MotorsHoming+0x34c>)
 80043ee:	f7ff f8d3 	bl	8003598 <IsSensorTriggered>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d016      	beq.n	8004426 <MotorsHoming+0x25a>
            cmd.motorIndex = 1;
 80043f8:	2301      	movs	r3, #1
 80043fa:	72bb      	strb	r3, [r7, #10]
            cmd.command = MOTOR_CMD_STOP;
 80043fc:	2301      	movs	r3, #1
 80043fe:	723b      	strb	r3, [r7, #8]
            xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004400:	4b43      	ldr	r3, [pc, #268]	@ (8004510 <MotorsHoming+0x344>)
 8004402:	6818      	ldr	r0, [r3, #0]
 8004404:	f107 0108 	add.w	r1, r7, #8
 8004408:	2300      	movs	r3, #0
 800440a:	f04f 32ff 	mov.w	r2, #4294967295
 800440e:	f00e fc41 	bl	8012c94 <xQueueGenericSend>
            ResetMotorState(&motor[1], 0);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	33a4      	adds	r3, #164	@ 0xa4
 8004416:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 8004514 <MotorsHoming+0x348>
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff feba 	bl	8004194 <ResetMotorState>
            homed[1] = true;
 8004420:	2301      	movs	r3, #1
 8004422:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        if (!homed[2] && (IsSensorTriggered(EndStop1_GPIO_Port, EndStop1_Pin) == 1)) {
 8004426:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800442a:	f083 0301 	eor.w	r3, r3, #1
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d01f      	beq.n	8004474 <MotorsHoming+0x2a8>
 8004434:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004438:	4837      	ldr	r0, [pc, #220]	@ (8004518 <MotorsHoming+0x34c>)
 800443a:	f7ff f8ad 	bl	8003598 <IsSensorTriggered>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d017      	beq.n	8004474 <MotorsHoming+0x2a8>
            cmd.motorIndex = 2;
 8004444:	2302      	movs	r3, #2
 8004446:	72bb      	strb	r3, [r7, #10]
            cmd.command = MOTOR_CMD_STOP;
 8004448:	2301      	movs	r3, #1
 800444a:	723b      	strb	r3, [r7, #8]
            xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 800444c:	4b30      	ldr	r3, [pc, #192]	@ (8004510 <MotorsHoming+0x344>)
 800444e:	6818      	ldr	r0, [r3, #0]
 8004450:	f107 0108 	add.w	r1, r7, #8
 8004454:	2300      	movs	r3, #0
 8004456:	f04f 32ff 	mov.w	r2, #4294967295
 800445a:	f00e fc1b 	bl	8012c94 <xQueueGenericSend>
            ResetMotorState(&motor[2], 0);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004464:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8004514 <MotorsHoming+0x348>
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff fe93 	bl	8004194 <ResetMotorState>
            homed[2] = true;
 800446e:	2301      	movs	r3, #1
 8004470:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        }
        if (!homed[3] && (IsSensorTriggered(EndStop3_GPIO_Port, EndStop3_Pin) == 1)) {
 8004474:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004478:	f083 0301 	eor.w	r3, r3, #1
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d01f      	beq.n	80044c2 <MotorsHoming+0x2f6>
 8004482:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004486:	4821      	ldr	r0, [pc, #132]	@ (800450c <MotorsHoming+0x340>)
 8004488:	f7ff f886 	bl	8003598 <IsSensorTriggered>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d017      	beq.n	80044c2 <MotorsHoming+0x2f6>
            cmd.motorIndex = 3;
 8004492:	2303      	movs	r3, #3
 8004494:	72bb      	strb	r3, [r7, #10]
            cmd.command = MOTOR_CMD_STOP;
 8004496:	2301      	movs	r3, #1
 8004498:	723b      	strb	r3, [r7, #8]
            xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 800449a:	4b1d      	ldr	r3, [pc, #116]	@ (8004510 <MotorsHoming+0x344>)
 800449c:	6818      	ldr	r0, [r3, #0]
 800449e:	f107 0108 	add.w	r1, r7, #8
 80044a2:	2300      	movs	r3, #0
 80044a4:	f04f 32ff 	mov.w	r2, #4294967295
 80044a8:	f00e fbf4 	bl	8012c94 <xQueueGenericSend>
            ResetMotorState(&motor[3], 0);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80044b2:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8004514 <MotorsHoming+0x348>
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff fe6c 	bl	8004194 <ResetMotorState>
            homed[3] = true;
 80044bc:	2301      	movs	r3, #1
 80044be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while (!(homed[0] && homed[1] && homed[2] && homed[3])) {
 80044c2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80044c6:	f083 0301 	eor.w	r3, r3, #1
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f47f af60 	bne.w	8004392 <MotorsHoming+0x1c6>
 80044d2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80044d6:	f083 0301 	eor.w	r3, r3, #1
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f47f af58 	bne.w	8004392 <MotorsHoming+0x1c6>
 80044e2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80044e6:	f083 0301 	eor.w	r3, r3, #1
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f47f af50 	bne.w	8004392 <MotorsHoming+0x1c6>
 80044f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80044f6:	f083 0301 	eor.w	r3, r3, #1
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f47f af48 	bne.w	8004392 <MotorsHoming+0x1c6>
        }
        /* Yield for 1 ms to allow other tasks to run */
        //vTaskDelay(pdMS_TO_TICKS(1));
    }

    return true;
 8004502:	2301      	movs	r3, #1
}
 8004504:	4618      	mov	r0, r3
 8004506:	3738      	adds	r7, #56	@ 0x38
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	40021000 	.word	0x40021000
 8004510:	20002350 	.word	0x20002350
 8004514:	00000000 	.word	0x00000000
 8004518:	40021400 	.word	0x40021400

0800451c <AutoCalibration>:
       to move each motor to its calibration positions.
    3. Uses nonblocking delays with vTaskDelay().

  Adjust axis/motor indexes, positions, and offsets as needed.
------------------------------------------------------------------*/
void AutoCalibration(Axis *axes, Motor *motors) {
 800451c:	b580      	push	{r7, lr}
 800451e:	b08e      	sub	sp, #56	@ 0x38
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
    // First, perform homing on all motors.
    MotorCommand cmd;
    TMC2209_SetSpeed(&motors[0], 8000);
 8004526:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 800452a:	6838      	ldr	r0, [r7, #0]
 800452c:	f7fd fe65 	bl	80021fa <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[1], 8000);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	33a4      	adds	r3, #164	@ 0xa4
 8004534:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8004538:	4618      	mov	r0, r3
 800453a:	f7fd fe5e 	bl	80021fa <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[2], 8000);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004544:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8004548:	4618      	mov	r0, r3
 800454a:	f7fd fe56 	bl	80021fa <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[3], 8000);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8004554:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8004558:	4618      	mov	r0, r3
 800455a:	f7fd fe4e 	bl	80021fa <TMC2209_SetSpeed>

    // Continue with calibration until the calibration condition is met.
    if(!calibrationState()) {
 800455e:	f000 f88b 	bl	8004678 <calibrationState>
 8004562:	4603      	mov	r3, r0
 8004564:	f083 0301 	eor.w	r3, r3, #1
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d063      	beq.n	8004636 <AutoCalibration+0x11a>
        MotorsHoming(motors);
 800456e:	6838      	ldr	r0, [r7, #0]
 8004570:	f7ff fe2c 	bl	80041cc <MotorsHoming>
         *       Motor 0 -> -47.9 mm
         *       Motor 1 -> 50.2 mm
         *
         * Adjust the indices below if your system assigns motors differently.
         */
        LCD_I2C_Clear(&hlcd3);
 8004574:	4832      	ldr	r0, [pc, #200]	@ (8004640 <AutoCalibration+0x124>)
 8004576:	f7fc fe69 	bl	800124c <LCD_I2C_Clear>
        LCD_I2C_SetCursor(&hlcd3, 0, 1);
 800457a:	2201      	movs	r2, #1
 800457c:	2100      	movs	r1, #0
 800457e:	4830      	ldr	r0, [pc, #192]	@ (8004640 <AutoCalibration+0x124>)
 8004580:	f7fc fe44 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(&hlcd3, "Calibrating!");
 8004584:	492f      	ldr	r1, [pc, #188]	@ (8004644 <AutoCalibration+0x128>)
 8004586:	482e      	ldr	r0, [pc, #184]	@ (8004640 <AutoCalibration+0x124>)
 8004588:	f7fc fe06 	bl	8001198 <LCD_I2C_printStr>
        //float targetPositionsAxis0[MAX_MOTORS_PER_AXIS] = ;
        //float targetPositionsAxis1[MAX_MOTORS_PER_AXIS] = ;
        cmd.targetPositionsAxis0[0] = 77.9f;   // Y
 800458c:	4b2e      	ldr	r3, [pc, #184]	@ (8004648 <AutoCalibration+0x12c>)
 800458e:	623b      	str	r3, [r7, #32]
        cmd.targetPositionsAxis0[1] = -100.8f; // Y
 8004590:	4b2e      	ldr	r3, [pc, #184]	@ (800464c <AutoCalibration+0x130>)
 8004592:	627b      	str	r3, [r7, #36]	@ 0x24
        cmd.targetPositionsAxis0[2] = -47.9f;  // X
 8004594:	4b2e      	ldr	r3, [pc, #184]	@ (8004650 <AutoCalibration+0x134>)
 8004596:	62bb      	str	r3, [r7, #40]	@ 0x28
        cmd.targetPositionsAxis0[3] = 47.9f;   // X
 8004598:	4b2e      	ldr	r3, [pc, #184]	@ (8004654 <AutoCalibration+0x138>)
 800459a:	62fb      	str	r3, [r7, #44]	@ 0x2c





        cmd.command = MOTOR_CMD_MOVE_ALL_MOTORS;
 800459c:	2309      	movs	r3, #9
 800459e:	733b      	strb	r3, [r7, #12]

       xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 80045a0:	4b2d      	ldr	r3, [pc, #180]	@ (8004658 <AutoCalibration+0x13c>)
 80045a2:	6818      	ldr	r0, [r3, #0]
 80045a4:	f107 010c 	add.w	r1, r7, #12
 80045a8:	2300      	movs	r3, #0
 80045aa:	f04f 32ff 	mov.w	r2, #4294967295
 80045ae:	f00e fb71 	bl	8012c94 <xQueueGenericSend>
       axes[0].motors[0]->currentPositionMM = 0.0f;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
       axes[0].motors[1]->currentPositionMM = 100.0f;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	4a26      	ldr	r2, [pc, #152]	@ (800465c <AutoCalibration+0x140>)
 80045c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
       axes[1].motors[0]->currentPositionMM = 0.0f;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3328      	adds	r3, #40	@ 0x28
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f04f 0200 	mov.w	r2, #0
 80045d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
       axes[1].motors[1]->currentPositionMM = 0.0f;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	3328      	adds	r3, #40	@ 0x28
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
         * - And updated each motor's currentPositionMM to the new (target) value.
         */

        // Optionally update calibration values in the motors structure.
        // (Be sure that these indices match your system's mapping.)
        motors[0].calib[1] = 77.9f;  // 77.9f
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	4a18      	ldr	r2, [pc, #96]	@ (8004648 <AutoCalibration+0x12c>)
 80045e8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        motors[1].calib[1] = -47.9f;  // -47.9f
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	33a4      	adds	r3, #164	@ 0xa4
 80045f0:	4a17      	ldr	r2, [pc, #92]	@ (8004650 <AutoCalibration+0x134>)
 80045f2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        motors[2].calib[1] = -100.0f;  // -100.8f
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80045fc:	4a18      	ldr	r2, [pc, #96]	@ (8004660 <AutoCalibration+0x144>)
 80045fe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        motors[3].calib[1] = 50.2f;  // 50.2f
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8004608:	4a16      	ldr	r2, [pc, #88]	@ (8004664 <AutoCalibration+0x148>)
 800460a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        // Clear and update the LCD to indicate calibration is done.
        LCD_I2C_Clear(&hlcd3);
 800460e:	480c      	ldr	r0, [pc, #48]	@ (8004640 <AutoCalibration+0x124>)
 8004610:	f7fc fe1c 	bl	800124c <LCD_I2C_Clear>
        LCD_I2C_SetCursor(&hlcd3, 0, 1);
 8004614:	2201      	movs	r2, #1
 8004616:	2100      	movs	r1, #0
 8004618:	4809      	ldr	r0, [pc, #36]	@ (8004640 <AutoCalibration+0x124>)
 800461a:	f7fc fdf7 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(&hlcd3, "Calibration done!");
 800461e:	4912      	ldr	r1, [pc, #72]	@ (8004668 <AutoCalibration+0x14c>)
 8004620:	4807      	ldr	r0, [pc, #28]	@ (8004640 <AutoCalibration+0x124>)
 8004622:	f7fc fdb9 	bl	8001198 <LCD_I2C_printStr>

        // Perform any connection testing.
        testing = CheckConnection(&hservo2, &hservo1);
 8004626:	4911      	ldr	r1, [pc, #68]	@ (800466c <AutoCalibration+0x150>)
 8004628:	4811      	ldr	r0, [pc, #68]	@ (8004670 <AutoCalibration+0x154>)
 800462a:	f7fe ff7d 	bl	8003528 <CheckConnection>
 800462e:	4603      	mov	r3, r0
 8004630:	461a      	mov	r2, r3
 8004632:	4b10      	ldr	r3, [pc, #64]	@ (8004674 <AutoCalibration+0x158>)
 8004634:	701a      	strb	r2, [r3, #0]

    }
}
 8004636:	bf00      	nop
 8004638:	3738      	adds	r7, #56	@ 0x38
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	20000018 	.word	0x20000018
 8004644:	080187e8 	.word	0x080187e8
 8004648:	429bcccd 	.word	0x429bcccd
 800464c:	c2c9999a 	.word	0xc2c9999a
 8004650:	c23f999a 	.word	0xc23f999a
 8004654:	423f999a 	.word	0x423f999a
 8004658:	20002350 	.word	0x20002350
 800465c:	42c80000 	.word	0x42c80000
 8004660:	c2c80000 	.word	0xc2c80000
 8004664:	4248cccd 	.word	0x4248cccd
 8004668:	080187f8 	.word	0x080187f8
 800466c:	2000002c 	.word	0x2000002c
 8004670:	20000040 	.word	0x20000040
 8004674:	200048fe 	.word	0x200048fe

08004678 <calibrationState>:


bool calibrationState(void) {
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
    
    if (motors[0].calib[1] != 0 &&
 800467c:	4b13      	ldr	r3, [pc, #76]	@ (80046cc <calibrationState+0x54>)
 800467e:	edd3 7a27 	vldr	s15, [r3, #156]	@ 0x9c
 8004682:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800468a:	d019      	beq.n	80046c0 <calibrationState+0x48>
        motors[2].calib[1] != 0 &&
 800468c:	4b0f      	ldr	r3, [pc, #60]	@ (80046cc <calibrationState+0x54>)
 800468e:	edd3 7a79 	vldr	s15, [r3, #484]	@ 0x1e4
    if (motors[0].calib[1] != 0 &&
 8004692:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800469a:	d011      	beq.n	80046c0 <calibrationState+0x48>
        motors[3].calib[1] != 0 &&
 800469c:	4b0b      	ldr	r3, [pc, #44]	@ (80046cc <calibrationState+0x54>)
 800469e:	edd3 7aa2 	vldr	s15, [r3, #648]	@ 0x288
        motors[2].calib[1] != 0 &&
 80046a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80046a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046aa:	d009      	beq.n	80046c0 <calibrationState+0x48>
        motors[1].calib[1] != 0)
 80046ac:	4b07      	ldr	r3, [pc, #28]	@ (80046cc <calibrationState+0x54>)
 80046ae:	edd3 7a50 	vldr	s15, [r3, #320]	@ 0x140
        motors[3].calib[1] != 0 &&
 80046b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80046b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ba:	d001      	beq.n	80046c0 <calibrationState+0x48>
    {
        return true;
 80046bc:	2301      	movs	r3, #1
 80046be:	e000      	b.n	80046c2 <calibrationState+0x4a>
    }
    else {
        return false;
 80046c0:	2300      	movs	r3, #0
    }
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	20005844 	.word	0x20005844

080046d0 <ManualCalibration>:


void ManualCalibration(Axis *axes, Motor *motors) {
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b090      	sub	sp, #64	@ 0x40
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
    /* If calibration is complete, exit immediately */
    TMC2209_SetSpeed(&motors[0], 8000);
 80046da:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 80046de:	6838      	ldr	r0, [r7, #0]
 80046e0:	f7fd fd8b 	bl	80021fa <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[1], 8000);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	33a4      	adds	r3, #164	@ 0xa4
 80046e8:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7fd fd84 	bl	80021fa <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[2], 8000);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80046f8:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7fd fd7c 	bl	80021fa <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[3], 8000);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8004708:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 800470c:	4618      	mov	r0, r3
 800470e:	f7fd fd74 	bl	80021fa <TMC2209_SetSpeed>
	MotorsHoming(motors);
 8004712:	6838      	ldr	r0, [r7, #0]
 8004714:	f7ff fd5a 	bl	80041cc <MotorsHoming>
    while(!calibrationState()){
 8004718:	e2af      	b.n	8004c7a <ManualCalibration+0x5aa>
    	/* Example variables. Put them in a suitable scope (static in file-scope or function-scope). */
    	static uint8_t buttonState = 0;       // 0 = not pressed, 1 = pressed
    	static uint32_t pressStartTime = 0;   // Time at which the button was first pressed

    	// Debounce time in ms:
    	const uint32_t debounceTime = 50;
 800471a:	2332      	movs	r3, #50	@ 0x32
 800471c:	63fb      	str	r3, [r7, #60]	@ 0x3c

    static uint32_t lastPressTime = 0;  // Last valid press timestamp

    /* Process the calibration button (BtnCtr) */

    uint32_t currentTime = xTaskGetTickCount(); // or HAL_GetTick(), whichever you use
 800471e:	f00f fb57 	bl	8013dd0 <xTaskGetTickCount>
 8004722:	63b8      	str	r0, [r7, #56]	@ 0x38
    uint8_t currentLevel = HAL_GPIO_ReadPin(EncoderBtn_GPIO_Port, EncoderBtn_Pin);
 8004724:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004728:	4879      	ldr	r0, [pc, #484]	@ (8004910 <ManualCalibration+0x240>)
 800472a:	f003 fa39 	bl	8007ba0 <HAL_GPIO_ReadPin>
 800472e:	4603      	mov	r3, r0
 8004730:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    // ----------------------------------------------------------
    // Active-low button logic: pressed = (currentLevel == RESET)
    // ----------------------------------------------------------
    if (currentLevel == GPIO_PIN_RESET) {
 8004734:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10b      	bne.n	8004754 <ManualCalibration+0x84>
        // Button is physically pressed
        if (buttonState == 0) {
 800473c:	4b75      	ldr	r3, [pc, #468]	@ (8004914 <ManualCalibration+0x244>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	f040 81b5 	bne.w	8004ab0 <ManualCalibration+0x3e0>
            // Transition from not-pressed -> pressed
            buttonState = 1;
 8004746:	4b73      	ldr	r3, [pc, #460]	@ (8004914 <ManualCalibration+0x244>)
 8004748:	2201      	movs	r2, #1
 800474a:	701a      	strb	r2, [r3, #0]
            pressStartTime = currentTime;
 800474c:	4a72      	ldr	r2, [pc, #456]	@ (8004918 <ManualCalibration+0x248>)
 800474e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	e1ad      	b.n	8004ab0 <ManualCalibration+0x3e0>
        }
    } else {
        // Button is physically released
        if (buttonState == 1) {
 8004754:	4b6f      	ldr	r3, [pc, #444]	@ (8004914 <ManualCalibration+0x244>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	2b01      	cmp	r3, #1
 800475a:	f040 81a9 	bne.w	8004ab0 <ManualCalibration+0x3e0>
            // Transition from pressed -> released
            buttonState = 0;
 800475e:	4b6d      	ldr	r3, [pc, #436]	@ (8004914 <ManualCalibration+0x244>)
 8004760:	2200      	movs	r2, #0
 8004762:	701a      	strb	r2, [r3, #0]
            // Check if it was held long enough to count as a valid press
            if ((currentTime - pressStartTime) >= debounceTime) {
 8004764:	4b6c      	ldr	r3, [pc, #432]	@ (8004918 <ManualCalibration+0x248>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800476e:	429a      	cmp	r2, r3
 8004770:	f200 819e 	bhi.w	8004ab0 <ManualCalibration+0x3e0>
                // We register exactly ONE press per cycle
                Pressed++;
 8004774:	4b69      	ldr	r3, [pc, #420]	@ (800491c <ManualCalibration+0x24c>)
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	b2db      	uxtb	r3, r3
 800477a:	3301      	adds	r3, #1
 800477c:	b2da      	uxtb	r2, r3
 800477e:	4b67      	ldr	r3, [pc, #412]	@ (800491c <ManualCalibration+0x24c>)
 8004780:	701a      	strb	r2, [r3, #0]

                // -----------------------------
                // Handle your calibration steps
                // -----------------------------
                switch (Pressed) {
 8004782:	4b66      	ldr	r3, [pc, #408]	@ (800491c <ManualCalibration+0x24c>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b01      	cmp	r3, #1
 800478a:	d003      	beq.n	8004794 <ManualCalibration+0xc4>
 800478c:	2b02      	cmp	r3, #2
 800478e:	f000 80c9 	beq.w	8004924 <ManualCalibration+0x254>
 8004792:	e189      	b.n	8004aa8 <ManualCalibration+0x3d8>
                    case 1:
                        // Save calibration for first press
                        motors[motorGroup].currentPositionMM =
                            (float)abs(motors[motorGroup].StepsFront - motors[motorGroup].StepsBack)
 8004794:	4b62      	ldr	r3, [pc, #392]	@ (8004920 <ManualCalibration+0x250>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	461a      	mov	r2, r3
 800479a:	23a4      	movs	r3, #164	@ 0xa4
 800479c:	fb02 f303 	mul.w	r3, r2, r3
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	4413      	add	r3, r2
 80047a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a8:	4a5d      	ldr	r2, [pc, #372]	@ (8004920 <ManualCalibration+0x250>)
 80047aa:	7812      	ldrb	r2, [r2, #0]
 80047ac:	4611      	mov	r1, r2
 80047ae:	22a4      	movs	r2, #164	@ 0xa4
 80047b0:	fb01 f202 	mul.w	r2, r1, r2
 80047b4:	6839      	ldr	r1, [r7, #0]
 80047b6:	440a      	add	r2, r1
 80047b8:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
 80047bc:	1a9b      	subs	r3, r3, r2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	bfb8      	it	lt
 80047c2:	425b      	neglt	r3, r3
 80047c4:	ee07 3a90 	vmov	s15, r3
 80047c8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                              / axes[0].stepPerUnit;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	ed93 7a04 	vldr	s14, [r3, #16]
                        motors[motorGroup].currentPositionMM =
 80047d2:	4b53      	ldr	r3, [pc, #332]	@ (8004920 <ManualCalibration+0x250>)
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	461a      	mov	r2, r3
 80047d8:	23a4      	movs	r3, #164	@ 0xa4
 80047da:	fb02 f303 	mul.w	r3, r2, r3
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	4413      	add	r3, r2
                              / axes[0].stepPerUnit;
 80047e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
                        motors[motorGroup].currentPositionMM =
 80047e6:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84
                        motors[motorGroup + 2].currentPositionMM =
                            (float)abs(motors[motorGroup + 2].StepsBack - motors[motorGroup + 2].StepsFront)
 80047ea:	4b4d      	ldr	r3, [pc, #308]	@ (8004920 <ManualCalibration+0x250>)
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	461a      	mov	r2, r3
 80047f0:	23a4      	movs	r3, #164	@ 0xa4
 80047f2:	fb02 f303 	mul.w	r3, r2, r3
 80047f6:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	4413      	add	r3, r2
 80047fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004802:	4619      	mov	r1, r3
 8004804:	4b46      	ldr	r3, [pc, #280]	@ (8004920 <ManualCalibration+0x250>)
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	461a      	mov	r2, r3
 800480a:	23a4      	movs	r3, #164	@ 0xa4
 800480c:	fb02 f303 	mul.w	r3, r2, r3
 8004810:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	4413      	add	r3, r2
 8004818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800481c:	1acb      	subs	r3, r1, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	bfb8      	it	lt
 8004822:	425b      	neglt	r3, r3
 8004824:	ee07 3a90 	vmov	s15, r3
 8004828:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                              / axes[1].stepPerUnit;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3328      	adds	r3, #40	@ 0x28
 8004830:	ed93 7a04 	vldr	s14, [r3, #16]
                        motors[motorGroup + 2].currentPositionMM =
 8004834:	4b3a      	ldr	r3, [pc, #232]	@ (8004920 <ManualCalibration+0x250>)
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	461a      	mov	r2, r3
 800483a:	23a4      	movs	r3, #164	@ 0xa4
 800483c:	fb02 f303 	mul.w	r3, r2, r3
 8004840:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	4413      	add	r3, r2
                              / axes[1].stepPerUnit;
 8004848:	eec6 7a87 	vdiv.f32	s15, s13, s14
                        motors[motorGroup + 2].currentPositionMM =
 800484c:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84

                        motors[motorGroup].calib[0] = motors[motorGroup].currentPositionMM;
 8004850:	4b33      	ldr	r3, [pc, #204]	@ (8004920 <ManualCalibration+0x250>)
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	461a      	mov	r2, r3
 8004856:	23a4      	movs	r3, #164	@ 0xa4
 8004858:	fb02 f303 	mul.w	r3, r2, r3
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	441a      	add	r2, r3
 8004860:	4b2f      	ldr	r3, [pc, #188]	@ (8004920 <ManualCalibration+0x250>)
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	4619      	mov	r1, r3
 8004866:	23a4      	movs	r3, #164	@ 0xa4
 8004868:	fb01 f303 	mul.w	r3, r1, r3
 800486c:	6839      	ldr	r1, [r7, #0]
 800486e:	440b      	add	r3, r1
 8004870:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
 8004874:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
                        motors[motorGroup].calib[1] = motors[motorGroup].currentPositionMM;
 8004878:	4b29      	ldr	r3, [pc, #164]	@ (8004920 <ManualCalibration+0x250>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	461a      	mov	r2, r3
 800487e:	23a4      	movs	r3, #164	@ 0xa4
 8004880:	fb02 f303 	mul.w	r3, r2, r3
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	441a      	add	r2, r3
 8004888:	4b25      	ldr	r3, [pc, #148]	@ (8004920 <ManualCalibration+0x250>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	4619      	mov	r1, r3
 800488e:	23a4      	movs	r3, #164	@ 0xa4
 8004890:	fb01 f303 	mul.w	r3, r1, r3
 8004894:	6839      	ldr	r1, [r7, #0]
 8004896:	440b      	add	r3, r1
 8004898:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
 800489c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
                        motors[motorGroup + 2].calib[0] = motors[motorGroup + 2].currentPositionMM;
 80048a0:	4b1f      	ldr	r3, [pc, #124]	@ (8004920 <ManualCalibration+0x250>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	461a      	mov	r2, r3
 80048a6:	23a4      	movs	r3, #164	@ 0xa4
 80048a8:	fb02 f303 	mul.w	r3, r2, r3
 80048ac:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	441a      	add	r2, r3
 80048b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004920 <ManualCalibration+0x250>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	4619      	mov	r1, r3
 80048ba:	23a4      	movs	r3, #164	@ 0xa4
 80048bc:	fb01 f303 	mul.w	r3, r1, r3
 80048c0:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80048c4:	6839      	ldr	r1, [r7, #0]
 80048c6:	440b      	add	r3, r1
 80048c8:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
 80048cc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
                        motors[motorGroup + 2].calib[1] = motors[motorGroup + 2].currentPositionMM;
 80048d0:	4b13      	ldr	r3, [pc, #76]	@ (8004920 <ManualCalibration+0x250>)
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	461a      	mov	r2, r3
 80048d6:	23a4      	movs	r3, #164	@ 0xa4
 80048d8:	fb02 f303 	mul.w	r3, r2, r3
 80048dc:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	441a      	add	r2, r3
 80048e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004920 <ManualCalibration+0x250>)
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	4619      	mov	r1, r3
 80048ea:	23a4      	movs	r3, #164	@ 0xa4
 80048ec:	fb01 f303 	mul.w	r3, r1, r3
 80048f0:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80048f4:	6839      	ldr	r1, [r7, #0]
 80048f6:	440b      	add	r3, r1
 80048f8:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
 80048fc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

                        motorGroup += 1;
 8004900:	4b07      	ldr	r3, [pc, #28]	@ (8004920 <ManualCalibration+0x250>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	3301      	adds	r3, #1
 8004906:	b2da      	uxtb	r2, r3
 8004908:	4b05      	ldr	r3, [pc, #20]	@ (8004920 <ManualCalibration+0x250>)
 800490a:	701a      	strb	r2, [r3, #0]
                        break;
 800490c:	e0d0      	b.n	8004ab0 <ManualCalibration+0x3e0>
 800490e:	bf00      	nop
 8004910:	40020c00 	.word	0x40020c00
 8004914:	200048ff 	.word	0x200048ff
 8004918:	20004900 	.word	0x20004900
 800491c:	200048fd 	.word	0x200048fd
 8004920:	200048fc 	.word	0x200048fc

                    case 2:
                        // Save calibration for second press
                        motors[motorGroup].currentPositionMM =
                            (float)abs(motors[motorGroup].StepsFront - motors[motorGroup].StepsBack)
 8004924:	4b5e      	ldr	r3, [pc, #376]	@ (8004aa0 <ManualCalibration+0x3d0>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	461a      	mov	r2, r3
 800492a:	23a4      	movs	r3, #164	@ 0xa4
 800492c:	fb02 f303 	mul.w	r3, r2, r3
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	4413      	add	r3, r2
 8004934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004938:	4a59      	ldr	r2, [pc, #356]	@ (8004aa0 <ManualCalibration+0x3d0>)
 800493a:	7812      	ldrb	r2, [r2, #0]
 800493c:	4611      	mov	r1, r2
 800493e:	22a4      	movs	r2, #164	@ 0xa4
 8004940:	fb01 f202 	mul.w	r2, r1, r2
 8004944:	6839      	ldr	r1, [r7, #0]
 8004946:	440a      	add	r2, r1
 8004948:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
 800494c:	1a9b      	subs	r3, r3, r2
 800494e:	2b00      	cmp	r3, #0
 8004950:	bfb8      	it	lt
 8004952:	425b      	neglt	r3, r3
 8004954:	ee07 3a90 	vmov	s15, r3
 8004958:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                              / axes[0].stepPerUnit;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	ed93 7a04 	vldr	s14, [r3, #16]
                        motors[motorGroup].currentPositionMM =
 8004962:	4b4f      	ldr	r3, [pc, #316]	@ (8004aa0 <ManualCalibration+0x3d0>)
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	461a      	mov	r2, r3
 8004968:	23a4      	movs	r3, #164	@ 0xa4
 800496a:	fb02 f303 	mul.w	r3, r2, r3
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	4413      	add	r3, r2
                              / axes[0].stepPerUnit;
 8004972:	eec6 7a87 	vdiv.f32	s15, s13, s14
                        motors[motorGroup].currentPositionMM =
 8004976:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84
                        motors[motorGroup + 2].currentPositionMM =
                            (float)abs(motors[motorGroup + 2].StepsBack - motors[motorGroup + 2].StepsFront)
 800497a:	4b49      	ldr	r3, [pc, #292]	@ (8004aa0 <ManualCalibration+0x3d0>)
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	23a4      	movs	r3, #164	@ 0xa4
 8004982:	fb02 f303 	mul.w	r3, r2, r3
 8004986:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	4413      	add	r3, r2
 800498e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004992:	4619      	mov	r1, r3
 8004994:	4b42      	ldr	r3, [pc, #264]	@ (8004aa0 <ManualCalibration+0x3d0>)
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	461a      	mov	r2, r3
 800499a:	23a4      	movs	r3, #164	@ 0xa4
 800499c:	fb02 f303 	mul.w	r3, r2, r3
 80049a0:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	4413      	add	r3, r2
 80049a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ac:	1acb      	subs	r3, r1, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	bfb8      	it	lt
 80049b2:	425b      	neglt	r3, r3
 80049b4:	ee07 3a90 	vmov	s15, r3
 80049b8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                              / axes[1].stepPerUnit;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3328      	adds	r3, #40	@ 0x28
 80049c0:	ed93 7a04 	vldr	s14, [r3, #16]
                        motors[motorGroup + 2].currentPositionMM =
 80049c4:	4b36      	ldr	r3, [pc, #216]	@ (8004aa0 <ManualCalibration+0x3d0>)
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	461a      	mov	r2, r3
 80049ca:	23a4      	movs	r3, #164	@ 0xa4
 80049cc:	fb02 f303 	mul.w	r3, r2, r3
 80049d0:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	4413      	add	r3, r2
                              / axes[1].stepPerUnit;
 80049d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
                        motors[motorGroup + 2].currentPositionMM =
 80049dc:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84

                        motors[motorGroup].calib[0] = motors[motorGroup].currentPositionMM;
 80049e0:	4b2f      	ldr	r3, [pc, #188]	@ (8004aa0 <ManualCalibration+0x3d0>)
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	461a      	mov	r2, r3
 80049e6:	23a4      	movs	r3, #164	@ 0xa4
 80049e8:	fb02 f303 	mul.w	r3, r2, r3
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	441a      	add	r2, r3
 80049f0:	4b2b      	ldr	r3, [pc, #172]	@ (8004aa0 <ManualCalibration+0x3d0>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	4619      	mov	r1, r3
 80049f6:	23a4      	movs	r3, #164	@ 0xa4
 80049f8:	fb01 f303 	mul.w	r3, r1, r3
 80049fc:	6839      	ldr	r1, [r7, #0]
 80049fe:	440b      	add	r3, r1
 8004a00:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
 8004a04:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
                        motors[motorGroup].calib[1] = motors[motorGroup].currentPositionMM;
 8004a08:	4b25      	ldr	r3, [pc, #148]	@ (8004aa0 <ManualCalibration+0x3d0>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	23a4      	movs	r3, #164	@ 0xa4
 8004a10:	fb02 f303 	mul.w	r3, r2, r3
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	441a      	add	r2, r3
 8004a18:	4b21      	ldr	r3, [pc, #132]	@ (8004aa0 <ManualCalibration+0x3d0>)
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	23a4      	movs	r3, #164	@ 0xa4
 8004a20:	fb01 f303 	mul.w	r3, r1, r3
 8004a24:	6839      	ldr	r1, [r7, #0]
 8004a26:	440b      	add	r3, r1
 8004a28:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
 8004a2c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
                        motors[motorGroup + 2].calib[0] = motors[motorGroup + 2].currentPositionMM;
 8004a30:	4b1b      	ldr	r3, [pc, #108]	@ (8004aa0 <ManualCalibration+0x3d0>)
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	461a      	mov	r2, r3
 8004a36:	23a4      	movs	r3, #164	@ 0xa4
 8004a38:	fb02 f303 	mul.w	r3, r2, r3
 8004a3c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	441a      	add	r2, r3
 8004a44:	4b16      	ldr	r3, [pc, #88]	@ (8004aa0 <ManualCalibration+0x3d0>)
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	4619      	mov	r1, r3
 8004a4a:	23a4      	movs	r3, #164	@ 0xa4
 8004a4c:	fb01 f303 	mul.w	r3, r1, r3
 8004a50:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004a54:	6839      	ldr	r1, [r7, #0]
 8004a56:	440b      	add	r3, r1
 8004a58:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
 8004a5c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
                        motors[motorGroup + 2].calib[1] = motors[motorGroup + 2].currentPositionMM;
 8004a60:	4b0f      	ldr	r3, [pc, #60]	@ (8004aa0 <ManualCalibration+0x3d0>)
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	461a      	mov	r2, r3
 8004a66:	23a4      	movs	r3, #164	@ 0xa4
 8004a68:	fb02 f303 	mul.w	r3, r2, r3
 8004a6c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	441a      	add	r2, r3
 8004a74:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa0 <ManualCalibration+0x3d0>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	4619      	mov	r1, r3
 8004a7a:	23a4      	movs	r3, #164	@ 0xa4
 8004a7c:	fb01 f303 	mul.w	r3, r1, r3
 8004a80:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004a84:	6839      	ldr	r1, [r7, #0]
 8004a86:	440b      	add	r3, r1
 8004a88:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
 8004a8c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

                        motorGroup = 0;  // Reset as needed
 8004a90:	4b03      	ldr	r3, [pc, #12]	@ (8004aa0 <ManualCalibration+0x3d0>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	701a      	strb	r2, [r3, #0]
                        Pressed = 0;     // Reset the press counter
 8004a96:	4b03      	ldr	r3, [pc, #12]	@ (8004aa4 <ManualCalibration+0x3d4>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	701a      	strb	r2, [r3, #0]
                        break;
 8004a9c:	e008      	b.n	8004ab0 <ManualCalibration+0x3e0>
 8004a9e:	bf00      	nop
 8004aa0:	200048fc 	.word	0x200048fc
 8004aa4:	200048fd 	.word	0x200048fd

                    default:
                        // If somehow we get more than 2, just reset
                        Pressed = 0;
 8004aa8:	4b7b      	ldr	r3, [pc, #492]	@ (8004c98 <ManualCalibration+0x5c8>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	701a      	strb	r2, [r3, #0]
                        break;
 8004aae:	bf00      	nop

    /* --- Manual motor control via buttons --- */
    MotorCommand cmd;  // Command structure to post to motorControlTask

    /* Example: BtnUp pressed -> move motor (motorGroup) in the forward direction */
    if (HAL_GPIO_ReadPin(BtnUp_GPIO_Port, BtnUp_Pin) == GPIO_PIN_RESET) {
 8004ab0:	2102      	movs	r1, #2
 8004ab2:	487a      	ldr	r0, [pc, #488]	@ (8004c9c <ManualCalibration+0x5cc>)
 8004ab4:	f003 f874 	bl	8007ba0 <HAL_GPIO_ReadPin>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d12d      	bne.n	8004b1a <ManualCalibration+0x44a>
        cmd.motorIndex = motorGroup;
 8004abe:	4b78      	ldr	r3, [pc, #480]	@ (8004ca0 <ManualCalibration+0x5d0>)
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	72bb      	strb	r3, [r7, #10]
        cmd.command    = MOTOR_CMD_DIRECTION;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	723b      	strb	r3, [r7, #8]
        cmd.direction  = GPIO_PIN_SET;  // Set forward direction
 8004ac8:	2301      	movs	r3, #1
 8004aca:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004acc:	4b75      	ldr	r3, [pc, #468]	@ (8004ca4 <ManualCalibration+0x5d4>)
 8004ace:	6818      	ldr	r0, [r3, #0]
 8004ad0:	f107 0108 	add.w	r1, r7, #8
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8004ada:	f00e f8db 	bl	8012c94 <xQueueGenericSend>
    	//TMC2209_SetDirection(&motors[motorGroup],1);

        cmd.command = MOTOR_CMD_START;
 8004ade:	2302      	movs	r3, #2
 8004ae0:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004ae2:	4b70      	ldr	r3, [pc, #448]	@ (8004ca4 <ManualCalibration+0x5d4>)
 8004ae4:	6818      	ldr	r0, [r3, #0]
 8004ae6:	f107 0108 	add.w	r1, r7, #8
 8004aea:	2300      	movs	r3, #0
 8004aec:	f04f 32ff 	mov.w	r2, #4294967295
 8004af0:	f00e f8d0 	bl	8012c94 <xQueueGenericSend>

        /* While the button remains pressed, yield to other tasks */
        while (HAL_GPIO_ReadPin(BtnUp_GPIO_Port, BtnUp_Pin) == GPIO_PIN_RESET) {
 8004af4:	bf00      	nop
 8004af6:	2102      	movs	r1, #2
 8004af8:	4868      	ldr	r0, [pc, #416]	@ (8004c9c <ManualCalibration+0x5cc>)
 8004afa:	f003 f851 	bl	8007ba0 <HAL_GPIO_ReadPin>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d0f8      	beq.n	8004af6 <ManualCalibration+0x426>
            //vTaskDelay(pdMS_TO_TICKS(10));
        }
        cmd.command = MOTOR_CMD_STOP;
 8004b04:	2301      	movs	r3, #1
 8004b06:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004b08:	4b66      	ldr	r3, [pc, #408]	@ (8004ca4 <ManualCalibration+0x5d4>)
 8004b0a:	6818      	ldr	r0, [r3, #0]
 8004b0c:	f107 0108 	add.w	r1, r7, #8
 8004b10:	2300      	movs	r3, #0
 8004b12:	f04f 32ff 	mov.w	r2, #4294967295
 8004b16:	f00e f8bd 	bl	8012c94 <xQueueGenericSend>
    }


    /* Example: BtnDown pressed -> move motor (motorGroup) in the reverse direction */
    if (HAL_GPIO_ReadPin(BtnDown_GPIO_Port, BtnDown_Pin) == GPIO_PIN_RESET) {
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	485f      	ldr	r0, [pc, #380]	@ (8004c9c <ManualCalibration+0x5cc>)
 8004b1e:	f003 f83f 	bl	8007ba0 <HAL_GPIO_ReadPin>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d130      	bne.n	8004b8a <ManualCalibration+0x4ba>
        cmd.motorIndex = motorGroup;
 8004b28:	4b5d      	ldr	r3, [pc, #372]	@ (8004ca0 <ManualCalibration+0x5d0>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	72bb      	strb	r3, [r7, #10]
        cmd.command    = MOTOR_CMD_DIRECTION;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	723b      	strb	r3, [r7, #8]
        cmd.direction  = GPIO_PIN_RESET;  // Set reverse direction
 8004b32:	2300      	movs	r3, #0
 8004b34:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004b36:	4b5b      	ldr	r3, [pc, #364]	@ (8004ca4 <ManualCalibration+0x5d4>)
 8004b38:	6818      	ldr	r0, [r3, #0]
 8004b3a:	f107 0108 	add.w	r1, r7, #8
 8004b3e:	2300      	movs	r3, #0
 8004b40:	f04f 32ff 	mov.w	r2, #4294967295
 8004b44:	f00e f8a6 	bl	8012c94 <xQueueGenericSend>
    	//TMC2209_SetDirection(&motors[motorGroup],1);

        cmd.command = MOTOR_CMD_START;
 8004b48:	2302      	movs	r3, #2
 8004b4a:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004b4c:	4b55      	ldr	r3, [pc, #340]	@ (8004ca4 <ManualCalibration+0x5d4>)
 8004b4e:	6818      	ldr	r0, [r3, #0]
 8004b50:	f107 0108 	add.w	r1, r7, #8
 8004b54:	2300      	movs	r3, #0
 8004b56:	f04f 32ff 	mov.w	r2, #4294967295
 8004b5a:	f00e f89b 	bl	8012c94 <xQueueGenericSend>

        while (HAL_GPIO_ReadPin(BtnDown_GPIO_Port, BtnDown_Pin) == GPIO_PIN_RESET) {
 8004b5e:	bf00      	nop
 8004b60:	2101      	movs	r1, #1
 8004b62:	484e      	ldr	r0, [pc, #312]	@ (8004c9c <ManualCalibration+0x5cc>)
 8004b64:	f003 f81c 	bl	8007ba0 <HAL_GPIO_ReadPin>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d0f8      	beq.n	8004b60 <ManualCalibration+0x490>
            //vTaskDelay(pdMS_TO_TICKS(10));
        }
        cmd.motorIndex = motorGroup;
 8004b6e:	4b4c      	ldr	r3, [pc, #304]	@ (8004ca0 <ManualCalibration+0x5d0>)
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	72bb      	strb	r3, [r7, #10]
        cmd.command    = MOTOR_CMD_STOP;
 8004b74:	2301      	movs	r3, #1
 8004b76:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004b78:	4b4a      	ldr	r3, [pc, #296]	@ (8004ca4 <ManualCalibration+0x5d4>)
 8004b7a:	6818      	ldr	r0, [r3, #0]
 8004b7c:	f107 0108 	add.w	r1, r7, #8
 8004b80:	2300      	movs	r3, #0
 8004b82:	f04f 32ff 	mov.w	r2, #4294967295
 8004b86:	f00e f885 	bl	8012c94 <xQueueGenericSend>
    }


    /* Example: BtnRight pressed -> move paired motor (motorGroup+2) forward */
    if (HAL_GPIO_ReadPin(BtnRight_GPIO_Port, BtnRight_Pin) == GPIO_PIN_RESET) {
 8004b8a:	2102      	movs	r1, #2
 8004b8c:	4846      	ldr	r0, [pc, #280]	@ (8004ca8 <ManualCalibration+0x5d8>)
 8004b8e:	f003 f807 	bl	8007ba0 <HAL_GPIO_ReadPin>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d134      	bne.n	8004c02 <ManualCalibration+0x532>
        cmd.motorIndex = motorGroup + 2;
 8004b98:	4b41      	ldr	r3, [pc, #260]	@ (8004ca0 <ManualCalibration+0x5d0>)
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	3302      	adds	r3, #2
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	72bb      	strb	r3, [r7, #10]
        cmd.command    = MOTOR_CMD_DIRECTION;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	723b      	strb	r3, [r7, #8]
        cmd.direction  = GPIO_PIN_SET;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004baa:	4b3e      	ldr	r3, [pc, #248]	@ (8004ca4 <ManualCalibration+0x5d4>)
 8004bac:	6818      	ldr	r0, [r3, #0]
 8004bae:	f107 0108 	add.w	r1, r7, #8
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb8:	f00e f86c 	bl	8012c94 <xQueueGenericSend>
    	//TMC2209_SetDirection(&motors[motorGroup + 2],1);
        cmd.command = MOTOR_CMD_START;
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004bc0:	4b38      	ldr	r3, [pc, #224]	@ (8004ca4 <ManualCalibration+0x5d4>)
 8004bc2:	6818      	ldr	r0, [r3, #0]
 8004bc4:	f107 0108 	add.w	r1, r7, #8
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f04f 32ff 	mov.w	r2, #4294967295
 8004bce:	f00e f861 	bl	8012c94 <xQueueGenericSend>

        while (HAL_GPIO_ReadPin(BtnRight_GPIO_Port, BtnRight_Pin) == GPIO_PIN_RESET) {
 8004bd2:	bf00      	nop
 8004bd4:	2102      	movs	r1, #2
 8004bd6:	4834      	ldr	r0, [pc, #208]	@ (8004ca8 <ManualCalibration+0x5d8>)
 8004bd8:	f002 ffe2 	bl	8007ba0 <HAL_GPIO_ReadPin>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0f8      	beq.n	8004bd4 <ManualCalibration+0x504>
            //vTaskDelay(pdMS_TO_TICKS(10));
        }
        cmd.motorIndex = motorGroup + 2;
 8004be2:	4b2f      	ldr	r3, [pc, #188]	@ (8004ca0 <ManualCalibration+0x5d0>)
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	3302      	adds	r3, #2
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	72bb      	strb	r3, [r7, #10]
        cmd.command    = MOTOR_CMD_STOP;
 8004bec:	2301      	movs	r3, #1
 8004bee:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004bf0:	4b2c      	ldr	r3, [pc, #176]	@ (8004ca4 <ManualCalibration+0x5d4>)
 8004bf2:	6818      	ldr	r0, [r3, #0]
 8004bf4:	f107 0108 	add.w	r1, r7, #8
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8004bfe:	f00e f849 	bl	8012c94 <xQueueGenericSend>
    }



    /* Example: BtnLeft pressed -> move paired motor (motorGroup+2) in reverse */
    if (HAL_GPIO_ReadPin(BtnLeft_GPIO_Port, BtnLeft_Pin) == GPIO_PIN_RESET) {
 8004c02:	2102      	movs	r1, #2
 8004c04:	4829      	ldr	r0, [pc, #164]	@ (8004cac <ManualCalibration+0x5dc>)
 8004c06:	f002 ffcb 	bl	8007ba0 <HAL_GPIO_ReadPin>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d134      	bne.n	8004c7a <ManualCalibration+0x5aa>
        cmd.motorIndex = motorGroup + 2;
 8004c10:	4b23      	ldr	r3, [pc, #140]	@ (8004ca0 <ManualCalibration+0x5d0>)
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	3302      	adds	r3, #2
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	72bb      	strb	r3, [r7, #10]
        cmd.command    = MOTOR_CMD_DIRECTION;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	723b      	strb	r3, [r7, #8]
        cmd.direction  = GPIO_PIN_RESET;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004c22:	4b20      	ldr	r3, [pc, #128]	@ (8004ca4 <ManualCalibration+0x5d4>)
 8004c24:	6818      	ldr	r0, [r3, #0]
 8004c26:	f107 0108 	add.w	r1, r7, #8
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c30:	f00e f830 	bl	8012c94 <xQueueGenericSend>
    	//TMC2209_SetDirection(&motors[motorGroup + 2],0);

        cmd.command = MOTOR_CMD_START;
 8004c34:	2302      	movs	r3, #2
 8004c36:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004c38:	4b1a      	ldr	r3, [pc, #104]	@ (8004ca4 <ManualCalibration+0x5d4>)
 8004c3a:	6818      	ldr	r0, [r3, #0]
 8004c3c:	f107 0108 	add.w	r1, r7, #8
 8004c40:	2300      	movs	r3, #0
 8004c42:	f04f 32ff 	mov.w	r2, #4294967295
 8004c46:	f00e f825 	bl	8012c94 <xQueueGenericSend>



    while (HAL_GPIO_ReadPin(BtnLeft_GPIO_Port, BtnLeft_Pin) == GPIO_PIN_RESET) {
 8004c4a:	bf00      	nop
 8004c4c:	2102      	movs	r1, #2
 8004c4e:	4817      	ldr	r0, [pc, #92]	@ (8004cac <ManualCalibration+0x5dc>)
 8004c50:	f002 ffa6 	bl	8007ba0 <HAL_GPIO_ReadPin>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0f8      	beq.n	8004c4c <ManualCalibration+0x57c>
                //vTaskDelay(pdMS_TO_TICKS(10));
            }
            cmd.motorIndex = motorGroup + 2;
 8004c5a:	4b11      	ldr	r3, [pc, #68]	@ (8004ca0 <ManualCalibration+0x5d0>)
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	3302      	adds	r3, #2
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	72bb      	strb	r3, [r7, #10]
            cmd.command    = MOTOR_CMD_STOP;
 8004c64:	2301      	movs	r3, #1
 8004c66:	723b      	strb	r3, [r7, #8]
            xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004c68:	4b0e      	ldr	r3, [pc, #56]	@ (8004ca4 <ManualCalibration+0x5d4>)
 8004c6a:	6818      	ldr	r0, [r3, #0]
 8004c6c:	f107 0108 	add.w	r1, r7, #8
 8004c70:	2300      	movs	r3, #0
 8004c72:	f04f 32ff 	mov.w	r2, #4294967295
 8004c76:	f00e f80d 	bl	8012c94 <xQueueGenericSend>
    while(!calibrationState()){
 8004c7a:	f7ff fcfd 	bl	8004678 <calibrationState>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	f083 0301 	eor.w	r3, r3, #1
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f47f ad47 	bne.w	800471a <ManualCalibration+0x4a>
        }
    }
}
 8004c8c:	bf00      	nop
 8004c8e:	bf00      	nop
 8004c90:	3740      	adds	r7, #64	@ 0x40
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	200048fd 	.word	0x200048fd
 8004c9c:	40021400 	.word	0x40021400
 8004ca0:	200048fc 	.word	0x200048fc
 8004ca4:	20002350 	.word	0x20002350
 8004ca8:	40020c00 	.word	0x40020c00
 8004cac:	40021800 	.word	0x40021800

08004cb0 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0

}
 8004cb4:	bf00      	nop
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	af00      	add	r7, sp, #0
return 0;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4a07      	ldr	r2, [pc, #28]	@ (8004d10 <vApplicationGetIdleTaskMemory+0x2c>)
 8004cf4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	4a06      	ldr	r2, [pc, #24]	@ (8004d14 <vApplicationGetIdleTaskMemory+0x30>)
 8004cfa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2280      	movs	r2, #128	@ 0x80
 8004d00:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8004d02:	bf00      	nop
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	20004904 	.word	0x20004904
 8004d14:	20004964 	.word	0x20004964

08004d18 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	4603      	mov	r3, r0
 8004d20:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == USER_Btn_Pin) // Check if the interrupt is for the correct button
 8004d22:	88fb      	ldrh	r3, [r7, #6]
 8004d24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d28:	d102      	bne.n	8004d30 <HAL_GPIO_EXTI_Callback+0x18>
    {

    flagUserBtn = 1;
 8004d2a:	4b04      	ldr	r3, [pc, #16]	@ (8004d3c <HAL_GPIO_EXTI_Callback+0x24>)
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	701a      	strb	r2, [r3, #0]
    }

}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	20005b24 	.word	0x20005b24

08004d40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004d46:	f002 f842 	bl	8006dce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004d4a:	f000 f8cb 	bl	8004ee4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004d4e:	f000 fe57 	bl	8005a00 <MX_GPIO_Init>
  MX_DMA_Init();
 8004d52:	f000 fe03 	bl	800595c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8004d56:	f000 fd73 	bl	8005840 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8004d5a:	f000 fdd1 	bl	8005900 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 8004d5e:	f000 fbf9 	bl	8005554 <MX_TIM7_Init>
  MX_TIM4_Init();
 8004d62:	f000 fb45 	bl	80053f0 <MX_TIM4_Init>
  MX_TIM2_Init();
 8004d66:	f000 fa53 	bl	8005210 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8004d6a:	f000 fd39 	bl	80057e0 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8004d6e:	f009 f811 	bl	800dd94 <MX_FATFS_Init>
  MX_SPI2_Init();
 8004d72:	f000 f963 	bl	800503c <MX_SPI2_Init>
  MX_TIM3_Init();
 8004d76:	f000 fac3 	bl	8005300 <MX_TIM3_Init>
  MX_TIM14_Init();
 8004d7a:	f000 fc83 	bl	8005684 <MX_TIM14_Init>
  MX_TIM5_Init();
 8004d7e:	f000 fb8d 	bl	800549c <MX_TIM5_Init>
  MX_TIM9_Init();
 8004d82:	f000 fc1d 	bl	80055c0 <MX_TIM9_Init>
  MX_I2C1_Init();
 8004d86:	f000 f919 	bl	8004fbc <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8004d8a:	f000 fd89 	bl	80058a0 <MX_USART6_UART_Init>
  MX_UART4_Init();
 8004d8e:	f000 fcc7 	bl	8005720 <MX_UART4_Init>
  MX_UART5_Init();
 8004d92:	f000 fcf5 	bl	8005780 <MX_UART5_Init>
  MX_TIM1_Init();
 8004d96:	f000 f98f 	bl	80050b8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  LCD_I2C_Init(&hlcd3);
 8004d9a:	4840      	ldr	r0, [pc, #256]	@ (8004e9c <main+0x15c>)
 8004d9c:	f7fc f998 	bl	80010d0 <LCD_I2C_Init>
 // LCD_I2C_Clear(&hlcd3);

  SERVO_Init(&hservo1);
 8004da0:	483f      	ldr	r0, [pc, #252]	@ (8004ea0 <main+0x160>)
 8004da2:	f7fe fc9f 	bl	80036e4 <SERVO_Init>
  SERVO_Init(&hservo2);
 8004da6:	483f      	ldr	r0, [pc, #252]	@ (8004ea4 <main+0x164>)
 8004da8:	f7fe fc9c 	bl	80036e4 <SERVO_Init>

  ENC_Init(&henc1);
 8004dac:	483e      	ldr	r0, [pc, #248]	@ (8004ea8 <main+0x168>)
 8004dae:	f7fe fb7f 	bl	80034b0 <ENC_Init>
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */

  testingEvent = xEventGroupCreate();
 8004db2:	f00d fb88 	bl	80124c6 <xEventGroupCreate>
 8004db6:	4603      	mov	r3, r0
 8004db8:	4a3c      	ldr	r2, [pc, #240]	@ (8004eac <main+0x16c>)
 8004dba:	6013      	str	r3, [r2, #0]
  configASSERT(testingEvent != NULL);
 8004dbc:	4b3b      	ldr	r3, [pc, #236]	@ (8004eac <main+0x16c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10d      	bne.n	8004de0 <main+0xa0>
	__asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc8:	b672      	cpsid	i
 8004dca:	f383 8811 	msr	BASEPRI, r3
 8004dce:	f3bf 8f6f 	isb	sy
 8004dd2:	f3bf 8f4f 	dsb	sy
 8004dd6:	b662      	cpsie	i
 8004dd8:	607b      	str	r3, [r7, #4]
}
 8004dda:	bf00      	nop
 8004ddc:	bf00      	nop
 8004dde:	e7fd      	b.n	8004ddc <main+0x9c>
  calibEventGroup = xEventGroupCreate();
 8004de0:	f00d fb71 	bl	80124c6 <xEventGroupCreate>
 8004de4:	4603      	mov	r3, r0
 8004de6:	4a32      	ldr	r2, [pc, #200]	@ (8004eb0 <main+0x170>)
 8004de8:	6013      	str	r3, [r2, #0]
  configASSERT(calibEventGroup != NULL);
 8004dea:	4b31      	ldr	r3, [pc, #196]	@ (8004eb0 <main+0x170>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10d      	bne.n	8004e0e <main+0xce>
	__asm volatile
 8004df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df6:	b672      	cpsid	i
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	b662      	cpsie	i
 8004e06:	603b      	str	r3, [r7, #0]
}
 8004e08:	bf00      	nop
 8004e0a:	bf00      	nop
 8004e0c:	e7fd      	b.n	8004e0a <main+0xca>

  lcdMutex = xSemaphoreCreateMutex();
 8004e0e:	2001      	movs	r0, #1
 8004e10:	f00d ff27 	bl	8012c62 <xQueueCreateMutex>
 8004e14:	4603      	mov	r3, r0
 8004e16:	4a27      	ldr	r2, [pc, #156]	@ (8004eb4 <main+0x174>)
 8004e18:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  xInitSemaphore = xSemaphoreCreateMutex();
 8004e1a:	2001      	movs	r0, #1
 8004e1c:	f00d ff21 	bl	8012c62 <xQueueCreateMutex>
 8004e20:	4603      	mov	r3, r0
 8004e22:	4a25      	ldr	r2, [pc, #148]	@ (8004eb8 <main+0x178>)
 8004e24:	6013      	str	r3, [r2, #0]
//  osThreadId_t motorTaskHandle = osThreadNew(motorControlTask, NULL, &motorTask_attributes);



  /* Create the main menu task */
  xTaskCreate(
 8004e26:	2300      	movs	r3, #0
 8004e28:	9301      	str	r3, [sp, #4]
 8004e2a:	2304      	movs	r3, #4
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	2300      	movs	r3, #0
 8004e30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e34:	4921      	ldr	r1, [pc, #132]	@ (8004ebc <main+0x17c>)
 8004e36:	4822      	ldr	r0, [pc, #136]	@ (8004ec0 <main+0x180>)
 8004e38:	f00e fd34 	bl	80138a4 <xTaskCreate>
      NULL,         /* Task parameters */
	  tskIDLE_PRIORITY + 4,    /* Task priority */
      NULL                     /* Task handle (optional) */
  );

  xTaskCreate(
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	9301      	str	r3, [sp, #4]
 8004e40:	2304      	movs	r3, #4
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	2300      	movs	r3, #0
 8004e46:	2280      	movs	r2, #128	@ 0x80
 8004e48:	491e      	ldr	r1, [pc, #120]	@ (8004ec4 <main+0x184>)
 8004e4a:	481f      	ldr	r0, [pc, #124]	@ (8004ec8 <main+0x188>)
 8004e4c:	f00e fd2a 	bl	80138a4 <xTaskCreate>
      NULL,                     /* Task parameters */
	  tskIDLE_PRIORITY + 4,     /* Task priority */
      NULL                       /* Task handle (optional) */
  );

  xTaskCreate(
 8004e50:	2300      	movs	r3, #0
 8004e52:	9301      	str	r3, [sp, #4]
 8004e54:	2301      	movs	r3, #1
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	2300      	movs	r3, #0
 8004e5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e5e:	491b      	ldr	r1, [pc, #108]	@ (8004ecc <main+0x18c>)
 8004e60:	481b      	ldr	r0, [pc, #108]	@ (8004ed0 <main+0x190>)
 8004e62:	f00e fd1f 	bl	80138a4 <xTaskCreate>
      NULL,         /* Task parameters */
	  tskIDLE_PRIORITY + 1,    /* Task priority */
      NULL                     /* Task handle (optional) */
  );

  xTaskCreate(
 8004e66:	2300      	movs	r3, #0
 8004e68:	9301      	str	r3, [sp, #4]
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	2300      	movs	r3, #0
 8004e70:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8004e74:	4917      	ldr	r1, [pc, #92]	@ (8004ed4 <main+0x194>)
 8004e76:	4818      	ldr	r0, [pc, #96]	@ (8004ed8 <main+0x198>)
 8004e78:	f00e fd14 	bl	80138a4 <xTaskCreate>
	  tskIDLE_PRIORITY + 3,    /* Task priority */
      NULL                     /* Task handle (optional) */
  );


  xTaskCreate(
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	9301      	str	r3, [sp, #4]
 8004e80:	2302      	movs	r3, #2
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	2300      	movs	r3, #0
 8004e86:	2280      	movs	r2, #128	@ 0x80
 8004e88:	4914      	ldr	r1, [pc, #80]	@ (8004edc <main+0x19c>)
 8004e8a:	4815      	ldr	r0, [pc, #84]	@ (8004ee0 <main+0x1a0>)
 8004e8c:	f00e fd0a 	bl	80138a4 <xTaskCreate>
  );



  /* Start the FreeRTOS scheduler */
  vTaskStartScheduler();
 8004e90:	f00e fe88 	bl	8013ba4 <vTaskStartScheduler>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8004e94:	f00d fa32 	bl	80122fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1){
 8004e98:	bf00      	nop
 8004e9a:	e7fd      	b.n	8004e98 <main+0x158>
 8004e9c:	20000018 	.word	0x20000018
 8004ea0:	2000002c 	.word	0x2000002c
 8004ea4:	20000040 	.word	0x20000040
 8004ea8:	20000000 	.word	0x20000000
 8004eac:	2000235c 	.word	0x2000235c
 8004eb0:	20002358 	.word	0x20002358
 8004eb4:	20002360 	.word	0x20002360
 8004eb8:	20002364 	.word	0x20002364
 8004ebc:	0801880c 	.word	0x0801880c
 8004ec0:	080038a1 	.word	0x080038a1
 8004ec4:	08018820 	.word	0x08018820
 8004ec8:	08003a51 	.word	0x08003a51
 8004ecc:	08018834 	.word	0x08018834
 8004ed0:	08003b19 	.word	0x08003b19
 8004ed4:	08018844 	.word	0x08018844
 8004ed8:	08003d39 	.word	0x08003d39
 8004edc:	08018854 	.word	0x08018854
 8004ee0:	080037fd 	.word	0x080037fd

08004ee4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b094      	sub	sp, #80	@ 0x50
 8004ee8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004eea:	f107 0320 	add.w	r3, r7, #32
 8004eee:	2230      	movs	r2, #48	@ 0x30
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f011 f957 	bl	80161a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ef8:	f107 030c 	add.w	r3, r7, #12
 8004efc:	2200      	movs	r2, #0
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	605a      	str	r2, [r3, #4]
 8004f02:	609a      	str	r2, [r3, #8]
 8004f04:	60da      	str	r2, [r3, #12]
 8004f06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f08:	4b2a      	ldr	r3, [pc, #168]	@ (8004fb4 <SystemClock_Config+0xd0>)
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0c:	4a29      	ldr	r2, [pc, #164]	@ (8004fb4 <SystemClock_Config+0xd0>)
 8004f0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f12:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f14:	4b27      	ldr	r3, [pc, #156]	@ (8004fb4 <SystemClock_Config+0xd0>)
 8004f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f1c:	60bb      	str	r3, [r7, #8]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f20:	4b25      	ldr	r3, [pc, #148]	@ (8004fb8 <SystemClock_Config+0xd4>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a24      	ldr	r2, [pc, #144]	@ (8004fb8 <SystemClock_Config+0xd4>)
 8004f26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f2a:	6013      	str	r3, [r2, #0]
 8004f2c:	4b22      	ldr	r3, [pc, #136]	@ (8004fb8 <SystemClock_Config+0xd4>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004f34:	607b      	str	r3, [r7, #4]
 8004f36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004f3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004f40:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f42:	2302      	movs	r3, #2
 8004f44:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004f46:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004f4c:	2304      	movs	r3, #4
 8004f4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8004f50:	23d8      	movs	r3, #216	@ 0xd8
 8004f52:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004f54:	2302      	movs	r3, #2
 8004f56:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8004f58:	2309      	movs	r3, #9
 8004f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f5c:	f107 0320 	add.w	r3, r7, #32
 8004f60:	4618      	mov	r0, r3
 8004f62:	f003 fc57 	bl	8008814 <HAL_RCC_OscConfig>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8004f6c:	f000 fe9c 	bl	8005ca8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004f70:	f003 fc00 	bl	8008774 <HAL_PWREx_EnableOverDrive>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004f7a:	f000 fe95 	bl	8005ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f7e:	230f      	movs	r3, #15
 8004f80:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f82:	2302      	movs	r3, #2
 8004f84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f86:	2300      	movs	r3, #0
 8004f88:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004f8a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004f8e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8004f90:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004f94:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8004f96:	f107 030c 	add.w	r3, r7, #12
 8004f9a:	2107      	movs	r1, #7
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f003 fedd 	bl	8008d5c <HAL_RCC_ClockConfig>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8004fa8:	f000 fe7e 	bl	8005ca8 <Error_Handler>
  }
}
 8004fac:	bf00      	nop
 8004fae:	3750      	adds	r7, #80	@ 0x50
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	40023800 	.word	0x40023800
 8004fb8:	40007000 	.word	0x40007000

08004fbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8005030 <MX_I2C1_Init+0x74>)
 8004fc2:	4a1c      	ldr	r2, [pc, #112]	@ (8005034 <MX_I2C1_Init+0x78>)
 8004fc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8004fc6:	4b1a      	ldr	r3, [pc, #104]	@ (8005030 <MX_I2C1_Init+0x74>)
 8004fc8:	4a1b      	ldr	r2, [pc, #108]	@ (8005038 <MX_I2C1_Init+0x7c>)
 8004fca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004fcc:	4b18      	ldr	r3, [pc, #96]	@ (8005030 <MX_I2C1_Init+0x74>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004fd2:	4b17      	ldr	r3, [pc, #92]	@ (8005030 <MX_I2C1_Init+0x74>)
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004fd8:	4b15      	ldr	r3, [pc, #84]	@ (8005030 <MX_I2C1_Init+0x74>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004fde:	4b14      	ldr	r3, [pc, #80]	@ (8005030 <MX_I2C1_Init+0x74>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004fe4:	4b12      	ldr	r3, [pc, #72]	@ (8005030 <MX_I2C1_Init+0x74>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004fea:	4b11      	ldr	r3, [pc, #68]	@ (8005030 <MX_I2C1_Init+0x74>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8005030 <MX_I2C1_Init+0x74>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004ff6:	480e      	ldr	r0, [pc, #56]	@ (8005030 <MX_I2C1_Init+0x74>)
 8004ff8:	f002 fe1c 	bl	8007c34 <HAL_I2C_Init>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005002:	f000 fe51 	bl	8005ca8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005006:	2100      	movs	r1, #0
 8005008:	4809      	ldr	r0, [pc, #36]	@ (8005030 <MX_I2C1_Init+0x74>)
 800500a:	f003 f9e1 	bl	80083d0 <HAL_I2CEx_ConfigAnalogFilter>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005014:	f000 fe48 	bl	8005ca8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005018:	2100      	movs	r1, #0
 800501a:	4805      	ldr	r0, [pc, #20]	@ (8005030 <MX_I2C1_Init+0x74>)
 800501c:	f003 fa23 	bl	8008466 <HAL_I2CEx_ConfigDigitalFilter>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d001      	beq.n	800502a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005026:	f000 fe3f 	bl	8005ca8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800502a:	bf00      	nop
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	20004b64 	.word	0x20004b64
 8005034:	40005400 	.word	0x40005400
 8005038:	20404768 	.word	0x20404768

0800503c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005040:	4b1b      	ldr	r3, [pc, #108]	@ (80050b0 <MX_SPI2_Init+0x74>)
 8005042:	4a1c      	ldr	r2, [pc, #112]	@ (80050b4 <MX_SPI2_Init+0x78>)
 8005044:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005046:	4b1a      	ldr	r3, [pc, #104]	@ (80050b0 <MX_SPI2_Init+0x74>)
 8005048:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800504c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800504e:	4b18      	ldr	r3, [pc, #96]	@ (80050b0 <MX_SPI2_Init+0x74>)
 8005050:	2200      	movs	r2, #0
 8005052:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005054:	4b16      	ldr	r3, [pc, #88]	@ (80050b0 <MX_SPI2_Init+0x74>)
 8005056:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800505a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800505c:	4b14      	ldr	r3, [pc, #80]	@ (80050b0 <MX_SPI2_Init+0x74>)
 800505e:	2200      	movs	r2, #0
 8005060:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005062:	4b13      	ldr	r3, [pc, #76]	@ (80050b0 <MX_SPI2_Init+0x74>)
 8005064:	2200      	movs	r2, #0
 8005066:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005068:	4b11      	ldr	r3, [pc, #68]	@ (80050b0 <MX_SPI2_Init+0x74>)
 800506a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800506e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8005070:	4b0f      	ldr	r3, [pc, #60]	@ (80050b0 <MX_SPI2_Init+0x74>)
 8005072:	2238      	movs	r2, #56	@ 0x38
 8005074:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005076:	4b0e      	ldr	r3, [pc, #56]	@ (80050b0 <MX_SPI2_Init+0x74>)
 8005078:	2200      	movs	r2, #0
 800507a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800507c:	4b0c      	ldr	r3, [pc, #48]	@ (80050b0 <MX_SPI2_Init+0x74>)
 800507e:	2200      	movs	r2, #0
 8005080:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005082:	4b0b      	ldr	r3, [pc, #44]	@ (80050b0 <MX_SPI2_Init+0x74>)
 8005084:	2200      	movs	r2, #0
 8005086:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8005088:	4b09      	ldr	r3, [pc, #36]	@ (80050b0 <MX_SPI2_Init+0x74>)
 800508a:	2207      	movs	r2, #7
 800508c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800508e:	4b08      	ldr	r3, [pc, #32]	@ (80050b0 <MX_SPI2_Init+0x74>)
 8005090:	2200      	movs	r2, #0
 8005092:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005094:	4b06      	ldr	r3, [pc, #24]	@ (80050b0 <MX_SPI2_Init+0x74>)
 8005096:	2208      	movs	r2, #8
 8005098:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800509a:	4805      	ldr	r0, [pc, #20]	@ (80050b0 <MX_SPI2_Init+0x74>)
 800509c:	f004 fca6 	bl	80099ec <HAL_SPI_Init>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80050a6:	f000 fdff 	bl	8005ca8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80050aa:	bf00      	nop
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	20004bb8 	.word	0x20004bb8
 80050b4:	40003800 	.word	0x40003800

080050b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b09a      	sub	sp, #104	@ 0x68
 80050bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80050be:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80050c2:	2200      	movs	r2, #0
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	605a      	str	r2, [r3, #4]
 80050c8:	609a      	str	r2, [r3, #8]
 80050ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050cc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80050d0:	2200      	movs	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	605a      	str	r2, [r3, #4]
 80050d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80050d8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	605a      	str	r2, [r3, #4]
 80050e2:	609a      	str	r2, [r3, #8]
 80050e4:	60da      	str	r2, [r3, #12]
 80050e6:	611a      	str	r2, [r3, #16]
 80050e8:	615a      	str	r2, [r3, #20]
 80050ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80050ec:	1d3b      	adds	r3, r7, #4
 80050ee:	222c      	movs	r2, #44	@ 0x2c
 80050f0:	2100      	movs	r1, #0
 80050f2:	4618      	mov	r0, r3
 80050f4:	f011 f857 	bl	80161a6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80050f8:	4b43      	ldr	r3, [pc, #268]	@ (8005208 <MX_TIM1_Init+0x150>)
 80050fa:	4a44      	ldr	r2, [pc, #272]	@ (800520c <MX_TIM1_Init+0x154>)
 80050fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 215;
 80050fe:	4b42      	ldr	r3, [pc, #264]	@ (8005208 <MX_TIM1_Init+0x150>)
 8005100:	22d7      	movs	r2, #215	@ 0xd7
 8005102:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005104:	4b40      	ldr	r3, [pc, #256]	@ (8005208 <MX_TIM1_Init+0x150>)
 8005106:	2200      	movs	r2, #0
 8005108:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800510a:	4b3f      	ldr	r3, [pc, #252]	@ (8005208 <MX_TIM1_Init+0x150>)
 800510c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005110:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005112:	4b3d      	ldr	r3, [pc, #244]	@ (8005208 <MX_TIM1_Init+0x150>)
 8005114:	2200      	movs	r2, #0
 8005116:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005118:	4b3b      	ldr	r3, [pc, #236]	@ (8005208 <MX_TIM1_Init+0x150>)
 800511a:	2200      	movs	r2, #0
 800511c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800511e:	4b3a      	ldr	r3, [pc, #232]	@ (8005208 <MX_TIM1_Init+0x150>)
 8005120:	2200      	movs	r2, #0
 8005122:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005124:	4838      	ldr	r0, [pc, #224]	@ (8005208 <MX_TIM1_Init+0x150>)
 8005126:	f005 fa2b 	bl	800a580 <HAL_TIM_Base_Init>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8005130:	f000 fdba 	bl	8005ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005134:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005138:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800513a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800513e:	4619      	mov	r1, r3
 8005140:	4831      	ldr	r0, [pc, #196]	@ (8005208 <MX_TIM1_Init+0x150>)
 8005142:	f006 fa3d 	bl	800b5c0 <HAL_TIM_ConfigClockSource>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800514c:	f000 fdac 	bl	8005ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005150:	482d      	ldr	r0, [pc, #180]	@ (8005208 <MX_TIM1_Init+0x150>)
 8005152:	f005 fb7d 	bl	800a850 <HAL_TIM_PWM_Init>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800515c:	f000 fda4 	bl	8005ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005160:	2300      	movs	r3, #0
 8005162:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005164:	2300      	movs	r3, #0
 8005166:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005168:	2300      	movs	r3, #0
 800516a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800516c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005170:	4619      	mov	r1, r3
 8005172:	4825      	ldr	r0, [pc, #148]	@ (8005208 <MX_TIM1_Init+0x150>)
 8005174:	f006 fed6 	bl	800bf24 <HAL_TIMEx_MasterConfigSynchronization>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800517e:	f000 fd93 	bl	8005ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005182:	2360      	movs	r3, #96	@ 0x60
 8005184:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 500;
 8005186:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800518a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800518c:	2300      	movs	r3, #0
 800518e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005190:	2300      	movs	r3, #0
 8005192:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005194:	2300      	movs	r3, #0
 8005196:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005198:	2300      	movs	r3, #0
 800519a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800519c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80051a0:	220c      	movs	r2, #12
 80051a2:	4619      	mov	r1, r3
 80051a4:	4818      	ldr	r0, [pc, #96]	@ (8005208 <MX_TIM1_Init+0x150>)
 80051a6:	f006 f8f7 	bl	800b398 <HAL_TIM_PWM_ConfigChannel>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80051b0:	f000 fd7a 	bl	8005ca8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80051b4:	2300      	movs	r3, #0
 80051b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80051b8:	2300      	movs	r3, #0
 80051ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80051bc:	2300      	movs	r3, #0
 80051be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80051c0:	2300      	movs	r3, #0
 80051c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80051c4:	2300      	movs	r3, #0
 80051c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80051c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80051cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80051ce:	2300      	movs	r3, #0
 80051d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80051d2:	2300      	movs	r3, #0
 80051d4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80051d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051da:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80051dc:	2300      	movs	r3, #0
 80051de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80051e0:	2300      	movs	r3, #0
 80051e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80051e4:	1d3b      	adds	r3, r7, #4
 80051e6:	4619      	mov	r1, r3
 80051e8:	4807      	ldr	r0, [pc, #28]	@ (8005208 <MX_TIM1_Init+0x150>)
 80051ea:	f006 ff29 	bl	800c040 <HAL_TIMEx_ConfigBreakDeadTime>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d001      	beq.n	80051f8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80051f4:	f000 fd58 	bl	8005ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80051f8:	4803      	ldr	r0, [pc, #12]	@ (8005208 <MX_TIM1_Init+0x150>)
 80051fa:	f000 ff4f 	bl	800609c <HAL_TIM_MspPostInit>

}
 80051fe:	bf00      	nop
 8005200:	3768      	adds	r7, #104	@ 0x68
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	20004c1c 	.word	0x20004c1c
 800520c:	40010000 	.word	0x40010000

08005210 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b08e      	sub	sp, #56	@ 0x38
 8005214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005216:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800521a:	2200      	movs	r2, #0
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	605a      	str	r2, [r3, #4]
 8005220:	609a      	str	r2, [r3, #8]
 8005222:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005224:	f107 031c 	add.w	r3, r7, #28
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	605a      	str	r2, [r3, #4]
 800522e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005230:	463b      	mov	r3, r7
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	605a      	str	r2, [r3, #4]
 8005238:	609a      	str	r2, [r3, #8]
 800523a:	60da      	str	r2, [r3, #12]
 800523c:	611a      	str	r2, [r3, #16]
 800523e:	615a      	str	r2, [r3, #20]
 8005240:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005242:	4b2e      	ldr	r3, [pc, #184]	@ (80052fc <MX_TIM2_Init+0xec>)
 8005244:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005248:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 215;
 800524a:	4b2c      	ldr	r3, [pc, #176]	@ (80052fc <MX_TIM2_Init+0xec>)
 800524c:	22d7      	movs	r2, #215	@ 0xd7
 800524e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005250:	4b2a      	ldr	r3, [pc, #168]	@ (80052fc <MX_TIM2_Init+0xec>)
 8005252:	2200      	movs	r2, #0
 8005254:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8005256:	4b29      	ldr	r3, [pc, #164]	@ (80052fc <MX_TIM2_Init+0xec>)
 8005258:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800525c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800525e:	4b27      	ldr	r3, [pc, #156]	@ (80052fc <MX_TIM2_Init+0xec>)
 8005260:	2200      	movs	r2, #0
 8005262:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005264:	4b25      	ldr	r3, [pc, #148]	@ (80052fc <MX_TIM2_Init+0xec>)
 8005266:	2200      	movs	r2, #0
 8005268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800526a:	4824      	ldr	r0, [pc, #144]	@ (80052fc <MX_TIM2_Init+0xec>)
 800526c:	f005 f988 	bl	800a580 <HAL_TIM_Base_Init>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8005276:	f000 fd17 	bl	8005ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800527a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800527e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005280:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005284:	4619      	mov	r1, r3
 8005286:	481d      	ldr	r0, [pc, #116]	@ (80052fc <MX_TIM2_Init+0xec>)
 8005288:	f006 f99a 	bl	800b5c0 <HAL_TIM_ConfigClockSource>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8005292:	f000 fd09 	bl	8005ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005296:	4819      	ldr	r0, [pc, #100]	@ (80052fc <MX_TIM2_Init+0xec>)
 8005298:	f005 fada 	bl	800a850 <HAL_TIM_PWM_Init>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80052a2:	f000 fd01 	bl	8005ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052a6:	2300      	movs	r3, #0
 80052a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052aa:	2300      	movs	r3, #0
 80052ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80052ae:	f107 031c 	add.w	r3, r7, #28
 80052b2:	4619      	mov	r1, r3
 80052b4:	4811      	ldr	r0, [pc, #68]	@ (80052fc <MX_TIM2_Init+0xec>)
 80052b6:	f006 fe35 	bl	800bf24 <HAL_TIMEx_MasterConfigSynchronization>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d001      	beq.n	80052c4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80052c0:	f000 fcf2 	bl	8005ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80052c4:	2360      	movs	r3, #96	@ 0x60
 80052c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 80052c8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80052cc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80052ce:	2300      	movs	r3, #0
 80052d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80052d2:	2300      	movs	r3, #0
 80052d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80052d6:	463b      	mov	r3, r7
 80052d8:	2208      	movs	r2, #8
 80052da:	4619      	mov	r1, r3
 80052dc:	4807      	ldr	r0, [pc, #28]	@ (80052fc <MX_TIM2_Init+0xec>)
 80052de:	f006 f85b 	bl	800b398 <HAL_TIM_PWM_ConfigChannel>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80052e8:	f000 fcde 	bl	8005ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80052ec:	4803      	ldr	r0, [pc, #12]	@ (80052fc <MX_TIM2_Init+0xec>)
 80052ee:	f000 fed5 	bl	800609c <HAL_TIM_MspPostInit>

}
 80052f2:	bf00      	nop
 80052f4:	3738      	adds	r7, #56	@ 0x38
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	20004c68 	.word	0x20004c68

08005300 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b08e      	sub	sp, #56	@ 0x38
 8005304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005306:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800530a:	2200      	movs	r2, #0
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	605a      	str	r2, [r3, #4]
 8005310:	609a      	str	r2, [r3, #8]
 8005312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005314:	f107 031c 	add.w	r3, r7, #28
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	605a      	str	r2, [r3, #4]
 800531e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005320:	463b      	mov	r3, r7
 8005322:	2200      	movs	r2, #0
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	605a      	str	r2, [r3, #4]
 8005328:	609a      	str	r2, [r3, #8]
 800532a:	60da      	str	r2, [r3, #12]
 800532c:	611a      	str	r2, [r3, #16]
 800532e:	615a      	str	r2, [r3, #20]
 8005330:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005332:	4b2d      	ldr	r3, [pc, #180]	@ (80053e8 <MX_TIM3_Init+0xe8>)
 8005334:	4a2d      	ldr	r2, [pc, #180]	@ (80053ec <MX_TIM3_Init+0xec>)
 8005336:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 215;
 8005338:	4b2b      	ldr	r3, [pc, #172]	@ (80053e8 <MX_TIM3_Init+0xe8>)
 800533a:	22d7      	movs	r2, #215	@ 0xd7
 800533c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800533e:	4b2a      	ldr	r3, [pc, #168]	@ (80053e8 <MX_TIM3_Init+0xe8>)
 8005340:	2200      	movs	r2, #0
 8005342:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8005344:	4b28      	ldr	r3, [pc, #160]	@ (80053e8 <MX_TIM3_Init+0xe8>)
 8005346:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800534a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800534c:	4b26      	ldr	r3, [pc, #152]	@ (80053e8 <MX_TIM3_Init+0xe8>)
 800534e:	2200      	movs	r2, #0
 8005350:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005352:	4b25      	ldr	r3, [pc, #148]	@ (80053e8 <MX_TIM3_Init+0xe8>)
 8005354:	2200      	movs	r2, #0
 8005356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005358:	4823      	ldr	r0, [pc, #140]	@ (80053e8 <MX_TIM3_Init+0xe8>)
 800535a:	f005 f911 	bl	800a580 <HAL_TIM_Base_Init>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8005364:	f000 fca0 	bl	8005ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005368:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800536c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800536e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005372:	4619      	mov	r1, r3
 8005374:	481c      	ldr	r0, [pc, #112]	@ (80053e8 <MX_TIM3_Init+0xe8>)
 8005376:	f006 f923 	bl	800b5c0 <HAL_TIM_ConfigClockSource>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d001      	beq.n	8005384 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8005380:	f000 fc92 	bl	8005ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005384:	4818      	ldr	r0, [pc, #96]	@ (80053e8 <MX_TIM3_Init+0xe8>)
 8005386:	f005 fa63 	bl	800a850 <HAL_TIM_PWM_Init>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8005390:	f000 fc8a 	bl	8005ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005394:	2300      	movs	r3, #0
 8005396:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005398:	2300      	movs	r3, #0
 800539a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800539c:	f107 031c 	add.w	r3, r7, #28
 80053a0:	4619      	mov	r1, r3
 80053a2:	4811      	ldr	r0, [pc, #68]	@ (80053e8 <MX_TIM3_Init+0xe8>)
 80053a4:	f006 fdbe 	bl	800bf24 <HAL_TIMEx_MasterConfigSynchronization>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80053ae:	f000 fc7b 	bl	8005ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80053b2:	2360      	movs	r3, #96	@ 0x60
 80053b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 80053b6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80053ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80053bc:	2300      	movs	r3, #0
 80053be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80053c0:	2300      	movs	r3, #0
 80053c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80053c4:	463b      	mov	r3, r7
 80053c6:	2208      	movs	r2, #8
 80053c8:	4619      	mov	r1, r3
 80053ca:	4807      	ldr	r0, [pc, #28]	@ (80053e8 <MX_TIM3_Init+0xe8>)
 80053cc:	f005 ffe4 	bl	800b398 <HAL_TIM_PWM_ConfigChannel>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80053d6:	f000 fc67 	bl	8005ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80053da:	4803      	ldr	r0, [pc, #12]	@ (80053e8 <MX_TIM3_Init+0xe8>)
 80053dc:	f000 fe5e 	bl	800609c <HAL_TIM_MspPostInit>

}
 80053e0:	bf00      	nop
 80053e2:	3738      	adds	r7, #56	@ 0x38
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	20004cb4 	.word	0x20004cb4
 80053ec:	40000400 	.word	0x40000400

080053f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b08c      	sub	sp, #48	@ 0x30
 80053f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80053f6:	f107 030c 	add.w	r3, r7, #12
 80053fa:	2224      	movs	r2, #36	@ 0x24
 80053fc:	2100      	movs	r1, #0
 80053fe:	4618      	mov	r0, r3
 8005400:	f010 fed1 	bl	80161a6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005404:	463b      	mov	r3, r7
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	605a      	str	r2, [r3, #4]
 800540c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800540e:	4b21      	ldr	r3, [pc, #132]	@ (8005494 <MX_TIM4_Init+0xa4>)
 8005410:	4a21      	ldr	r2, [pc, #132]	@ (8005498 <MX_TIM4_Init+0xa8>)
 8005412:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005414:	4b1f      	ldr	r3, [pc, #124]	@ (8005494 <MX_TIM4_Init+0xa4>)
 8005416:	2200      	movs	r2, #0
 8005418:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800541a:	4b1e      	ldr	r3, [pc, #120]	@ (8005494 <MX_TIM4_Init+0xa4>)
 800541c:	2200      	movs	r2, #0
 800541e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 400;
 8005420:	4b1c      	ldr	r3, [pc, #112]	@ (8005494 <MX_TIM4_Init+0xa4>)
 8005422:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8005426:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005428:	4b1a      	ldr	r3, [pc, #104]	@ (8005494 <MX_TIM4_Init+0xa4>)
 800542a:	2200      	movs	r2, #0
 800542c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800542e:	4b19      	ldr	r3, [pc, #100]	@ (8005494 <MX_TIM4_Init+0xa4>)
 8005430:	2200      	movs	r2, #0
 8005432:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005434:	2303      	movs	r3, #3
 8005436:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005438:	2300      	movs	r3, #0
 800543a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800543c:	2301      	movs	r3, #1
 800543e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005440:	2300      	movs	r3, #0
 8005442:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8005444:	230f      	movs	r3, #15
 8005446:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005448:	2300      	movs	r3, #0
 800544a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800544c:	2301      	movs	r3, #1
 800544e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005450:	2300      	movs	r3, #0
 8005452:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8005454:	230f      	movs	r3, #15
 8005456:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005458:	f107 030c 	add.w	r3, r7, #12
 800545c:	4619      	mov	r1, r3
 800545e:	480d      	ldr	r0, [pc, #52]	@ (8005494 <MX_TIM4_Init+0xa4>)
 8005460:	f005 fd5e 	bl	800af20 <HAL_TIM_Encoder_Init>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800546a:	f000 fc1d 	bl	8005ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800546e:	2300      	movs	r3, #0
 8005470:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005472:	2300      	movs	r3, #0
 8005474:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005476:	463b      	mov	r3, r7
 8005478:	4619      	mov	r1, r3
 800547a:	4806      	ldr	r0, [pc, #24]	@ (8005494 <MX_TIM4_Init+0xa4>)
 800547c:	f006 fd52 	bl	800bf24 <HAL_TIMEx_MasterConfigSynchronization>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8005486:	f000 fc0f 	bl	8005ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800548a:	bf00      	nop
 800548c:	3730      	adds	r7, #48	@ 0x30
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	20004d00 	.word	0x20004d00
 8005498:	40000800 	.word	0x40000800

0800549c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b08a      	sub	sp, #40	@ 0x28
 80054a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054a2:	f107 031c 	add.w	r3, r7, #28
 80054a6:	2200      	movs	r2, #0
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	605a      	str	r2, [r3, #4]
 80054ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80054ae:	463b      	mov	r3, r7
 80054b0:	2200      	movs	r2, #0
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	605a      	str	r2, [r3, #4]
 80054b6:	609a      	str	r2, [r3, #8]
 80054b8:	60da      	str	r2, [r3, #12]
 80054ba:	611a      	str	r2, [r3, #16]
 80054bc:	615a      	str	r2, [r3, #20]
 80054be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80054c0:	4b22      	ldr	r3, [pc, #136]	@ (800554c <MX_TIM5_Init+0xb0>)
 80054c2:	4a23      	ldr	r2, [pc, #140]	@ (8005550 <MX_TIM5_Init+0xb4>)
 80054c4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 216-1;
 80054c6:	4b21      	ldr	r3, [pc, #132]	@ (800554c <MX_TIM5_Init+0xb0>)
 80054c8:	22d7      	movs	r2, #215	@ 0xd7
 80054ca:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054cc:	4b1f      	ldr	r3, [pc, #124]	@ (800554c <MX_TIM5_Init+0xb0>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 80054d2:	4b1e      	ldr	r3, [pc, #120]	@ (800554c <MX_TIM5_Init+0xb0>)
 80054d4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80054d8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054da:	4b1c      	ldr	r3, [pc, #112]	@ (800554c <MX_TIM5_Init+0xb0>)
 80054dc:	2200      	movs	r2, #0
 80054de:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054e0:	4b1a      	ldr	r3, [pc, #104]	@ (800554c <MX_TIM5_Init+0xb0>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80054e6:	4819      	ldr	r0, [pc, #100]	@ (800554c <MX_TIM5_Init+0xb0>)
 80054e8:	f005 f9b2 	bl	800a850 <HAL_TIM_PWM_Init>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80054f2:	f000 fbd9 	bl	8005ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054f6:	2300      	movs	r3, #0
 80054f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054fa:	2300      	movs	r3, #0
 80054fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80054fe:	f107 031c 	add.w	r3, r7, #28
 8005502:	4619      	mov	r1, r3
 8005504:	4811      	ldr	r0, [pc, #68]	@ (800554c <MX_TIM5_Init+0xb0>)
 8005506:	f006 fd0d 	bl	800bf24 <HAL_TIMEx_MasterConfigSynchronization>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d001      	beq.n	8005514 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8005510:	f000 fbca 	bl	8005ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005514:	2360      	movs	r3, #96	@ 0x60
 8005516:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8005518:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800551c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800551e:	2300      	movs	r3, #0
 8005520:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005522:	2300      	movs	r3, #0
 8005524:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005526:	463b      	mov	r3, r7
 8005528:	2200      	movs	r2, #0
 800552a:	4619      	mov	r1, r3
 800552c:	4807      	ldr	r0, [pc, #28]	@ (800554c <MX_TIM5_Init+0xb0>)
 800552e:	f005 ff33 	bl	800b398 <HAL_TIM_PWM_ConfigChannel>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8005538:	f000 fbb6 	bl	8005ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800553c:	4803      	ldr	r0, [pc, #12]	@ (800554c <MX_TIM5_Init+0xb0>)
 800553e:	f000 fdad 	bl	800609c <HAL_TIM_MspPostInit>

}
 8005542:	bf00      	nop
 8005544:	3728      	adds	r7, #40	@ 0x28
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	20004d4c 	.word	0x20004d4c
 8005550:	40000c00 	.word	0x40000c00

08005554 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800555a:	1d3b      	adds	r3, r7, #4
 800555c:	2200      	movs	r2, #0
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	605a      	str	r2, [r3, #4]
 8005562:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005564:	4b14      	ldr	r3, [pc, #80]	@ (80055b8 <MX_TIM7_Init+0x64>)
 8005566:	4a15      	ldr	r2, [pc, #84]	@ (80055bc <MX_TIM7_Init+0x68>)
 8005568:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 215;
 800556a:	4b13      	ldr	r3, [pc, #76]	@ (80055b8 <MX_TIM7_Init+0x64>)
 800556c:	22d7      	movs	r2, #215	@ 0xd7
 800556e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005570:	4b11      	ldr	r3, [pc, #68]	@ (80055b8 <MX_TIM7_Init+0x64>)
 8005572:	2200      	movs	r2, #0
 8005574:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8005576:	4b10      	ldr	r3, [pc, #64]	@ (80055b8 <MX_TIM7_Init+0x64>)
 8005578:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800557c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800557e:	4b0e      	ldr	r3, [pc, #56]	@ (80055b8 <MX_TIM7_Init+0x64>)
 8005580:	2200      	movs	r2, #0
 8005582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005584:	480c      	ldr	r0, [pc, #48]	@ (80055b8 <MX_TIM7_Init+0x64>)
 8005586:	f004 fffb 	bl	800a580 <HAL_TIM_Base_Init>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8005590:	f000 fb8a 	bl	8005ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005594:	2300      	movs	r3, #0
 8005596:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005598:	2300      	movs	r3, #0
 800559a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800559c:	1d3b      	adds	r3, r7, #4
 800559e:	4619      	mov	r1, r3
 80055a0:	4805      	ldr	r0, [pc, #20]	@ (80055b8 <MX_TIM7_Init+0x64>)
 80055a2:	f006 fcbf 	bl	800bf24 <HAL_TIMEx_MasterConfigSynchronization>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80055ac:	f000 fb7c 	bl	8005ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80055b0:	bf00      	nop
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	20004d98 	.word	0x20004d98
 80055bc:	40001400 	.word	0x40001400

080055c0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b08c      	sub	sp, #48	@ 0x30
 80055c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80055c6:	f107 0320 	add.w	r3, r7, #32
 80055ca:	2200      	movs	r2, #0
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	605a      	str	r2, [r3, #4]
 80055d0:	609a      	str	r2, [r3, #8]
 80055d2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80055d4:	1d3b      	adds	r3, r7, #4
 80055d6:	2200      	movs	r2, #0
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	605a      	str	r2, [r3, #4]
 80055dc:	609a      	str	r2, [r3, #8]
 80055de:	60da      	str	r2, [r3, #12]
 80055e0:	611a      	str	r2, [r3, #16]
 80055e2:	615a      	str	r2, [r3, #20]
 80055e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80055e6:	4b25      	ldr	r3, [pc, #148]	@ (800567c <MX_TIM9_Init+0xbc>)
 80055e8:	4a25      	ldr	r2, [pc, #148]	@ (8005680 <MX_TIM9_Init+0xc0>)
 80055ea:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 107;
 80055ec:	4b23      	ldr	r3, [pc, #140]	@ (800567c <MX_TIM9_Init+0xbc>)
 80055ee:	226b      	movs	r2, #107	@ 0x6b
 80055f0:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055f2:	4b22      	ldr	r3, [pc, #136]	@ (800567c <MX_TIM9_Init+0xbc>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 20000-1;
 80055f8:	4b20      	ldr	r3, [pc, #128]	@ (800567c <MX_TIM9_Init+0xbc>)
 80055fa:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80055fe:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005600:	4b1e      	ldr	r3, [pc, #120]	@ (800567c <MX_TIM9_Init+0xbc>)
 8005602:	2200      	movs	r2, #0
 8005604:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005606:	4b1d      	ldr	r3, [pc, #116]	@ (800567c <MX_TIM9_Init+0xbc>)
 8005608:	2200      	movs	r2, #0
 800560a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800560c:	481b      	ldr	r0, [pc, #108]	@ (800567c <MX_TIM9_Init+0xbc>)
 800560e:	f004 ffb7 	bl	800a580 <HAL_TIM_Base_Init>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8005618:	f000 fb46 	bl	8005ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800561c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005620:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8005622:	f107 0320 	add.w	r3, r7, #32
 8005626:	4619      	mov	r1, r3
 8005628:	4814      	ldr	r0, [pc, #80]	@ (800567c <MX_TIM9_Init+0xbc>)
 800562a:	f005 ffc9 	bl	800b5c0 <HAL_TIM_ConfigClockSource>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d001      	beq.n	8005638 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8005634:	f000 fb38 	bl	8005ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8005638:	4810      	ldr	r0, [pc, #64]	@ (800567c <MX_TIM9_Init+0xbc>)
 800563a:	f005 f909 	bl	800a850 <HAL_TIM_PWM_Init>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d001      	beq.n	8005648 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8005644:	f000 fb30 	bl	8005ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005648:	2360      	movs	r3, #96	@ 0x60
 800564a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 800564c:	230a      	movs	r3, #10
 800564e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005650:	2300      	movs	r3, #0
 8005652:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005654:	2300      	movs	r3, #0
 8005656:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005658:	1d3b      	adds	r3, r7, #4
 800565a:	2200      	movs	r2, #0
 800565c:	4619      	mov	r1, r3
 800565e:	4807      	ldr	r0, [pc, #28]	@ (800567c <MX_TIM9_Init+0xbc>)
 8005660:	f005 fe9a 	bl	800b398 <HAL_TIM_PWM_ConfigChannel>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 800566a:	f000 fb1d 	bl	8005ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800566e:	4803      	ldr	r0, [pc, #12]	@ (800567c <MX_TIM9_Init+0xbc>)
 8005670:	f000 fd14 	bl	800609c <HAL_TIM_MspPostInit>

}
 8005674:	bf00      	nop
 8005676:	3730      	adds	r7, #48	@ 0x30
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	20004de4 	.word	0x20004de4
 8005680:	40014000 	.word	0x40014000

08005684 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800568a:	1d3b      	adds	r3, r7, #4
 800568c:	2200      	movs	r2, #0
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	605a      	str	r2, [r3, #4]
 8005692:	609a      	str	r2, [r3, #8]
 8005694:	60da      	str	r2, [r3, #12]
 8005696:	611a      	str	r2, [r3, #16]
 8005698:	615a      	str	r2, [r3, #20]
 800569a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800569c:	4b1e      	ldr	r3, [pc, #120]	@ (8005718 <MX_TIM14_Init+0x94>)
 800569e:	4a1f      	ldr	r2, [pc, #124]	@ (800571c <MX_TIM14_Init+0x98>)
 80056a0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 107;
 80056a2:	4b1d      	ldr	r3, [pc, #116]	@ (8005718 <MX_TIM14_Init+0x94>)
 80056a4:	226b      	movs	r2, #107	@ 0x6b
 80056a6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005718 <MX_TIM14_Init+0x94>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 20000-1;
 80056ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005718 <MX_TIM14_Init+0x94>)
 80056b0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80056b4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056b6:	4b18      	ldr	r3, [pc, #96]	@ (8005718 <MX_TIM14_Init+0x94>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056bc:	4b16      	ldr	r3, [pc, #88]	@ (8005718 <MX_TIM14_Init+0x94>)
 80056be:	2200      	movs	r2, #0
 80056c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80056c2:	4815      	ldr	r0, [pc, #84]	@ (8005718 <MX_TIM14_Init+0x94>)
 80056c4:	f004 ff5c 	bl	800a580 <HAL_TIM_Base_Init>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80056ce:	f000 faeb 	bl	8005ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80056d2:	4811      	ldr	r0, [pc, #68]	@ (8005718 <MX_TIM14_Init+0x94>)
 80056d4:	f005 f8bc 	bl	800a850 <HAL_TIM_PWM_Init>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80056de:	f000 fae3 	bl	8005ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80056e2:	2360      	movs	r3, #96	@ 0x60
 80056e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 80056e6:	230a      	movs	r3, #10
 80056e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80056ea:	2300      	movs	r3, #0
 80056ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80056ee:	2300      	movs	r3, #0
 80056f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80056f2:	1d3b      	adds	r3, r7, #4
 80056f4:	2200      	movs	r2, #0
 80056f6:	4619      	mov	r1, r3
 80056f8:	4807      	ldr	r0, [pc, #28]	@ (8005718 <MX_TIM14_Init+0x94>)
 80056fa:	f005 fe4d 	bl	800b398 <HAL_TIM_PWM_ConfigChannel>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8005704:	f000 fad0 	bl	8005ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8005708:	4803      	ldr	r0, [pc, #12]	@ (8005718 <MX_TIM14_Init+0x94>)
 800570a:	f000 fcc7 	bl	800609c <HAL_TIM_MspPostInit>

}
 800570e:	bf00      	nop
 8005710:	3720      	adds	r7, #32
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	20004e30 	.word	0x20004e30
 800571c:	40002000 	.word	0x40002000

08005720 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005724:	4b14      	ldr	r3, [pc, #80]	@ (8005778 <MX_UART4_Init+0x58>)
 8005726:	4a15      	ldr	r2, [pc, #84]	@ (800577c <MX_UART4_Init+0x5c>)
 8005728:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800572a:	4b13      	ldr	r3, [pc, #76]	@ (8005778 <MX_UART4_Init+0x58>)
 800572c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005730:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005732:	4b11      	ldr	r3, [pc, #68]	@ (8005778 <MX_UART4_Init+0x58>)
 8005734:	2200      	movs	r2, #0
 8005736:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005738:	4b0f      	ldr	r3, [pc, #60]	@ (8005778 <MX_UART4_Init+0x58>)
 800573a:	2200      	movs	r2, #0
 800573c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800573e:	4b0e      	ldr	r3, [pc, #56]	@ (8005778 <MX_UART4_Init+0x58>)
 8005740:	2200      	movs	r2, #0
 8005742:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005744:	4b0c      	ldr	r3, [pc, #48]	@ (8005778 <MX_UART4_Init+0x58>)
 8005746:	220c      	movs	r2, #12
 8005748:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800574a:	4b0b      	ldr	r3, [pc, #44]	@ (8005778 <MX_UART4_Init+0x58>)
 800574c:	2200      	movs	r2, #0
 800574e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005750:	4b09      	ldr	r3, [pc, #36]	@ (8005778 <MX_UART4_Init+0x58>)
 8005752:	2200      	movs	r2, #0
 8005754:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005756:	4b08      	ldr	r3, [pc, #32]	@ (8005778 <MX_UART4_Init+0x58>)
 8005758:	2200      	movs	r2, #0
 800575a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800575c:	4b06      	ldr	r3, [pc, #24]	@ (8005778 <MX_UART4_Init+0x58>)
 800575e:	2200      	movs	r2, #0
 8005760:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005762:	4805      	ldr	r0, [pc, #20]	@ (8005778 <MX_UART4_Init+0x58>)
 8005764:	f006 fd08 	bl	800c178 <HAL_UART_Init>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d001      	beq.n	8005772 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800576e:	f000 fa9b 	bl	8005ca8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005772:	bf00      	nop
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	20004e7c 	.word	0x20004e7c
 800577c:	40004c00 	.word	0x40004c00

08005780 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8005784:	4b14      	ldr	r3, [pc, #80]	@ (80057d8 <MX_UART5_Init+0x58>)
 8005786:	4a15      	ldr	r2, [pc, #84]	@ (80057dc <MX_UART5_Init+0x5c>)
 8005788:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800578a:	4b13      	ldr	r3, [pc, #76]	@ (80057d8 <MX_UART5_Init+0x58>)
 800578c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005790:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8005792:	4b11      	ldr	r3, [pc, #68]	@ (80057d8 <MX_UART5_Init+0x58>)
 8005794:	2200      	movs	r2, #0
 8005796:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8005798:	4b0f      	ldr	r3, [pc, #60]	@ (80057d8 <MX_UART5_Init+0x58>)
 800579a:	2200      	movs	r2, #0
 800579c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800579e:	4b0e      	ldr	r3, [pc, #56]	@ (80057d8 <MX_UART5_Init+0x58>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80057a4:	4b0c      	ldr	r3, [pc, #48]	@ (80057d8 <MX_UART5_Init+0x58>)
 80057a6:	220c      	movs	r2, #12
 80057a8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80057aa:	4b0b      	ldr	r3, [pc, #44]	@ (80057d8 <MX_UART5_Init+0x58>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80057b0:	4b09      	ldr	r3, [pc, #36]	@ (80057d8 <MX_UART5_Init+0x58>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80057b6:	4b08      	ldr	r3, [pc, #32]	@ (80057d8 <MX_UART5_Init+0x58>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80057bc:	4b06      	ldr	r3, [pc, #24]	@ (80057d8 <MX_UART5_Init+0x58>)
 80057be:	2200      	movs	r2, #0
 80057c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80057c2:	4805      	ldr	r0, [pc, #20]	@ (80057d8 <MX_UART5_Init+0x58>)
 80057c4:	f006 fcd8 	bl	800c178 <HAL_UART_Init>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d001      	beq.n	80057d2 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80057ce:	f000 fa6b 	bl	8005ca8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80057d2:	bf00      	nop
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	20004f04 	.word	0x20004f04
 80057dc:	40005000 	.word	0x40005000

080057e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80057e4:	4b14      	ldr	r3, [pc, #80]	@ (8005838 <MX_USART2_UART_Init+0x58>)
 80057e6:	4a15      	ldr	r2, [pc, #84]	@ (800583c <MX_USART2_UART_Init+0x5c>)
 80057e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80057ea:	4b13      	ldr	r3, [pc, #76]	@ (8005838 <MX_USART2_UART_Init+0x58>)
 80057ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80057f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80057f2:	4b11      	ldr	r3, [pc, #68]	@ (8005838 <MX_USART2_UART_Init+0x58>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80057f8:	4b0f      	ldr	r3, [pc, #60]	@ (8005838 <MX_USART2_UART_Init+0x58>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80057fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005838 <MX_USART2_UART_Init+0x58>)
 8005800:	2200      	movs	r2, #0
 8005802:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005804:	4b0c      	ldr	r3, [pc, #48]	@ (8005838 <MX_USART2_UART_Init+0x58>)
 8005806:	220c      	movs	r2, #12
 8005808:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800580a:	4b0b      	ldr	r3, [pc, #44]	@ (8005838 <MX_USART2_UART_Init+0x58>)
 800580c:	2200      	movs	r2, #0
 800580e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005810:	4b09      	ldr	r3, [pc, #36]	@ (8005838 <MX_USART2_UART_Init+0x58>)
 8005812:	2200      	movs	r2, #0
 8005814:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005816:	4b08      	ldr	r3, [pc, #32]	@ (8005838 <MX_USART2_UART_Init+0x58>)
 8005818:	2200      	movs	r2, #0
 800581a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800581c:	4b06      	ldr	r3, [pc, #24]	@ (8005838 <MX_USART2_UART_Init+0x58>)
 800581e:	2200      	movs	r2, #0
 8005820:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005822:	4805      	ldr	r0, [pc, #20]	@ (8005838 <MX_USART2_UART_Init+0x58>)
 8005824:	f006 fca8 	bl	800c178 <HAL_UART_Init>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800582e:	f000 fa3b 	bl	8005ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005832:	bf00      	nop
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	20004f8c 	.word	0x20004f8c
 800583c:	40004400 	.word	0x40004400

08005840 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005844:	4b14      	ldr	r3, [pc, #80]	@ (8005898 <MX_USART3_UART_Init+0x58>)
 8005846:	4a15      	ldr	r2, [pc, #84]	@ (800589c <MX_USART3_UART_Init+0x5c>)
 8005848:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 256000;
 800584a:	4b13      	ldr	r3, [pc, #76]	@ (8005898 <MX_USART3_UART_Init+0x58>)
 800584c:	f44f 327a 	mov.w	r2, #256000	@ 0x3e800
 8005850:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005852:	4b11      	ldr	r3, [pc, #68]	@ (8005898 <MX_USART3_UART_Init+0x58>)
 8005854:	2200      	movs	r2, #0
 8005856:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005858:	4b0f      	ldr	r3, [pc, #60]	@ (8005898 <MX_USART3_UART_Init+0x58>)
 800585a:	2200      	movs	r2, #0
 800585c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800585e:	4b0e      	ldr	r3, [pc, #56]	@ (8005898 <MX_USART3_UART_Init+0x58>)
 8005860:	2200      	movs	r2, #0
 8005862:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005864:	4b0c      	ldr	r3, [pc, #48]	@ (8005898 <MX_USART3_UART_Init+0x58>)
 8005866:	220c      	movs	r2, #12
 8005868:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800586a:	4b0b      	ldr	r3, [pc, #44]	@ (8005898 <MX_USART3_UART_Init+0x58>)
 800586c:	2200      	movs	r2, #0
 800586e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005870:	4b09      	ldr	r3, [pc, #36]	@ (8005898 <MX_USART3_UART_Init+0x58>)
 8005872:	2200      	movs	r2, #0
 8005874:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005876:	4b08      	ldr	r3, [pc, #32]	@ (8005898 <MX_USART3_UART_Init+0x58>)
 8005878:	2200      	movs	r2, #0
 800587a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800587c:	4b06      	ldr	r3, [pc, #24]	@ (8005898 <MX_USART3_UART_Init+0x58>)
 800587e:	2200      	movs	r2, #0
 8005880:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005882:	4805      	ldr	r0, [pc, #20]	@ (8005898 <MX_USART3_UART_Init+0x58>)
 8005884:	f006 fc78 	bl	800c178 <HAL_UART_Init>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800588e:	f000 fa0b 	bl	8005ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005892:	bf00      	nop
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	20005014 	.word	0x20005014
 800589c:	40004800 	.word	0x40004800

080058a0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80058a4:	4b14      	ldr	r3, [pc, #80]	@ (80058f8 <MX_USART6_UART_Init+0x58>)
 80058a6:	4a15      	ldr	r2, [pc, #84]	@ (80058fc <MX_USART6_UART_Init+0x5c>)
 80058a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80058aa:	4b13      	ldr	r3, [pc, #76]	@ (80058f8 <MX_USART6_UART_Init+0x58>)
 80058ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80058b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80058b2:	4b11      	ldr	r3, [pc, #68]	@ (80058f8 <MX_USART6_UART_Init+0x58>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80058b8:	4b0f      	ldr	r3, [pc, #60]	@ (80058f8 <MX_USART6_UART_Init+0x58>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80058be:	4b0e      	ldr	r3, [pc, #56]	@ (80058f8 <MX_USART6_UART_Init+0x58>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80058c4:	4b0c      	ldr	r3, [pc, #48]	@ (80058f8 <MX_USART6_UART_Init+0x58>)
 80058c6:	220c      	movs	r2, #12
 80058c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80058ca:	4b0b      	ldr	r3, [pc, #44]	@ (80058f8 <MX_USART6_UART_Init+0x58>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80058d0:	4b09      	ldr	r3, [pc, #36]	@ (80058f8 <MX_USART6_UART_Init+0x58>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80058d6:	4b08      	ldr	r3, [pc, #32]	@ (80058f8 <MX_USART6_UART_Init+0x58>)
 80058d8:	2200      	movs	r2, #0
 80058da:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80058dc:	4b06      	ldr	r3, [pc, #24]	@ (80058f8 <MX_USART6_UART_Init+0x58>)
 80058de:	2200      	movs	r2, #0
 80058e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80058e2:	4805      	ldr	r0, [pc, #20]	@ (80058f8 <MX_USART6_UART_Init+0x58>)
 80058e4:	f006 fc48 	bl	800c178 <HAL_UART_Init>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80058ee:	f000 f9db 	bl	8005ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80058f2:	bf00      	nop
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	2000509c 	.word	0x2000509c
 80058fc:	40011400 	.word	0x40011400

08005900 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005904:	4b14      	ldr	r3, [pc, #80]	@ (8005958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005906:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800590a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800590c:	4b12      	ldr	r3, [pc, #72]	@ (8005958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800590e:	2206      	movs	r2, #6
 8005910:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005912:	4b11      	ldr	r3, [pc, #68]	@ (8005958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005914:	2202      	movs	r2, #2
 8005916:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005918:	4b0f      	ldr	r3, [pc, #60]	@ (8005958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800591a:	2200      	movs	r2, #0
 800591c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800591e:	4b0e      	ldr	r3, [pc, #56]	@ (8005958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005920:	2202      	movs	r2, #2
 8005922:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8005924:	4b0c      	ldr	r3, [pc, #48]	@ (8005958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005926:	2201      	movs	r2, #1
 8005928:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800592a:	4b0b      	ldr	r3, [pc, #44]	@ (8005958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800592c:	2200      	movs	r2, #0
 800592e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005930:	4b09      	ldr	r3, [pc, #36]	@ (8005958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005932:	2200      	movs	r2, #0
 8005934:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8005936:	4b08      	ldr	r3, [pc, #32]	@ (8005958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005938:	2201      	movs	r2, #1
 800593a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800593c:	4b06      	ldr	r3, [pc, #24]	@ (8005958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800593e:	2200      	movs	r2, #0
 8005940:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005942:	4805      	ldr	r0, [pc, #20]	@ (8005958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005944:	f002 fddb 	bl	80084fe <HAL_PCD_Init>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800594e:	f000 f9ab 	bl	8005ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8005952:	bf00      	nop
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	20005364 	.word	0x20005364

0800595c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005962:	4b26      	ldr	r3, [pc, #152]	@ (80059fc <MX_DMA_Init+0xa0>)
 8005964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005966:	4a25      	ldr	r2, [pc, #148]	@ (80059fc <MX_DMA_Init+0xa0>)
 8005968:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800596c:	6313      	str	r3, [r2, #48]	@ 0x30
 800596e:	4b23      	ldr	r3, [pc, #140]	@ (80059fc <MX_DMA_Init+0xa0>)
 8005970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005976:	607b      	str	r3, [r7, #4]
 8005978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800597a:	4b20      	ldr	r3, [pc, #128]	@ (80059fc <MX_DMA_Init+0xa0>)
 800597c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800597e:	4a1f      	ldr	r2, [pc, #124]	@ (80059fc <MX_DMA_Init+0xa0>)
 8005980:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005984:	6313      	str	r3, [r2, #48]	@ 0x30
 8005986:	4b1d      	ldr	r3, [pc, #116]	@ (80059fc <MX_DMA_Init+0xa0>)
 8005988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800598a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800598e:	603b      	str	r3, [r7, #0]
 8005990:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 10, 0);
 8005992:	2200      	movs	r2, #0
 8005994:	210a      	movs	r1, #10
 8005996:	200b      	movs	r0, #11
 8005998:	f001 fb22 	bl	8006fe0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800599c:	200b      	movs	r0, #11
 800599e:	f001 fb3b 	bl	8007018 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 10, 0);
 80059a2:	2200      	movs	r2, #0
 80059a4:	210a      	movs	r1, #10
 80059a6:	200c      	movs	r0, #12
 80059a8:	f001 fb1a 	bl	8006fe0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80059ac:	200c      	movs	r0, #12
 80059ae:	f001 fb33 	bl	8007018 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 10, 0);
 80059b2:	2200      	movs	r2, #0
 80059b4:	210a      	movs	r1, #10
 80059b6:	200d      	movs	r0, #13
 80059b8:	f001 fb12 	bl	8006fe0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80059bc:	200d      	movs	r0, #13
 80059be:	f001 fb2b 	bl	8007018 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 10, 0);
 80059c2:	2200      	movs	r2, #0
 80059c4:	210a      	movs	r1, #10
 80059c6:	200e      	movs	r0, #14
 80059c8:	f001 fb0a 	bl	8006fe0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80059cc:	200e      	movs	r0, #14
 80059ce:	f001 fb23 	bl	8007018 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 10, 0);
 80059d2:	2200      	movs	r2, #0
 80059d4:	210a      	movs	r1, #10
 80059d6:	2010      	movs	r0, #16
 80059d8:	f001 fb02 	bl	8006fe0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80059dc:	2010      	movs	r0, #16
 80059de:	f001 fb1b 	bl	8007018 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80059e2:	2200      	movs	r2, #0
 80059e4:	2105      	movs	r1, #5
 80059e6:	2039      	movs	r0, #57	@ 0x39
 80059e8:	f001 fafa 	bl	8006fe0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80059ec:	2039      	movs	r0, #57	@ 0x39
 80059ee:	f001 fb13 	bl	8007018 <HAL_NVIC_EnableIRQ>

}
 80059f2:	bf00      	nop
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	40023800 	.word	0x40023800

08005a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b08e      	sub	sp, #56	@ 0x38
 8005a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	601a      	str	r2, [r3, #0]
 8005a0e:	605a      	str	r2, [r3, #4]
 8005a10:	609a      	str	r2, [r3, #8]
 8005a12:	60da      	str	r2, [r3, #12]
 8005a14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005a16:	4b94      	ldr	r3, [pc, #592]	@ (8005c68 <MX_GPIO_Init+0x268>)
 8005a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a1a:	4a93      	ldr	r2, [pc, #588]	@ (8005c68 <MX_GPIO_Init+0x268>)
 8005a1c:	f043 0310 	orr.w	r3, r3, #16
 8005a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a22:	4b91      	ldr	r3, [pc, #580]	@ (8005c68 <MX_GPIO_Init+0x268>)
 8005a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a26:	f003 0310 	and.w	r3, r3, #16
 8005a2a:	623b      	str	r3, [r7, #32]
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a2e:	4b8e      	ldr	r3, [pc, #568]	@ (8005c68 <MX_GPIO_Init+0x268>)
 8005a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a32:	4a8d      	ldr	r2, [pc, #564]	@ (8005c68 <MX_GPIO_Init+0x268>)
 8005a34:	f043 0304 	orr.w	r3, r3, #4
 8005a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a3a:	4b8b      	ldr	r3, [pc, #556]	@ (8005c68 <MX_GPIO_Init+0x268>)
 8005a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a3e:	f003 0304 	and.w	r3, r3, #4
 8005a42:	61fb      	str	r3, [r7, #28]
 8005a44:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005a46:	4b88      	ldr	r3, [pc, #544]	@ (8005c68 <MX_GPIO_Init+0x268>)
 8005a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a4a:	4a87      	ldr	r2, [pc, #540]	@ (8005c68 <MX_GPIO_Init+0x268>)
 8005a4c:	f043 0320 	orr.w	r3, r3, #32
 8005a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a52:	4b85      	ldr	r3, [pc, #532]	@ (8005c68 <MX_GPIO_Init+0x268>)
 8005a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a56:	f003 0320 	and.w	r3, r3, #32
 8005a5a:	61bb      	str	r3, [r7, #24]
 8005a5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005a5e:	4b82      	ldr	r3, [pc, #520]	@ (8005c68 <MX_GPIO_Init+0x268>)
 8005a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a62:	4a81      	ldr	r2, [pc, #516]	@ (8005c68 <MX_GPIO_Init+0x268>)
 8005a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a6a:	4b7f      	ldr	r3, [pc, #508]	@ (8005c68 <MX_GPIO_Init+0x268>)
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a72:	617b      	str	r3, [r7, #20]
 8005a74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a76:	4b7c      	ldr	r3, [pc, #496]	@ (8005c68 <MX_GPIO_Init+0x268>)
 8005a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a7a:	4a7b      	ldr	r2, [pc, #492]	@ (8005c68 <MX_GPIO_Init+0x268>)
 8005a7c:	f043 0301 	orr.w	r3, r3, #1
 8005a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a82:	4b79      	ldr	r3, [pc, #484]	@ (8005c68 <MX_GPIO_Init+0x268>)
 8005a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	613b      	str	r3, [r7, #16]
 8005a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a8e:	4b76      	ldr	r3, [pc, #472]	@ (8005c68 <MX_GPIO_Init+0x268>)
 8005a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a92:	4a75      	ldr	r2, [pc, #468]	@ (8005c68 <MX_GPIO_Init+0x268>)
 8005a94:	f043 0302 	orr.w	r3, r3, #2
 8005a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a9a:	4b73      	ldr	r3, [pc, #460]	@ (8005c68 <MX_GPIO_Init+0x268>)
 8005a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	60fb      	str	r3, [r7, #12]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005aa6:	4b70      	ldr	r3, [pc, #448]	@ (8005c68 <MX_GPIO_Init+0x268>)
 8005aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aaa:	4a6f      	ldr	r2, [pc, #444]	@ (8005c68 <MX_GPIO_Init+0x268>)
 8005aac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ab2:	4b6d      	ldr	r3, [pc, #436]	@ (8005c68 <MX_GPIO_Init+0x268>)
 8005ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aba:	60bb      	str	r3, [r7, #8]
 8005abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005abe:	4b6a      	ldr	r3, [pc, #424]	@ (8005c68 <MX_GPIO_Init+0x268>)
 8005ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac2:	4a69      	ldr	r2, [pc, #420]	@ (8005c68 <MX_GPIO_Init+0x268>)
 8005ac4:	f043 0308 	orr.w	r3, r3, #8
 8005ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8005aca:	4b67      	ldr	r3, [pc, #412]	@ (8005c68 <MX_GPIO_Init+0x268>)
 8005acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ace:	f003 0308 	and.w	r3, r3, #8
 8005ad2:	607b      	str	r3, [r7, #4]
 8005ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|ENN3_Pin|ENN4_Pin|ENN2_Pin
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f249 5185 	movw	r1, #38277	@ 0x9585
 8005adc:	4863      	ldr	r0, [pc, #396]	@ (8005c6c <MX_GPIO_Init+0x26c>)
 8005ade:	f002 f877 	bl	8007bd0 <HAL_GPIO_WritePin>
                          |DIR2_Pin|DIR1_Pin|DIR4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENN1_Pin|SPI_cs_Pin, GPIO_PIN_RESET);
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005ae8:	4861      	ldr	r0, [pc, #388]	@ (8005c70 <MX_GPIO_Init+0x270>)
 8005aea:	f002 f871 	bl	8007bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8005aee:	2200      	movs	r2, #0
 8005af0:	2140      	movs	r1, #64	@ 0x40
 8005af2:	4860      	ldr	r0, [pc, #384]	@ (8005c74 <MX_GPIO_Init+0x274>)
 8005af4:	f002 f86c 	bl	8007bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIR3_Pin ENN3_Pin ENN4_Pin ENN2_Pin
                           DIR2_Pin DIR1_Pin DIR4_Pin */
  GPIO_InitStruct.Pin = DIR3_Pin|ENN3_Pin|ENN4_Pin|ENN2_Pin
 8005af8:	f249 5385 	movw	r3, #38277	@ 0x9585
 8005afc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DIR2_Pin|DIR1_Pin|DIR4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005afe:	2301      	movs	r3, #1
 8005b00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b02:	2300      	movs	r3, #0
 8005b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b06:	2300      	movs	r3, #0
 8005b08:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005b0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b0e:	4619      	mov	r1, r3
 8005b10:	4856      	ldr	r0, [pc, #344]	@ (8005c6c <MX_GPIO_Init+0x26c>)
 8005b12:	f001 fe99 	bl	8007848 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8005b16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005b1c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005b20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b22:	2300      	movs	r3, #0
 8005b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8005b26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4852      	ldr	r0, [pc, #328]	@ (8005c78 <MX_GPIO_Init+0x278>)
 8005b2e:	f001 fe8b 	bl	8007848 <HAL_GPIO_Init>

  /*Configure GPIO pins : BtnDown_Pin BtnUp_Pin EndStop1_Pin EndStop4_Pin
                           BtnDownF15_Pin */
  GPIO_InitStruct.Pin = BtnDown_Pin|BtnUp_Pin|EndStop1_Pin|EndStop4_Pin
 8005b32:	f24e 0303 	movw	r3, #57347	@ 0xe003
 8005b36:	627b      	str	r3, [r7, #36]	@ 0x24
                          |BtnDownF15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005b40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b44:	4619      	mov	r1, r3
 8005b46:	484d      	ldr	r0, [pc, #308]	@ (8005c7c <MX_GPIO_Init+0x27c>)
 8005b48:	f001 fe7e 	bl	8007848 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIAG4_Pin */
  GPIO_InitStruct.Pin = DIAG4_Pin;
 8005b4c:	2310      	movs	r3, #16
 8005b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b50:	2300      	movs	r3, #0
 8005b52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b54:	2300      	movs	r3, #0
 8005b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DIAG4_GPIO_Port, &GPIO_InitStruct);
 8005b58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4847      	ldr	r0, [pc, #284]	@ (8005c7c <MX_GPIO_Init+0x27c>)
 8005b60:	f001 fe72 	bl	8007848 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIAG2_Pin DIAG3_Pin */
  GPIO_InitStruct.Pin = DIAG2_Pin|DIAG3_Pin;
 8005b64:	2344      	movs	r3, #68	@ 0x44
 8005b66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b74:	4619      	mov	r1, r3
 8005b76:	483e      	ldr	r0, [pc, #248]	@ (8005c70 <MX_GPIO_Init+0x270>)
 8005b78:	f001 fe66 	bl	8007848 <HAL_GPIO_Init>

  /*Configure GPIO pin : BtnLeft_Pin */
  GPIO_InitStruct.Pin = BtnLeft_Pin;
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b80:	2300      	movs	r3, #0
 8005b82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005b84:	2301      	movs	r3, #1
 8005b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BtnLeft_GPIO_Port, &GPIO_InitStruct);
 8005b88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4839      	ldr	r0, [pc, #228]	@ (8005c74 <MX_GPIO_Init+0x274>)
 8005b90:	f001 fe5a 	bl	8007848 <HAL_GPIO_Init>

  /*Configure GPIO pins : EndStop2_Pin EndStop3_Pin */
  GPIO_InitStruct.Pin = EndStop2_Pin|EndStop3_Pin;
 8005b94:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8005b98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005ba2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	4830      	ldr	r0, [pc, #192]	@ (8005c6c <MX_GPIO_Init+0x26c>)
 8005baa:	f001 fe4d 	bl	8007848 <HAL_GPIO_Init>

  /*Configure GPIO pin : Probe_Pin */
  GPIO_InitStruct.Pin = Probe_Pin;
 8005bae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Probe_GPIO_Port, &GPIO_InitStruct);
 8005bbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	482a      	ldr	r0, [pc, #168]	@ (8005c6c <MX_GPIO_Init+0x26c>)
 8005bc4:	f001 fe40 	bl	8007848 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENN1_Pin SPI_cs_Pin */
  GPIO_InitStruct.Pin = ENN1_Pin|SPI_cs_Pin;
 8005bc8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005bcc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bde:	4619      	mov	r1, r3
 8005be0:	4823      	ldr	r0, [pc, #140]	@ (8005c70 <MX_GPIO_Init+0x270>)
 8005be2:	f001 fe31 	bl	8007848 <HAL_GPIO_Init>

  /*Configure GPIO pin : EncoderBtn_Pin */
  GPIO_InitStruct.Pin = EncoderBtn_Pin;
 8005be6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005bea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005bec:	2300      	movs	r3, #0
 8005bee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(EncoderBtn_GPIO_Port, &GPIO_InitStruct);
 8005bf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4821      	ldr	r0, [pc, #132]	@ (8005c80 <MX_GPIO_Init+0x280>)
 8005bfc:	f001 fe24 	bl	8007848 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8005c00:	2340      	movs	r3, #64	@ 0x40
 8005c02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c04:	2301      	movs	r3, #1
 8005c06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005c10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c14:	4619      	mov	r1, r3
 8005c16:	4817      	ldr	r0, [pc, #92]	@ (8005c74 <MX_GPIO_Init+0x274>)
 8005c18:	f001 fe16 	bl	8007848 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin DIAG1_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|DIAG1_Pin;
 8005c1c:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8005c20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c22:	2300      	movs	r3, #0
 8005c24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005c2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c2e:	4619      	mov	r1, r3
 8005c30:	4810      	ldr	r0, [pc, #64]	@ (8005c74 <MX_GPIO_Init+0x274>)
 8005c32:	f001 fe09 	bl	8007848 <HAL_GPIO_Init>

  /*Configure GPIO pins : BtnCtr_Pin BtnRight_Pin */
  GPIO_InitStruct.Pin = BtnCtr_Pin|BtnRight_Pin;
 8005c36:	2303      	movs	r3, #3
 8005c38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005c42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c46:	4619      	mov	r1, r3
 8005c48:	480d      	ldr	r0, [pc, #52]	@ (8005c80 <MX_GPIO_Init+0x280>)
 8005c4a:	f001 fdfd 	bl	8007848 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8005c4e:	2200      	movs	r2, #0
 8005c50:	2105      	movs	r1, #5
 8005c52:	2028      	movs	r0, #40	@ 0x28
 8005c54:	f001 f9c4 	bl	8006fe0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005c58:	2028      	movs	r0, #40	@ 0x28
 8005c5a:	f001 f9dd 	bl	8007018 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005c5e:	bf00      	nop
 8005c60:	3738      	adds	r7, #56	@ 0x38
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	40023800 	.word	0x40023800
 8005c6c:	40021000 	.word	0x40021000
 8005c70:	40020400 	.word	0x40020400
 8005c74:	40021800 	.word	0x40021800
 8005c78:	40020800 	.word	0x40020800
 8005c7c:	40021400 	.word	0x40021400
 8005c80:	40020c00 	.word	0x40020c00

08005c84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a04      	ldr	r2, [pc, #16]	@ (8005ca4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d101      	bne.n	8005c9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005c96:	f001 f8a7 	bl	8006de8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005c9a:	bf00      	nop
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	40001000 	.word	0x40001000

08005ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005cac:	b672      	cpsid	i
}
 8005cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005cb0:	bf00      	nop
 8005cb2:	e7fd      	b.n	8005cb0 <Error_Handler+0x8>

08005cb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005cba:	4b11      	ldr	r3, [pc, #68]	@ (8005d00 <HAL_MspInit+0x4c>)
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cbe:	4a10      	ldr	r2, [pc, #64]	@ (8005d00 <HAL_MspInit+0x4c>)
 8005cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8005d00 <HAL_MspInit+0x4c>)
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cce:	607b      	str	r3, [r7, #4]
 8005cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8005d00 <HAL_MspInit+0x4c>)
 8005cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8005d00 <HAL_MspInit+0x4c>)
 8005cd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005cdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8005cde:	4b08      	ldr	r3, [pc, #32]	@ (8005d00 <HAL_MspInit+0x4c>)
 8005ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ce2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ce6:	603b      	str	r3, [r7, #0]
 8005ce8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005cea:	2200      	movs	r2, #0
 8005cec:	210f      	movs	r1, #15
 8005cee:	f06f 0001 	mvn.w	r0, #1
 8005cf2:	f001 f975 	bl	8006fe0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005cf6:	bf00      	nop
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	40023800 	.word	0x40023800

08005d04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b0aa      	sub	sp, #168	@ 0xa8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d0c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8005d10:	2200      	movs	r2, #0
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	605a      	str	r2, [r3, #4]
 8005d16:	609a      	str	r2, [r3, #8]
 8005d18:	60da      	str	r2, [r3, #12]
 8005d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005d1c:	f107 0310 	add.w	r3, r7, #16
 8005d20:	2284      	movs	r2, #132	@ 0x84
 8005d22:	2100      	movs	r1, #0
 8005d24:	4618      	mov	r0, r3
 8005d26:	f010 fa3e 	bl	80161a6 <memset>
  if(hi2c->Instance==I2C1)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a22      	ldr	r2, [pc, #136]	@ (8005db8 <HAL_I2C_MspInit+0xb4>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d13c      	bne.n	8005dae <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005d34:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005d38:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005d3e:	f107 0310 	add.w	r3, r7, #16
 8005d42:	4618      	mov	r0, r3
 8005d44:	f003 fa62 	bl	800920c <HAL_RCCEx_PeriphCLKConfig>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8005d4e:	f7ff ffab 	bl	8005ca8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d52:	4b1a      	ldr	r3, [pc, #104]	@ (8005dbc <HAL_I2C_MspInit+0xb8>)
 8005d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d56:	4a19      	ldr	r2, [pc, #100]	@ (8005dbc <HAL_I2C_MspInit+0xb8>)
 8005d58:	f043 0302 	orr.w	r3, r3, #2
 8005d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d5e:	4b17      	ldr	r3, [pc, #92]	@ (8005dbc <HAL_I2C_MspInit+0xb8>)
 8005d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8005d6a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005d6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005d72:	2312      	movs	r3, #18
 8005d74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005d84:	2304      	movs	r3, #4
 8005d86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d8a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8005d8e:	4619      	mov	r1, r3
 8005d90:	480b      	ldr	r0, [pc, #44]	@ (8005dc0 <HAL_I2C_MspInit+0xbc>)
 8005d92:	f001 fd59 	bl	8007848 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005d96:	4b09      	ldr	r3, [pc, #36]	@ (8005dbc <HAL_I2C_MspInit+0xb8>)
 8005d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9a:	4a08      	ldr	r2, [pc, #32]	@ (8005dbc <HAL_I2C_MspInit+0xb8>)
 8005d9c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005da0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005da2:	4b06      	ldr	r3, [pc, #24]	@ (8005dbc <HAL_I2C_MspInit+0xb8>)
 8005da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005daa:	60bb      	str	r3, [r7, #8]
 8005dac:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8005dae:	bf00      	nop
 8005db0:	37a8      	adds	r7, #168	@ 0xa8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	40005400 	.word	0x40005400
 8005dbc:	40023800 	.word	0x40023800
 8005dc0:	40020400 	.word	0x40020400

08005dc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08a      	sub	sp, #40	@ 0x28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dcc:	f107 0314 	add.w	r3, r7, #20
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	605a      	str	r2, [r3, #4]
 8005dd6:	609a      	str	r2, [r3, #8]
 8005dd8:	60da      	str	r2, [r3, #12]
 8005dda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a25      	ldr	r2, [pc, #148]	@ (8005e78 <HAL_SPI_MspInit+0xb4>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d144      	bne.n	8005e70 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005de6:	4b25      	ldr	r3, [pc, #148]	@ (8005e7c <HAL_SPI_MspInit+0xb8>)
 8005de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dea:	4a24      	ldr	r2, [pc, #144]	@ (8005e7c <HAL_SPI_MspInit+0xb8>)
 8005dec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005df0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005df2:	4b22      	ldr	r3, [pc, #136]	@ (8005e7c <HAL_SPI_MspInit+0xb8>)
 8005df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dfa:	613b      	str	r3, [r7, #16]
 8005dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8005e7c <HAL_SPI_MspInit+0xb8>)
 8005e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e02:	4a1e      	ldr	r2, [pc, #120]	@ (8005e7c <HAL_SPI_MspInit+0xb8>)
 8005e04:	f043 0304 	orr.w	r3, r3, #4
 8005e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8005e7c <HAL_SPI_MspInit+0xb8>)
 8005e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e0e:	f003 0304 	and.w	r3, r3, #4
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e16:	4b19      	ldr	r3, [pc, #100]	@ (8005e7c <HAL_SPI_MspInit+0xb8>)
 8005e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e1a:	4a18      	ldr	r2, [pc, #96]	@ (8005e7c <HAL_SPI_MspInit+0xb8>)
 8005e1c:	f043 0302 	orr.w	r3, r3, #2
 8005e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e22:	4b16      	ldr	r3, [pc, #88]	@ (8005e7c <HAL_SPI_MspInit+0xb8>)
 8005e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	60bb      	str	r3, [r7, #8]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005e2e:	2304      	movs	r3, #4
 8005e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e32:	2302      	movs	r3, #2
 8005e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e36:	2300      	movs	r3, #0
 8005e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005e3e:	2305      	movs	r3, #5
 8005e40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e42:	f107 0314 	add.w	r3, r7, #20
 8005e46:	4619      	mov	r1, r3
 8005e48:	480d      	ldr	r0, [pc, #52]	@ (8005e80 <HAL_SPI_MspInit+0xbc>)
 8005e4a:	f001 fcfd 	bl	8007848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8005e4e:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8005e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e54:	2302      	movs	r3, #2
 8005e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005e60:	2305      	movs	r3, #5
 8005e62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e64:	f107 0314 	add.w	r3, r7, #20
 8005e68:	4619      	mov	r1, r3
 8005e6a:	4806      	ldr	r0, [pc, #24]	@ (8005e84 <HAL_SPI_MspInit+0xc0>)
 8005e6c:	f001 fcec 	bl	8007848 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8005e70:	bf00      	nop
 8005e72:	3728      	adds	r7, #40	@ 0x28
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	40003800 	.word	0x40003800
 8005e7c:	40023800 	.word	0x40023800
 8005e80:	40020800 	.word	0x40020800
 8005e84:	40020400 	.word	0x40020400

08005e88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b088      	sub	sp, #32
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a42      	ldr	r2, [pc, #264]	@ (8005fa0 <HAL_TIM_Base_MspInit+0x118>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d114      	bne.n	8005ec4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005e9a:	4b42      	ldr	r3, [pc, #264]	@ (8005fa4 <HAL_TIM_Base_MspInit+0x11c>)
 8005e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e9e:	4a41      	ldr	r2, [pc, #260]	@ (8005fa4 <HAL_TIM_Base_MspInit+0x11c>)
 8005ea0:	f043 0301 	orr.w	r3, r3, #1
 8005ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8005ea6:	4b3f      	ldr	r3, [pc, #252]	@ (8005fa4 <HAL_TIM_Base_MspInit+0x11c>)
 8005ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	61fb      	str	r3, [r7, #28]
 8005eb0:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	2105      	movs	r1, #5
 8005eb6:	201b      	movs	r0, #27
 8005eb8:	f001 f892 	bl	8006fe0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8005ebc:	201b      	movs	r0, #27
 8005ebe:	f001 f8ab 	bl	8007018 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8005ec2:	e068      	b.n	8005f96 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM2)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ecc:	d114      	bne.n	8005ef8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005ece:	4b35      	ldr	r3, [pc, #212]	@ (8005fa4 <HAL_TIM_Base_MspInit+0x11c>)
 8005ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed2:	4a34      	ldr	r2, [pc, #208]	@ (8005fa4 <HAL_TIM_Base_MspInit+0x11c>)
 8005ed4:	f043 0301 	orr.w	r3, r3, #1
 8005ed8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005eda:	4b32      	ldr	r3, [pc, #200]	@ (8005fa4 <HAL_TIM_Base_MspInit+0x11c>)
 8005edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	61bb      	str	r3, [r7, #24]
 8005ee4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	2105      	movs	r1, #5
 8005eea:	201c      	movs	r0, #28
 8005eec:	f001 f878 	bl	8006fe0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005ef0:	201c      	movs	r0, #28
 8005ef2:	f001 f891 	bl	8007018 <HAL_NVIC_EnableIRQ>
}
 8005ef6:	e04e      	b.n	8005f96 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM3)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a2a      	ldr	r2, [pc, #168]	@ (8005fa8 <HAL_TIM_Base_MspInit+0x120>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d114      	bne.n	8005f2c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005f02:	4b28      	ldr	r3, [pc, #160]	@ (8005fa4 <HAL_TIM_Base_MspInit+0x11c>)
 8005f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f06:	4a27      	ldr	r2, [pc, #156]	@ (8005fa4 <HAL_TIM_Base_MspInit+0x11c>)
 8005f08:	f043 0302 	orr.w	r3, r3, #2
 8005f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f0e:	4b25      	ldr	r3, [pc, #148]	@ (8005fa4 <HAL_TIM_Base_MspInit+0x11c>)
 8005f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	617b      	str	r3, [r7, #20]
 8005f18:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	2105      	movs	r1, #5
 8005f1e:	201d      	movs	r0, #29
 8005f20:	f001 f85e 	bl	8006fe0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005f24:	201d      	movs	r0, #29
 8005f26:	f001 f877 	bl	8007018 <HAL_NVIC_EnableIRQ>
}
 8005f2a:	e034      	b.n	8005f96 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a1e      	ldr	r2, [pc, #120]	@ (8005fac <HAL_TIM_Base_MspInit+0x124>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d10c      	bne.n	8005f50 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005f36:	4b1b      	ldr	r3, [pc, #108]	@ (8005fa4 <HAL_TIM_Base_MspInit+0x11c>)
 8005f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3a:	4a1a      	ldr	r2, [pc, #104]	@ (8005fa4 <HAL_TIM_Base_MspInit+0x11c>)
 8005f3c:	f043 0320 	orr.w	r3, r3, #32
 8005f40:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f42:	4b18      	ldr	r3, [pc, #96]	@ (8005fa4 <HAL_TIM_Base_MspInit+0x11c>)
 8005f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f46:	f003 0320 	and.w	r3, r3, #32
 8005f4a:	613b      	str	r3, [r7, #16]
 8005f4c:	693b      	ldr	r3, [r7, #16]
}
 8005f4e:	e022      	b.n	8005f96 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM9)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a16      	ldr	r2, [pc, #88]	@ (8005fb0 <HAL_TIM_Base_MspInit+0x128>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d10c      	bne.n	8005f74 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8005f5a:	4b12      	ldr	r3, [pc, #72]	@ (8005fa4 <HAL_TIM_Base_MspInit+0x11c>)
 8005f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f5e:	4a11      	ldr	r2, [pc, #68]	@ (8005fa4 <HAL_TIM_Base_MspInit+0x11c>)
 8005f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f64:	6453      	str	r3, [r2, #68]	@ 0x44
 8005f66:	4b0f      	ldr	r3, [pc, #60]	@ (8005fa4 <HAL_TIM_Base_MspInit+0x11c>)
 8005f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	68fb      	ldr	r3, [r7, #12]
}
 8005f72:	e010      	b.n	8005f96 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM14)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a0e      	ldr	r2, [pc, #56]	@ (8005fb4 <HAL_TIM_Base_MspInit+0x12c>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d10b      	bne.n	8005f96 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005f7e:	4b09      	ldr	r3, [pc, #36]	@ (8005fa4 <HAL_TIM_Base_MspInit+0x11c>)
 8005f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f82:	4a08      	ldr	r2, [pc, #32]	@ (8005fa4 <HAL_TIM_Base_MspInit+0x11c>)
 8005f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f8a:	4b06      	ldr	r3, [pc, #24]	@ (8005fa4 <HAL_TIM_Base_MspInit+0x11c>)
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f92:	60bb      	str	r3, [r7, #8]
 8005f94:	68bb      	ldr	r3, [r7, #8]
}
 8005f96:	bf00      	nop
 8005f98:	3720      	adds	r7, #32
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	40010000 	.word	0x40010000
 8005fa4:	40023800 	.word	0x40023800
 8005fa8:	40000400 	.word	0x40000400
 8005fac:	40001400 	.word	0x40001400
 8005fb0:	40014000 	.word	0x40014000
 8005fb4:	40002000 	.word	0x40002000

08005fb8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b08a      	sub	sp, #40	@ 0x28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fc0:	f107 0314 	add.w	r3, r7, #20
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	605a      	str	r2, [r3, #4]
 8005fca:	609a      	str	r2, [r3, #8]
 8005fcc:	60da      	str	r2, [r3, #12]
 8005fce:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8006044 <HAL_TIM_Encoder_MspInit+0x8c>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d130      	bne.n	800603c <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005fda:	4b1b      	ldr	r3, [pc, #108]	@ (8006048 <HAL_TIM_Encoder_MspInit+0x90>)
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fde:	4a1a      	ldr	r2, [pc, #104]	@ (8006048 <HAL_TIM_Encoder_MspInit+0x90>)
 8005fe0:	f043 0304 	orr.w	r3, r3, #4
 8005fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005fe6:	4b18      	ldr	r3, [pc, #96]	@ (8006048 <HAL_TIM_Encoder_MspInit+0x90>)
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fea:	f003 0304 	and.w	r3, r3, #4
 8005fee:	613b      	str	r3, [r7, #16]
 8005ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005ff2:	4b15      	ldr	r3, [pc, #84]	@ (8006048 <HAL_TIM_Encoder_MspInit+0x90>)
 8005ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff6:	4a14      	ldr	r2, [pc, #80]	@ (8006048 <HAL_TIM_Encoder_MspInit+0x90>)
 8005ff8:	f043 0308 	orr.w	r3, r3, #8
 8005ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ffe:	4b12      	ldr	r3, [pc, #72]	@ (8006048 <HAL_TIM_Encoder_MspInit+0x90>)
 8006000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006002:	f003 0308 	and.w	r3, r3, #8
 8006006:	60fb      	str	r3, [r7, #12]
 8006008:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC_DT_Pin|ENC_CLK_Pin;
 800600a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800600e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006010:	2302      	movs	r3, #2
 8006012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006014:	2300      	movs	r3, #0
 8006016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006018:	2300      	movs	r3, #0
 800601a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800601c:	2302      	movs	r3, #2
 800601e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006020:	f107 0314 	add.w	r3, r7, #20
 8006024:	4619      	mov	r1, r3
 8006026:	4809      	ldr	r0, [pc, #36]	@ (800604c <HAL_TIM_Encoder_MspInit+0x94>)
 8006028:	f001 fc0e 	bl	8007848 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800602c:	2200      	movs	r2, #0
 800602e:	2105      	movs	r1, #5
 8006030:	201e      	movs	r0, #30
 8006032:	f000 ffd5 	bl	8006fe0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006036:	201e      	movs	r0, #30
 8006038:	f000 ffee 	bl	8007018 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 800603c:	bf00      	nop
 800603e:	3728      	adds	r7, #40	@ 0x28
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	40000800 	.word	0x40000800
 8006048:	40023800 	.word	0x40023800
 800604c:	40020c00 	.word	0x40020c00

08006050 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a0d      	ldr	r2, [pc, #52]	@ (8006094 <HAL_TIM_PWM_MspInit+0x44>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d113      	bne.n	800608a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006062:	4b0d      	ldr	r3, [pc, #52]	@ (8006098 <HAL_TIM_PWM_MspInit+0x48>)
 8006064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006066:	4a0c      	ldr	r2, [pc, #48]	@ (8006098 <HAL_TIM_PWM_MspInit+0x48>)
 8006068:	f043 0308 	orr.w	r3, r3, #8
 800606c:	6413      	str	r3, [r2, #64]	@ 0x40
 800606e:	4b0a      	ldr	r3, [pc, #40]	@ (8006098 <HAL_TIM_PWM_MspInit+0x48>)
 8006070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006072:	f003 0308 	and.w	r3, r3, #8
 8006076:	60fb      	str	r3, [r7, #12]
 8006078:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800607a:	2200      	movs	r2, #0
 800607c:	2105      	movs	r1, #5
 800607e:	2032      	movs	r0, #50	@ 0x32
 8006080:	f000 ffae 	bl	8006fe0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8006084:	2032      	movs	r0, #50	@ 0x32
 8006086:	f000 ffc7 	bl	8007018 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM5_MspInit 1 */

  }

}
 800608a:	bf00      	nop
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	40000c00 	.word	0x40000c00
 8006098:	40023800 	.word	0x40023800

0800609c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b08e      	sub	sp, #56	@ 0x38
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060a8:	2200      	movs	r2, #0
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	605a      	str	r2, [r3, #4]
 80060ae:	609a      	str	r2, [r3, #8]
 80060b0:	60da      	str	r2, [r3, #12]
 80060b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a67      	ldr	r2, [pc, #412]	@ (8006258 <HAL_TIM_MspPostInit+0x1bc>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d11d      	bne.n	80060fa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80060be:	4b67      	ldr	r3, [pc, #412]	@ (800625c <HAL_TIM_MspPostInit+0x1c0>)
 80060c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060c2:	4a66      	ldr	r2, [pc, #408]	@ (800625c <HAL_TIM_MspPostInit+0x1c0>)
 80060c4:	f043 0310 	orr.w	r3, r3, #16
 80060c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80060ca:	4b64      	ldr	r3, [pc, #400]	@ (800625c <HAL_TIM_MspPostInit+0x1c0>)
 80060cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ce:	f003 0310 	and.w	r3, r3, #16
 80060d2:	623b      	str	r3, [r7, #32]
 80060d4:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = STEP2_Pin;
 80060d6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80060da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060dc:	2302      	movs	r3, #2
 80060de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060e0:	2300      	movs	r3, #0
 80060e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060e4:	2300      	movs	r3, #0
 80060e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80060e8:	2301      	movs	r3, #1
 80060ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 80060ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060f0:	4619      	mov	r1, r3
 80060f2:	485b      	ldr	r0, [pc, #364]	@ (8006260 <HAL_TIM_MspPostInit+0x1c4>)
 80060f4:	f001 fba8 	bl	8007848 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80060f8:	e0a9      	b.n	800624e <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM2)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006102:	d11d      	bne.n	8006140 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006104:	4b55      	ldr	r3, [pc, #340]	@ (800625c <HAL_TIM_MspPostInit+0x1c0>)
 8006106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006108:	4a54      	ldr	r2, [pc, #336]	@ (800625c <HAL_TIM_MspPostInit+0x1c0>)
 800610a:	f043 0302 	orr.w	r3, r3, #2
 800610e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006110:	4b52      	ldr	r3, [pc, #328]	@ (800625c <HAL_TIM_MspPostInit+0x1c0>)
 8006112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	61fb      	str	r3, [r7, #28]
 800611a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = STEP1_Pin;
 800611c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006120:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006122:	2302      	movs	r3, #2
 8006124:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006126:	2300      	movs	r3, #0
 8006128:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800612a:	2300      	movs	r3, #0
 800612c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800612e:	2301      	movs	r3, #1
 8006130:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 8006132:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006136:	4619      	mov	r1, r3
 8006138:	484a      	ldr	r0, [pc, #296]	@ (8006264 <HAL_TIM_MspPostInit+0x1c8>)
 800613a:	f001 fb85 	bl	8007848 <HAL_GPIO_Init>
}
 800613e:	e086      	b.n	800624e <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM3)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a48      	ldr	r2, [pc, #288]	@ (8006268 <HAL_TIM_MspPostInit+0x1cc>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d11c      	bne.n	8006184 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800614a:	4b44      	ldr	r3, [pc, #272]	@ (800625c <HAL_TIM_MspPostInit+0x1c0>)
 800614c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800614e:	4a43      	ldr	r2, [pc, #268]	@ (800625c <HAL_TIM_MspPostInit+0x1c0>)
 8006150:	f043 0302 	orr.w	r3, r3, #2
 8006154:	6313      	str	r3, [r2, #48]	@ 0x30
 8006156:	4b41      	ldr	r3, [pc, #260]	@ (800625c <HAL_TIM_MspPostInit+0x1c0>)
 8006158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	61bb      	str	r3, [r7, #24]
 8006160:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = STEP4_Pin;
 8006162:	2301      	movs	r3, #1
 8006164:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006166:	2302      	movs	r3, #2
 8006168:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800616a:	2300      	movs	r3, #0
 800616c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800616e:	2300      	movs	r3, #0
 8006170:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006172:	2302      	movs	r3, #2
 8006174:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP4_GPIO_Port, &GPIO_InitStruct);
 8006176:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800617a:	4619      	mov	r1, r3
 800617c:	4839      	ldr	r0, [pc, #228]	@ (8006264 <HAL_TIM_MspPostInit+0x1c8>)
 800617e:	f001 fb63 	bl	8007848 <HAL_GPIO_Init>
}
 8006182:	e064      	b.n	800624e <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM5)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a38      	ldr	r2, [pc, #224]	@ (800626c <HAL_TIM_MspPostInit+0x1d0>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d11c      	bne.n	80061c8 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800618e:	4b33      	ldr	r3, [pc, #204]	@ (800625c <HAL_TIM_MspPostInit+0x1c0>)
 8006190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006192:	4a32      	ldr	r2, [pc, #200]	@ (800625c <HAL_TIM_MspPostInit+0x1c0>)
 8006194:	f043 0301 	orr.w	r3, r3, #1
 8006198:	6313      	str	r3, [r2, #48]	@ 0x30
 800619a:	4b30      	ldr	r3, [pc, #192]	@ (800625c <HAL_TIM_MspPostInit+0x1c0>)
 800619c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	617b      	str	r3, [r7, #20]
 80061a4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP3_Pin;
 80061a6:	2301      	movs	r3, #1
 80061a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061aa:	2302      	movs	r3, #2
 80061ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061ae:	2300      	movs	r3, #0
 80061b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061b2:	2300      	movs	r3, #0
 80061b4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80061b6:	2302      	movs	r3, #2
 80061b8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP3_GPIO_Port, &GPIO_InitStruct);
 80061ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061be:	4619      	mov	r1, r3
 80061c0:	482b      	ldr	r0, [pc, #172]	@ (8006270 <HAL_TIM_MspPostInit+0x1d4>)
 80061c2:	f001 fb41 	bl	8007848 <HAL_GPIO_Init>
}
 80061c6:	e042      	b.n	800624e <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM9)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a29      	ldr	r2, [pc, #164]	@ (8006274 <HAL_TIM_MspPostInit+0x1d8>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d11c      	bne.n	800620c <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80061d2:	4b22      	ldr	r3, [pc, #136]	@ (800625c <HAL_TIM_MspPostInit+0x1c0>)
 80061d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061d6:	4a21      	ldr	r2, [pc, #132]	@ (800625c <HAL_TIM_MspPostInit+0x1c0>)
 80061d8:	f043 0310 	orr.w	r3, r3, #16
 80061dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80061de:	4b1f      	ldr	r3, [pc, #124]	@ (800625c <HAL_TIM_MspPostInit+0x1c0>)
 80061e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061e2:	f003 0310 	and.w	r3, r3, #16
 80061e6:	613b      	str	r3, [r7, #16]
 80061e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Servo2PWM_Pin;
 80061ea:	2320      	movs	r3, #32
 80061ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061ee:	2302      	movs	r3, #2
 80061f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061f2:	2300      	movs	r3, #0
 80061f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061f6:	2300      	movs	r3, #0
 80061f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80061fa:	2303      	movs	r3, #3
 80061fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Servo2PWM_GPIO_Port, &GPIO_InitStruct);
 80061fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006202:	4619      	mov	r1, r3
 8006204:	4816      	ldr	r0, [pc, #88]	@ (8006260 <HAL_TIM_MspPostInit+0x1c4>)
 8006206:	f001 fb1f 	bl	8007848 <HAL_GPIO_Init>
}
 800620a:	e020      	b.n	800624e <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM14)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a19      	ldr	r2, [pc, #100]	@ (8006278 <HAL_TIM_MspPostInit+0x1dc>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d11b      	bne.n	800624e <HAL_TIM_MspPostInit+0x1b2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006216:	4b11      	ldr	r3, [pc, #68]	@ (800625c <HAL_TIM_MspPostInit+0x1c0>)
 8006218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800621a:	4a10      	ldr	r2, [pc, #64]	@ (800625c <HAL_TIM_MspPostInit+0x1c0>)
 800621c:	f043 0301 	orr.w	r3, r3, #1
 8006220:	6313      	str	r3, [r2, #48]	@ 0x30
 8006222:	4b0e      	ldr	r3, [pc, #56]	@ (800625c <HAL_TIM_MspPostInit+0x1c0>)
 8006224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo1PWM_Pin;
 800622e:	2380      	movs	r3, #128	@ 0x80
 8006230:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006232:	2302      	movs	r3, #2
 8006234:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006236:	2300      	movs	r3, #0
 8006238:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800623a:	2300      	movs	r3, #0
 800623c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800623e:	2309      	movs	r3, #9
 8006240:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Servo1PWM_GPIO_Port, &GPIO_InitStruct);
 8006242:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006246:	4619      	mov	r1, r3
 8006248:	4809      	ldr	r0, [pc, #36]	@ (8006270 <HAL_TIM_MspPostInit+0x1d4>)
 800624a:	f001 fafd 	bl	8007848 <HAL_GPIO_Init>
}
 800624e:	bf00      	nop
 8006250:	3738      	adds	r7, #56	@ 0x38
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	40010000 	.word	0x40010000
 800625c:	40023800 	.word	0x40023800
 8006260:	40021000 	.word	0x40021000
 8006264:	40020400 	.word	0x40020400
 8006268:	40000400 	.word	0x40000400
 800626c:	40000c00 	.word	0x40000c00
 8006270:	40020000 	.word	0x40020000
 8006274:	40014000 	.word	0x40014000
 8006278:	40002000 	.word	0x40002000

0800627c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b0b4      	sub	sp, #208	@ 0xd0
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006284:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8006288:	2200      	movs	r2, #0
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	605a      	str	r2, [r3, #4]
 800628e:	609a      	str	r2, [r3, #8]
 8006290:	60da      	str	r2, [r3, #12]
 8006292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006294:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006298:	2284      	movs	r2, #132	@ 0x84
 800629a:	2100      	movs	r1, #0
 800629c:	4618      	mov	r0, r3
 800629e:	f00f ff82 	bl	80161a6 <memset>
  if(huart->Instance==UART4)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a8a      	ldr	r2, [pc, #552]	@ (80064d0 <HAL_UART_MspInit+0x254>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d174      	bne.n	8006396 <HAL_UART_MspInit+0x11a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80062ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80062b0:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80062b2:	2300      	movs	r3, #0
 80062b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80062b8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80062bc:	4618      	mov	r0, r3
 80062be:	f002 ffa5 	bl	800920c <HAL_RCCEx_PeriphCLKConfig>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80062c8:	f7ff fcee 	bl	8005ca8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80062cc:	4b81      	ldr	r3, [pc, #516]	@ (80064d4 <HAL_UART_MspInit+0x258>)
 80062ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d0:	4a80      	ldr	r2, [pc, #512]	@ (80064d4 <HAL_UART_MspInit+0x258>)
 80062d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80062d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80062d8:	4b7e      	ldr	r3, [pc, #504]	@ (80064d4 <HAL_UART_MspInit+0x258>)
 80062da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80062e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80062e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80062e4:	4b7b      	ldr	r3, [pc, #492]	@ (80064d4 <HAL_UART_MspInit+0x258>)
 80062e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e8:	4a7a      	ldr	r2, [pc, #488]	@ (80064d4 <HAL_UART_MspInit+0x258>)
 80062ea:	f043 0304 	orr.w	r3, r3, #4
 80062ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80062f0:	4b78      	ldr	r3, [pc, #480]	@ (80064d4 <HAL_UART_MspInit+0x258>)
 80062f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062f4:	f003 0304 	and.w	r3, r3, #4
 80062f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80062fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80062fc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006300:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006304:	2302      	movs	r3, #2
 8006306:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800630a:	2300      	movs	r3, #0
 800630c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006310:	2303      	movs	r3, #3
 8006312:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006316:	2308      	movs	r3, #8
 8006318:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800631c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8006320:	4619      	mov	r1, r3
 8006322:	486d      	ldr	r0, [pc, #436]	@ (80064d8 <HAL_UART_MspInit+0x25c>)
 8006324:	f001 fa90 	bl	8007848 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8006328:	4b6c      	ldr	r3, [pc, #432]	@ (80064dc <HAL_UART_MspInit+0x260>)
 800632a:	4a6d      	ldr	r2, [pc, #436]	@ (80064e0 <HAL_UART_MspInit+0x264>)
 800632c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800632e:	4b6b      	ldr	r3, [pc, #428]	@ (80064dc <HAL_UART_MspInit+0x260>)
 8006330:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006334:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006336:	4b69      	ldr	r3, [pc, #420]	@ (80064dc <HAL_UART_MspInit+0x260>)
 8006338:	2200      	movs	r2, #0
 800633a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800633c:	4b67      	ldr	r3, [pc, #412]	@ (80064dc <HAL_UART_MspInit+0x260>)
 800633e:	2200      	movs	r2, #0
 8006340:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006342:	4b66      	ldr	r3, [pc, #408]	@ (80064dc <HAL_UART_MspInit+0x260>)
 8006344:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006348:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800634a:	4b64      	ldr	r3, [pc, #400]	@ (80064dc <HAL_UART_MspInit+0x260>)
 800634c:	2200      	movs	r2, #0
 800634e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006350:	4b62      	ldr	r3, [pc, #392]	@ (80064dc <HAL_UART_MspInit+0x260>)
 8006352:	2200      	movs	r2, #0
 8006354:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8006356:	4b61      	ldr	r3, [pc, #388]	@ (80064dc <HAL_UART_MspInit+0x260>)
 8006358:	2200      	movs	r2, #0
 800635a:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800635c:	4b5f      	ldr	r3, [pc, #380]	@ (80064dc <HAL_UART_MspInit+0x260>)
 800635e:	2200      	movs	r2, #0
 8006360:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006362:	4b5e      	ldr	r3, [pc, #376]	@ (80064dc <HAL_UART_MspInit+0x260>)
 8006364:	2200      	movs	r2, #0
 8006366:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8006368:	485c      	ldr	r0, [pc, #368]	@ (80064dc <HAL_UART_MspInit+0x260>)
 800636a:	f000 fe63 	bl	8007034 <HAL_DMA_Init>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 8006374:	f7ff fc98 	bl	8005ca8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a58      	ldr	r2, [pc, #352]	@ (80064dc <HAL_UART_MspInit+0x260>)
 800637c:	675a      	str	r2, [r3, #116]	@ 0x74
 800637e:	4a57      	ldr	r2, [pc, #348]	@ (80064dc <HAL_UART_MspInit+0x260>)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8006384:	2200      	movs	r2, #0
 8006386:	2105      	movs	r1, #5
 8006388:	2034      	movs	r0, #52	@ 0x34
 800638a:	f000 fe29 	bl	8006fe0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800638e:	2034      	movs	r0, #52	@ 0x34
 8006390:	f000 fe42 	bl	8007018 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8006394:	e254      	b.n	8006840 <HAL_UART_MspInit+0x5c4>
  else if(huart->Instance==UART5)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a52      	ldr	r2, [pc, #328]	@ (80064e4 <HAL_UART_MspInit+0x268>)
 800639c:	4293      	cmp	r3, r2
 800639e:	f040 80a9 	bne.w	80064f4 <HAL_UART_MspInit+0x278>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80063a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063a6:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80063a8:	2300      	movs	r3, #0
 80063aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80063ae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80063b2:	4618      	mov	r0, r3
 80063b4:	f002 ff2a 	bl	800920c <HAL_RCCEx_PeriphCLKConfig>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d001      	beq.n	80063c2 <HAL_UART_MspInit+0x146>
      Error_Handler();
 80063be:	f7ff fc73 	bl	8005ca8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80063c2:	4b44      	ldr	r3, [pc, #272]	@ (80064d4 <HAL_UART_MspInit+0x258>)
 80063c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c6:	4a43      	ldr	r2, [pc, #268]	@ (80064d4 <HAL_UART_MspInit+0x258>)
 80063c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80063ce:	4b41      	ldr	r3, [pc, #260]	@ (80064d4 <HAL_UART_MspInit+0x258>)
 80063d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80063da:	4b3e      	ldr	r3, [pc, #248]	@ (80064d4 <HAL_UART_MspInit+0x258>)
 80063dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063de:	4a3d      	ldr	r2, [pc, #244]	@ (80064d4 <HAL_UART_MspInit+0x258>)
 80063e0:	f043 0304 	orr.w	r3, r3, #4
 80063e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80063e6:	4b3b      	ldr	r3, [pc, #236]	@ (80064d4 <HAL_UART_MspInit+0x258>)
 80063e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ea:	f003 0304 	and.w	r3, r3, #4
 80063ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80063f2:	4b38      	ldr	r3, [pc, #224]	@ (80064d4 <HAL_UART_MspInit+0x258>)
 80063f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063f6:	4a37      	ldr	r2, [pc, #220]	@ (80064d4 <HAL_UART_MspInit+0x258>)
 80063f8:	f043 0308 	orr.w	r3, r3, #8
 80063fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80063fe:	4b35      	ldr	r3, [pc, #212]	@ (80064d4 <HAL_UART_MspInit+0x258>)
 8006400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006402:	f003 0308 	and.w	r3, r3, #8
 8006406:	627b      	str	r3, [r7, #36]	@ 0x24
 8006408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800640a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800640e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006412:	2302      	movs	r3, #2
 8006414:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006418:	2300      	movs	r3, #0
 800641a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800641e:	2303      	movs	r3, #3
 8006420:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006424:	2308      	movs	r3, #8
 8006426:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800642a:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800642e:	4619      	mov	r1, r3
 8006430:	4829      	ldr	r0, [pc, #164]	@ (80064d8 <HAL_UART_MspInit+0x25c>)
 8006432:	f001 fa09 	bl	8007848 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006436:	2304      	movs	r3, #4
 8006438:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800643c:	2302      	movs	r3, #2
 800643e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006442:	2300      	movs	r3, #0
 8006444:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006448:	2303      	movs	r3, #3
 800644a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800644e:	2308      	movs	r3, #8
 8006450:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006454:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8006458:	4619      	mov	r1, r3
 800645a:	4823      	ldr	r0, [pc, #140]	@ (80064e8 <HAL_UART_MspInit+0x26c>)
 800645c:	f001 f9f4 	bl	8007848 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8006460:	4b22      	ldr	r3, [pc, #136]	@ (80064ec <HAL_UART_MspInit+0x270>)
 8006462:	4a23      	ldr	r2, [pc, #140]	@ (80064f0 <HAL_UART_MspInit+0x274>)
 8006464:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8006466:	4b21      	ldr	r3, [pc, #132]	@ (80064ec <HAL_UART_MspInit+0x270>)
 8006468:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800646c:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800646e:	4b1f      	ldr	r3, [pc, #124]	@ (80064ec <HAL_UART_MspInit+0x270>)
 8006470:	2200      	movs	r2, #0
 8006472:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006474:	4b1d      	ldr	r3, [pc, #116]	@ (80064ec <HAL_UART_MspInit+0x270>)
 8006476:	2200      	movs	r2, #0
 8006478:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800647a:	4b1c      	ldr	r3, [pc, #112]	@ (80064ec <HAL_UART_MspInit+0x270>)
 800647c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006480:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006482:	4b1a      	ldr	r3, [pc, #104]	@ (80064ec <HAL_UART_MspInit+0x270>)
 8006484:	2200      	movs	r2, #0
 8006486:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006488:	4b18      	ldr	r3, [pc, #96]	@ (80064ec <HAL_UART_MspInit+0x270>)
 800648a:	2200      	movs	r2, #0
 800648c:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 800648e:	4b17      	ldr	r3, [pc, #92]	@ (80064ec <HAL_UART_MspInit+0x270>)
 8006490:	2200      	movs	r2, #0
 8006492:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006494:	4b15      	ldr	r3, [pc, #84]	@ (80064ec <HAL_UART_MspInit+0x270>)
 8006496:	2200      	movs	r2, #0
 8006498:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800649a:	4b14      	ldr	r3, [pc, #80]	@ (80064ec <HAL_UART_MspInit+0x270>)
 800649c:	2200      	movs	r2, #0
 800649e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80064a0:	4812      	ldr	r0, [pc, #72]	@ (80064ec <HAL_UART_MspInit+0x270>)
 80064a2:	f000 fdc7 	bl	8007034 <HAL_DMA_Init>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <HAL_UART_MspInit+0x234>
      Error_Handler();
 80064ac:	f7ff fbfc 	bl	8005ca8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a0e      	ldr	r2, [pc, #56]	@ (80064ec <HAL_UART_MspInit+0x270>)
 80064b4:	675a      	str	r2, [r3, #116]	@ 0x74
 80064b6:	4a0d      	ldr	r2, [pc, #52]	@ (80064ec <HAL_UART_MspInit+0x270>)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80064bc:	2200      	movs	r2, #0
 80064be:	2105      	movs	r1, #5
 80064c0:	2035      	movs	r0, #53	@ 0x35
 80064c2:	f000 fd8d 	bl	8006fe0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80064c6:	2035      	movs	r0, #53	@ 0x35
 80064c8:	f000 fda6 	bl	8007018 <HAL_NVIC_EnableIRQ>
}
 80064cc:	e1b8      	b.n	8006840 <HAL_UART_MspInit+0x5c4>
 80064ce:	bf00      	nop
 80064d0:	40004c00 	.word	0x40004c00
 80064d4:	40023800 	.word	0x40023800
 80064d8:	40020800 	.word	0x40020800
 80064dc:	20005124 	.word	0x20005124
 80064e0:	40026040 	.word	0x40026040
 80064e4:	40005000 	.word	0x40005000
 80064e8:	40020c00 	.word	0x40020c00
 80064ec:	20005184 	.word	0x20005184
 80064f0:	40026010 	.word	0x40026010
  else if(huart->Instance==USART2)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a8b      	ldr	r2, [pc, #556]	@ (8006728 <HAL_UART_MspInit+0x4ac>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d172      	bne.n	80065e4 <HAL_UART_MspInit+0x368>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80064fe:	2380      	movs	r3, #128	@ 0x80
 8006500:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006502:	2300      	movs	r3, #0
 8006504:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006508:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800650c:	4618      	mov	r0, r3
 800650e:	f002 fe7d 	bl	800920c <HAL_RCCEx_PeriphCLKConfig>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <HAL_UART_MspInit+0x2a0>
      Error_Handler();
 8006518:	f7ff fbc6 	bl	8005ca8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800651c:	4b83      	ldr	r3, [pc, #524]	@ (800672c <HAL_UART_MspInit+0x4b0>)
 800651e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006520:	4a82      	ldr	r2, [pc, #520]	@ (800672c <HAL_UART_MspInit+0x4b0>)
 8006522:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006526:	6413      	str	r3, [r2, #64]	@ 0x40
 8006528:	4b80      	ldr	r3, [pc, #512]	@ (800672c <HAL_UART_MspInit+0x4b0>)
 800652a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800652c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006530:	623b      	str	r3, [r7, #32]
 8006532:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006534:	4b7d      	ldr	r3, [pc, #500]	@ (800672c <HAL_UART_MspInit+0x4b0>)
 8006536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006538:	4a7c      	ldr	r2, [pc, #496]	@ (800672c <HAL_UART_MspInit+0x4b0>)
 800653a:	f043 0308 	orr.w	r3, r3, #8
 800653e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006540:	4b7a      	ldr	r3, [pc, #488]	@ (800672c <HAL_UART_MspInit+0x4b0>)
 8006542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006544:	f003 0308 	and.w	r3, r3, #8
 8006548:	61fb      	str	r3, [r7, #28]
 800654a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800654c:	2360      	movs	r3, #96	@ 0x60
 800654e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006552:	2302      	movs	r3, #2
 8006554:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006558:	2300      	movs	r3, #0
 800655a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800655e:	2303      	movs	r3, #3
 8006560:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006564:	2307      	movs	r3, #7
 8006566:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800656a:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800656e:	4619      	mov	r1, r3
 8006570:	486f      	ldr	r0, [pc, #444]	@ (8006730 <HAL_UART_MspInit+0x4b4>)
 8006572:	f001 f969 	bl	8007848 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006576:	4b6f      	ldr	r3, [pc, #444]	@ (8006734 <HAL_UART_MspInit+0x4b8>)
 8006578:	4a6f      	ldr	r2, [pc, #444]	@ (8006738 <HAL_UART_MspInit+0x4bc>)
 800657a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800657c:	4b6d      	ldr	r3, [pc, #436]	@ (8006734 <HAL_UART_MspInit+0x4b8>)
 800657e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006582:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006584:	4b6b      	ldr	r3, [pc, #428]	@ (8006734 <HAL_UART_MspInit+0x4b8>)
 8006586:	2200      	movs	r2, #0
 8006588:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800658a:	4b6a      	ldr	r3, [pc, #424]	@ (8006734 <HAL_UART_MspInit+0x4b8>)
 800658c:	2200      	movs	r2, #0
 800658e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006590:	4b68      	ldr	r3, [pc, #416]	@ (8006734 <HAL_UART_MspInit+0x4b8>)
 8006592:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006596:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006598:	4b66      	ldr	r3, [pc, #408]	@ (8006734 <HAL_UART_MspInit+0x4b8>)
 800659a:	2200      	movs	r2, #0
 800659c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800659e:	4b65      	ldr	r3, [pc, #404]	@ (8006734 <HAL_UART_MspInit+0x4b8>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80065a4:	4b63      	ldr	r3, [pc, #396]	@ (8006734 <HAL_UART_MspInit+0x4b8>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80065aa:	4b62      	ldr	r3, [pc, #392]	@ (8006734 <HAL_UART_MspInit+0x4b8>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80065b0:	4b60      	ldr	r3, [pc, #384]	@ (8006734 <HAL_UART_MspInit+0x4b8>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80065b6:	485f      	ldr	r0, [pc, #380]	@ (8006734 <HAL_UART_MspInit+0x4b8>)
 80065b8:	f000 fd3c 	bl	8007034 <HAL_DMA_Init>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d001      	beq.n	80065c6 <HAL_UART_MspInit+0x34a>
      Error_Handler();
 80065c2:	f7ff fb71 	bl	8005ca8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a5a      	ldr	r2, [pc, #360]	@ (8006734 <HAL_UART_MspInit+0x4b8>)
 80065ca:	675a      	str	r2, [r3, #116]	@ 0x74
 80065cc:	4a59      	ldr	r2, [pc, #356]	@ (8006734 <HAL_UART_MspInit+0x4b8>)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80065d2:	2200      	movs	r2, #0
 80065d4:	2105      	movs	r1, #5
 80065d6:	2026      	movs	r0, #38	@ 0x26
 80065d8:	f000 fd02 	bl	8006fe0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80065dc:	2026      	movs	r0, #38	@ 0x26
 80065de:	f000 fd1b 	bl	8007018 <HAL_NVIC_EnableIRQ>
}
 80065e2:	e12d      	b.n	8006840 <HAL_UART_MspInit+0x5c4>
  else if(huart->Instance==USART3)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a54      	ldr	r2, [pc, #336]	@ (800673c <HAL_UART_MspInit+0x4c0>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	f040 80b0 	bne.w	8006750 <HAL_UART_MspInit+0x4d4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80065f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80065f4:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80065f6:	2300      	movs	r3, #0
 80065f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80065fc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006600:	4618      	mov	r0, r3
 8006602:	f002 fe03 	bl	800920c <HAL_RCCEx_PeriphCLKConfig>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d001      	beq.n	8006610 <HAL_UART_MspInit+0x394>
      Error_Handler();
 800660c:	f7ff fb4c 	bl	8005ca8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006610:	4b46      	ldr	r3, [pc, #280]	@ (800672c <HAL_UART_MspInit+0x4b0>)
 8006612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006614:	4a45      	ldr	r2, [pc, #276]	@ (800672c <HAL_UART_MspInit+0x4b0>)
 8006616:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800661a:	6413      	str	r3, [r2, #64]	@ 0x40
 800661c:	4b43      	ldr	r3, [pc, #268]	@ (800672c <HAL_UART_MspInit+0x4b0>)
 800661e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006620:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006624:	61bb      	str	r3, [r7, #24]
 8006626:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006628:	4b40      	ldr	r3, [pc, #256]	@ (800672c <HAL_UART_MspInit+0x4b0>)
 800662a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800662c:	4a3f      	ldr	r2, [pc, #252]	@ (800672c <HAL_UART_MspInit+0x4b0>)
 800662e:	f043 0308 	orr.w	r3, r3, #8
 8006632:	6313      	str	r3, [r2, #48]	@ 0x30
 8006634:	4b3d      	ldr	r3, [pc, #244]	@ (800672c <HAL_UART_MspInit+0x4b0>)
 8006636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006638:	f003 0308 	and.w	r3, r3, #8
 800663c:	617b      	str	r3, [r7, #20]
 800663e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8006640:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006644:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006648:	2302      	movs	r3, #2
 800664a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800664e:	2301      	movs	r3, #1
 8006650:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006654:	2303      	movs	r3, #3
 8006656:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800665a:	2307      	movs	r3, #7
 800665c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006660:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8006664:	4619      	mov	r1, r3
 8006666:	4832      	ldr	r0, [pc, #200]	@ (8006730 <HAL_UART_MspInit+0x4b4>)
 8006668:	f001 f8ee 	bl	8007848 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800666c:	4b34      	ldr	r3, [pc, #208]	@ (8006740 <HAL_UART_MspInit+0x4c4>)
 800666e:	4a35      	ldr	r2, [pc, #212]	@ (8006744 <HAL_UART_MspInit+0x4c8>)
 8006670:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8006672:	4b33      	ldr	r3, [pc, #204]	@ (8006740 <HAL_UART_MspInit+0x4c4>)
 8006674:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006678:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800667a:	4b31      	ldr	r3, [pc, #196]	@ (8006740 <HAL_UART_MspInit+0x4c4>)
 800667c:	2200      	movs	r2, #0
 800667e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006680:	4b2f      	ldr	r3, [pc, #188]	@ (8006740 <HAL_UART_MspInit+0x4c4>)
 8006682:	2200      	movs	r2, #0
 8006684:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006686:	4b2e      	ldr	r3, [pc, #184]	@ (8006740 <HAL_UART_MspInit+0x4c4>)
 8006688:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800668c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800668e:	4b2c      	ldr	r3, [pc, #176]	@ (8006740 <HAL_UART_MspInit+0x4c4>)
 8006690:	2200      	movs	r2, #0
 8006692:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006694:	4b2a      	ldr	r3, [pc, #168]	@ (8006740 <HAL_UART_MspInit+0x4c4>)
 8006696:	2200      	movs	r2, #0
 8006698:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800669a:	4b29      	ldr	r3, [pc, #164]	@ (8006740 <HAL_UART_MspInit+0x4c4>)
 800669c:	2200      	movs	r2, #0
 800669e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80066a0:	4b27      	ldr	r3, [pc, #156]	@ (8006740 <HAL_UART_MspInit+0x4c4>)
 80066a2:	2200      	movs	r2, #0
 80066a4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80066a6:	4b26      	ldr	r3, [pc, #152]	@ (8006740 <HAL_UART_MspInit+0x4c4>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80066ac:	4824      	ldr	r0, [pc, #144]	@ (8006740 <HAL_UART_MspInit+0x4c4>)
 80066ae:	f000 fcc1 	bl	8007034 <HAL_DMA_Init>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <HAL_UART_MspInit+0x440>
      Error_Handler();
 80066b8:	f7ff faf6 	bl	8005ca8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a20      	ldr	r2, [pc, #128]	@ (8006740 <HAL_UART_MspInit+0x4c4>)
 80066c0:	675a      	str	r2, [r3, #116]	@ 0x74
 80066c2:	4a1f      	ldr	r2, [pc, #124]	@ (8006740 <HAL_UART_MspInit+0x4c4>)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80066c8:	4b1f      	ldr	r3, [pc, #124]	@ (8006748 <HAL_UART_MspInit+0x4cc>)
 80066ca:	4a20      	ldr	r2, [pc, #128]	@ (800674c <HAL_UART_MspInit+0x4d0>)
 80066cc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80066ce:	4b1e      	ldr	r3, [pc, #120]	@ (8006748 <HAL_UART_MspInit+0x4cc>)
 80066d0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80066d4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80066d6:	4b1c      	ldr	r3, [pc, #112]	@ (8006748 <HAL_UART_MspInit+0x4cc>)
 80066d8:	2240      	movs	r2, #64	@ 0x40
 80066da:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80066dc:	4b1a      	ldr	r3, [pc, #104]	@ (8006748 <HAL_UART_MspInit+0x4cc>)
 80066de:	2200      	movs	r2, #0
 80066e0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80066e2:	4b19      	ldr	r3, [pc, #100]	@ (8006748 <HAL_UART_MspInit+0x4cc>)
 80066e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80066e8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80066ea:	4b17      	ldr	r3, [pc, #92]	@ (8006748 <HAL_UART_MspInit+0x4cc>)
 80066ec:	2200      	movs	r2, #0
 80066ee:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80066f0:	4b15      	ldr	r3, [pc, #84]	@ (8006748 <HAL_UART_MspInit+0x4cc>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80066f6:	4b14      	ldr	r3, [pc, #80]	@ (8006748 <HAL_UART_MspInit+0x4cc>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80066fc:	4b12      	ldr	r3, [pc, #72]	@ (8006748 <HAL_UART_MspInit+0x4cc>)
 80066fe:	2200      	movs	r2, #0
 8006700:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006702:	4b11      	ldr	r3, [pc, #68]	@ (8006748 <HAL_UART_MspInit+0x4cc>)
 8006704:	2200      	movs	r2, #0
 8006706:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006708:	480f      	ldr	r0, [pc, #60]	@ (8006748 <HAL_UART_MspInit+0x4cc>)
 800670a:	f000 fc93 	bl	8007034 <HAL_DMA_Init>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d001      	beq.n	8006718 <HAL_UART_MspInit+0x49c>
      Error_Handler();
 8006714:	f7ff fac8 	bl	8005ca8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a0b      	ldr	r2, [pc, #44]	@ (8006748 <HAL_UART_MspInit+0x4cc>)
 800671c:	671a      	str	r2, [r3, #112]	@ 0x70
 800671e:	4a0a      	ldr	r2, [pc, #40]	@ (8006748 <HAL_UART_MspInit+0x4cc>)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8006724:	e08c      	b.n	8006840 <HAL_UART_MspInit+0x5c4>
 8006726:	bf00      	nop
 8006728:	40004400 	.word	0x40004400
 800672c:	40023800 	.word	0x40023800
 8006730:	40020c00 	.word	0x40020c00
 8006734:	200051e4 	.word	0x200051e4
 8006738:	40026088 	.word	0x40026088
 800673c:	40004800 	.word	0x40004800
 8006740:	20005244 	.word	0x20005244
 8006744:	40026028 	.word	0x40026028
 8006748:	200052a4 	.word	0x200052a4
 800674c:	40026058 	.word	0x40026058
  else if(huart->Instance==USART6)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a3c      	ldr	r2, [pc, #240]	@ (8006848 <HAL_UART_MspInit+0x5cc>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d172      	bne.n	8006840 <HAL_UART_MspInit+0x5c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800675a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800675e:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8006760:	2300      	movs	r3, #0
 8006762:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006766:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800676a:	4618      	mov	r0, r3
 800676c:	f002 fd4e 	bl	800920c <HAL_RCCEx_PeriphCLKConfig>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <HAL_UART_MspInit+0x4fe>
      Error_Handler();
 8006776:	f7ff fa97 	bl	8005ca8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800677a:	4b34      	ldr	r3, [pc, #208]	@ (800684c <HAL_UART_MspInit+0x5d0>)
 800677c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800677e:	4a33      	ldr	r2, [pc, #204]	@ (800684c <HAL_UART_MspInit+0x5d0>)
 8006780:	f043 0320 	orr.w	r3, r3, #32
 8006784:	6453      	str	r3, [r2, #68]	@ 0x44
 8006786:	4b31      	ldr	r3, [pc, #196]	@ (800684c <HAL_UART_MspInit+0x5d0>)
 8006788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800678a:	f003 0320 	and.w	r3, r3, #32
 800678e:	613b      	str	r3, [r7, #16]
 8006790:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006792:	4b2e      	ldr	r3, [pc, #184]	@ (800684c <HAL_UART_MspInit+0x5d0>)
 8006794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006796:	4a2d      	ldr	r2, [pc, #180]	@ (800684c <HAL_UART_MspInit+0x5d0>)
 8006798:	f043 0304 	orr.w	r3, r3, #4
 800679c:	6313      	str	r3, [r2, #48]	@ 0x30
 800679e:	4b2b      	ldr	r3, [pc, #172]	@ (800684c <HAL_UART_MspInit+0x5d0>)
 80067a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a2:	f003 0304 	and.w	r3, r3, #4
 80067a6:	60fb      	str	r3, [r7, #12]
 80067a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80067aa:	23c0      	movs	r3, #192	@ 0xc0
 80067ac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067b0:	2302      	movs	r3, #2
 80067b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067b6:	2300      	movs	r3, #0
 80067b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067bc:	2303      	movs	r3, #3
 80067be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80067c2:	2308      	movs	r3, #8
 80067c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80067c8:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80067cc:	4619      	mov	r1, r3
 80067ce:	4820      	ldr	r0, [pc, #128]	@ (8006850 <HAL_UART_MspInit+0x5d4>)
 80067d0:	f001 f83a 	bl	8007848 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80067d4:	4b1f      	ldr	r3, [pc, #124]	@ (8006854 <HAL_UART_MspInit+0x5d8>)
 80067d6:	4a20      	ldr	r2, [pc, #128]	@ (8006858 <HAL_UART_MspInit+0x5dc>)
 80067d8:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80067da:	4b1e      	ldr	r3, [pc, #120]	@ (8006854 <HAL_UART_MspInit+0x5d8>)
 80067dc:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80067e0:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80067e2:	4b1c      	ldr	r3, [pc, #112]	@ (8006854 <HAL_UART_MspInit+0x5d8>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80067e8:	4b1a      	ldr	r3, [pc, #104]	@ (8006854 <HAL_UART_MspInit+0x5d8>)
 80067ea:	2200      	movs	r2, #0
 80067ec:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80067ee:	4b19      	ldr	r3, [pc, #100]	@ (8006854 <HAL_UART_MspInit+0x5d8>)
 80067f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80067f4:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80067f6:	4b17      	ldr	r3, [pc, #92]	@ (8006854 <HAL_UART_MspInit+0x5d8>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80067fc:	4b15      	ldr	r3, [pc, #84]	@ (8006854 <HAL_UART_MspInit+0x5d8>)
 80067fe:	2200      	movs	r2, #0
 8006800:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8006802:	4b14      	ldr	r3, [pc, #80]	@ (8006854 <HAL_UART_MspInit+0x5d8>)
 8006804:	2200      	movs	r2, #0
 8006806:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006808:	4b12      	ldr	r3, [pc, #72]	@ (8006854 <HAL_UART_MspInit+0x5d8>)
 800680a:	2200      	movs	r2, #0
 800680c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800680e:	4b11      	ldr	r3, [pc, #68]	@ (8006854 <HAL_UART_MspInit+0x5d8>)
 8006810:	2200      	movs	r2, #0
 8006812:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8006814:	480f      	ldr	r0, [pc, #60]	@ (8006854 <HAL_UART_MspInit+0x5d8>)
 8006816:	f000 fc0d 	bl	8007034 <HAL_DMA_Init>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d001      	beq.n	8006824 <HAL_UART_MspInit+0x5a8>
      Error_Handler();
 8006820:	f7ff fa42 	bl	8005ca8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a0b      	ldr	r2, [pc, #44]	@ (8006854 <HAL_UART_MspInit+0x5d8>)
 8006828:	675a      	str	r2, [r3, #116]	@ 0x74
 800682a:	4a0a      	ldr	r2, [pc, #40]	@ (8006854 <HAL_UART_MspInit+0x5d8>)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8006830:	2200      	movs	r2, #0
 8006832:	2105      	movs	r1, #5
 8006834:	2047      	movs	r0, #71	@ 0x47
 8006836:	f000 fbd3 	bl	8006fe0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800683a:	2047      	movs	r0, #71	@ 0x47
 800683c:	f000 fbec 	bl	8007018 <HAL_NVIC_EnableIRQ>
}
 8006840:	bf00      	nop
 8006842:	37d0      	adds	r7, #208	@ 0xd0
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	40011400 	.word	0x40011400
 800684c:	40023800 	.word	0x40023800
 8006850:	40020800 	.word	0x40020800
 8006854:	20005304 	.word	0x20005304
 8006858:	40026428 	.word	0x40026428

0800685c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b0ac      	sub	sp, #176	@ 0xb0
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006864:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8006868:	2200      	movs	r2, #0
 800686a:	601a      	str	r2, [r3, #0]
 800686c:	605a      	str	r2, [r3, #4]
 800686e:	609a      	str	r2, [r3, #8]
 8006870:	60da      	str	r2, [r3, #12]
 8006872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006874:	f107 0318 	add.w	r3, r7, #24
 8006878:	2284      	movs	r2, #132	@ 0x84
 800687a:	2100      	movs	r1, #0
 800687c:	4618      	mov	r0, r3
 800687e:	f00f fc92 	bl	80161a6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800688a:	d159      	bne.n	8006940 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800688c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006890:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8006892:	2300      	movs	r3, #0
 8006894:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006898:	f107 0318 	add.w	r3, r7, #24
 800689c:	4618      	mov	r0, r3
 800689e:	f002 fcb5 	bl	800920c <HAL_RCCEx_PeriphCLKConfig>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80068a8:	f7ff f9fe 	bl	8005ca8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068ac:	4b26      	ldr	r3, [pc, #152]	@ (8006948 <HAL_PCD_MspInit+0xec>)
 80068ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068b0:	4a25      	ldr	r2, [pc, #148]	@ (8006948 <HAL_PCD_MspInit+0xec>)
 80068b2:	f043 0301 	orr.w	r3, r3, #1
 80068b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80068b8:	4b23      	ldr	r3, [pc, #140]	@ (8006948 <HAL_PCD_MspInit+0xec>)
 80068ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	617b      	str	r3, [r7, #20]
 80068c2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80068c4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80068c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068cc:	2302      	movs	r3, #2
 80068ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068d2:	2300      	movs	r3, #0
 80068d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068d8:	2303      	movs	r3, #3
 80068da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80068de:	230a      	movs	r3, #10
 80068e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068e4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80068e8:	4619      	mov	r1, r3
 80068ea:	4818      	ldr	r0, [pc, #96]	@ (800694c <HAL_PCD_MspInit+0xf0>)
 80068ec:	f000 ffac 	bl	8007848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80068f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80068f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80068f8:	2300      	movs	r3, #0
 80068fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068fe:	2300      	movs	r3, #0
 8006900:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8006904:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8006908:	4619      	mov	r1, r3
 800690a:	4810      	ldr	r0, [pc, #64]	@ (800694c <HAL_PCD_MspInit+0xf0>)
 800690c:	f000 ff9c 	bl	8007848 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006910:	4b0d      	ldr	r3, [pc, #52]	@ (8006948 <HAL_PCD_MspInit+0xec>)
 8006912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006914:	4a0c      	ldr	r2, [pc, #48]	@ (8006948 <HAL_PCD_MspInit+0xec>)
 8006916:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800691a:	6353      	str	r3, [r2, #52]	@ 0x34
 800691c:	4b0a      	ldr	r3, [pc, #40]	@ (8006948 <HAL_PCD_MspInit+0xec>)
 800691e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006924:	613b      	str	r3, [r7, #16]
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	4b07      	ldr	r3, [pc, #28]	@ (8006948 <HAL_PCD_MspInit+0xec>)
 800692a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800692c:	4a06      	ldr	r2, [pc, #24]	@ (8006948 <HAL_PCD_MspInit+0xec>)
 800692e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006932:	6453      	str	r3, [r2, #68]	@ 0x44
 8006934:	4b04      	ldr	r3, [pc, #16]	@ (8006948 <HAL_PCD_MspInit+0xec>)
 8006936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006938:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800693c:	60fb      	str	r3, [r7, #12]
 800693e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8006940:	bf00      	nop
 8006942:	37b0      	adds	r7, #176	@ 0xb0
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	40023800 	.word	0x40023800
 800694c:	40020000 	.word	0x40020000

08006950 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b08e      	sub	sp, #56	@ 0x38
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8006958:	2300      	movs	r3, #0
 800695a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800695c:	2300      	movs	r3, #0
 800695e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006960:	4b33      	ldr	r3, [pc, #204]	@ (8006a30 <HAL_InitTick+0xe0>)
 8006962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006964:	4a32      	ldr	r2, [pc, #200]	@ (8006a30 <HAL_InitTick+0xe0>)
 8006966:	f043 0310 	orr.w	r3, r3, #16
 800696a:	6413      	str	r3, [r2, #64]	@ 0x40
 800696c:	4b30      	ldr	r3, [pc, #192]	@ (8006a30 <HAL_InitTick+0xe0>)
 800696e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006970:	f003 0310 	and.w	r3, r3, #16
 8006974:	60fb      	str	r3, [r7, #12]
 8006976:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006978:	f107 0210 	add.w	r2, r7, #16
 800697c:	f107 0314 	add.w	r3, r7, #20
 8006980:	4611      	mov	r1, r2
 8006982:	4618      	mov	r0, r3
 8006984:	f002 fc10 	bl	80091a8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800698c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800698e:	2b00      	cmp	r3, #0
 8006990:	d103      	bne.n	800699a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006992:	f002 fbe1 	bl	8009158 <HAL_RCC_GetPCLK1Freq>
 8006996:	6378      	str	r0, [r7, #52]	@ 0x34
 8006998:	e004      	b.n	80069a4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800699a:	f002 fbdd 	bl	8009158 <HAL_RCC_GetPCLK1Freq>
 800699e:	4603      	mov	r3, r0
 80069a0:	005b      	lsls	r3, r3, #1
 80069a2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80069a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069a6:	4a23      	ldr	r2, [pc, #140]	@ (8006a34 <HAL_InitTick+0xe4>)
 80069a8:	fba2 2303 	umull	r2, r3, r2, r3
 80069ac:	0c9b      	lsrs	r3, r3, #18
 80069ae:	3b01      	subs	r3, #1
 80069b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80069b2:	4b21      	ldr	r3, [pc, #132]	@ (8006a38 <HAL_InitTick+0xe8>)
 80069b4:	4a21      	ldr	r2, [pc, #132]	@ (8006a3c <HAL_InitTick+0xec>)
 80069b6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80069b8:	4b1f      	ldr	r3, [pc, #124]	@ (8006a38 <HAL_InitTick+0xe8>)
 80069ba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80069be:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80069c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006a38 <HAL_InitTick+0xe8>)
 80069c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80069c6:	4b1c      	ldr	r3, [pc, #112]	@ (8006a38 <HAL_InitTick+0xe8>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069cc:	4b1a      	ldr	r3, [pc, #104]	@ (8006a38 <HAL_InitTick+0xe8>)
 80069ce:	2200      	movs	r2, #0
 80069d0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80069d2:	4b19      	ldr	r3, [pc, #100]	@ (8006a38 <HAL_InitTick+0xe8>)
 80069d4:	2200      	movs	r2, #0
 80069d6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80069d8:	4817      	ldr	r0, [pc, #92]	@ (8006a38 <HAL_InitTick+0xe8>)
 80069da:	f003 fdd1 	bl	800a580 <HAL_TIM_Base_Init>
 80069de:	4603      	mov	r3, r0
 80069e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80069e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d11b      	bne.n	8006a24 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80069ec:	4812      	ldr	r0, [pc, #72]	@ (8006a38 <HAL_InitTick+0xe8>)
 80069ee:	f003 feb7 	bl	800a760 <HAL_TIM_Base_Start_IT>
 80069f2:	4603      	mov	r3, r0
 80069f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80069f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d111      	bne.n	8006a24 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006a00:	2036      	movs	r0, #54	@ 0x36
 8006a02:	f000 fb09 	bl	8007018 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2b0f      	cmp	r3, #15
 8006a0a:	d808      	bhi.n	8006a1e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	6879      	ldr	r1, [r7, #4]
 8006a10:	2036      	movs	r0, #54	@ 0x36
 8006a12:	f000 fae5 	bl	8006fe0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006a16:	4a0a      	ldr	r2, [pc, #40]	@ (8006a40 <HAL_InitTick+0xf0>)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6013      	str	r3, [r2, #0]
 8006a1c:	e002      	b.n	8006a24 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8006a24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3738      	adds	r7, #56	@ 0x38
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	40023800 	.word	0x40023800
 8006a34:	431bde83 	.word	0x431bde83
 8006a38:	20005b28 	.word	0x20005b28
 8006a3c:	40001000 	.word	0x40001000
 8006a40:	20000058 	.word	0x20000058

08006a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006a44:	b480      	push	{r7}
 8006a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006a48:	bf00      	nop
 8006a4a:	e7fd      	b.n	8006a48 <NMI_Handler+0x4>

08006a4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006a50:	bf00      	nop
 8006a52:	e7fd      	b.n	8006a50 <HardFault_Handler+0x4>

08006a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006a54:	b480      	push	{r7}
 8006a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006a58:	bf00      	nop
 8006a5a:	e7fd      	b.n	8006a58 <MemManage_Handler+0x4>

08006a5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006a60:	bf00      	nop
 8006a62:	e7fd      	b.n	8006a60 <BusFault_Handler+0x4>

08006a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006a64:	b480      	push	{r7}
 8006a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006a68:	bf00      	nop
 8006a6a:	e7fd      	b.n	8006a68 <UsageFault_Handler+0x4>

08006a6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006a70:	bf00      	nop
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
	...

08006a7c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8006a80:	4802      	ldr	r0, [pc, #8]	@ (8006a8c <DMA1_Stream0_IRQHandler+0x10>)
 8006a82:	f000 fc77 	bl	8007374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8006a86:	bf00      	nop
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	20005184 	.word	0x20005184

08006a90 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8006a94:	4802      	ldr	r0, [pc, #8]	@ (8006aa0 <DMA1_Stream1_IRQHandler+0x10>)
 8006a96:	f000 fc6d 	bl	8007374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8006a9a:	bf00      	nop
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	20005244 	.word	0x20005244

08006aa4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8006aa8:	4802      	ldr	r0, [pc, #8]	@ (8006ab4 <DMA1_Stream2_IRQHandler+0x10>)
 8006aaa:	f000 fc63 	bl	8007374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8006aae:	bf00      	nop
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	20005124 	.word	0x20005124

08006ab8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8006abc:	4802      	ldr	r0, [pc, #8]	@ (8006ac8 <DMA1_Stream3_IRQHandler+0x10>)
 8006abe:	f000 fc59 	bl	8007374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8006ac2:	bf00      	nop
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	200052a4 	.word	0x200052a4

08006acc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006ad0:	4802      	ldr	r0, [pc, #8]	@ (8006adc <DMA1_Stream5_IRQHandler+0x10>)
 8006ad2:	f000 fc4f 	bl	8007374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006ad6:	bf00      	nop
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	200051e4 	.word	0x200051e4

08006ae0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006ae4:	4802      	ldr	r0, [pc, #8]	@ (8006af0 <TIM1_CC_IRQHandler+0x10>)
 8006ae6:	f004 fb4f 	bl	800b188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8006aea:	bf00      	nop
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	20004c1c 	.word	0x20004c1c

08006af4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006af8:	4802      	ldr	r0, [pc, #8]	@ (8006b04 <TIM2_IRQHandler+0x10>)
 8006afa:	f004 fb45 	bl	800b188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006afe:	bf00      	nop
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	20004c68 	.word	0x20004c68

08006b08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006b0c:	4802      	ldr	r0, [pc, #8]	@ (8006b18 <TIM3_IRQHandler+0x10>)
 8006b0e:	f004 fb3b 	bl	800b188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006b12:	bf00      	nop
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	20004cb4 	.word	0x20004cb4

08006b1c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006b20:	4802      	ldr	r0, [pc, #8]	@ (8006b2c <TIM4_IRQHandler+0x10>)
 8006b22:	f004 fb31 	bl	800b188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006b26:	bf00      	nop
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	20004d00 	.word	0x20004d00

08006b30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006b34:	4802      	ldr	r0, [pc, #8]	@ (8006b40 <USART2_IRQHandler+0x10>)
 8006b36:	f005 fcb7 	bl	800c4a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006b3a:	bf00      	nop
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	20004f8c 	.word	0x20004f8c

08006b44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8006b48:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8006b4c:	f001 f85a 	bl	8007c04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006b50:	bf00      	nop
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8006b58:	4802      	ldr	r0, [pc, #8]	@ (8006b64 <TIM5_IRQHandler+0x10>)
 8006b5a:	f004 fb15 	bl	800b188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8006b5e:	bf00      	nop
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	20004d4c 	.word	0x20004d4c

08006b68 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8006b6c:	4802      	ldr	r0, [pc, #8]	@ (8006b78 <UART4_IRQHandler+0x10>)
 8006b6e:	f005 fc9b 	bl	800c4a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8006b72:	bf00      	nop
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	20004e7c 	.word	0x20004e7c

08006b7c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8006b80:	4802      	ldr	r0, [pc, #8]	@ (8006b8c <UART5_IRQHandler+0x10>)
 8006b82:	f005 fc91 	bl	800c4a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8006b86:	bf00      	nop
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	20004f04 	.word	0x20004f04

08006b90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006b94:	4802      	ldr	r0, [pc, #8]	@ (8006ba0 <TIM6_DAC_IRQHandler+0x10>)
 8006b96:	f004 faf7 	bl	800b188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006b9a:	bf00      	nop
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	20005b28 	.word	0x20005b28

08006ba4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8006ba8:	4802      	ldr	r0, [pc, #8]	@ (8006bb4 <DMA2_Stream1_IRQHandler+0x10>)
 8006baa:	f000 fbe3 	bl	8007374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8006bae:	bf00      	nop
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	20005304 	.word	0x20005304

08006bb8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8006bbc:	4802      	ldr	r0, [pc, #8]	@ (8006bc8 <USART6_IRQHandler+0x10>)
 8006bbe:	f005 fc73 	bl	800c4a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8006bc2:	bf00      	nop
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	2000509c 	.word	0x2000509c

08006bcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	af00      	add	r7, sp, #0
  return 1;
 8006bd0:	2301      	movs	r3, #1
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <_kill>:

int _kill(int pid, int sig)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006be6:	f00f fb85 	bl	80162f4 <__errno>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2216      	movs	r2, #22
 8006bee:	601a      	str	r2, [r3, #0]
  return -1;
 8006bf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3708      	adds	r7, #8
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <_exit>:

void _exit (int status)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006c04:	f04f 31ff 	mov.w	r1, #4294967295
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f7ff ffe7 	bl	8006bdc <_kill>
  while (1) {}    /* Make sure we hang here */
 8006c0e:	bf00      	nop
 8006c10:	e7fd      	b.n	8006c0e <_exit+0x12>

08006c12 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b086      	sub	sp, #24
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	60f8      	str	r0, [r7, #12]
 8006c1a:	60b9      	str	r1, [r7, #8]
 8006c1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c1e:	2300      	movs	r3, #0
 8006c20:	617b      	str	r3, [r7, #20]
 8006c22:	e00a      	b.n	8006c3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006c24:	f3af 8000 	nop.w
 8006c28:	4601      	mov	r1, r0
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	1c5a      	adds	r2, r3, #1
 8006c2e:	60ba      	str	r2, [r7, #8]
 8006c30:	b2ca      	uxtb	r2, r1
 8006c32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	3301      	adds	r3, #1
 8006c38:	617b      	str	r3, [r7, #20]
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	dbf0      	blt.n	8006c24 <_read+0x12>
  }

  return len;
 8006c42:	687b      	ldr	r3, [r7, #4]
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3718      	adds	r7, #24
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c58:	2300      	movs	r3, #0
 8006c5a:	617b      	str	r3, [r7, #20]
 8006c5c:	e009      	b.n	8006c72 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	1c5a      	adds	r2, r3, #1
 8006c62:	60ba      	str	r2, [r7, #8]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	617b      	str	r3, [r7, #20]
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	dbf1      	blt.n	8006c5e <_write+0x12>
  }
  return len;
 8006c7a:	687b      	ldr	r3, [r7, #4]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3718      	adds	r7, #24
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <_close>:

int _close(int file)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006c8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006cac:	605a      	str	r2, [r3, #4]
  return 0;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <_isatty>:

int _isatty(int file)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006cc4:	2301      	movs	r3, #1
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b085      	sub	sp, #20
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	60f8      	str	r0, [r7, #12]
 8006cda:	60b9      	str	r1, [r7, #8]
 8006cdc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b086      	sub	sp, #24
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006cf4:	4a14      	ldr	r2, [pc, #80]	@ (8006d48 <_sbrk+0x5c>)
 8006cf6:	4b15      	ldr	r3, [pc, #84]	@ (8006d4c <_sbrk+0x60>)
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006d00:	4b13      	ldr	r3, [pc, #76]	@ (8006d50 <_sbrk+0x64>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d102      	bne.n	8006d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006d08:	4b11      	ldr	r3, [pc, #68]	@ (8006d50 <_sbrk+0x64>)
 8006d0a:	4a12      	ldr	r2, [pc, #72]	@ (8006d54 <_sbrk+0x68>)
 8006d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006d0e:	4b10      	ldr	r3, [pc, #64]	@ (8006d50 <_sbrk+0x64>)
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4413      	add	r3, r2
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d207      	bcs.n	8006d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006d1c:	f00f faea 	bl	80162f4 <__errno>
 8006d20:	4603      	mov	r3, r0
 8006d22:	220c      	movs	r2, #12
 8006d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006d26:	f04f 33ff 	mov.w	r3, #4294967295
 8006d2a:	e009      	b.n	8006d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006d2c:	4b08      	ldr	r3, [pc, #32]	@ (8006d50 <_sbrk+0x64>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006d32:	4b07      	ldr	r3, [pc, #28]	@ (8006d50 <_sbrk+0x64>)
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4413      	add	r3, r2
 8006d3a:	4a05      	ldr	r2, [pc, #20]	@ (8006d50 <_sbrk+0x64>)
 8006d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3718      	adds	r7, #24
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	20050000 	.word	0x20050000
 8006d4c:	00000400 	.word	0x00000400
 8006d50:	20005b74 	.word	0x20005b74
 8006d54:	2000e6c8 	.word	0x2000e6c8

08006d58 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006d5c:	4b06      	ldr	r3, [pc, #24]	@ (8006d78 <SystemInit+0x20>)
 8006d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d62:	4a05      	ldr	r2, [pc, #20]	@ (8006d78 <SystemInit+0x20>)
 8006d64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006d68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006d6c:	bf00      	nop
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	e000ed00 	.word	0xe000ed00

08006d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 8006d7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006db4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006d80:	f7ff ffea 	bl	8006d58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006d84:	480c      	ldr	r0, [pc, #48]	@ (8006db8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006d86:	490d      	ldr	r1, [pc, #52]	@ (8006dbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006d88:	4a0d      	ldr	r2, [pc, #52]	@ (8006dc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006d8c:	e002      	b.n	8006d94 <LoopCopyDataInit>

08006d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006d92:	3304      	adds	r3, #4

08006d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006d98:	d3f9      	bcc.n	8006d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8006dc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006d9c:	4c0a      	ldr	r4, [pc, #40]	@ (8006dc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006da0:	e001      	b.n	8006da6 <LoopFillZerobss>

08006da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006da4:	3204      	adds	r2, #4

08006da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006da8:	d3fb      	bcc.n	8006da2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8006daa:	f00f faa9 	bl	8016300 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006dae:	f7fd ffc7 	bl	8004d40 <main>
  bx  lr    
 8006db2:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 8006db4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8006db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006dbc:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8006dc0:	080190e8 	.word	0x080190e8
  ldr r2, =_sbss
 8006dc4:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8006dc8:	2000e6c4 	.word	0x2000e6c4

08006dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006dcc:	e7fe      	b.n	8006dcc <ADC_IRQHandler>

08006dce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006dd2:	2003      	movs	r0, #3
 8006dd4:	f000 f8f9 	bl	8006fca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006dd8:	200f      	movs	r0, #15
 8006dda:	f7ff fdb9 	bl	8006950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006dde:	f7fe ff69 	bl	8005cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006de8:	b480      	push	{r7}
 8006dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006dec:	4b06      	ldr	r3, [pc, #24]	@ (8006e08 <HAL_IncTick+0x20>)
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	461a      	mov	r2, r3
 8006df2:	4b06      	ldr	r3, [pc, #24]	@ (8006e0c <HAL_IncTick+0x24>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4413      	add	r3, r2
 8006df8:	4a04      	ldr	r2, [pc, #16]	@ (8006e0c <HAL_IncTick+0x24>)
 8006dfa:	6013      	str	r3, [r2, #0]
}
 8006dfc:	bf00      	nop
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	2000005c 	.word	0x2000005c
 8006e0c:	20005b78 	.word	0x20005b78

08006e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006e10:	b480      	push	{r7}
 8006e12:	af00      	add	r7, sp, #0
  return uwTick;
 8006e14:	4b03      	ldr	r3, [pc, #12]	@ (8006e24 <HAL_GetTick+0x14>)
 8006e16:	681b      	ldr	r3, [r3, #0]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	20005b78 	.word	0x20005b78

08006e28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006e30:	f7ff ffee 	bl	8006e10 <HAL_GetTick>
 8006e34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e40:	d005      	beq.n	8006e4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006e42:	4b0a      	ldr	r3, [pc, #40]	@ (8006e6c <HAL_Delay+0x44>)
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	461a      	mov	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006e4e:	bf00      	nop
 8006e50:	f7ff ffde 	bl	8006e10 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d8f7      	bhi.n	8006e50 <HAL_Delay+0x28>
  {
  }
}
 8006e60:	bf00      	nop
 8006e62:	bf00      	nop
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	2000005c 	.word	0x2000005c

08006e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f003 0307 	and.w	r3, r3, #7
 8006e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e80:	4b0b      	ldr	r3, [pc, #44]	@ (8006eb0 <__NVIC_SetPriorityGrouping+0x40>)
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006e98:	4b06      	ldr	r3, [pc, #24]	@ (8006eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e9e:	4a04      	ldr	r2, [pc, #16]	@ (8006eb0 <__NVIC_SetPriorityGrouping+0x40>)
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	60d3      	str	r3, [r2, #12]
}
 8006ea4:	bf00      	nop
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	e000ed00 	.word	0xe000ed00
 8006eb4:	05fa0000 	.word	0x05fa0000

08006eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ebc:	4b04      	ldr	r3, [pc, #16]	@ (8006ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	0a1b      	lsrs	r3, r3, #8
 8006ec2:	f003 0307 	and.w	r3, r3, #7
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr
 8006ed0:	e000ed00 	.word	0xe000ed00

08006ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	4603      	mov	r3, r0
 8006edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	db0b      	blt.n	8006efe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ee6:	79fb      	ldrb	r3, [r7, #7]
 8006ee8:	f003 021f 	and.w	r2, r3, #31
 8006eec:	4907      	ldr	r1, [pc, #28]	@ (8006f0c <__NVIC_EnableIRQ+0x38>)
 8006eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ef2:	095b      	lsrs	r3, r3, #5
 8006ef4:	2001      	movs	r0, #1
 8006ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8006efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006efe:	bf00      	nop
 8006f00:	370c      	adds	r7, #12
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	e000e100 	.word	0xe000e100

08006f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	4603      	mov	r3, r0
 8006f18:	6039      	str	r1, [r7, #0]
 8006f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	db0a      	blt.n	8006f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	b2da      	uxtb	r2, r3
 8006f28:	490c      	ldr	r1, [pc, #48]	@ (8006f5c <__NVIC_SetPriority+0x4c>)
 8006f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f2e:	0112      	lsls	r2, r2, #4
 8006f30:	b2d2      	uxtb	r2, r2
 8006f32:	440b      	add	r3, r1
 8006f34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006f38:	e00a      	b.n	8006f50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	b2da      	uxtb	r2, r3
 8006f3e:	4908      	ldr	r1, [pc, #32]	@ (8006f60 <__NVIC_SetPriority+0x50>)
 8006f40:	79fb      	ldrb	r3, [r7, #7]
 8006f42:	f003 030f 	and.w	r3, r3, #15
 8006f46:	3b04      	subs	r3, #4
 8006f48:	0112      	lsls	r2, r2, #4
 8006f4a:	b2d2      	uxtb	r2, r2
 8006f4c:	440b      	add	r3, r1
 8006f4e:	761a      	strb	r2, [r3, #24]
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr
 8006f5c:	e000e100 	.word	0xe000e100
 8006f60:	e000ed00 	.word	0xe000ed00

08006f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b089      	sub	sp, #36	@ 0x24
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f003 0307 	and.w	r3, r3, #7
 8006f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	f1c3 0307 	rsb	r3, r3, #7
 8006f7e:	2b04      	cmp	r3, #4
 8006f80:	bf28      	it	cs
 8006f82:	2304      	movcs	r3, #4
 8006f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	3304      	adds	r3, #4
 8006f8a:	2b06      	cmp	r3, #6
 8006f8c:	d902      	bls.n	8006f94 <NVIC_EncodePriority+0x30>
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	3b03      	subs	r3, #3
 8006f92:	e000      	b.n	8006f96 <NVIC_EncodePriority+0x32>
 8006f94:	2300      	movs	r3, #0
 8006f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f98:	f04f 32ff 	mov.w	r2, #4294967295
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa2:	43da      	mvns	r2, r3
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	401a      	ands	r2, r3
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006fac:	f04f 31ff 	mov.w	r1, #4294967295
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8006fb6:	43d9      	mvns	r1, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fbc:	4313      	orrs	r3, r2
         );
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3724      	adds	r7, #36	@ 0x24
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b082      	sub	sp, #8
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7ff ff4c 	bl	8006e70 <__NVIC_SetPriorityGrouping>
}
 8006fd8:	bf00      	nop
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
 8006fec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006ff2:	f7ff ff61 	bl	8006eb8 <__NVIC_GetPriorityGrouping>
 8006ff6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	68b9      	ldr	r1, [r7, #8]
 8006ffc:	6978      	ldr	r0, [r7, #20]
 8006ffe:	f7ff ffb1 	bl	8006f64 <NVIC_EncodePriority>
 8007002:	4602      	mov	r2, r0
 8007004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007008:	4611      	mov	r1, r2
 800700a:	4618      	mov	r0, r3
 800700c:	f7ff ff80 	bl	8006f10 <__NVIC_SetPriority>
}
 8007010:	bf00      	nop
 8007012:	3718      	adds	r7, #24
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	4603      	mov	r3, r0
 8007020:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007026:	4618      	mov	r0, r3
 8007028:	f7ff ff54 	bl	8006ed4 <__NVIC_EnableIRQ>
}
 800702c:	bf00      	nop
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007040:	f7ff fee6 	bl	8006e10 <HAL_GetTick>
 8007044:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d101      	bne.n	8007050 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e099      	b.n	8007184 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2202      	movs	r2, #2
 8007054:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f022 0201 	bic.w	r2, r2, #1
 800706e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007070:	e00f      	b.n	8007092 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007072:	f7ff fecd 	bl	8006e10 <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	2b05      	cmp	r3, #5
 800707e:	d908      	bls.n	8007092 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2220      	movs	r2, #32
 8007084:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2203      	movs	r2, #3
 800708a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e078      	b.n	8007184 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1e8      	bne.n	8007072 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	4b38      	ldr	r3, [pc, #224]	@ (800718c <HAL_DMA_Init+0x158>)
 80070ac:	4013      	ands	r3, r2
 80070ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80070be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a1b      	ldr	r3, [r3, #32]
 80070dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e8:	2b04      	cmp	r3, #4
 80070ea:	d107      	bne.n	80070fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070f4:	4313      	orrs	r3, r2
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	f023 0307 	bic.w	r3, r3, #7
 8007112:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007118:	697a      	ldr	r2, [r7, #20]
 800711a:	4313      	orrs	r3, r2
 800711c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007122:	2b04      	cmp	r3, #4
 8007124:	d117      	bne.n	8007156 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	4313      	orrs	r3, r2
 800712e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00e      	beq.n	8007156 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fb09 	bl	8007750 <DMA_CheckFifoParam>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d008      	beq.n	8007156 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2240      	movs	r2, #64	@ 0x40
 8007148:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8007152:	2301      	movs	r3, #1
 8007154:	e016      	b.n	8007184 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fac0 	bl	80076e4 <DMA_CalcBaseAndBitshift>
 8007164:	4603      	mov	r3, r0
 8007166:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800716c:	223f      	movs	r2, #63	@ 0x3f
 800716e:	409a      	lsls	r2, r3
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3718      	adds	r7, #24
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	f010803f 	.word	0xf010803f

08007190 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
 800719c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800719e:	2300      	movs	r3, #0
 80071a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d101      	bne.n	80071b6 <HAL_DMA_Start_IT+0x26>
 80071b2:	2302      	movs	r3, #2
 80071b4:	e048      	b.n	8007248 <HAL_DMA_Start_IT+0xb8>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d137      	bne.n	800723a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2202      	movs	r2, #2
 80071ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	68b9      	ldr	r1, [r7, #8]
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f000 fa52 	bl	8007688 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071e8:	223f      	movs	r2, #63	@ 0x3f
 80071ea:	409a      	lsls	r2, r3
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f042 0216 	orr.w	r2, r2, #22
 80071fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	695a      	ldr	r2, [r3, #20]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800720e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007214:	2b00      	cmp	r3, #0
 8007216:	d007      	beq.n	8007228 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f042 0208 	orr.w	r2, r2, #8
 8007226:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f042 0201 	orr.w	r2, r2, #1
 8007236:	601a      	str	r2, [r3, #0]
 8007238:	e005      	b.n	8007246 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007242:	2302      	movs	r3, #2
 8007244:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007246:	7dfb      	ldrb	r3, [r7, #23]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3718      	adds	r7, #24
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800725c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800725e:	f7ff fdd7 	bl	8006e10 <HAL_GetTick>
 8007262:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b02      	cmp	r3, #2
 800726e:	d008      	beq.n	8007282 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2280      	movs	r2, #128	@ 0x80
 8007274:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e052      	b.n	8007328 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f022 0216 	bic.w	r2, r2, #22
 8007290:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	695a      	ldr	r2, [r3, #20]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80072a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d103      	bne.n	80072b2 <HAL_DMA_Abort+0x62>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d007      	beq.n	80072c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f022 0208 	bic.w	r2, r2, #8
 80072c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f022 0201 	bic.w	r2, r2, #1
 80072d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80072d2:	e013      	b.n	80072fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80072d4:	f7ff fd9c 	bl	8006e10 <HAL_GetTick>
 80072d8:	4602      	mov	r2, r0
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	2b05      	cmp	r3, #5
 80072e0:	d90c      	bls.n	80072fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2220      	movs	r2, #32
 80072e6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2203      	movs	r2, #3
 80072ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80072f8:	2303      	movs	r3, #3
 80072fa:	e015      	b.n	8007328 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1e4      	bne.n	80072d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800730e:	223f      	movs	r2, #63	@ 0x3f
 8007310:	409a      	lsls	r2, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800733e:	b2db      	uxtb	r3, r3
 8007340:	2b02      	cmp	r3, #2
 8007342:	d004      	beq.n	800734e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2280      	movs	r2, #128	@ 0x80
 8007348:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e00c      	b.n	8007368 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2205      	movs	r2, #5
 8007352:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f022 0201 	bic.w	r2, r2, #1
 8007364:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800737c:	2300      	movs	r3, #0
 800737e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8007380:	4b8e      	ldr	r3, [pc, #568]	@ (80075bc <HAL_DMA_IRQHandler+0x248>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a8e      	ldr	r2, [pc, #568]	@ (80075c0 <HAL_DMA_IRQHandler+0x24c>)
 8007386:	fba2 2303 	umull	r2, r3, r2, r3
 800738a:	0a9b      	lsrs	r3, r3, #10
 800738c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007392:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800739e:	2208      	movs	r2, #8
 80073a0:	409a      	lsls	r2, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	4013      	ands	r3, r2
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d01a      	beq.n	80073e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0304 	and.w	r3, r3, #4
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d013      	beq.n	80073e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f022 0204 	bic.w	r2, r2, #4
 80073c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073cc:	2208      	movs	r2, #8
 80073ce:	409a      	lsls	r2, r3
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073d8:	f043 0201 	orr.w	r2, r3, #1
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073e4:	2201      	movs	r2, #1
 80073e6:	409a      	lsls	r2, r3
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	4013      	ands	r3, r2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d012      	beq.n	8007416 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00b      	beq.n	8007416 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007402:	2201      	movs	r2, #1
 8007404:	409a      	lsls	r2, r3
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800740e:	f043 0202 	orr.w	r2, r3, #2
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800741a:	2204      	movs	r2, #4
 800741c:	409a      	lsls	r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	4013      	ands	r3, r2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d012      	beq.n	800744c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0302 	and.w	r3, r3, #2
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00b      	beq.n	800744c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007438:	2204      	movs	r2, #4
 800743a:	409a      	lsls	r2, r3
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007444:	f043 0204 	orr.w	r2, r3, #4
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007450:	2210      	movs	r2, #16
 8007452:	409a      	lsls	r2, r3
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	4013      	ands	r3, r2
 8007458:	2b00      	cmp	r3, #0
 800745a:	d043      	beq.n	80074e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 0308 	and.w	r3, r3, #8
 8007466:	2b00      	cmp	r3, #0
 8007468:	d03c      	beq.n	80074e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800746e:	2210      	movs	r2, #16
 8007470:	409a      	lsls	r2, r3
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d018      	beq.n	80074b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800748e:	2b00      	cmp	r3, #0
 8007490:	d108      	bne.n	80074a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007496:	2b00      	cmp	r3, #0
 8007498:	d024      	beq.n	80074e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	4798      	blx	r3
 80074a2:	e01f      	b.n	80074e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d01b      	beq.n	80074e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	4798      	blx	r3
 80074b4:	e016      	b.n	80074e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d107      	bne.n	80074d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f022 0208 	bic.w	r2, r2, #8
 80074d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d003      	beq.n	80074e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074e8:	2220      	movs	r2, #32
 80074ea:	409a      	lsls	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	4013      	ands	r3, r2
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f000 808f 	beq.w	8007614 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0310 	and.w	r3, r3, #16
 8007500:	2b00      	cmp	r3, #0
 8007502:	f000 8087 	beq.w	8007614 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800750a:	2220      	movs	r2, #32
 800750c:	409a      	lsls	r2, r3
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007518:	b2db      	uxtb	r3, r3
 800751a:	2b05      	cmp	r3, #5
 800751c:	d136      	bne.n	800758c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f022 0216 	bic.w	r2, r2, #22
 800752c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	695a      	ldr	r2, [r3, #20]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800753c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007542:	2b00      	cmp	r3, #0
 8007544:	d103      	bne.n	800754e <HAL_DMA_IRQHandler+0x1da>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800754a:	2b00      	cmp	r3, #0
 800754c:	d007      	beq.n	800755e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f022 0208 	bic.w	r2, r2, #8
 800755c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007562:	223f      	movs	r2, #63	@ 0x3f
 8007564:	409a      	lsls	r2, r3
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800757e:	2b00      	cmp	r3, #0
 8007580:	d07e      	beq.n	8007680 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	4798      	blx	r3
        }
        return;
 800758a:	e079      	b.n	8007680 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d01d      	beq.n	80075d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10d      	bne.n	80075c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d031      	beq.n	8007614 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	4798      	blx	r3
 80075b8:	e02c      	b.n	8007614 <HAL_DMA_IRQHandler+0x2a0>
 80075ba:	bf00      	nop
 80075bc:	20000054 	.word	0x20000054
 80075c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d023      	beq.n	8007614 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	4798      	blx	r3
 80075d4:	e01e      	b.n	8007614 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d10f      	bne.n	8007604 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f022 0210 	bic.w	r2, r2, #16
 80075f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007608:	2b00      	cmp	r3, #0
 800760a:	d003      	beq.n	8007614 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007618:	2b00      	cmp	r3, #0
 800761a:	d032      	beq.n	8007682 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007620:	f003 0301 	and.w	r3, r3, #1
 8007624:	2b00      	cmp	r3, #0
 8007626:	d022      	beq.n	800766e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2205      	movs	r2, #5
 800762c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f022 0201 	bic.w	r2, r2, #1
 800763e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	3301      	adds	r3, #1
 8007644:	60bb      	str	r3, [r7, #8]
 8007646:	697a      	ldr	r2, [r7, #20]
 8007648:	429a      	cmp	r2, r3
 800764a:	d307      	bcc.n	800765c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0301 	and.w	r3, r3, #1
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1f2      	bne.n	8007640 <HAL_DMA_IRQHandler+0x2cc>
 800765a:	e000      	b.n	800765e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800765c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007672:	2b00      	cmp	r3, #0
 8007674:	d005      	beq.n	8007682 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	4798      	blx	r3
 800767e:	e000      	b.n	8007682 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007680:	bf00      	nop
    }
  }
}
 8007682:	3718      	adds	r7, #24
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	607a      	str	r2, [r7, #4]
 8007694:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80076a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	2b40      	cmp	r3, #64	@ 0x40
 80076b4:	d108      	bne.n	80076c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80076c6:	e007      	b.n	80076d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68ba      	ldr	r2, [r7, #8]
 80076ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	60da      	str	r2, [r3, #12]
}
 80076d8:	bf00      	nop
 80076da:	3714      	adds	r7, #20
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	3b10      	subs	r3, #16
 80076f4:	4a13      	ldr	r2, [pc, #76]	@ (8007744 <DMA_CalcBaseAndBitshift+0x60>)
 80076f6:	fba2 2303 	umull	r2, r3, r2, r3
 80076fa:	091b      	lsrs	r3, r3, #4
 80076fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80076fe:	4a12      	ldr	r2, [pc, #72]	@ (8007748 <DMA_CalcBaseAndBitshift+0x64>)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	4413      	add	r3, r2
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	461a      	mov	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2b03      	cmp	r3, #3
 8007710:	d908      	bls.n	8007724 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	461a      	mov	r2, r3
 8007718:	4b0c      	ldr	r3, [pc, #48]	@ (800774c <DMA_CalcBaseAndBitshift+0x68>)
 800771a:	4013      	ands	r3, r2
 800771c:	1d1a      	adds	r2, r3, #4
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	659a      	str	r2, [r3, #88]	@ 0x58
 8007722:	e006      	b.n	8007732 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	461a      	mov	r2, r3
 800772a:	4b08      	ldr	r3, [pc, #32]	@ (800774c <DMA_CalcBaseAndBitshift+0x68>)
 800772c:	4013      	ands	r3, r2
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007736:	4618      	mov	r0, r3
 8007738:	3714      	adds	r7, #20
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop
 8007744:	aaaaaaab 	.word	0xaaaaaaab
 8007748:	080188d4 	.word	0x080188d4
 800774c:	fffffc00 	.word	0xfffffc00

08007750 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007758:	2300      	movs	r3, #0
 800775a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007760:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d11f      	bne.n	80077aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	2b03      	cmp	r3, #3
 800776e:	d856      	bhi.n	800781e <DMA_CheckFifoParam+0xce>
 8007770:	a201      	add	r2, pc, #4	@ (adr r2, 8007778 <DMA_CheckFifoParam+0x28>)
 8007772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007776:	bf00      	nop
 8007778:	08007789 	.word	0x08007789
 800777c:	0800779b 	.word	0x0800779b
 8007780:	08007789 	.word	0x08007789
 8007784:	0800781f 	.word	0x0800781f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800778c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d046      	beq.n	8007822 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007798:	e043      	b.n	8007822 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800779e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80077a2:	d140      	bne.n	8007826 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077a8:	e03d      	b.n	8007826 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	699b      	ldr	r3, [r3, #24]
 80077ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077b2:	d121      	bne.n	80077f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	2b03      	cmp	r3, #3
 80077b8:	d837      	bhi.n	800782a <DMA_CheckFifoParam+0xda>
 80077ba:	a201      	add	r2, pc, #4	@ (adr r2, 80077c0 <DMA_CheckFifoParam+0x70>)
 80077bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c0:	080077d1 	.word	0x080077d1
 80077c4:	080077d7 	.word	0x080077d7
 80077c8:	080077d1 	.word	0x080077d1
 80077cc:	080077e9 	.word	0x080077e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	73fb      	strb	r3, [r7, #15]
      break;
 80077d4:	e030      	b.n	8007838 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d025      	beq.n	800782e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077e6:	e022      	b.n	800782e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80077f0:	d11f      	bne.n	8007832 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80077f6:	e01c      	b.n	8007832 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d903      	bls.n	8007806 <DMA_CheckFifoParam+0xb6>
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	2b03      	cmp	r3, #3
 8007802:	d003      	beq.n	800780c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007804:	e018      	b.n	8007838 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	73fb      	strb	r3, [r7, #15]
      break;
 800780a:	e015      	b.n	8007838 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007810:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00e      	beq.n	8007836 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	73fb      	strb	r3, [r7, #15]
      break;
 800781c:	e00b      	b.n	8007836 <DMA_CheckFifoParam+0xe6>
      break;
 800781e:	bf00      	nop
 8007820:	e00a      	b.n	8007838 <DMA_CheckFifoParam+0xe8>
      break;
 8007822:	bf00      	nop
 8007824:	e008      	b.n	8007838 <DMA_CheckFifoParam+0xe8>
      break;
 8007826:	bf00      	nop
 8007828:	e006      	b.n	8007838 <DMA_CheckFifoParam+0xe8>
      break;
 800782a:	bf00      	nop
 800782c:	e004      	b.n	8007838 <DMA_CheckFifoParam+0xe8>
      break;
 800782e:	bf00      	nop
 8007830:	e002      	b.n	8007838 <DMA_CheckFifoParam+0xe8>
      break;   
 8007832:	bf00      	nop
 8007834:	e000      	b.n	8007838 <DMA_CheckFifoParam+0xe8>
      break;
 8007836:	bf00      	nop
    }
  } 
  
  return status; 
 8007838:	7bfb      	ldrb	r3, [r7, #15]
}
 800783a:	4618      	mov	r0, r3
 800783c:	3714      	adds	r7, #20
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop

08007848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007848:	b480      	push	{r7}
 800784a:	b089      	sub	sp, #36	@ 0x24
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007852:	2300      	movs	r3, #0
 8007854:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007856:	2300      	movs	r3, #0
 8007858:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800785a:	2300      	movs	r3, #0
 800785c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800785e:	2300      	movs	r3, #0
 8007860:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8007862:	2300      	movs	r3, #0
 8007864:	61fb      	str	r3, [r7, #28]
 8007866:	e175      	b.n	8007b54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007868:	2201      	movs	r2, #1
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	fa02 f303 	lsl.w	r3, r2, r3
 8007870:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	4013      	ands	r3, r2
 800787a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	429a      	cmp	r2, r3
 8007882:	f040 8164 	bne.w	8007b4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	f003 0303 	and.w	r3, r3, #3
 800788e:	2b01      	cmp	r3, #1
 8007890:	d005      	beq.n	800789e <HAL_GPIO_Init+0x56>
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f003 0303 	and.w	r3, r3, #3
 800789a:	2b02      	cmp	r3, #2
 800789c:	d130      	bne.n	8007900 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	005b      	lsls	r3, r3, #1
 80078a8:	2203      	movs	r2, #3
 80078aa:	fa02 f303 	lsl.w	r3, r2, r3
 80078ae:	43db      	mvns	r3, r3
 80078b0:	69ba      	ldr	r2, [r7, #24]
 80078b2:	4013      	ands	r3, r2
 80078b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	68da      	ldr	r2, [r3, #12]
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	005b      	lsls	r3, r3, #1
 80078be:	fa02 f303 	lsl.w	r3, r2, r3
 80078c2:	69ba      	ldr	r2, [r7, #24]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	69ba      	ldr	r2, [r7, #24]
 80078cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80078d4:	2201      	movs	r2, #1
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	fa02 f303 	lsl.w	r3, r2, r3
 80078dc:	43db      	mvns	r3, r3
 80078de:	69ba      	ldr	r2, [r7, #24]
 80078e0:	4013      	ands	r3, r2
 80078e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	091b      	lsrs	r3, r3, #4
 80078ea:	f003 0201 	and.w	r2, r3, #1
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	fa02 f303 	lsl.w	r3, r2, r3
 80078f4:	69ba      	ldr	r2, [r7, #24]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	69ba      	ldr	r2, [r7, #24]
 80078fe:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	f003 0303 	and.w	r3, r3, #3
 8007908:	2b03      	cmp	r3, #3
 800790a:	d017      	beq.n	800793c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	005b      	lsls	r3, r3, #1
 8007916:	2203      	movs	r2, #3
 8007918:	fa02 f303 	lsl.w	r3, r2, r3
 800791c:	43db      	mvns	r3, r3
 800791e:	69ba      	ldr	r2, [r7, #24]
 8007920:	4013      	ands	r3, r2
 8007922:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	689a      	ldr	r2, [r3, #8]
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	005b      	lsls	r3, r3, #1
 800792c:	fa02 f303 	lsl.w	r3, r2, r3
 8007930:	69ba      	ldr	r2, [r7, #24]
 8007932:	4313      	orrs	r3, r2
 8007934:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	69ba      	ldr	r2, [r7, #24]
 800793a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	f003 0303 	and.w	r3, r3, #3
 8007944:	2b02      	cmp	r3, #2
 8007946:	d123      	bne.n	8007990 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	08da      	lsrs	r2, r3, #3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	3208      	adds	r2, #8
 8007950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	f003 0307 	and.w	r3, r3, #7
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	220f      	movs	r2, #15
 8007960:	fa02 f303 	lsl.w	r3, r2, r3
 8007964:	43db      	mvns	r3, r3
 8007966:	69ba      	ldr	r2, [r7, #24]
 8007968:	4013      	ands	r3, r2
 800796a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	691a      	ldr	r2, [r3, #16]
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	f003 0307 	and.w	r3, r3, #7
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	fa02 f303 	lsl.w	r3, r2, r3
 800797c:	69ba      	ldr	r2, [r7, #24]
 800797e:	4313      	orrs	r3, r2
 8007980:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	08da      	lsrs	r2, r3, #3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	3208      	adds	r2, #8
 800798a:	69b9      	ldr	r1, [r7, #24]
 800798c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	005b      	lsls	r3, r3, #1
 800799a:	2203      	movs	r2, #3
 800799c:	fa02 f303 	lsl.w	r3, r2, r3
 80079a0:	43db      	mvns	r3, r3
 80079a2:	69ba      	ldr	r2, [r7, #24]
 80079a4:	4013      	ands	r3, r2
 80079a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	f003 0203 	and.w	r2, r3, #3
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	005b      	lsls	r3, r3, #1
 80079b4:	fa02 f303 	lsl.w	r3, r2, r3
 80079b8:	69ba      	ldr	r2, [r7, #24]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	69ba      	ldr	r2, [r7, #24]
 80079c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 80be 	beq.w	8007b4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079d2:	4b66      	ldr	r3, [pc, #408]	@ (8007b6c <HAL_GPIO_Init+0x324>)
 80079d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079d6:	4a65      	ldr	r2, [pc, #404]	@ (8007b6c <HAL_GPIO_Init+0x324>)
 80079d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80079dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80079de:	4b63      	ldr	r3, [pc, #396]	@ (8007b6c <HAL_GPIO_Init+0x324>)
 80079e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80079e6:	60fb      	str	r3, [r7, #12]
 80079e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80079ea:	4a61      	ldr	r2, [pc, #388]	@ (8007b70 <HAL_GPIO_Init+0x328>)
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	089b      	lsrs	r3, r3, #2
 80079f0:	3302      	adds	r3, #2
 80079f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	f003 0303 	and.w	r3, r3, #3
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	220f      	movs	r2, #15
 8007a02:	fa02 f303 	lsl.w	r3, r2, r3
 8007a06:	43db      	mvns	r3, r3
 8007a08:	69ba      	ldr	r2, [r7, #24]
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a58      	ldr	r2, [pc, #352]	@ (8007b74 <HAL_GPIO_Init+0x32c>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d037      	beq.n	8007a86 <HAL_GPIO_Init+0x23e>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a57      	ldr	r2, [pc, #348]	@ (8007b78 <HAL_GPIO_Init+0x330>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d031      	beq.n	8007a82 <HAL_GPIO_Init+0x23a>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a56      	ldr	r2, [pc, #344]	@ (8007b7c <HAL_GPIO_Init+0x334>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d02b      	beq.n	8007a7e <HAL_GPIO_Init+0x236>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a55      	ldr	r2, [pc, #340]	@ (8007b80 <HAL_GPIO_Init+0x338>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d025      	beq.n	8007a7a <HAL_GPIO_Init+0x232>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a54      	ldr	r2, [pc, #336]	@ (8007b84 <HAL_GPIO_Init+0x33c>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d01f      	beq.n	8007a76 <HAL_GPIO_Init+0x22e>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a53      	ldr	r2, [pc, #332]	@ (8007b88 <HAL_GPIO_Init+0x340>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d019      	beq.n	8007a72 <HAL_GPIO_Init+0x22a>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a52      	ldr	r2, [pc, #328]	@ (8007b8c <HAL_GPIO_Init+0x344>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d013      	beq.n	8007a6e <HAL_GPIO_Init+0x226>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a51      	ldr	r2, [pc, #324]	@ (8007b90 <HAL_GPIO_Init+0x348>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d00d      	beq.n	8007a6a <HAL_GPIO_Init+0x222>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a50      	ldr	r2, [pc, #320]	@ (8007b94 <HAL_GPIO_Init+0x34c>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d007      	beq.n	8007a66 <HAL_GPIO_Init+0x21e>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a4f      	ldr	r2, [pc, #316]	@ (8007b98 <HAL_GPIO_Init+0x350>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d101      	bne.n	8007a62 <HAL_GPIO_Init+0x21a>
 8007a5e:	2309      	movs	r3, #9
 8007a60:	e012      	b.n	8007a88 <HAL_GPIO_Init+0x240>
 8007a62:	230a      	movs	r3, #10
 8007a64:	e010      	b.n	8007a88 <HAL_GPIO_Init+0x240>
 8007a66:	2308      	movs	r3, #8
 8007a68:	e00e      	b.n	8007a88 <HAL_GPIO_Init+0x240>
 8007a6a:	2307      	movs	r3, #7
 8007a6c:	e00c      	b.n	8007a88 <HAL_GPIO_Init+0x240>
 8007a6e:	2306      	movs	r3, #6
 8007a70:	e00a      	b.n	8007a88 <HAL_GPIO_Init+0x240>
 8007a72:	2305      	movs	r3, #5
 8007a74:	e008      	b.n	8007a88 <HAL_GPIO_Init+0x240>
 8007a76:	2304      	movs	r3, #4
 8007a78:	e006      	b.n	8007a88 <HAL_GPIO_Init+0x240>
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e004      	b.n	8007a88 <HAL_GPIO_Init+0x240>
 8007a7e:	2302      	movs	r3, #2
 8007a80:	e002      	b.n	8007a88 <HAL_GPIO_Init+0x240>
 8007a82:	2301      	movs	r3, #1
 8007a84:	e000      	b.n	8007a88 <HAL_GPIO_Init+0x240>
 8007a86:	2300      	movs	r3, #0
 8007a88:	69fa      	ldr	r2, [r7, #28]
 8007a8a:	f002 0203 	and.w	r2, r2, #3
 8007a8e:	0092      	lsls	r2, r2, #2
 8007a90:	4093      	lsls	r3, r2
 8007a92:	69ba      	ldr	r2, [r7, #24]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007a98:	4935      	ldr	r1, [pc, #212]	@ (8007b70 <HAL_GPIO_Init+0x328>)
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	089b      	lsrs	r3, r3, #2
 8007a9e:	3302      	adds	r3, #2
 8007aa0:	69ba      	ldr	r2, [r7, #24]
 8007aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007aa6:	4b3d      	ldr	r3, [pc, #244]	@ (8007b9c <HAL_GPIO_Init+0x354>)
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	43db      	mvns	r3, r3
 8007ab0:	69ba      	ldr	r2, [r7, #24]
 8007ab2:	4013      	ands	r3, r2
 8007ab4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d003      	beq.n	8007aca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007ac2:	69ba      	ldr	r2, [r7, #24]
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007aca:	4a34      	ldr	r2, [pc, #208]	@ (8007b9c <HAL_GPIO_Init+0x354>)
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007ad0:	4b32      	ldr	r3, [pc, #200]	@ (8007b9c <HAL_GPIO_Init+0x354>)
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	43db      	mvns	r3, r3
 8007ada:	69ba      	ldr	r2, [r7, #24]
 8007adc:	4013      	ands	r3, r2
 8007ade:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d003      	beq.n	8007af4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007aec:	69ba      	ldr	r2, [r7, #24]
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007af4:	4a29      	ldr	r2, [pc, #164]	@ (8007b9c <HAL_GPIO_Init+0x354>)
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007afa:	4b28      	ldr	r3, [pc, #160]	@ (8007b9c <HAL_GPIO_Init+0x354>)
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	43db      	mvns	r3, r3
 8007b04:	69ba      	ldr	r2, [r7, #24]
 8007b06:	4013      	ands	r3, r2
 8007b08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d003      	beq.n	8007b1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007b16:	69ba      	ldr	r2, [r7, #24]
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8007b9c <HAL_GPIO_Init+0x354>)
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007b24:	4b1d      	ldr	r3, [pc, #116]	@ (8007b9c <HAL_GPIO_Init+0x354>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	43db      	mvns	r3, r3
 8007b2e:	69ba      	ldr	r2, [r7, #24]
 8007b30:	4013      	ands	r3, r2
 8007b32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d003      	beq.n	8007b48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007b40:	69ba      	ldr	r2, [r7, #24]
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007b48:	4a14      	ldr	r2, [pc, #80]	@ (8007b9c <HAL_GPIO_Init+0x354>)
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	3301      	adds	r3, #1
 8007b52:	61fb      	str	r3, [r7, #28]
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	2b0f      	cmp	r3, #15
 8007b58:	f67f ae86 	bls.w	8007868 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007b5c:	bf00      	nop
 8007b5e:	bf00      	nop
 8007b60:	3724      	adds	r7, #36	@ 0x24
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	40023800 	.word	0x40023800
 8007b70:	40013800 	.word	0x40013800
 8007b74:	40020000 	.word	0x40020000
 8007b78:	40020400 	.word	0x40020400
 8007b7c:	40020800 	.word	0x40020800
 8007b80:	40020c00 	.word	0x40020c00
 8007b84:	40021000 	.word	0x40021000
 8007b88:	40021400 	.word	0x40021400
 8007b8c:	40021800 	.word	0x40021800
 8007b90:	40021c00 	.word	0x40021c00
 8007b94:	40022000 	.word	0x40022000
 8007b98:	40022400 	.word	0x40022400
 8007b9c:	40013c00 	.word	0x40013c00

08007ba0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	691a      	ldr	r2, [r3, #16]
 8007bb0:	887b      	ldrh	r3, [r7, #2]
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d002      	beq.n	8007bbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	73fb      	strb	r3, [r7, #15]
 8007bbc:	e001      	b.n	8007bc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3714      	adds	r7, #20
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	807b      	strh	r3, [r7, #2]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007be0:	787b      	ldrb	r3, [r7, #1]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d003      	beq.n	8007bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007be6:	887a      	ldrh	r2, [r7, #2]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007bec:	e003      	b.n	8007bf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007bee:	887b      	ldrh	r3, [r7, #2]
 8007bf0:	041a      	lsls	r2, r3, #16
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	619a      	str	r2, [r3, #24]
}
 8007bf6:	bf00      	nop
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
	...

08007c04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007c0e:	4b08      	ldr	r3, [pc, #32]	@ (8007c30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c10:	695a      	ldr	r2, [r3, #20]
 8007c12:	88fb      	ldrh	r3, [r7, #6]
 8007c14:	4013      	ands	r3, r2
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d006      	beq.n	8007c28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007c1a:	4a05      	ldr	r2, [pc, #20]	@ (8007c30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c1c:	88fb      	ldrh	r3, [r7, #6]
 8007c1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007c20:	88fb      	ldrh	r3, [r7, #6]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7fd f878 	bl	8004d18 <HAL_GPIO_EXTI_Callback>
  }
}
 8007c28:	bf00      	nop
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	40013c00 	.word	0x40013c00

08007c34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d101      	bne.n	8007c46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e08b      	b.n	8007d5e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d106      	bne.n	8007c60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7fe f852 	bl	8005d04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2224      	movs	r2, #36	@ 0x24
 8007c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f022 0201 	bic.w	r2, r2, #1
 8007c76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685a      	ldr	r2, [r3, #4]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007c84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	689a      	ldr	r2, [r3, #8]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007c94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d107      	bne.n	8007cae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	689a      	ldr	r2, [r3, #8]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007caa:	609a      	str	r2, [r3, #8]
 8007cac:	e006      	b.n	8007cbc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	689a      	ldr	r2, [r3, #8]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007cba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d108      	bne.n	8007cd6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	685a      	ldr	r2, [r3, #4]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007cd2:	605a      	str	r2, [r3, #4]
 8007cd4:	e007      	b.n	8007ce6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	685a      	ldr	r2, [r3, #4]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007ce4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	6859      	ldr	r1, [r3, #4]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8007d68 <HAL_I2C_Init+0x134>)
 8007cf2:	430b      	orrs	r3, r1
 8007cf4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68da      	ldr	r2, [r3, #12]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007d04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	691a      	ldr	r2, [r3, #16]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	430a      	orrs	r2, r1
 8007d1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	69d9      	ldr	r1, [r3, #28]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a1a      	ldr	r2, [r3, #32]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	430a      	orrs	r2, r1
 8007d2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f042 0201 	orr.w	r2, r2, #1
 8007d3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2220      	movs	r2, #32
 8007d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3708      	adds	r7, #8
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	02008000 	.word	0x02008000

08007d6c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b088      	sub	sp, #32
 8007d70:	af02      	add	r7, sp, #8
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	607a      	str	r2, [r7, #4]
 8007d76:	461a      	mov	r2, r3
 8007d78:	460b      	mov	r3, r1
 8007d7a:	817b      	strh	r3, [r7, #10]
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b20      	cmp	r3, #32
 8007d8a:	f040 80fd 	bne.w	8007f88 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d101      	bne.n	8007d9c <HAL_I2C_Master_Transmit+0x30>
 8007d98:	2302      	movs	r3, #2
 8007d9a:	e0f6      	b.n	8007f8a <HAL_I2C_Master_Transmit+0x21e>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007da4:	f7ff f834 	bl	8006e10 <HAL_GetTick>
 8007da8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	2319      	movs	r3, #25
 8007db0:	2201      	movs	r2, #1
 8007db2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f000 f914 	bl	8007fe4 <I2C_WaitOnFlagUntilTimeout>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d001      	beq.n	8007dc6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e0e1      	b.n	8007f8a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2221      	movs	r2, #33	@ 0x21
 8007dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2210      	movs	r2, #16
 8007dd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	893a      	ldrh	r2, [r7, #8]
 8007de6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2200      	movs	r2, #0
 8007dec:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	2bff      	cmp	r3, #255	@ 0xff
 8007df6:	d906      	bls.n	8007e06 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	22ff      	movs	r2, #255	@ 0xff
 8007dfc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007dfe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007e02:	617b      	str	r3, [r7, #20]
 8007e04:	e007      	b.n	8007e16 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007e10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007e14:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d024      	beq.n	8007e68 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e22:	781a      	ldrb	r2, [r3, #0]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e2e:	1c5a      	adds	r2, r3, #1
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e46:	3b01      	subs	r3, #1
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	3301      	adds	r3, #1
 8007e56:	b2da      	uxtb	r2, r3
 8007e58:	8979      	ldrh	r1, [r7, #10]
 8007e5a:	4b4e      	ldr	r3, [pc, #312]	@ (8007f94 <HAL_I2C_Master_Transmit+0x228>)
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f000 fa83 	bl	800836c <I2C_TransferConfig>
 8007e66:	e066      	b.n	8007f36 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e6c:	b2da      	uxtb	r2, r3
 8007e6e:	8979      	ldrh	r1, [r7, #10]
 8007e70:	4b48      	ldr	r3, [pc, #288]	@ (8007f94 <HAL_I2C_Master_Transmit+0x228>)
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	f000 fa78 	bl	800836c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007e7c:	e05b      	b.n	8007f36 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e7e:	693a      	ldr	r2, [r7, #16]
 8007e80:	6a39      	ldr	r1, [r7, #32]
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f000 f907 	bl	8008096 <I2C_WaitOnTXISFlagUntilTimeout>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d001      	beq.n	8007e92 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e07b      	b.n	8007f8a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e96:	781a      	ldrb	r2, [r3, #0]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea2:	1c5a      	adds	r2, r3, #1
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d034      	beq.n	8007f36 <HAL_I2C_Master_Transmit+0x1ca>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d130      	bne.n	8007f36 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	9300      	str	r3, [sp, #0]
 8007ed8:	6a3b      	ldr	r3, [r7, #32]
 8007eda:	2200      	movs	r2, #0
 8007edc:	2180      	movs	r1, #128	@ 0x80
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f000 f880 	bl	8007fe4 <I2C_WaitOnFlagUntilTimeout>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d001      	beq.n	8007eee <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e04d      	b.n	8007f8a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	2bff      	cmp	r3, #255	@ 0xff
 8007ef6:	d90e      	bls.n	8007f16 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	22ff      	movs	r2, #255	@ 0xff
 8007efc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f02:	b2da      	uxtb	r2, r3
 8007f04:	8979      	ldrh	r1, [r7, #10]
 8007f06:	2300      	movs	r3, #0
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f000 fa2c 	bl	800836c <I2C_TransferConfig>
 8007f14:	e00f      	b.n	8007f36 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f1a:	b29a      	uxth	r2, r3
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f24:	b2da      	uxtb	r2, r3
 8007f26:	8979      	ldrh	r1, [r7, #10]
 8007f28:	2300      	movs	r3, #0
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f000 fa1b 	bl	800836c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d19e      	bne.n	8007e7e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f40:	693a      	ldr	r2, [r7, #16]
 8007f42:	6a39      	ldr	r1, [r7, #32]
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f000 f8ed 	bl	8008124 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d001      	beq.n	8007f54 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e01a      	b.n	8007f8a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2220      	movs	r2, #32
 8007f5a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	6859      	ldr	r1, [r3, #4]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	4b0c      	ldr	r3, [pc, #48]	@ (8007f98 <HAL_I2C_Master_Transmit+0x22c>)
 8007f68:	400b      	ands	r3, r1
 8007f6a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2220      	movs	r2, #32
 8007f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007f84:	2300      	movs	r3, #0
 8007f86:	e000      	b.n	8007f8a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8007f88:	2302      	movs	r3, #2
  }
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3718      	adds	r7, #24
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	80002000 	.word	0x80002000
 8007f98:	fe00e800 	.word	0xfe00e800

08007f9c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	699b      	ldr	r3, [r3, #24]
 8007faa:	f003 0302 	and.w	r3, r3, #2
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d103      	bne.n	8007fba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	f003 0301 	and.w	r3, r3, #1
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d007      	beq.n	8007fd8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	699a      	ldr	r2, [r3, #24]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f042 0201 	orr.w	r2, r2, #1
 8007fd6:	619a      	str	r2, [r3, #24]
  }
}
 8007fd8:	bf00      	nop
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	603b      	str	r3, [r7, #0]
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ff4:	e03b      	b.n	800806e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ff6:	69ba      	ldr	r2, [r7, #24]
 8007ff8:	6839      	ldr	r1, [r7, #0]
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f000 f8d6 	bl	80081ac <I2C_IsErrorOccurred>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e041      	b.n	800808e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008010:	d02d      	beq.n	800806e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008012:	f7fe fefd 	bl	8006e10 <HAL_GetTick>
 8008016:	4602      	mov	r2, r0
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	683a      	ldr	r2, [r7, #0]
 800801e:	429a      	cmp	r2, r3
 8008020:	d302      	bcc.n	8008028 <I2C_WaitOnFlagUntilTimeout+0x44>
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d122      	bne.n	800806e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	699a      	ldr	r2, [r3, #24]
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	4013      	ands	r3, r2
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	429a      	cmp	r2, r3
 8008036:	bf0c      	ite	eq
 8008038:	2301      	moveq	r3, #1
 800803a:	2300      	movne	r3, #0
 800803c:	b2db      	uxtb	r3, r3
 800803e:	461a      	mov	r2, r3
 8008040:	79fb      	ldrb	r3, [r7, #7]
 8008042:	429a      	cmp	r2, r3
 8008044:	d113      	bne.n	800806e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800804a:	f043 0220 	orr.w	r2, r3, #32
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2220      	movs	r2, #32
 8008056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	e00f      	b.n	800808e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	699a      	ldr	r2, [r3, #24]
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	4013      	ands	r3, r2
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	429a      	cmp	r2, r3
 800807c:	bf0c      	ite	eq
 800807e:	2301      	moveq	r3, #1
 8008080:	2300      	movne	r3, #0
 8008082:	b2db      	uxtb	r3, r3
 8008084:	461a      	mov	r2, r3
 8008086:	79fb      	ldrb	r3, [r7, #7]
 8008088:	429a      	cmp	r2, r3
 800808a:	d0b4      	beq.n	8007ff6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008096:	b580      	push	{r7, lr}
 8008098:	b084      	sub	sp, #16
 800809a:	af00      	add	r7, sp, #0
 800809c:	60f8      	str	r0, [r7, #12]
 800809e:	60b9      	str	r1, [r7, #8]
 80080a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80080a2:	e033      	b.n	800810c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	68b9      	ldr	r1, [r7, #8]
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f000 f87f 	bl	80081ac <I2C_IsErrorOccurred>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d001      	beq.n	80080b8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	e031      	b.n	800811c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080be:	d025      	beq.n	800810c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080c0:	f7fe fea6 	bl	8006e10 <HAL_GetTick>
 80080c4:	4602      	mov	r2, r0
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	68ba      	ldr	r2, [r7, #8]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d302      	bcc.n	80080d6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d11a      	bne.n	800810c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	699b      	ldr	r3, [r3, #24]
 80080dc:	f003 0302 	and.w	r3, r3, #2
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	d013      	beq.n	800810c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080e8:	f043 0220 	orr.w	r2, r3, #32
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2220      	movs	r2, #32
 80080f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e007      	b.n	800811c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	699b      	ldr	r3, [r3, #24]
 8008112:	f003 0302 	and.w	r3, r3, #2
 8008116:	2b02      	cmp	r3, #2
 8008118:	d1c4      	bne.n	80080a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	3710      	adds	r7, #16
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008130:	e02f      	b.n	8008192 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	68b9      	ldr	r1, [r7, #8]
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f000 f838 	bl	80081ac <I2C_IsErrorOccurred>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d001      	beq.n	8008146 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e02d      	b.n	80081a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008146:	f7fe fe63 	bl	8006e10 <HAL_GetTick>
 800814a:	4602      	mov	r2, r0
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	1ad3      	subs	r3, r2, r3
 8008150:	68ba      	ldr	r2, [r7, #8]
 8008152:	429a      	cmp	r2, r3
 8008154:	d302      	bcc.n	800815c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d11a      	bne.n	8008192 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	f003 0320 	and.w	r3, r3, #32
 8008166:	2b20      	cmp	r3, #32
 8008168:	d013      	beq.n	8008192 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800816e:	f043 0220 	orr.w	r2, r3, #32
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2220      	movs	r2, #32
 800817a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e007      	b.n	80081a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	f003 0320 	and.w	r3, r3, #32
 800819c:	2b20      	cmp	r3, #32
 800819e:	d1c8      	bne.n	8008132 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
	...

080081ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b08a      	sub	sp, #40	@ 0x28
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80081c6:	2300      	movs	r3, #0
 80081c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	f003 0310 	and.w	r3, r3, #16
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d068      	beq.n	80082aa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2210      	movs	r2, #16
 80081de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80081e0:	e049      	b.n	8008276 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e8:	d045      	beq.n	8008276 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80081ea:	f7fe fe11 	bl	8006e10 <HAL_GetTick>
 80081ee:	4602      	mov	r2, r0
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	68ba      	ldr	r2, [r7, #8]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d302      	bcc.n	8008200 <I2C_IsErrorOccurred+0x54>
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d13a      	bne.n	8008276 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800820a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008212:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800821e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008222:	d121      	bne.n	8008268 <I2C_IsErrorOccurred+0xbc>
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800822a:	d01d      	beq.n	8008268 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800822c:	7cfb      	ldrb	r3, [r7, #19]
 800822e:	2b20      	cmp	r3, #32
 8008230:	d01a      	beq.n	8008268 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	685a      	ldr	r2, [r3, #4]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008240:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008242:	f7fe fde5 	bl	8006e10 <HAL_GetTick>
 8008246:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008248:	e00e      	b.n	8008268 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800824a:	f7fe fde1 	bl	8006e10 <HAL_GetTick>
 800824e:	4602      	mov	r2, r0
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	1ad3      	subs	r3, r2, r3
 8008254:	2b19      	cmp	r3, #25
 8008256:	d907      	bls.n	8008268 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008258:	6a3b      	ldr	r3, [r7, #32]
 800825a:	f043 0320 	orr.w	r3, r3, #32
 800825e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008266:	e006      	b.n	8008276 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	699b      	ldr	r3, [r3, #24]
 800826e:	f003 0320 	and.w	r3, r3, #32
 8008272:	2b20      	cmp	r3, #32
 8008274:	d1e9      	bne.n	800824a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	699b      	ldr	r3, [r3, #24]
 800827c:	f003 0320 	and.w	r3, r3, #32
 8008280:	2b20      	cmp	r3, #32
 8008282:	d003      	beq.n	800828c <I2C_IsErrorOccurred+0xe0>
 8008284:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008288:	2b00      	cmp	r3, #0
 800828a:	d0aa      	beq.n	80081e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800828c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008290:	2b00      	cmp	r3, #0
 8008292:	d103      	bne.n	800829c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2220      	movs	r2, #32
 800829a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800829c:	6a3b      	ldr	r3, [r7, #32]
 800829e:	f043 0304 	orr.w	r3, r3, #4
 80082a2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00b      	beq.n	80082d4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80082bc:	6a3b      	ldr	r3, [r7, #32]
 80082be:	f043 0301 	orr.w	r3, r3, #1
 80082c2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80082cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80082d4:	69bb      	ldr	r3, [r7, #24]
 80082d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00b      	beq.n	80082f6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80082de:	6a3b      	ldr	r3, [r7, #32]
 80082e0:	f043 0308 	orr.w	r3, r3, #8
 80082e4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80082ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00b      	beq.n	8008318 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008300:	6a3b      	ldr	r3, [r7, #32]
 8008302:	f043 0302 	orr.w	r3, r3, #2
 8008306:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008310:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008318:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800831c:	2b00      	cmp	r3, #0
 800831e:	d01c      	beq.n	800835a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f7ff fe3b 	bl	8007f9c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	6859      	ldr	r1, [r3, #4]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	4b0d      	ldr	r3, [pc, #52]	@ (8008368 <I2C_IsErrorOccurred+0x1bc>)
 8008332:	400b      	ands	r3, r1
 8008334:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800833a:	6a3b      	ldr	r3, [r7, #32]
 800833c:	431a      	orrs	r2, r3
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2220      	movs	r2, #32
 8008346:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2200      	movs	r2, #0
 800834e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2200      	movs	r2, #0
 8008356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800835a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800835e:	4618      	mov	r0, r3
 8008360:	3728      	adds	r7, #40	@ 0x28
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	fe00e800 	.word	0xfe00e800

0800836c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800836c:	b480      	push	{r7}
 800836e:	b087      	sub	sp, #28
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	607b      	str	r3, [r7, #4]
 8008376:	460b      	mov	r3, r1
 8008378:	817b      	strh	r3, [r7, #10]
 800837a:	4613      	mov	r3, r2
 800837c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800837e:	897b      	ldrh	r3, [r7, #10]
 8008380:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008384:	7a7b      	ldrb	r3, [r7, #9]
 8008386:	041b      	lsls	r3, r3, #16
 8008388:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800838c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008392:	6a3b      	ldr	r3, [r7, #32]
 8008394:	4313      	orrs	r3, r2
 8008396:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800839a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	685a      	ldr	r2, [r3, #4]
 80083a2:	6a3b      	ldr	r3, [r7, #32]
 80083a4:	0d5b      	lsrs	r3, r3, #21
 80083a6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80083aa:	4b08      	ldr	r3, [pc, #32]	@ (80083cc <I2C_TransferConfig+0x60>)
 80083ac:	430b      	orrs	r3, r1
 80083ae:	43db      	mvns	r3, r3
 80083b0:	ea02 0103 	and.w	r1, r2, r3
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	697a      	ldr	r2, [r7, #20]
 80083ba:	430a      	orrs	r2, r1
 80083bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80083be:	bf00      	nop
 80083c0:	371c      	adds	r7, #28
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	03ff63ff 	.word	0x03ff63ff

080083d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b20      	cmp	r3, #32
 80083e4:	d138      	bne.n	8008458 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d101      	bne.n	80083f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80083f0:	2302      	movs	r3, #2
 80083f2:	e032      	b.n	800845a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2224      	movs	r2, #36	@ 0x24
 8008400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f022 0201 	bic.w	r2, r2, #1
 8008412:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008422:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	6819      	ldr	r1, [r3, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	683a      	ldr	r2, [r7, #0]
 8008430:	430a      	orrs	r2, r1
 8008432:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f042 0201 	orr.w	r2, r2, #1
 8008442:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2220      	movs	r2, #32
 8008448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	e000      	b.n	800845a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008458:	2302      	movs	r3, #2
  }
}
 800845a:	4618      	mov	r0, r3
 800845c:	370c      	adds	r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008466:	b480      	push	{r7}
 8008468:	b085      	sub	sp, #20
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
 800846e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008476:	b2db      	uxtb	r3, r3
 8008478:	2b20      	cmp	r3, #32
 800847a:	d139      	bne.n	80084f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008482:	2b01      	cmp	r3, #1
 8008484:	d101      	bne.n	800848a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008486:	2302      	movs	r3, #2
 8008488:	e033      	b.n	80084f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2224      	movs	r2, #36	@ 0x24
 8008496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f022 0201 	bic.w	r2, r2, #1
 80084a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80084b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	021b      	lsls	r3, r3, #8
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f042 0201 	orr.w	r2, r2, #1
 80084da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2220      	movs	r2, #32
 80084e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80084ec:	2300      	movs	r3, #0
 80084ee:	e000      	b.n	80084f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80084f0:	2302      	movs	r3, #2
  }
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3714      	adds	r7, #20
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr

080084fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b086      	sub	sp, #24
 8008502:	af02      	add	r7, sp, #8
 8008504:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d101      	bne.n	8008510 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	e108      	b.n	8008722 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800851c:	b2db      	uxtb	r3, r3
 800851e:	2b00      	cmp	r3, #0
 8008520:	d106      	bne.n	8008530 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f7fe f996 	bl	800685c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2203      	movs	r2, #3
 8008534:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800853e:	d102      	bne.n	8008546 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4618      	mov	r0, r3
 800854c:	f005 f98c 	bl	800d868 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6818      	ldr	r0, [r3, #0]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	7c1a      	ldrb	r2, [r3, #16]
 8008558:	f88d 2000 	strb.w	r2, [sp]
 800855c:	3304      	adds	r3, #4
 800855e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008560:	f005 f928 	bl	800d7b4 <USB_CoreInit>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d005      	beq.n	8008576 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2202      	movs	r2, #2
 800856e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e0d5      	b.n	8008722 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2100      	movs	r1, #0
 800857c:	4618      	mov	r0, r3
 800857e:	f005 f984 	bl	800d88a <USB_SetCurrentMode>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d005      	beq.n	8008594 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2202      	movs	r2, #2
 800858c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e0c6      	b.n	8008722 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008594:	2300      	movs	r3, #0
 8008596:	73fb      	strb	r3, [r7, #15]
 8008598:	e04a      	b.n	8008630 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800859a:	7bfa      	ldrb	r2, [r7, #15]
 800859c:	6879      	ldr	r1, [r7, #4]
 800859e:	4613      	mov	r3, r2
 80085a0:	00db      	lsls	r3, r3, #3
 80085a2:	4413      	add	r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	440b      	add	r3, r1
 80085a8:	3315      	adds	r3, #21
 80085aa:	2201      	movs	r2, #1
 80085ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80085ae:	7bfa      	ldrb	r2, [r7, #15]
 80085b0:	6879      	ldr	r1, [r7, #4]
 80085b2:	4613      	mov	r3, r2
 80085b4:	00db      	lsls	r3, r3, #3
 80085b6:	4413      	add	r3, r2
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	440b      	add	r3, r1
 80085bc:	3314      	adds	r3, #20
 80085be:	7bfa      	ldrb	r2, [r7, #15]
 80085c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80085c2:	7bfa      	ldrb	r2, [r7, #15]
 80085c4:	7bfb      	ldrb	r3, [r7, #15]
 80085c6:	b298      	uxth	r0, r3
 80085c8:	6879      	ldr	r1, [r7, #4]
 80085ca:	4613      	mov	r3, r2
 80085cc:	00db      	lsls	r3, r3, #3
 80085ce:	4413      	add	r3, r2
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	440b      	add	r3, r1
 80085d4:	332e      	adds	r3, #46	@ 0x2e
 80085d6:	4602      	mov	r2, r0
 80085d8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80085da:	7bfa      	ldrb	r2, [r7, #15]
 80085dc:	6879      	ldr	r1, [r7, #4]
 80085de:	4613      	mov	r3, r2
 80085e0:	00db      	lsls	r3, r3, #3
 80085e2:	4413      	add	r3, r2
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	440b      	add	r3, r1
 80085e8:	3318      	adds	r3, #24
 80085ea:	2200      	movs	r2, #0
 80085ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80085ee:	7bfa      	ldrb	r2, [r7, #15]
 80085f0:	6879      	ldr	r1, [r7, #4]
 80085f2:	4613      	mov	r3, r2
 80085f4:	00db      	lsls	r3, r3, #3
 80085f6:	4413      	add	r3, r2
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	440b      	add	r3, r1
 80085fc:	331c      	adds	r3, #28
 80085fe:	2200      	movs	r2, #0
 8008600:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008602:	7bfa      	ldrb	r2, [r7, #15]
 8008604:	6879      	ldr	r1, [r7, #4]
 8008606:	4613      	mov	r3, r2
 8008608:	00db      	lsls	r3, r3, #3
 800860a:	4413      	add	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	440b      	add	r3, r1
 8008610:	3320      	adds	r3, #32
 8008612:	2200      	movs	r2, #0
 8008614:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008616:	7bfa      	ldrb	r2, [r7, #15]
 8008618:	6879      	ldr	r1, [r7, #4]
 800861a:	4613      	mov	r3, r2
 800861c:	00db      	lsls	r3, r3, #3
 800861e:	4413      	add	r3, r2
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	440b      	add	r3, r1
 8008624:	3324      	adds	r3, #36	@ 0x24
 8008626:	2200      	movs	r2, #0
 8008628:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800862a:	7bfb      	ldrb	r3, [r7, #15]
 800862c:	3301      	adds	r3, #1
 800862e:	73fb      	strb	r3, [r7, #15]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	791b      	ldrb	r3, [r3, #4]
 8008634:	7bfa      	ldrb	r2, [r7, #15]
 8008636:	429a      	cmp	r2, r3
 8008638:	d3af      	bcc.n	800859a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800863a:	2300      	movs	r3, #0
 800863c:	73fb      	strb	r3, [r7, #15]
 800863e:	e044      	b.n	80086ca <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008640:	7bfa      	ldrb	r2, [r7, #15]
 8008642:	6879      	ldr	r1, [r7, #4]
 8008644:	4613      	mov	r3, r2
 8008646:	00db      	lsls	r3, r3, #3
 8008648:	4413      	add	r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	440b      	add	r3, r1
 800864e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8008652:	2200      	movs	r2, #0
 8008654:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008656:	7bfa      	ldrb	r2, [r7, #15]
 8008658:	6879      	ldr	r1, [r7, #4]
 800865a:	4613      	mov	r3, r2
 800865c:	00db      	lsls	r3, r3, #3
 800865e:	4413      	add	r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	440b      	add	r3, r1
 8008664:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8008668:	7bfa      	ldrb	r2, [r7, #15]
 800866a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800866c:	7bfa      	ldrb	r2, [r7, #15]
 800866e:	6879      	ldr	r1, [r7, #4]
 8008670:	4613      	mov	r3, r2
 8008672:	00db      	lsls	r3, r3, #3
 8008674:	4413      	add	r3, r2
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	440b      	add	r3, r1
 800867a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800867e:	2200      	movs	r2, #0
 8008680:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008682:	7bfa      	ldrb	r2, [r7, #15]
 8008684:	6879      	ldr	r1, [r7, #4]
 8008686:	4613      	mov	r3, r2
 8008688:	00db      	lsls	r3, r3, #3
 800868a:	4413      	add	r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	440b      	add	r3, r1
 8008690:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8008694:	2200      	movs	r2, #0
 8008696:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008698:	7bfa      	ldrb	r2, [r7, #15]
 800869a:	6879      	ldr	r1, [r7, #4]
 800869c:	4613      	mov	r3, r2
 800869e:	00db      	lsls	r3, r3, #3
 80086a0:	4413      	add	r3, r2
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	440b      	add	r3, r1
 80086a6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80086aa:	2200      	movs	r2, #0
 80086ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80086ae:	7bfa      	ldrb	r2, [r7, #15]
 80086b0:	6879      	ldr	r1, [r7, #4]
 80086b2:	4613      	mov	r3, r2
 80086b4:	00db      	lsls	r3, r3, #3
 80086b6:	4413      	add	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	440b      	add	r3, r1
 80086bc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80086c0:	2200      	movs	r2, #0
 80086c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80086c4:	7bfb      	ldrb	r3, [r7, #15]
 80086c6:	3301      	adds	r3, #1
 80086c8:	73fb      	strb	r3, [r7, #15]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	791b      	ldrb	r3, [r3, #4]
 80086ce:	7bfa      	ldrb	r2, [r7, #15]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d3b5      	bcc.n	8008640 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6818      	ldr	r0, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	7c1a      	ldrb	r2, [r3, #16]
 80086dc:	f88d 2000 	strb.w	r2, [sp]
 80086e0:	3304      	adds	r3, #4
 80086e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80086e4:	f005 f91e 	bl	800d924 <USB_DevInit>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d005      	beq.n	80086fa <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2202      	movs	r2, #2
 80086f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	e013      	b.n	8008722 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	7b1b      	ldrb	r3, [r3, #12]
 800870c:	2b01      	cmp	r3, #1
 800870e:	d102      	bne.n	8008716 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 f80b 	bl	800872c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4618      	mov	r0, r3
 800871c:	f005 fad9 	bl	800dcd2 <USB_DevDisconnect>

  return HAL_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
	...

0800872c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2201      	movs	r2, #1
 800873e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	699b      	ldr	r3, [r3, #24]
 800874e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800875a:	4b05      	ldr	r3, [pc, #20]	@ (8008770 <HAL_PCDEx_ActivateLPM+0x44>)
 800875c:	4313      	orrs	r3, r2
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	3714      	adds	r7, #20
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr
 8008770:	10000003 	.word	0x10000003

08008774 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800877a:	2300      	movs	r3, #0
 800877c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800877e:	4b23      	ldr	r3, [pc, #140]	@ (800880c <HAL_PWREx_EnableOverDrive+0x98>)
 8008780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008782:	4a22      	ldr	r2, [pc, #136]	@ (800880c <HAL_PWREx_EnableOverDrive+0x98>)
 8008784:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008788:	6413      	str	r3, [r2, #64]	@ 0x40
 800878a:	4b20      	ldr	r3, [pc, #128]	@ (800880c <HAL_PWREx_EnableOverDrive+0x98>)
 800878c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800878e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008792:	603b      	str	r3, [r7, #0]
 8008794:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008796:	4b1e      	ldr	r3, [pc, #120]	@ (8008810 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a1d      	ldr	r2, [pc, #116]	@ (8008810 <HAL_PWREx_EnableOverDrive+0x9c>)
 800879c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80087a2:	f7fe fb35 	bl	8006e10 <HAL_GetTick>
 80087a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80087a8:	e009      	b.n	80087be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80087aa:	f7fe fb31 	bl	8006e10 <HAL_GetTick>
 80087ae:	4602      	mov	r2, r0
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	1ad3      	subs	r3, r2, r3
 80087b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80087b8:	d901      	bls.n	80087be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80087ba:	2303      	movs	r3, #3
 80087bc:	e022      	b.n	8008804 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80087be:	4b14      	ldr	r3, [pc, #80]	@ (8008810 <HAL_PWREx_EnableOverDrive+0x9c>)
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80087c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087ca:	d1ee      	bne.n	80087aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80087cc:	4b10      	ldr	r3, [pc, #64]	@ (8008810 <HAL_PWREx_EnableOverDrive+0x9c>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a0f      	ldr	r2, [pc, #60]	@ (8008810 <HAL_PWREx_EnableOverDrive+0x9c>)
 80087d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80087d8:	f7fe fb1a 	bl	8006e10 <HAL_GetTick>
 80087dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80087de:	e009      	b.n	80087f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80087e0:	f7fe fb16 	bl	8006e10 <HAL_GetTick>
 80087e4:	4602      	mov	r2, r0
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	1ad3      	subs	r3, r2, r3
 80087ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80087ee:	d901      	bls.n	80087f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80087f0:	2303      	movs	r3, #3
 80087f2:	e007      	b.n	8008804 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80087f4:	4b06      	ldr	r3, [pc, #24]	@ (8008810 <HAL_PWREx_EnableOverDrive+0x9c>)
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008800:	d1ee      	bne.n	80087e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	3708      	adds	r7, #8
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}
 800880c:	40023800 	.word	0x40023800
 8008810:	40007000 	.word	0x40007000

08008814 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b086      	sub	sp, #24
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800881c:	2300      	movs	r3, #0
 800881e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d101      	bne.n	800882a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	e291      	b.n	8008d4e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	f000 8087 	beq.w	8008946 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008838:	4b96      	ldr	r3, [pc, #600]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	f003 030c 	and.w	r3, r3, #12
 8008840:	2b04      	cmp	r3, #4
 8008842:	d00c      	beq.n	800885e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008844:	4b93      	ldr	r3, [pc, #588]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	f003 030c 	and.w	r3, r3, #12
 800884c:	2b08      	cmp	r3, #8
 800884e:	d112      	bne.n	8008876 <HAL_RCC_OscConfig+0x62>
 8008850:	4b90      	ldr	r3, [pc, #576]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008858:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800885c:	d10b      	bne.n	8008876 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800885e:	4b8d      	ldr	r3, [pc, #564]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008866:	2b00      	cmp	r3, #0
 8008868:	d06c      	beq.n	8008944 <HAL_RCC_OscConfig+0x130>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d168      	bne.n	8008944 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	e26b      	b.n	8008d4e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800887e:	d106      	bne.n	800888e <HAL_RCC_OscConfig+0x7a>
 8008880:	4b84      	ldr	r3, [pc, #528]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a83      	ldr	r2, [pc, #524]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 8008886:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800888a:	6013      	str	r3, [r2, #0]
 800888c:	e02e      	b.n	80088ec <HAL_RCC_OscConfig+0xd8>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10c      	bne.n	80088b0 <HAL_RCC_OscConfig+0x9c>
 8008896:	4b7f      	ldr	r3, [pc, #508]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a7e      	ldr	r2, [pc, #504]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 800889c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088a0:	6013      	str	r3, [r2, #0]
 80088a2:	4b7c      	ldr	r3, [pc, #496]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a7b      	ldr	r2, [pc, #492]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 80088a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80088ac:	6013      	str	r3, [r2, #0]
 80088ae:	e01d      	b.n	80088ec <HAL_RCC_OscConfig+0xd8>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80088b8:	d10c      	bne.n	80088d4 <HAL_RCC_OscConfig+0xc0>
 80088ba:	4b76      	ldr	r3, [pc, #472]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a75      	ldr	r2, [pc, #468]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 80088c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80088c4:	6013      	str	r3, [r2, #0]
 80088c6:	4b73      	ldr	r3, [pc, #460]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a72      	ldr	r2, [pc, #456]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 80088cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088d0:	6013      	str	r3, [r2, #0]
 80088d2:	e00b      	b.n	80088ec <HAL_RCC_OscConfig+0xd8>
 80088d4:	4b6f      	ldr	r3, [pc, #444]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a6e      	ldr	r2, [pc, #440]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 80088da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088de:	6013      	str	r3, [r2, #0]
 80088e0:	4b6c      	ldr	r3, [pc, #432]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a6b      	ldr	r2, [pc, #428]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 80088e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80088ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d013      	beq.n	800891c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088f4:	f7fe fa8c 	bl	8006e10 <HAL_GetTick>
 80088f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088fa:	e008      	b.n	800890e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80088fc:	f7fe fa88 	bl	8006e10 <HAL_GetTick>
 8008900:	4602      	mov	r2, r0
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	2b64      	cmp	r3, #100	@ 0x64
 8008908:	d901      	bls.n	800890e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800890a:	2303      	movs	r3, #3
 800890c:	e21f      	b.n	8008d4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800890e:	4b61      	ldr	r3, [pc, #388]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008916:	2b00      	cmp	r3, #0
 8008918:	d0f0      	beq.n	80088fc <HAL_RCC_OscConfig+0xe8>
 800891a:	e014      	b.n	8008946 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800891c:	f7fe fa78 	bl	8006e10 <HAL_GetTick>
 8008920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008922:	e008      	b.n	8008936 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008924:	f7fe fa74 	bl	8006e10 <HAL_GetTick>
 8008928:	4602      	mov	r2, r0
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	1ad3      	subs	r3, r2, r3
 800892e:	2b64      	cmp	r3, #100	@ 0x64
 8008930:	d901      	bls.n	8008936 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008932:	2303      	movs	r3, #3
 8008934:	e20b      	b.n	8008d4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008936:	4b57      	ldr	r3, [pc, #348]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1f0      	bne.n	8008924 <HAL_RCC_OscConfig+0x110>
 8008942:	e000      	b.n	8008946 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 0302 	and.w	r3, r3, #2
 800894e:	2b00      	cmp	r3, #0
 8008950:	d069      	beq.n	8008a26 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008952:	4b50      	ldr	r3, [pc, #320]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	f003 030c 	and.w	r3, r3, #12
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00b      	beq.n	8008976 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800895e:	4b4d      	ldr	r3, [pc, #308]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	f003 030c 	and.w	r3, r3, #12
 8008966:	2b08      	cmp	r3, #8
 8008968:	d11c      	bne.n	80089a4 <HAL_RCC_OscConfig+0x190>
 800896a:	4b4a      	ldr	r3, [pc, #296]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008972:	2b00      	cmp	r3, #0
 8008974:	d116      	bne.n	80089a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008976:	4b47      	ldr	r3, [pc, #284]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f003 0302 	and.w	r3, r3, #2
 800897e:	2b00      	cmp	r3, #0
 8008980:	d005      	beq.n	800898e <HAL_RCC_OscConfig+0x17a>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d001      	beq.n	800898e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	e1df      	b.n	8008d4e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800898e:	4b41      	ldr	r3, [pc, #260]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	00db      	lsls	r3, r3, #3
 800899c:	493d      	ldr	r1, [pc, #244]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 800899e:	4313      	orrs	r3, r2
 80089a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80089a2:	e040      	b.n	8008a26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d023      	beq.n	80089f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80089ac:	4b39      	ldr	r3, [pc, #228]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a38      	ldr	r2, [pc, #224]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 80089b2:	f043 0301 	orr.w	r3, r3, #1
 80089b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089b8:	f7fe fa2a 	bl	8006e10 <HAL_GetTick>
 80089bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089be:	e008      	b.n	80089d2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089c0:	f7fe fa26 	bl	8006e10 <HAL_GetTick>
 80089c4:	4602      	mov	r2, r0
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d901      	bls.n	80089d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80089ce:	2303      	movs	r3, #3
 80089d0:	e1bd      	b.n	8008d4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089d2:	4b30      	ldr	r3, [pc, #192]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 0302 	and.w	r3, r3, #2
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d0f0      	beq.n	80089c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089de:	4b2d      	ldr	r3, [pc, #180]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	00db      	lsls	r3, r3, #3
 80089ec:	4929      	ldr	r1, [pc, #164]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 80089ee:	4313      	orrs	r3, r2
 80089f0:	600b      	str	r3, [r1, #0]
 80089f2:	e018      	b.n	8008a26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80089f4:	4b27      	ldr	r3, [pc, #156]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a26      	ldr	r2, [pc, #152]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 80089fa:	f023 0301 	bic.w	r3, r3, #1
 80089fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a00:	f7fe fa06 	bl	8006e10 <HAL_GetTick>
 8008a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a06:	e008      	b.n	8008a1a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a08:	f7fe fa02 	bl	8006e10 <HAL_GetTick>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	1ad3      	subs	r3, r2, r3
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	d901      	bls.n	8008a1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008a16:	2303      	movs	r3, #3
 8008a18:	e199      	b.n	8008d4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 0302 	and.w	r3, r3, #2
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1f0      	bne.n	8008a08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 0308 	and.w	r3, r3, #8
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d038      	beq.n	8008aa4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	695b      	ldr	r3, [r3, #20]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d019      	beq.n	8008a6e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a3a:	4b16      	ldr	r3, [pc, #88]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 8008a3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a3e:	4a15      	ldr	r2, [pc, #84]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 8008a40:	f043 0301 	orr.w	r3, r3, #1
 8008a44:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a46:	f7fe f9e3 	bl	8006e10 <HAL_GetTick>
 8008a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a4c:	e008      	b.n	8008a60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a4e:	f7fe f9df 	bl	8006e10 <HAL_GetTick>
 8008a52:	4602      	mov	r2, r0
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	1ad3      	subs	r3, r2, r3
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	d901      	bls.n	8008a60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	e176      	b.n	8008d4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a60:	4b0c      	ldr	r3, [pc, #48]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 8008a62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a64:	f003 0302 	and.w	r3, r3, #2
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d0f0      	beq.n	8008a4e <HAL_RCC_OscConfig+0x23a>
 8008a6c:	e01a      	b.n	8008aa4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a6e:	4b09      	ldr	r3, [pc, #36]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 8008a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a72:	4a08      	ldr	r2, [pc, #32]	@ (8008a94 <HAL_RCC_OscConfig+0x280>)
 8008a74:	f023 0301 	bic.w	r3, r3, #1
 8008a78:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a7a:	f7fe f9c9 	bl	8006e10 <HAL_GetTick>
 8008a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a80:	e00a      	b.n	8008a98 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a82:	f7fe f9c5 	bl	8006e10 <HAL_GetTick>
 8008a86:	4602      	mov	r2, r0
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	2b02      	cmp	r3, #2
 8008a8e:	d903      	bls.n	8008a98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008a90:	2303      	movs	r3, #3
 8008a92:	e15c      	b.n	8008d4e <HAL_RCC_OscConfig+0x53a>
 8008a94:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a98:	4b91      	ldr	r3, [pc, #580]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008a9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a9c:	f003 0302 	and.w	r3, r3, #2
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d1ee      	bne.n	8008a82 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f003 0304 	and.w	r3, r3, #4
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	f000 80a4 	beq.w	8008bfa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ab2:	4b8b      	ldr	r3, [pc, #556]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10d      	bne.n	8008ada <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008abe:	4b88      	ldr	r3, [pc, #544]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ac2:	4a87      	ldr	r2, [pc, #540]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8008aca:	4b85      	ldr	r3, [pc, #532]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ad2:	60bb      	str	r3, [r7, #8]
 8008ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ada:	4b82      	ldr	r3, [pc, #520]	@ (8008ce4 <HAL_RCC_OscConfig+0x4d0>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d118      	bne.n	8008b18 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008ae6:	4b7f      	ldr	r3, [pc, #508]	@ (8008ce4 <HAL_RCC_OscConfig+0x4d0>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a7e      	ldr	r2, [pc, #504]	@ (8008ce4 <HAL_RCC_OscConfig+0x4d0>)
 8008aec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008af0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008af2:	f7fe f98d 	bl	8006e10 <HAL_GetTick>
 8008af6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008af8:	e008      	b.n	8008b0c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008afa:	f7fe f989 	bl	8006e10 <HAL_GetTick>
 8008afe:	4602      	mov	r2, r0
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	1ad3      	subs	r3, r2, r3
 8008b04:	2b64      	cmp	r3, #100	@ 0x64
 8008b06:	d901      	bls.n	8008b0c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	e120      	b.n	8008d4e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b0c:	4b75      	ldr	r3, [pc, #468]	@ (8008ce4 <HAL_RCC_OscConfig+0x4d0>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d0f0      	beq.n	8008afa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d106      	bne.n	8008b2e <HAL_RCC_OscConfig+0x31a>
 8008b20:	4b6f      	ldr	r3, [pc, #444]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b24:	4a6e      	ldr	r2, [pc, #440]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008b26:	f043 0301 	orr.w	r3, r3, #1
 8008b2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8008b2c:	e02d      	b.n	8008b8a <HAL_RCC_OscConfig+0x376>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d10c      	bne.n	8008b50 <HAL_RCC_OscConfig+0x33c>
 8008b36:	4b6a      	ldr	r3, [pc, #424]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b3a:	4a69      	ldr	r2, [pc, #420]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008b3c:	f023 0301 	bic.w	r3, r3, #1
 8008b40:	6713      	str	r3, [r2, #112]	@ 0x70
 8008b42:	4b67      	ldr	r3, [pc, #412]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b46:	4a66      	ldr	r2, [pc, #408]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008b48:	f023 0304 	bic.w	r3, r3, #4
 8008b4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8008b4e:	e01c      	b.n	8008b8a <HAL_RCC_OscConfig+0x376>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	2b05      	cmp	r3, #5
 8008b56:	d10c      	bne.n	8008b72 <HAL_RCC_OscConfig+0x35e>
 8008b58:	4b61      	ldr	r3, [pc, #388]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b5c:	4a60      	ldr	r2, [pc, #384]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008b5e:	f043 0304 	orr.w	r3, r3, #4
 8008b62:	6713      	str	r3, [r2, #112]	@ 0x70
 8008b64:	4b5e      	ldr	r3, [pc, #376]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b68:	4a5d      	ldr	r2, [pc, #372]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008b6a:	f043 0301 	orr.w	r3, r3, #1
 8008b6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008b70:	e00b      	b.n	8008b8a <HAL_RCC_OscConfig+0x376>
 8008b72:	4b5b      	ldr	r3, [pc, #364]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b76:	4a5a      	ldr	r2, [pc, #360]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008b78:	f023 0301 	bic.w	r3, r3, #1
 8008b7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8008b7e:	4b58      	ldr	r3, [pc, #352]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b82:	4a57      	ldr	r2, [pc, #348]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008b84:	f023 0304 	bic.w	r3, r3, #4
 8008b88:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d015      	beq.n	8008bbe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b92:	f7fe f93d 	bl	8006e10 <HAL_GetTick>
 8008b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b98:	e00a      	b.n	8008bb0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b9a:	f7fe f939 	bl	8006e10 <HAL_GetTick>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	1ad3      	subs	r3, r2, r3
 8008ba4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d901      	bls.n	8008bb0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008bac:	2303      	movs	r3, #3
 8008bae:	e0ce      	b.n	8008d4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008bb0:	4b4b      	ldr	r3, [pc, #300]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bb4:	f003 0302 	and.w	r3, r3, #2
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d0ee      	beq.n	8008b9a <HAL_RCC_OscConfig+0x386>
 8008bbc:	e014      	b.n	8008be8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bbe:	f7fe f927 	bl	8006e10 <HAL_GetTick>
 8008bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008bc4:	e00a      	b.n	8008bdc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bc6:	f7fe f923 	bl	8006e10 <HAL_GetTick>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d901      	bls.n	8008bdc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	e0b8      	b.n	8008d4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008bdc:	4b40      	ldr	r3, [pc, #256]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008be0:	f003 0302 	and.w	r3, r3, #2
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d1ee      	bne.n	8008bc6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008be8:	7dfb      	ldrb	r3, [r7, #23]
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d105      	bne.n	8008bfa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008bee:	4b3c      	ldr	r3, [pc, #240]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bf2:	4a3b      	ldr	r2, [pc, #236]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008bf4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008bf8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	699b      	ldr	r3, [r3, #24]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f000 80a4 	beq.w	8008d4c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008c04:	4b36      	ldr	r3, [pc, #216]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	f003 030c 	and.w	r3, r3, #12
 8008c0c:	2b08      	cmp	r3, #8
 8008c0e:	d06b      	beq.n	8008ce8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	699b      	ldr	r3, [r3, #24]
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d149      	bne.n	8008cac <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c18:	4b31      	ldr	r3, [pc, #196]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a30      	ldr	r2, [pc, #192]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008c1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c24:	f7fe f8f4 	bl	8006e10 <HAL_GetTick>
 8008c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c2a:	e008      	b.n	8008c3e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c2c:	f7fe f8f0 	bl	8006e10 <HAL_GetTick>
 8008c30:	4602      	mov	r2, r0
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	1ad3      	subs	r3, r2, r3
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d901      	bls.n	8008c3e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008c3a:	2303      	movs	r3, #3
 8008c3c:	e087      	b.n	8008d4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c3e:	4b28      	ldr	r3, [pc, #160]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1f0      	bne.n	8008c2c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	69da      	ldr	r2, [r3, #28]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6a1b      	ldr	r3, [r3, #32]
 8008c52:	431a      	orrs	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c58:	019b      	lsls	r3, r3, #6
 8008c5a:	431a      	orrs	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c60:	085b      	lsrs	r3, r3, #1
 8008c62:	3b01      	subs	r3, #1
 8008c64:	041b      	lsls	r3, r3, #16
 8008c66:	431a      	orrs	r2, r3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c6c:	061b      	lsls	r3, r3, #24
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	4a1b      	ldr	r2, [pc, #108]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008c72:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008c76:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008c78:	4b19      	ldr	r3, [pc, #100]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a18      	ldr	r2, [pc, #96]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008c7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c84:	f7fe f8c4 	bl	8006e10 <HAL_GetTick>
 8008c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c8a:	e008      	b.n	8008c9e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c8c:	f7fe f8c0 	bl	8006e10 <HAL_GetTick>
 8008c90:	4602      	mov	r2, r0
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	1ad3      	subs	r3, r2, r3
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d901      	bls.n	8008c9e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	e057      	b.n	8008d4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c9e:	4b10      	ldr	r3, [pc, #64]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d0f0      	beq.n	8008c8c <HAL_RCC_OscConfig+0x478>
 8008caa:	e04f      	b.n	8008d4c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008cac:	4b0c      	ldr	r3, [pc, #48]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a0b      	ldr	r2, [pc, #44]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008cb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cb8:	f7fe f8aa 	bl	8006e10 <HAL_GetTick>
 8008cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cbe:	e008      	b.n	8008cd2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cc0:	f7fe f8a6 	bl	8006e10 <HAL_GetTick>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	1ad3      	subs	r3, r2, r3
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	d901      	bls.n	8008cd2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008cce:	2303      	movs	r3, #3
 8008cd0:	e03d      	b.n	8008d4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cd2:	4b03      	ldr	r3, [pc, #12]	@ (8008ce0 <HAL_RCC_OscConfig+0x4cc>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1f0      	bne.n	8008cc0 <HAL_RCC_OscConfig+0x4ac>
 8008cde:	e035      	b.n	8008d4c <HAL_RCC_OscConfig+0x538>
 8008ce0:	40023800 	.word	0x40023800
 8008ce4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8008d58 <HAL_RCC_OscConfig+0x544>)
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d028      	beq.n	8008d48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d121      	bne.n	8008d48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d11a      	bne.n	8008d48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008d18:	4013      	ands	r3, r2
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008d1e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d111      	bne.n	8008d48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d2e:	085b      	lsrs	r3, r3, #1
 8008d30:	3b01      	subs	r3, #1
 8008d32:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d107      	bne.n	8008d48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d42:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d001      	beq.n	8008d4c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e000      	b.n	8008d4e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3718      	adds	r7, #24
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	40023800 	.word	0x40023800

08008d5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008d66:	2300      	movs	r3, #0
 8008d68:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d101      	bne.n	8008d74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	e0d0      	b.n	8008f16 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008d74:	4b6a      	ldr	r3, [pc, #424]	@ (8008f20 <HAL_RCC_ClockConfig+0x1c4>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 030f 	and.w	r3, r3, #15
 8008d7c:	683a      	ldr	r2, [r7, #0]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d910      	bls.n	8008da4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d82:	4b67      	ldr	r3, [pc, #412]	@ (8008f20 <HAL_RCC_ClockConfig+0x1c4>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f023 020f 	bic.w	r2, r3, #15
 8008d8a:	4965      	ldr	r1, [pc, #404]	@ (8008f20 <HAL_RCC_ClockConfig+0x1c4>)
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d92:	4b63      	ldr	r3, [pc, #396]	@ (8008f20 <HAL_RCC_ClockConfig+0x1c4>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 030f 	and.w	r3, r3, #15
 8008d9a:	683a      	ldr	r2, [r7, #0]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d001      	beq.n	8008da4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008da0:	2301      	movs	r3, #1
 8008da2:	e0b8      	b.n	8008f16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 0302 	and.w	r3, r3, #2
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d020      	beq.n	8008df2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 0304 	and.w	r3, r3, #4
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d005      	beq.n	8008dc8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008dbc:	4b59      	ldr	r3, [pc, #356]	@ (8008f24 <HAL_RCC_ClockConfig+0x1c8>)
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	4a58      	ldr	r2, [pc, #352]	@ (8008f24 <HAL_RCC_ClockConfig+0x1c8>)
 8008dc2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008dc6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 0308 	and.w	r3, r3, #8
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d005      	beq.n	8008de0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008dd4:	4b53      	ldr	r3, [pc, #332]	@ (8008f24 <HAL_RCC_ClockConfig+0x1c8>)
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	4a52      	ldr	r2, [pc, #328]	@ (8008f24 <HAL_RCC_ClockConfig+0x1c8>)
 8008dda:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008dde:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008de0:	4b50      	ldr	r3, [pc, #320]	@ (8008f24 <HAL_RCC_ClockConfig+0x1c8>)
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	494d      	ldr	r1, [pc, #308]	@ (8008f24 <HAL_RCC_ClockConfig+0x1c8>)
 8008dee:	4313      	orrs	r3, r2
 8008df0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f003 0301 	and.w	r3, r3, #1
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d040      	beq.n	8008e80 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d107      	bne.n	8008e16 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e06:	4b47      	ldr	r3, [pc, #284]	@ (8008f24 <HAL_RCC_ClockConfig+0x1c8>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d115      	bne.n	8008e3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e07f      	b.n	8008f16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	d107      	bne.n	8008e2e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e1e:	4b41      	ldr	r3, [pc, #260]	@ (8008f24 <HAL_RCC_ClockConfig+0x1c8>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d109      	bne.n	8008e3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e073      	b.n	8008f16 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e2e:	4b3d      	ldr	r3, [pc, #244]	@ (8008f24 <HAL_RCC_ClockConfig+0x1c8>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f003 0302 	and.w	r3, r3, #2
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d101      	bne.n	8008e3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e06b      	b.n	8008f16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008e3e:	4b39      	ldr	r3, [pc, #228]	@ (8008f24 <HAL_RCC_ClockConfig+0x1c8>)
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	f023 0203 	bic.w	r2, r3, #3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	4936      	ldr	r1, [pc, #216]	@ (8008f24 <HAL_RCC_ClockConfig+0x1c8>)
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e50:	f7fd ffde 	bl	8006e10 <HAL_GetTick>
 8008e54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e56:	e00a      	b.n	8008e6e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e58:	f7fd ffda 	bl	8006e10 <HAL_GetTick>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	1ad3      	subs	r3, r2, r3
 8008e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d901      	bls.n	8008e6e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	e053      	b.n	8008f16 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e6e:	4b2d      	ldr	r3, [pc, #180]	@ (8008f24 <HAL_RCC_ClockConfig+0x1c8>)
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	f003 020c 	and.w	r2, r3, #12
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d1eb      	bne.n	8008e58 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008e80:	4b27      	ldr	r3, [pc, #156]	@ (8008f20 <HAL_RCC_ClockConfig+0x1c4>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f003 030f 	and.w	r3, r3, #15
 8008e88:	683a      	ldr	r2, [r7, #0]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d210      	bcs.n	8008eb0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e8e:	4b24      	ldr	r3, [pc, #144]	@ (8008f20 <HAL_RCC_ClockConfig+0x1c4>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f023 020f 	bic.w	r2, r3, #15
 8008e96:	4922      	ldr	r1, [pc, #136]	@ (8008f20 <HAL_RCC_ClockConfig+0x1c4>)
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e9e:	4b20      	ldr	r3, [pc, #128]	@ (8008f20 <HAL_RCC_ClockConfig+0x1c4>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f003 030f 	and.w	r3, r3, #15
 8008ea6:	683a      	ldr	r2, [r7, #0]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d001      	beq.n	8008eb0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008eac:	2301      	movs	r3, #1
 8008eae:	e032      	b.n	8008f16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f003 0304 	and.w	r3, r3, #4
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d008      	beq.n	8008ece <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008ebc:	4b19      	ldr	r3, [pc, #100]	@ (8008f24 <HAL_RCC_ClockConfig+0x1c8>)
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	4916      	ldr	r1, [pc, #88]	@ (8008f24 <HAL_RCC_ClockConfig+0x1c8>)
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f003 0308 	and.w	r3, r3, #8
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d009      	beq.n	8008eee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008eda:	4b12      	ldr	r3, [pc, #72]	@ (8008f24 <HAL_RCC_ClockConfig+0x1c8>)
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	00db      	lsls	r3, r3, #3
 8008ee8:	490e      	ldr	r1, [pc, #56]	@ (8008f24 <HAL_RCC_ClockConfig+0x1c8>)
 8008eea:	4313      	orrs	r3, r2
 8008eec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008eee:	f000 f821 	bl	8008f34 <HAL_RCC_GetSysClockFreq>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8008f24 <HAL_RCC_ClockConfig+0x1c8>)
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	091b      	lsrs	r3, r3, #4
 8008efa:	f003 030f 	and.w	r3, r3, #15
 8008efe:	490a      	ldr	r1, [pc, #40]	@ (8008f28 <HAL_RCC_ClockConfig+0x1cc>)
 8008f00:	5ccb      	ldrb	r3, [r1, r3]
 8008f02:	fa22 f303 	lsr.w	r3, r2, r3
 8008f06:	4a09      	ldr	r2, [pc, #36]	@ (8008f2c <HAL_RCC_ClockConfig+0x1d0>)
 8008f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008f0a:	4b09      	ldr	r3, [pc, #36]	@ (8008f30 <HAL_RCC_ClockConfig+0x1d4>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7fd fd1e 	bl	8006950 <HAL_InitTick>

  return HAL_OK;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	40023c00 	.word	0x40023c00
 8008f24:	40023800 	.word	0x40023800
 8008f28:	080188bc 	.word	0x080188bc
 8008f2c:	20000054 	.word	0x20000054
 8008f30:	20000058 	.word	0x20000058

08008f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f38:	b094      	sub	sp, #80	@ 0x50
 8008f3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f40:	2300      	movs	r3, #0
 8008f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f44:	2300      	movs	r3, #0
 8008f46:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f4c:	4b79      	ldr	r3, [pc, #484]	@ (8009134 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	f003 030c 	and.w	r3, r3, #12
 8008f54:	2b08      	cmp	r3, #8
 8008f56:	d00d      	beq.n	8008f74 <HAL_RCC_GetSysClockFreq+0x40>
 8008f58:	2b08      	cmp	r3, #8
 8008f5a:	f200 80e1 	bhi.w	8009120 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d002      	beq.n	8008f68 <HAL_RCC_GetSysClockFreq+0x34>
 8008f62:	2b04      	cmp	r3, #4
 8008f64:	d003      	beq.n	8008f6e <HAL_RCC_GetSysClockFreq+0x3a>
 8008f66:	e0db      	b.n	8009120 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008f68:	4b73      	ldr	r3, [pc, #460]	@ (8009138 <HAL_RCC_GetSysClockFreq+0x204>)
 8008f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008f6c:	e0db      	b.n	8009126 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008f6e:	4b73      	ldr	r3, [pc, #460]	@ (800913c <HAL_RCC_GetSysClockFreq+0x208>)
 8008f70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008f72:	e0d8      	b.n	8009126 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008f74:	4b6f      	ldr	r3, [pc, #444]	@ (8009134 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f7c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008f7e:	4b6d      	ldr	r3, [pc, #436]	@ (8009134 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d063      	beq.n	8009052 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f8a:	4b6a      	ldr	r3, [pc, #424]	@ (8009134 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	099b      	lsrs	r3, r3, #6
 8008f90:	2200      	movs	r2, #0
 8008f92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008f94:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fa2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008fa6:	4622      	mov	r2, r4
 8008fa8:	462b      	mov	r3, r5
 8008faa:	f04f 0000 	mov.w	r0, #0
 8008fae:	f04f 0100 	mov.w	r1, #0
 8008fb2:	0159      	lsls	r1, r3, #5
 8008fb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008fb8:	0150      	lsls	r0, r2, #5
 8008fba:	4602      	mov	r2, r0
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	4621      	mov	r1, r4
 8008fc0:	1a51      	subs	r1, r2, r1
 8008fc2:	6139      	str	r1, [r7, #16]
 8008fc4:	4629      	mov	r1, r5
 8008fc6:	eb63 0301 	sbc.w	r3, r3, r1
 8008fca:	617b      	str	r3, [r7, #20]
 8008fcc:	f04f 0200 	mov.w	r2, #0
 8008fd0:	f04f 0300 	mov.w	r3, #0
 8008fd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008fd8:	4659      	mov	r1, fp
 8008fda:	018b      	lsls	r3, r1, #6
 8008fdc:	4651      	mov	r1, sl
 8008fde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008fe2:	4651      	mov	r1, sl
 8008fe4:	018a      	lsls	r2, r1, #6
 8008fe6:	4651      	mov	r1, sl
 8008fe8:	ebb2 0801 	subs.w	r8, r2, r1
 8008fec:	4659      	mov	r1, fp
 8008fee:	eb63 0901 	sbc.w	r9, r3, r1
 8008ff2:	f04f 0200 	mov.w	r2, #0
 8008ff6:	f04f 0300 	mov.w	r3, #0
 8008ffa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008ffe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009002:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009006:	4690      	mov	r8, r2
 8009008:	4699      	mov	r9, r3
 800900a:	4623      	mov	r3, r4
 800900c:	eb18 0303 	adds.w	r3, r8, r3
 8009010:	60bb      	str	r3, [r7, #8]
 8009012:	462b      	mov	r3, r5
 8009014:	eb49 0303 	adc.w	r3, r9, r3
 8009018:	60fb      	str	r3, [r7, #12]
 800901a:	f04f 0200 	mov.w	r2, #0
 800901e:	f04f 0300 	mov.w	r3, #0
 8009022:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009026:	4629      	mov	r1, r5
 8009028:	024b      	lsls	r3, r1, #9
 800902a:	4621      	mov	r1, r4
 800902c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009030:	4621      	mov	r1, r4
 8009032:	024a      	lsls	r2, r1, #9
 8009034:	4610      	mov	r0, r2
 8009036:	4619      	mov	r1, r3
 8009038:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800903a:	2200      	movs	r2, #0
 800903c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800903e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009040:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009044:	f7f7 fe02 	bl	8000c4c <__aeabi_uldivmod>
 8009048:	4602      	mov	r2, r0
 800904a:	460b      	mov	r3, r1
 800904c:	4613      	mov	r3, r2
 800904e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009050:	e058      	b.n	8009104 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009052:	4b38      	ldr	r3, [pc, #224]	@ (8009134 <HAL_RCC_GetSysClockFreq+0x200>)
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	099b      	lsrs	r3, r3, #6
 8009058:	2200      	movs	r2, #0
 800905a:	4618      	mov	r0, r3
 800905c:	4611      	mov	r1, r2
 800905e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009062:	623b      	str	r3, [r7, #32]
 8009064:	2300      	movs	r3, #0
 8009066:	627b      	str	r3, [r7, #36]	@ 0x24
 8009068:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800906c:	4642      	mov	r2, r8
 800906e:	464b      	mov	r3, r9
 8009070:	f04f 0000 	mov.w	r0, #0
 8009074:	f04f 0100 	mov.w	r1, #0
 8009078:	0159      	lsls	r1, r3, #5
 800907a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800907e:	0150      	lsls	r0, r2, #5
 8009080:	4602      	mov	r2, r0
 8009082:	460b      	mov	r3, r1
 8009084:	4641      	mov	r1, r8
 8009086:	ebb2 0a01 	subs.w	sl, r2, r1
 800908a:	4649      	mov	r1, r9
 800908c:	eb63 0b01 	sbc.w	fp, r3, r1
 8009090:	f04f 0200 	mov.w	r2, #0
 8009094:	f04f 0300 	mov.w	r3, #0
 8009098:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800909c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80090a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80090a4:	ebb2 040a 	subs.w	r4, r2, sl
 80090a8:	eb63 050b 	sbc.w	r5, r3, fp
 80090ac:	f04f 0200 	mov.w	r2, #0
 80090b0:	f04f 0300 	mov.w	r3, #0
 80090b4:	00eb      	lsls	r3, r5, #3
 80090b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80090ba:	00e2      	lsls	r2, r4, #3
 80090bc:	4614      	mov	r4, r2
 80090be:	461d      	mov	r5, r3
 80090c0:	4643      	mov	r3, r8
 80090c2:	18e3      	adds	r3, r4, r3
 80090c4:	603b      	str	r3, [r7, #0]
 80090c6:	464b      	mov	r3, r9
 80090c8:	eb45 0303 	adc.w	r3, r5, r3
 80090cc:	607b      	str	r3, [r7, #4]
 80090ce:	f04f 0200 	mov.w	r2, #0
 80090d2:	f04f 0300 	mov.w	r3, #0
 80090d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80090da:	4629      	mov	r1, r5
 80090dc:	028b      	lsls	r3, r1, #10
 80090de:	4621      	mov	r1, r4
 80090e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80090e4:	4621      	mov	r1, r4
 80090e6:	028a      	lsls	r2, r1, #10
 80090e8:	4610      	mov	r0, r2
 80090ea:	4619      	mov	r1, r3
 80090ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090ee:	2200      	movs	r2, #0
 80090f0:	61bb      	str	r3, [r7, #24]
 80090f2:	61fa      	str	r2, [r7, #28]
 80090f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090f8:	f7f7 fda8 	bl	8000c4c <__aeabi_uldivmod>
 80090fc:	4602      	mov	r2, r0
 80090fe:	460b      	mov	r3, r1
 8009100:	4613      	mov	r3, r2
 8009102:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009104:	4b0b      	ldr	r3, [pc, #44]	@ (8009134 <HAL_RCC_GetSysClockFreq+0x200>)
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	0c1b      	lsrs	r3, r3, #16
 800910a:	f003 0303 	and.w	r3, r3, #3
 800910e:	3301      	adds	r3, #1
 8009110:	005b      	lsls	r3, r3, #1
 8009112:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8009114:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009116:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009118:	fbb2 f3f3 	udiv	r3, r2, r3
 800911c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800911e:	e002      	b.n	8009126 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009120:	4b05      	ldr	r3, [pc, #20]	@ (8009138 <HAL_RCC_GetSysClockFreq+0x204>)
 8009122:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009126:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8009128:	4618      	mov	r0, r3
 800912a:	3750      	adds	r7, #80	@ 0x50
 800912c:	46bd      	mov	sp, r7
 800912e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009132:	bf00      	nop
 8009134:	40023800 	.word	0x40023800
 8009138:	00f42400 	.word	0x00f42400
 800913c:	007a1200 	.word	0x007a1200

08009140 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009140:	b480      	push	{r7}
 8009142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009144:	4b03      	ldr	r3, [pc, #12]	@ (8009154 <HAL_RCC_GetHCLKFreq+0x14>)
 8009146:	681b      	ldr	r3, [r3, #0]
}
 8009148:	4618      	mov	r0, r3
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop
 8009154:	20000054 	.word	0x20000054

08009158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800915c:	f7ff fff0 	bl	8009140 <HAL_RCC_GetHCLKFreq>
 8009160:	4602      	mov	r2, r0
 8009162:	4b05      	ldr	r3, [pc, #20]	@ (8009178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	0a9b      	lsrs	r3, r3, #10
 8009168:	f003 0307 	and.w	r3, r3, #7
 800916c:	4903      	ldr	r1, [pc, #12]	@ (800917c <HAL_RCC_GetPCLK1Freq+0x24>)
 800916e:	5ccb      	ldrb	r3, [r1, r3]
 8009170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009174:	4618      	mov	r0, r3
 8009176:	bd80      	pop	{r7, pc}
 8009178:	40023800 	.word	0x40023800
 800917c:	080188cc 	.word	0x080188cc

08009180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009184:	f7ff ffdc 	bl	8009140 <HAL_RCC_GetHCLKFreq>
 8009188:	4602      	mov	r2, r0
 800918a:	4b05      	ldr	r3, [pc, #20]	@ (80091a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	0b5b      	lsrs	r3, r3, #13
 8009190:	f003 0307 	and.w	r3, r3, #7
 8009194:	4903      	ldr	r1, [pc, #12]	@ (80091a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009196:	5ccb      	ldrb	r3, [r1, r3]
 8009198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800919c:	4618      	mov	r0, r3
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	40023800 	.word	0x40023800
 80091a4:	080188cc 	.word	0x080188cc

080091a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	220f      	movs	r2, #15
 80091b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80091b8:	4b12      	ldr	r3, [pc, #72]	@ (8009204 <HAL_RCC_GetClockConfig+0x5c>)
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	f003 0203 	and.w	r2, r3, #3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80091c4:	4b0f      	ldr	r3, [pc, #60]	@ (8009204 <HAL_RCC_GetClockConfig+0x5c>)
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80091d0:	4b0c      	ldr	r3, [pc, #48]	@ (8009204 <HAL_RCC_GetClockConfig+0x5c>)
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80091dc:	4b09      	ldr	r3, [pc, #36]	@ (8009204 <HAL_RCC_GetClockConfig+0x5c>)
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	08db      	lsrs	r3, r3, #3
 80091e2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80091ea:	4b07      	ldr	r3, [pc, #28]	@ (8009208 <HAL_RCC_GetClockConfig+0x60>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f003 020f 	and.w	r2, r3, #15
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	601a      	str	r2, [r3, #0]
}
 80091f6:	bf00      	nop
 80091f8:	370c      	adds	r7, #12
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	40023800 	.word	0x40023800
 8009208:	40023c00 	.word	0x40023c00

0800920c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b088      	sub	sp, #32
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009214:	2300      	movs	r3, #0
 8009216:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009218:	2300      	movs	r3, #0
 800921a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800921c:	2300      	movs	r3, #0
 800921e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009220:	2300      	movs	r3, #0
 8009222:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009224:	2300      	movs	r3, #0
 8009226:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f003 0301 	and.w	r3, r3, #1
 8009230:	2b00      	cmp	r3, #0
 8009232:	d012      	beq.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009234:	4b69      	ldr	r3, [pc, #420]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	4a68      	ldr	r2, [pc, #416]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800923a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800923e:	6093      	str	r3, [r2, #8]
 8009240:	4b66      	ldr	r3, [pc, #408]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009242:	689a      	ldr	r2, [r3, #8]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009248:	4964      	ldr	r1, [pc, #400]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800924a:	4313      	orrs	r3, r2
 800924c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009252:	2b00      	cmp	r3, #0
 8009254:	d101      	bne.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8009256:	2301      	movs	r3, #1
 8009258:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009262:	2b00      	cmp	r3, #0
 8009264:	d017      	beq.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009266:	4b5d      	ldr	r3, [pc, #372]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009268:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800926c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009274:	4959      	ldr	r1, [pc, #356]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009276:	4313      	orrs	r3, r2
 8009278:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009280:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009284:	d101      	bne.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009286:	2301      	movs	r3, #1
 8009288:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800928e:	2b00      	cmp	r3, #0
 8009290:	d101      	bne.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8009292:	2301      	movs	r3, #1
 8009294:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d017      	beq.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80092a2:	4b4e      	ldr	r3, [pc, #312]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092a8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092b0:	494a      	ldr	r1, [pc, #296]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092b2:	4313      	orrs	r3, r2
 80092b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80092c0:	d101      	bne.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80092c2:	2301      	movs	r3, #1
 80092c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d101      	bne.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80092ce:	2301      	movs	r3, #1
 80092d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d001      	beq.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80092de:	2301      	movs	r3, #1
 80092e0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f003 0320 	and.w	r3, r3, #32
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	f000 808b 	beq.w	8009406 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80092f0:	4b3a      	ldr	r3, [pc, #232]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092f4:	4a39      	ldr	r2, [pc, #228]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80092fc:	4b37      	ldr	r3, [pc, #220]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009300:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009304:	60bb      	str	r3, [r7, #8]
 8009306:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009308:	4b35      	ldr	r3, [pc, #212]	@ (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a34      	ldr	r2, [pc, #208]	@ (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800930e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009312:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009314:	f7fd fd7c 	bl	8006e10 <HAL_GetTick>
 8009318:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800931a:	e008      	b.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800931c:	f7fd fd78 	bl	8006e10 <HAL_GetTick>
 8009320:	4602      	mov	r2, r0
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	1ad3      	subs	r3, r2, r3
 8009326:	2b64      	cmp	r3, #100	@ 0x64
 8009328:	d901      	bls.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800932a:	2303      	movs	r3, #3
 800932c:	e357      	b.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800932e:	4b2c      	ldr	r3, [pc, #176]	@ (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009336:	2b00      	cmp	r3, #0
 8009338:	d0f0      	beq.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800933a:	4b28      	ldr	r3, [pc, #160]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800933c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800933e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009342:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d035      	beq.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800934e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009352:	693a      	ldr	r2, [r7, #16]
 8009354:	429a      	cmp	r2, r3
 8009356:	d02e      	beq.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009358:	4b20      	ldr	r3, [pc, #128]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800935a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800935c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009360:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009362:	4b1e      	ldr	r3, [pc, #120]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009366:	4a1d      	ldr	r2, [pc, #116]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009368:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800936c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800936e:	4b1b      	ldr	r3, [pc, #108]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009372:	4a1a      	ldr	r2, [pc, #104]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009374:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009378:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800937a:	4a18      	ldr	r2, [pc, #96]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009380:	4b16      	ldr	r3, [pc, #88]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009384:	f003 0301 	and.w	r3, r3, #1
 8009388:	2b01      	cmp	r3, #1
 800938a:	d114      	bne.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800938c:	f7fd fd40 	bl	8006e10 <HAL_GetTick>
 8009390:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009392:	e00a      	b.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009394:	f7fd fd3c 	bl	8006e10 <HAL_GetTick>
 8009398:	4602      	mov	r2, r0
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	1ad3      	subs	r3, r2, r3
 800939e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d901      	bls.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80093a6:	2303      	movs	r3, #3
 80093a8:	e319      	b.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80093aa:	4b0c      	ldr	r3, [pc, #48]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093ae:	f003 0302 	and.w	r3, r3, #2
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d0ee      	beq.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80093c2:	d111      	bne.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80093c4:	4b05      	ldr	r3, [pc, #20]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80093d0:	4b04      	ldr	r3, [pc, #16]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80093d2:	400b      	ands	r3, r1
 80093d4:	4901      	ldr	r1, [pc, #4]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093d6:	4313      	orrs	r3, r2
 80093d8:	608b      	str	r3, [r1, #8]
 80093da:	e00b      	b.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80093dc:	40023800 	.word	0x40023800
 80093e0:	40007000 	.word	0x40007000
 80093e4:	0ffffcff 	.word	0x0ffffcff
 80093e8:	4baa      	ldr	r3, [pc, #680]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	4aa9      	ldr	r2, [pc, #676]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093ee:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80093f2:	6093      	str	r3, [r2, #8]
 80093f4:	4ba7      	ldr	r3, [pc, #668]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009400:	49a4      	ldr	r1, [pc, #656]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009402:	4313      	orrs	r3, r2
 8009404:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f003 0310 	and.w	r3, r3, #16
 800940e:	2b00      	cmp	r3, #0
 8009410:	d010      	beq.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009412:	4ba0      	ldr	r3, [pc, #640]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009414:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009418:	4a9e      	ldr	r2, [pc, #632]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800941a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800941e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8009422:	4b9c      	ldr	r3, [pc, #624]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009424:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800942c:	4999      	ldr	r1, [pc, #612]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800942e:	4313      	orrs	r3, r2
 8009430:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800943c:	2b00      	cmp	r3, #0
 800943e:	d00a      	beq.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009440:	4b94      	ldr	r3, [pc, #592]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009446:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800944e:	4991      	ldr	r1, [pc, #580]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009450:	4313      	orrs	r3, r2
 8009452:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00a      	beq.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009462:	4b8c      	ldr	r3, [pc, #560]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009468:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009470:	4988      	ldr	r1, [pc, #544]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009472:	4313      	orrs	r3, r2
 8009474:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009480:	2b00      	cmp	r3, #0
 8009482:	d00a      	beq.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009484:	4b83      	ldr	r3, [pc, #524]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800948a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009492:	4980      	ldr	r1, [pc, #512]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009494:	4313      	orrs	r3, r2
 8009496:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00a      	beq.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80094a6:	4b7b      	ldr	r3, [pc, #492]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094ac:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094b4:	4977      	ldr	r1, [pc, #476]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094b6:	4313      	orrs	r3, r2
 80094b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d00a      	beq.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80094c8:	4b72      	ldr	r3, [pc, #456]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094ce:	f023 0203 	bic.w	r2, r3, #3
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094d6:	496f      	ldr	r1, [pc, #444]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094d8:	4313      	orrs	r3, r2
 80094da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d00a      	beq.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80094ea:	4b6a      	ldr	r3, [pc, #424]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094f0:	f023 020c 	bic.w	r2, r3, #12
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094f8:	4966      	ldr	r1, [pc, #408]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094fa:	4313      	orrs	r3, r2
 80094fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009508:	2b00      	cmp	r3, #0
 800950a:	d00a      	beq.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800950c:	4b61      	ldr	r3, [pc, #388]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800950e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009512:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800951a:	495e      	ldr	r1, [pc, #376]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800951c:	4313      	orrs	r3, r2
 800951e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800952a:	2b00      	cmp	r3, #0
 800952c:	d00a      	beq.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800952e:	4b59      	ldr	r3, [pc, #356]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009534:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800953c:	4955      	ldr	r1, [pc, #340]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800953e:	4313      	orrs	r3, r2
 8009540:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800954c:	2b00      	cmp	r3, #0
 800954e:	d00a      	beq.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009550:	4b50      	ldr	r3, [pc, #320]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009556:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800955e:	494d      	ldr	r1, [pc, #308]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009560:	4313      	orrs	r3, r2
 8009562:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00a      	beq.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009572:	4b48      	ldr	r3, [pc, #288]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009578:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009580:	4944      	ldr	r1, [pc, #272]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009582:	4313      	orrs	r3, r2
 8009584:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00a      	beq.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009594:	4b3f      	ldr	r3, [pc, #252]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800959a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095a2:	493c      	ldr	r1, [pc, #240]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095a4:	4313      	orrs	r3, r2
 80095a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00a      	beq.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80095b6:	4b37      	ldr	r3, [pc, #220]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095bc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095c4:	4933      	ldr	r1, [pc, #204]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095c6:	4313      	orrs	r3, r2
 80095c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00a      	beq.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80095d8:	4b2e      	ldr	r3, [pc, #184]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095de:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095e6:	492b      	ldr	r1, [pc, #172]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095e8:	4313      	orrs	r3, r2
 80095ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d011      	beq.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80095fa:	4b26      	ldr	r3, [pc, #152]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009600:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009608:	4922      	ldr	r1, [pc, #136]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800960a:	4313      	orrs	r3, r2
 800960c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009614:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009618:	d101      	bne.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800961a:	2301      	movs	r3, #1
 800961c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f003 0308 	and.w	r3, r3, #8
 8009626:	2b00      	cmp	r3, #0
 8009628:	d001      	beq.n	800962e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800962a:	2301      	movs	r3, #1
 800962c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00a      	beq.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800963a:	4b16      	ldr	r3, [pc, #88]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800963c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009640:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009648:	4912      	ldr	r1, [pc, #72]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800964a:	4313      	orrs	r3, r2
 800964c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009658:	2b00      	cmp	r3, #0
 800965a:	d00b      	beq.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800965c:	4b0d      	ldr	r3, [pc, #52]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800965e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009662:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800966c:	4909      	ldr	r1, [pc, #36]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800966e:	4313      	orrs	r3, r2
 8009670:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	2b01      	cmp	r3, #1
 8009678:	d006      	beq.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009682:	2b00      	cmp	r3, #0
 8009684:	f000 80d9 	beq.w	800983a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009688:	4b02      	ldr	r3, [pc, #8]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a01      	ldr	r2, [pc, #4]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800968e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009692:	e001      	b.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8009694:	40023800 	.word	0x40023800
 8009698:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800969a:	f7fd fbb9 	bl	8006e10 <HAL_GetTick>
 800969e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80096a0:	e008      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80096a2:	f7fd fbb5 	bl	8006e10 <HAL_GetTick>
 80096a6:	4602      	mov	r2, r0
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	1ad3      	subs	r3, r2, r3
 80096ac:	2b64      	cmp	r3, #100	@ 0x64
 80096ae:	d901      	bls.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80096b0:	2303      	movs	r3, #3
 80096b2:	e194      	b.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80096b4:	4b6c      	ldr	r3, [pc, #432]	@ (8009868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d1f0      	bne.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f003 0301 	and.w	r3, r3, #1
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d021      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d11d      	bne.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80096d4:	4b64      	ldr	r3, [pc, #400]	@ (8009868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80096d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80096da:	0c1b      	lsrs	r3, r3, #16
 80096dc:	f003 0303 	and.w	r3, r3, #3
 80096e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80096e2:	4b61      	ldr	r3, [pc, #388]	@ (8009868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80096e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80096e8:	0e1b      	lsrs	r3, r3, #24
 80096ea:	f003 030f 	and.w	r3, r3, #15
 80096ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	019a      	lsls	r2, r3, #6
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	041b      	lsls	r3, r3, #16
 80096fa:	431a      	orrs	r2, r3
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	061b      	lsls	r3, r3, #24
 8009700:	431a      	orrs	r2, r3
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	071b      	lsls	r3, r3, #28
 8009708:	4957      	ldr	r1, [pc, #348]	@ (8009868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800970a:	4313      	orrs	r3, r2
 800970c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009718:	2b00      	cmp	r3, #0
 800971a:	d004      	beq.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009720:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009724:	d00a      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800972e:	2b00      	cmp	r3, #0
 8009730:	d02e      	beq.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009736:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800973a:	d129      	bne.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800973c:	4b4a      	ldr	r3, [pc, #296]	@ (8009868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800973e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009742:	0c1b      	lsrs	r3, r3, #16
 8009744:	f003 0303 	and.w	r3, r3, #3
 8009748:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800974a:	4b47      	ldr	r3, [pc, #284]	@ (8009868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800974c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009750:	0f1b      	lsrs	r3, r3, #28
 8009752:	f003 0307 	and.w	r3, r3, #7
 8009756:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	019a      	lsls	r2, r3, #6
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	041b      	lsls	r3, r3, #16
 8009762:	431a      	orrs	r2, r3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	061b      	lsls	r3, r3, #24
 800976a:	431a      	orrs	r2, r3
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	071b      	lsls	r3, r3, #28
 8009770:	493d      	ldr	r1, [pc, #244]	@ (8009868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009772:	4313      	orrs	r3, r2
 8009774:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009778:	4b3b      	ldr	r3, [pc, #236]	@ (8009868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800977a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800977e:	f023 021f 	bic.w	r2, r3, #31
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009786:	3b01      	subs	r3, #1
 8009788:	4937      	ldr	r1, [pc, #220]	@ (8009868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800978a:	4313      	orrs	r3, r2
 800978c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009798:	2b00      	cmp	r3, #0
 800979a:	d01d      	beq.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800979c:	4b32      	ldr	r3, [pc, #200]	@ (8009868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800979e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097a2:	0e1b      	lsrs	r3, r3, #24
 80097a4:	f003 030f 	and.w	r3, r3, #15
 80097a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80097aa:	4b2f      	ldr	r3, [pc, #188]	@ (8009868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097b0:	0f1b      	lsrs	r3, r3, #28
 80097b2:	f003 0307 	and.w	r3, r3, #7
 80097b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	019a      	lsls	r2, r3, #6
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	041b      	lsls	r3, r3, #16
 80097c4:	431a      	orrs	r2, r3
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	061b      	lsls	r3, r3, #24
 80097ca:	431a      	orrs	r2, r3
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	071b      	lsls	r3, r3, #28
 80097d0:	4925      	ldr	r1, [pc, #148]	@ (8009868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097d2:	4313      	orrs	r3, r2
 80097d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d011      	beq.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	019a      	lsls	r2, r3, #6
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	691b      	ldr	r3, [r3, #16]
 80097ee:	041b      	lsls	r3, r3, #16
 80097f0:	431a      	orrs	r2, r3
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	061b      	lsls	r3, r3, #24
 80097f8:	431a      	orrs	r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	071b      	lsls	r3, r3, #28
 8009800:	4919      	ldr	r1, [pc, #100]	@ (8009868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009802:	4313      	orrs	r3, r2
 8009804:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009808:	4b17      	ldr	r3, [pc, #92]	@ (8009868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a16      	ldr	r2, [pc, #88]	@ (8009868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800980e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009812:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009814:	f7fd fafc 	bl	8006e10 <HAL_GetTick>
 8009818:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800981a:	e008      	b.n	800982e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800981c:	f7fd faf8 	bl	8006e10 <HAL_GetTick>
 8009820:	4602      	mov	r2, r0
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	2b64      	cmp	r3, #100	@ 0x64
 8009828:	d901      	bls.n	800982e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800982a:	2303      	movs	r3, #3
 800982c:	e0d7      	b.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800982e:	4b0e      	ldr	r3, [pc, #56]	@ (8009868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009836:	2b00      	cmp	r3, #0
 8009838:	d0f0      	beq.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	2b01      	cmp	r3, #1
 800983e:	f040 80cd 	bne.w	80099dc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009842:	4b09      	ldr	r3, [pc, #36]	@ (8009868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a08      	ldr	r2, [pc, #32]	@ (8009868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009848:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800984c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800984e:	f7fd fadf 	bl	8006e10 <HAL_GetTick>
 8009852:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009854:	e00a      	b.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009856:	f7fd fadb 	bl	8006e10 <HAL_GetTick>
 800985a:	4602      	mov	r2, r0
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	1ad3      	subs	r3, r2, r3
 8009860:	2b64      	cmp	r3, #100	@ 0x64
 8009862:	d903      	bls.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009864:	2303      	movs	r3, #3
 8009866:	e0ba      	b.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009868:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800986c:	4b5e      	ldr	r3, [pc, #376]	@ (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009874:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009878:	d0ed      	beq.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009882:	2b00      	cmp	r3, #0
 8009884:	d003      	beq.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800988a:	2b00      	cmp	r3, #0
 800988c:	d009      	beq.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009896:	2b00      	cmp	r3, #0
 8009898:	d02e      	beq.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d12a      	bne.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80098a2:	4b51      	ldr	r3, [pc, #324]	@ (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80098a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098a8:	0c1b      	lsrs	r3, r3, #16
 80098aa:	f003 0303 	and.w	r3, r3, #3
 80098ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80098b0:	4b4d      	ldr	r3, [pc, #308]	@ (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80098b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098b6:	0f1b      	lsrs	r3, r3, #28
 80098b8:	f003 0307 	and.w	r3, r3, #7
 80098bc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	695b      	ldr	r3, [r3, #20]
 80098c2:	019a      	lsls	r2, r3, #6
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	041b      	lsls	r3, r3, #16
 80098c8:	431a      	orrs	r2, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	699b      	ldr	r3, [r3, #24]
 80098ce:	061b      	lsls	r3, r3, #24
 80098d0:	431a      	orrs	r2, r3
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	071b      	lsls	r3, r3, #28
 80098d6:	4944      	ldr	r1, [pc, #272]	@ (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80098d8:	4313      	orrs	r3, r2
 80098da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80098de:	4b42      	ldr	r3, [pc, #264]	@ (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80098e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098e4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ec:	3b01      	subs	r3, #1
 80098ee:	021b      	lsls	r3, r3, #8
 80098f0:	493d      	ldr	r1, [pc, #244]	@ (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80098f2:	4313      	orrs	r3, r2
 80098f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009900:	2b00      	cmp	r3, #0
 8009902:	d022      	beq.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009908:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800990c:	d11d      	bne.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800990e:	4b36      	ldr	r3, [pc, #216]	@ (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009914:	0e1b      	lsrs	r3, r3, #24
 8009916:	f003 030f 	and.w	r3, r3, #15
 800991a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800991c:	4b32      	ldr	r3, [pc, #200]	@ (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800991e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009922:	0f1b      	lsrs	r3, r3, #28
 8009924:	f003 0307 	and.w	r3, r3, #7
 8009928:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	695b      	ldr	r3, [r3, #20]
 800992e:	019a      	lsls	r2, r3, #6
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6a1b      	ldr	r3, [r3, #32]
 8009934:	041b      	lsls	r3, r3, #16
 8009936:	431a      	orrs	r2, r3
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	061b      	lsls	r3, r3, #24
 800993c:	431a      	orrs	r2, r3
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	071b      	lsls	r3, r3, #28
 8009942:	4929      	ldr	r1, [pc, #164]	@ (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009944:	4313      	orrs	r3, r2
 8009946:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f003 0308 	and.w	r3, r3, #8
 8009952:	2b00      	cmp	r3, #0
 8009954:	d028      	beq.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009956:	4b24      	ldr	r3, [pc, #144]	@ (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800995c:	0e1b      	lsrs	r3, r3, #24
 800995e:	f003 030f 	and.w	r3, r3, #15
 8009962:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009964:	4b20      	ldr	r3, [pc, #128]	@ (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800996a:	0c1b      	lsrs	r3, r3, #16
 800996c:	f003 0303 	and.w	r3, r3, #3
 8009970:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	695b      	ldr	r3, [r3, #20]
 8009976:	019a      	lsls	r2, r3, #6
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	041b      	lsls	r3, r3, #16
 800997c:	431a      	orrs	r2, r3
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	061b      	lsls	r3, r3, #24
 8009982:	431a      	orrs	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	69db      	ldr	r3, [r3, #28]
 8009988:	071b      	lsls	r3, r3, #28
 800998a:	4917      	ldr	r1, [pc, #92]	@ (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800998c:	4313      	orrs	r3, r2
 800998e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009992:	4b15      	ldr	r3, [pc, #84]	@ (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009994:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009998:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a0:	4911      	ldr	r1, [pc, #68]	@ (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099a2:	4313      	orrs	r3, r2
 80099a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80099a8:	4b0f      	ldr	r3, [pc, #60]	@ (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a0e      	ldr	r2, [pc, #56]	@ (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80099b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099b4:	f7fd fa2c 	bl	8006e10 <HAL_GetTick>
 80099b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80099ba:	e008      	b.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80099bc:	f7fd fa28 	bl	8006e10 <HAL_GetTick>
 80099c0:	4602      	mov	r2, r0
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	1ad3      	subs	r3, r2, r3
 80099c6:	2b64      	cmp	r3, #100	@ 0x64
 80099c8:	d901      	bls.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80099ca:	2303      	movs	r3, #3
 80099cc:	e007      	b.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80099ce:	4b06      	ldr	r3, [pc, #24]	@ (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099da:	d1ef      	bne.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3720      	adds	r7, #32
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	40023800 	.word	0x40023800

080099ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d101      	bne.n	80099fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80099fa:	2301      	movs	r3, #1
 80099fc:	e09d      	b.n	8009b3a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d108      	bne.n	8009a18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a0e:	d009      	beq.n	8009a24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	61da      	str	r2, [r3, #28]
 8009a16:	e005      	b.n	8009a24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d106      	bne.n	8009a44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f7fc f9c0 	bl	8005dc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2202      	movs	r2, #2
 8009a48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009a64:	d902      	bls.n	8009a6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009a66:	2300      	movs	r3, #0
 8009a68:	60fb      	str	r3, [r7, #12]
 8009a6a:	e002      	b.n	8009a72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009a6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009a70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009a7a:	d007      	beq.n	8009a8c <HAL_SPI_Init+0xa0>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009a84:	d002      	beq.n	8009a8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009a9c:	431a      	orrs	r2, r3
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	691b      	ldr	r3, [r3, #16]
 8009aa2:	f003 0302 	and.w	r3, r3, #2
 8009aa6:	431a      	orrs	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	695b      	ldr	r3, [r3, #20]
 8009aac:	f003 0301 	and.w	r3, r3, #1
 8009ab0:	431a      	orrs	r2, r3
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	699b      	ldr	r3, [r3, #24]
 8009ab6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009aba:	431a      	orrs	r2, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	69db      	ldr	r3, [r3, #28]
 8009ac0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009ac4:	431a      	orrs	r2, r3
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a1b      	ldr	r3, [r3, #32]
 8009aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ace:	ea42 0103 	orr.w	r1, r2, r3
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ad6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	430a      	orrs	r2, r1
 8009ae0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	699b      	ldr	r3, [r3, #24]
 8009ae6:	0c1b      	lsrs	r3, r3, #16
 8009ae8:	f003 0204 	and.w	r2, r3, #4
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009af0:	f003 0310 	and.w	r3, r3, #16
 8009af4:	431a      	orrs	r2, r3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009afa:	f003 0308 	and.w	r3, r3, #8
 8009afe:	431a      	orrs	r2, r3
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009b08:	ea42 0103 	orr.w	r1, r2, r3
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	430a      	orrs	r2, r1
 8009b18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	69da      	ldr	r2, [r3, #28]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009b28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009b38:	2300      	movs	r3, #0
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3710      	adds	r7, #16
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b088      	sub	sp, #32
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	60f8      	str	r0, [r7, #12]
 8009b4a:	60b9      	str	r1, [r7, #8]
 8009b4c:	603b      	str	r3, [r7, #0]
 8009b4e:	4613      	mov	r3, r2
 8009b50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009b52:	2300      	movs	r3, #0
 8009b54:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d101      	bne.n	8009b64 <HAL_SPI_Transmit+0x22>
 8009b60:	2302      	movs	r3, #2
 8009b62:	e15f      	b.n	8009e24 <HAL_SPI_Transmit+0x2e2>
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2201      	movs	r2, #1
 8009b68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009b6c:	f7fd f950 	bl	8006e10 <HAL_GetTick>
 8009b70:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009b72:	88fb      	ldrh	r3, [r7, #6]
 8009b74:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d002      	beq.n	8009b88 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009b82:	2302      	movs	r3, #2
 8009b84:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009b86:	e148      	b.n	8009e1a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d002      	beq.n	8009b94 <HAL_SPI_Transmit+0x52>
 8009b8e:	88fb      	ldrh	r3, [r7, #6]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d102      	bne.n	8009b9a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009b94:	2301      	movs	r3, #1
 8009b96:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009b98:	e13f      	b.n	8009e1a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2203      	movs	r2, #3
 8009b9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	68ba      	ldr	r2, [r7, #8]
 8009bac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	88fa      	ldrh	r2, [r7, #6]
 8009bb2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	88fa      	ldrh	r2, [r7, #6]
 8009bb8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009be4:	d10f      	bne.n	8009c06 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009bf4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009c04:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c10:	2b40      	cmp	r3, #64	@ 0x40
 8009c12:	d007      	beq.n	8009c24 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009c2c:	d94f      	bls.n	8009cce <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d002      	beq.n	8009c3c <HAL_SPI_Transmit+0xfa>
 8009c36:	8afb      	ldrh	r3, [r7, #22]
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d142      	bne.n	8009cc2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c40:	881a      	ldrh	r2, [r3, #0]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c4c:	1c9a      	adds	r2, r3, #2
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	3b01      	subs	r3, #1
 8009c5a:	b29a      	uxth	r2, r3
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009c60:	e02f      	b.n	8009cc2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	f003 0302 	and.w	r3, r3, #2
 8009c6c:	2b02      	cmp	r3, #2
 8009c6e:	d112      	bne.n	8009c96 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c74:	881a      	ldrh	r2, [r3, #0]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c80:	1c9a      	adds	r2, r3, #2
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	3b01      	subs	r3, #1
 8009c8e:	b29a      	uxth	r2, r3
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009c94:	e015      	b.n	8009cc2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c96:	f7fd f8bb 	bl	8006e10 <HAL_GetTick>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	1ad3      	subs	r3, r2, r3
 8009ca0:	683a      	ldr	r2, [r7, #0]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d803      	bhi.n	8009cae <HAL_SPI_Transmit+0x16c>
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cac:	d102      	bne.n	8009cb4 <HAL_SPI_Transmit+0x172>
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d106      	bne.n	8009cc2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8009cb4:	2303      	movs	r3, #3
 8009cb6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8009cc0:	e0ab      	b.n	8009e1a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d1ca      	bne.n	8009c62 <HAL_SPI_Transmit+0x120>
 8009ccc:	e080      	b.n	8009dd0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d002      	beq.n	8009cdc <HAL_SPI_Transmit+0x19a>
 8009cd6:	8afb      	ldrh	r3, [r7, #22]
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d174      	bne.n	8009dc6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d912      	bls.n	8009d0c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cea:	881a      	ldrh	r2, [r3, #0]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cf6:	1c9a      	adds	r2, r3, #2
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	3b02      	subs	r3, #2
 8009d04:	b29a      	uxth	r2, r3
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009d0a:	e05c      	b.n	8009dc6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	330c      	adds	r3, #12
 8009d16:	7812      	ldrb	r2, [r2, #0]
 8009d18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d1e:	1c5a      	adds	r2, r3, #1
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	b29a      	uxth	r2, r3
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009d32:	e048      	b.n	8009dc6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	f003 0302 	and.w	r3, r3, #2
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	d12b      	bne.n	8009d9a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d912      	bls.n	8009d72 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d50:	881a      	ldrh	r2, [r3, #0]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d5c:	1c9a      	adds	r2, r3, #2
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	3b02      	subs	r3, #2
 8009d6a:	b29a      	uxth	r2, r3
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009d70:	e029      	b.n	8009dc6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	330c      	adds	r3, #12
 8009d7c:	7812      	ldrb	r2, [r2, #0]
 8009d7e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d84:	1c5a      	adds	r2, r3, #1
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	3b01      	subs	r3, #1
 8009d92:	b29a      	uxth	r2, r3
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009d98:	e015      	b.n	8009dc6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d9a:	f7fd f839 	bl	8006e10 <HAL_GetTick>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	1ad3      	subs	r3, r2, r3
 8009da4:	683a      	ldr	r2, [r7, #0]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d803      	bhi.n	8009db2 <HAL_SPI_Transmit+0x270>
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db0:	d102      	bne.n	8009db8 <HAL_SPI_Transmit+0x276>
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d106      	bne.n	8009dc6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8009db8:	2303      	movs	r3, #3
 8009dba:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8009dc4:	e029      	b.n	8009e1a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d1b1      	bne.n	8009d34 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009dd0:	69ba      	ldr	r2, [r7, #24]
 8009dd2:	6839      	ldr	r1, [r7, #0]
 8009dd4:	68f8      	ldr	r0, [r7, #12]
 8009dd6:	f000 fb69 	bl	800a4ac <SPI_EndRxTxTransaction>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d002      	beq.n	8009de6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2220      	movs	r2, #32
 8009de4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d10a      	bne.n	8009e04 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009dee:	2300      	movs	r3, #0
 8009df0:	613b      	str	r3, [r7, #16]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	613b      	str	r3, [r7, #16]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	613b      	str	r3, [r7, #16]
 8009e02:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d002      	beq.n	8009e12 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	77fb      	strb	r3, [r7, #31]
 8009e10:	e003      	b.n	8009e1a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2201      	movs	r2, #1
 8009e16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8009e22:	7ffb      	ldrb	r3, [r7, #31]
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3720      	adds	r7, #32
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b08a      	sub	sp, #40	@ 0x28
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	607a      	str	r2, [r7, #4]
 8009e38:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d101      	bne.n	8009e52 <HAL_SPI_TransmitReceive+0x26>
 8009e4e:	2302      	movs	r3, #2
 8009e50:	e20a      	b.n	800a268 <HAL_SPI_TransmitReceive+0x43c>
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2201      	movs	r2, #1
 8009e56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009e5a:	f7fc ffd9 	bl	8006e10 <HAL_GetTick>
 8009e5e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009e66:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009e6e:	887b      	ldrh	r3, [r7, #2]
 8009e70:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009e72:	887b      	ldrh	r3, [r7, #2]
 8009e74:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009e76:	7efb      	ldrb	r3, [r7, #27]
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d00e      	beq.n	8009e9a <HAL_SPI_TransmitReceive+0x6e>
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009e82:	d106      	bne.n	8009e92 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	689b      	ldr	r3, [r3, #8]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d102      	bne.n	8009e92 <HAL_SPI_TransmitReceive+0x66>
 8009e8c:	7efb      	ldrb	r3, [r7, #27]
 8009e8e:	2b04      	cmp	r3, #4
 8009e90:	d003      	beq.n	8009e9a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009e92:	2302      	movs	r3, #2
 8009e94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8009e98:	e1e0      	b.n	800a25c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d005      	beq.n	8009eac <HAL_SPI_TransmitReceive+0x80>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d002      	beq.n	8009eac <HAL_SPI_TransmitReceive+0x80>
 8009ea6:	887b      	ldrh	r3, [r7, #2]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d103      	bne.n	8009eb4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009eac:	2301      	movs	r3, #1
 8009eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8009eb2:	e1d3      	b.n	800a25c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	2b04      	cmp	r3, #4
 8009ebe:	d003      	beq.n	8009ec8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2205      	movs	r2, #5
 8009ec4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	887a      	ldrh	r2, [r7, #2]
 8009ed8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	887a      	ldrh	r2, [r7, #2]
 8009ee0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	68ba      	ldr	r2, [r7, #8]
 8009ee8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	887a      	ldrh	r2, [r7, #2]
 8009eee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	887a      	ldrh	r2, [r7, #2]
 8009ef4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2200      	movs	r2, #0
 8009f00:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009f0a:	d802      	bhi.n	8009f12 <HAL_SPI_TransmitReceive+0xe6>
 8009f0c:	8a3b      	ldrh	r3, [r7, #16]
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d908      	bls.n	8009f24 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	685a      	ldr	r2, [r3, #4]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009f20:	605a      	str	r2, [r3, #4]
 8009f22:	e007      	b.n	8009f34 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	685a      	ldr	r2, [r3, #4]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009f32:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f3e:	2b40      	cmp	r3, #64	@ 0x40
 8009f40:	d007      	beq.n	8009f52 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009f50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	68db      	ldr	r3, [r3, #12]
 8009f56:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009f5a:	f240 8081 	bls.w	800a060 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d002      	beq.n	8009f6c <HAL_SPI_TransmitReceive+0x140>
 8009f66:	8a7b      	ldrh	r3, [r7, #18]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d16d      	bne.n	800a048 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f70:	881a      	ldrh	r2, [r3, #0]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f7c:	1c9a      	adds	r2, r3, #2
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	3b01      	subs	r3, #1
 8009f8a:	b29a      	uxth	r2, r3
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f90:	e05a      	b.n	800a048 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	f003 0302 	and.w	r3, r3, #2
 8009f9c:	2b02      	cmp	r3, #2
 8009f9e:	d11b      	bne.n	8009fd8 <HAL_SPI_TransmitReceive+0x1ac>
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d016      	beq.n	8009fd8 <HAL_SPI_TransmitReceive+0x1ac>
 8009faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d113      	bne.n	8009fd8 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fb4:	881a      	ldrh	r2, [r3, #0]
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fc0:	1c9a      	adds	r2, r3, #2
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	b29a      	uxth	r2, r3
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	f003 0301 	and.w	r3, r3, #1
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d11c      	bne.n	800a020 <HAL_SPI_TransmitReceive+0x1f4>
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d016      	beq.n	800a020 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68da      	ldr	r2, [r3, #12]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ffc:	b292      	uxth	r2, r2
 8009ffe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a004:	1c9a      	adds	r2, r3, #2
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a010:	b29b      	uxth	r3, r3
 800a012:	3b01      	subs	r3, #1
 800a014:	b29a      	uxth	r2, r3
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a01c:	2301      	movs	r3, #1
 800a01e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a020:	f7fc fef6 	bl	8006e10 <HAL_GetTick>
 800a024:	4602      	mov	r2, r0
 800a026:	69fb      	ldr	r3, [r7, #28]
 800a028:	1ad3      	subs	r3, r2, r3
 800a02a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d80b      	bhi.n	800a048 <HAL_SPI_TransmitReceive+0x21c>
 800a030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a032:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a036:	d007      	beq.n	800a048 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800a038:	2303      	movs	r3, #3
 800a03a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2201      	movs	r2, #1
 800a042:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800a046:	e109      	b.n	800a25c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d19f      	bne.n	8009f92 <HAL_SPI_TransmitReceive+0x166>
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a058:	b29b      	uxth	r3, r3
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d199      	bne.n	8009f92 <HAL_SPI_TransmitReceive+0x166>
 800a05e:	e0e3      	b.n	800a228 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d003      	beq.n	800a070 <HAL_SPI_TransmitReceive+0x244>
 800a068:	8a7b      	ldrh	r3, [r7, #18]
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	f040 80cf 	bne.w	800a20e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a074:	b29b      	uxth	r3, r3
 800a076:	2b01      	cmp	r3, #1
 800a078:	d912      	bls.n	800a0a0 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a07e:	881a      	ldrh	r2, [r3, #0]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a08a:	1c9a      	adds	r2, r3, #2
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a094:	b29b      	uxth	r3, r3
 800a096:	3b02      	subs	r3, #2
 800a098:	b29a      	uxth	r2, r3
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a09e:	e0b6      	b.n	800a20e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	330c      	adds	r3, #12
 800a0aa:	7812      	ldrb	r2, [r2, #0]
 800a0ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0b2:	1c5a      	adds	r2, r3, #1
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	3b01      	subs	r3, #1
 800a0c0:	b29a      	uxth	r2, r3
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a0c6:	e0a2      	b.n	800a20e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	f003 0302 	and.w	r3, r3, #2
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	d134      	bne.n	800a140 <HAL_SPI_TransmitReceive+0x314>
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d02f      	beq.n	800a140 <HAL_SPI_TransmitReceive+0x314>
 800a0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d12c      	bne.n	800a140 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d912      	bls.n	800a116 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0f4:	881a      	ldrh	r2, [r3, #0]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a100:	1c9a      	adds	r2, r3, #2
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	3b02      	subs	r3, #2
 800a10e:	b29a      	uxth	r2, r3
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a114:	e012      	b.n	800a13c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	330c      	adds	r3, #12
 800a120:	7812      	ldrb	r2, [r2, #0]
 800a122:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a128:	1c5a      	adds	r2, r3, #1
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a132:	b29b      	uxth	r3, r3
 800a134:	3b01      	subs	r3, #1
 800a136:	b29a      	uxth	r2, r3
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a13c:	2300      	movs	r3, #0
 800a13e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	f003 0301 	and.w	r3, r3, #1
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d148      	bne.n	800a1e0 <HAL_SPI_TransmitReceive+0x3b4>
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a154:	b29b      	uxth	r3, r3
 800a156:	2b00      	cmp	r3, #0
 800a158:	d042      	beq.n	800a1e0 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a160:	b29b      	uxth	r3, r3
 800a162:	2b01      	cmp	r3, #1
 800a164:	d923      	bls.n	800a1ae <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	68da      	ldr	r2, [r3, #12]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a170:	b292      	uxth	r2, r2
 800a172:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a178:	1c9a      	adds	r2, r3, #2
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a184:	b29b      	uxth	r3, r3
 800a186:	3b02      	subs	r3, #2
 800a188:	b29a      	uxth	r2, r3
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a196:	b29b      	uxth	r3, r3
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d81f      	bhi.n	800a1dc <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	685a      	ldr	r2, [r3, #4]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a1aa:	605a      	str	r2, [r3, #4]
 800a1ac:	e016      	b.n	800a1dc <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f103 020c 	add.w	r2, r3, #12
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1ba:	7812      	ldrb	r2, [r2, #0]
 800a1bc:	b2d2      	uxtb	r2, r2
 800a1be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1c4:	1c5a      	adds	r2, r3, #1
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	b29a      	uxth	r2, r3
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a1e0:	f7fc fe16 	bl	8006e10 <HAL_GetTick>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	1ad3      	subs	r3, r2, r3
 800a1ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d803      	bhi.n	800a1f8 <HAL_SPI_TransmitReceive+0x3cc>
 800a1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f6:	d102      	bne.n	800a1fe <HAL_SPI_TransmitReceive+0x3d2>
 800a1f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d107      	bne.n	800a20e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800a1fe:	2303      	movs	r3, #3
 800a200:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2201      	movs	r2, #1
 800a208:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800a20c:	e026      	b.n	800a25c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a212:	b29b      	uxth	r3, r3
 800a214:	2b00      	cmp	r3, #0
 800a216:	f47f af57 	bne.w	800a0c8 <HAL_SPI_TransmitReceive+0x29c>
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a220:	b29b      	uxth	r3, r3
 800a222:	2b00      	cmp	r3, #0
 800a224:	f47f af50 	bne.w	800a0c8 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a228:	69fa      	ldr	r2, [r7, #28]
 800a22a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f000 f93d 	bl	800a4ac <SPI_EndRxTxTransaction>
 800a232:	4603      	mov	r3, r0
 800a234:	2b00      	cmp	r3, #0
 800a236:	d005      	beq.n	800a244 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800a238:	2301      	movs	r3, #1
 800a23a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2220      	movs	r2, #32
 800a242:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d003      	beq.n	800a254 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800a24c:	2301      	movs	r3, #1
 800a24e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a252:	e003      	b.n	800a25c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2201      	movs	r2, #1
 800a258:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2200      	movs	r2, #0
 800a260:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800a264:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3728      	adds	r7, #40	@ 0x28
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b088      	sub	sp, #32
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	60b9      	str	r1, [r7, #8]
 800a27a:	603b      	str	r3, [r7, #0]
 800a27c:	4613      	mov	r3, r2
 800a27e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a280:	f7fc fdc6 	bl	8006e10 <HAL_GetTick>
 800a284:	4602      	mov	r2, r0
 800a286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a288:	1a9b      	subs	r3, r3, r2
 800a28a:	683a      	ldr	r2, [r7, #0]
 800a28c:	4413      	add	r3, r2
 800a28e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a290:	f7fc fdbe 	bl	8006e10 <HAL_GetTick>
 800a294:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a296:	4b39      	ldr	r3, [pc, #228]	@ (800a37c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	015b      	lsls	r3, r3, #5
 800a29c:	0d1b      	lsrs	r3, r3, #20
 800a29e:	69fa      	ldr	r2, [r7, #28]
 800a2a0:	fb02 f303 	mul.w	r3, r2, r3
 800a2a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a2a6:	e054      	b.n	800a352 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ae:	d050      	beq.n	800a352 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a2b0:	f7fc fdae 	bl	8006e10 <HAL_GetTick>
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	69bb      	ldr	r3, [r7, #24]
 800a2b8:	1ad3      	subs	r3, r2, r3
 800a2ba:	69fa      	ldr	r2, [r7, #28]
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d902      	bls.n	800a2c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d13d      	bne.n	800a342 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	685a      	ldr	r2, [r3, #4]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a2d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a2de:	d111      	bne.n	800a304 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2e8:	d004      	beq.n	800a2f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	689b      	ldr	r3, [r3, #8]
 800a2ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2f2:	d107      	bne.n	800a304 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	681a      	ldr	r2, [r3, #0]
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a302:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a308:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a30c:	d10f      	bne.n	800a32e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a31c:	601a      	str	r2, [r3, #0]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	681a      	ldr	r2, [r3, #0]
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a32c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2201      	movs	r2, #1
 800a332:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2200      	movs	r2, #0
 800a33a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a33e:	2303      	movs	r3, #3
 800a340:	e017      	b.n	800a372 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d101      	bne.n	800a34c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a348:	2300      	movs	r3, #0
 800a34a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	3b01      	subs	r3, #1
 800a350:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	689a      	ldr	r2, [r3, #8]
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	4013      	ands	r3, r2
 800a35c:	68ba      	ldr	r2, [r7, #8]
 800a35e:	429a      	cmp	r2, r3
 800a360:	bf0c      	ite	eq
 800a362:	2301      	moveq	r3, #1
 800a364:	2300      	movne	r3, #0
 800a366:	b2db      	uxtb	r3, r3
 800a368:	461a      	mov	r2, r3
 800a36a:	79fb      	ldrb	r3, [r7, #7]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d19b      	bne.n	800a2a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a370:	2300      	movs	r3, #0
}
 800a372:	4618      	mov	r0, r3
 800a374:	3720      	adds	r7, #32
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	bf00      	nop
 800a37c:	20000054 	.word	0x20000054

0800a380 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b08a      	sub	sp, #40	@ 0x28
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	607a      	str	r2, [r7, #4]
 800a38c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a38e:	2300      	movs	r3, #0
 800a390:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a392:	f7fc fd3d 	bl	8006e10 <HAL_GetTick>
 800a396:	4602      	mov	r2, r0
 800a398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a39a:	1a9b      	subs	r3, r3, r2
 800a39c:	683a      	ldr	r2, [r7, #0]
 800a39e:	4413      	add	r3, r2
 800a3a0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a3a2:	f7fc fd35 	bl	8006e10 <HAL_GetTick>
 800a3a6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	330c      	adds	r3, #12
 800a3ae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a3b0:	4b3d      	ldr	r3, [pc, #244]	@ (800a4a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	4613      	mov	r3, r2
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	4413      	add	r3, r2
 800a3ba:	00da      	lsls	r2, r3, #3
 800a3bc:	1ad3      	subs	r3, r2, r3
 800a3be:	0d1b      	lsrs	r3, r3, #20
 800a3c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3c2:	fb02 f303 	mul.w	r3, r2, r3
 800a3c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a3c8:	e060      	b.n	800a48c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a3d0:	d107      	bne.n	800a3e2 <SPI_WaitFifoStateUntilTimeout+0x62>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d104      	bne.n	800a3e2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a3e0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3e8:	d050      	beq.n	800a48c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a3ea:	f7fc fd11 	bl	8006e10 <HAL_GetTick>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	6a3b      	ldr	r3, [r7, #32]
 800a3f2:	1ad3      	subs	r3, r2, r3
 800a3f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d902      	bls.n	800a400 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d13d      	bne.n	800a47c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	685a      	ldr	r2, [r3, #4]
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a40e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a418:	d111      	bne.n	800a43e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	689b      	ldr	r3, [r3, #8]
 800a41e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a422:	d004      	beq.n	800a42e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a42c:	d107      	bne.n	800a43e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	681a      	ldr	r2, [r3, #0]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a43c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a442:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a446:	d10f      	bne.n	800a468 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a456:	601a      	str	r2, [r3, #0]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a466:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2201      	movs	r2, #1
 800a46c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2200      	movs	r2, #0
 800a474:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a478:	2303      	movs	r3, #3
 800a47a:	e010      	b.n	800a49e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d101      	bne.n	800a486 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a482:	2300      	movs	r3, #0
 800a484:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a486:	69bb      	ldr	r3, [r7, #24]
 800a488:	3b01      	subs	r3, #1
 800a48a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	689a      	ldr	r2, [r3, #8]
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	4013      	ands	r3, r2
 800a496:	687a      	ldr	r2, [r7, #4]
 800a498:	429a      	cmp	r2, r3
 800a49a:	d196      	bne.n	800a3ca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a49c:	2300      	movs	r3, #0
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3728      	adds	r7, #40	@ 0x28
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	20000054 	.word	0x20000054

0800a4ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b088      	sub	sp, #32
 800a4b0:	af02      	add	r7, sp, #8
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	60b9      	str	r1, [r7, #8]
 800a4b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	9300      	str	r3, [sp, #0]
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f7ff ff5b 	bl	800a380 <SPI_WaitFifoStateUntilTimeout>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d007      	beq.n	800a4e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4d4:	f043 0220 	orr.w	r2, r3, #32
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a4dc:	2303      	movs	r3, #3
 800a4de:	e046      	b.n	800a56e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a4e0:	4b25      	ldr	r3, [pc, #148]	@ (800a578 <SPI_EndRxTxTransaction+0xcc>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a25      	ldr	r2, [pc, #148]	@ (800a57c <SPI_EndRxTxTransaction+0xd0>)
 800a4e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a4ea:	0d5b      	lsrs	r3, r3, #21
 800a4ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a4f0:	fb02 f303 	mul.w	r3, r2, r3
 800a4f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a4fe:	d112      	bne.n	800a526 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	9300      	str	r3, [sp, #0]
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	2200      	movs	r2, #0
 800a508:	2180      	movs	r1, #128	@ 0x80
 800a50a:	68f8      	ldr	r0, [r7, #12]
 800a50c:	f7ff feb0 	bl	800a270 <SPI_WaitFlagStateUntilTimeout>
 800a510:	4603      	mov	r3, r0
 800a512:	2b00      	cmp	r3, #0
 800a514:	d016      	beq.n	800a544 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a51a:	f043 0220 	orr.w	r2, r3, #32
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800a522:	2303      	movs	r3, #3
 800a524:	e023      	b.n	800a56e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d00a      	beq.n	800a542 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	3b01      	subs	r3, #1
 800a530:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a53c:	2b80      	cmp	r3, #128	@ 0x80
 800a53e:	d0f2      	beq.n	800a526 <SPI_EndRxTxTransaction+0x7a>
 800a540:	e000      	b.n	800a544 <SPI_EndRxTxTransaction+0x98>
        break;
 800a542:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	9300      	str	r3, [sp, #0]
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	2200      	movs	r2, #0
 800a54c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f7ff ff15 	bl	800a380 <SPI_WaitFifoStateUntilTimeout>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d007      	beq.n	800a56c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a560:	f043 0220 	orr.w	r2, r3, #32
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a568:	2303      	movs	r3, #3
 800a56a:	e000      	b.n	800a56e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800a56c:	2300      	movs	r3, #0
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3718      	adds	r7, #24
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	20000054 	.word	0x20000054
 800a57c:	165e9f81 	.word	0x165e9f81

0800a580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d101      	bne.n	800a592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a58e:	2301      	movs	r3, #1
 800a590:	e049      	b.n	800a626 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d106      	bne.n	800a5ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f7fb fc6e 	bl	8005e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2202      	movs	r2, #2
 800a5b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	3304      	adds	r3, #4
 800a5bc:	4619      	mov	r1, r3
 800a5be:	4610      	mov	r0, r2
 800a5c0:	f001 f8e6 	bl	800b790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2201      	movs	r2, #1
 800a600:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2201      	movs	r2, #1
 800a608:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2201      	movs	r2, #1
 800a610:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2201      	movs	r2, #1
 800a620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a624:	2300      	movs	r3, #0
}
 800a626:	4618      	mov	r0, r3
 800a628:	3708      	adds	r7, #8
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
	...

0800a630 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	2b01      	cmp	r3, #1
 800a642:	d001      	beq.n	800a648 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a644:	2301      	movs	r3, #1
 800a646:	e04c      	b.n	800a6e2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2202      	movs	r2, #2
 800a64c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4a26      	ldr	r2, [pc, #152]	@ (800a6f0 <HAL_TIM_Base_Start+0xc0>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d022      	beq.n	800a6a0 <HAL_TIM_Base_Start+0x70>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a662:	d01d      	beq.n	800a6a0 <HAL_TIM_Base_Start+0x70>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4a22      	ldr	r2, [pc, #136]	@ (800a6f4 <HAL_TIM_Base_Start+0xc4>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d018      	beq.n	800a6a0 <HAL_TIM_Base_Start+0x70>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4a21      	ldr	r2, [pc, #132]	@ (800a6f8 <HAL_TIM_Base_Start+0xc8>)
 800a674:	4293      	cmp	r3, r2
 800a676:	d013      	beq.n	800a6a0 <HAL_TIM_Base_Start+0x70>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a1f      	ldr	r2, [pc, #124]	@ (800a6fc <HAL_TIM_Base_Start+0xcc>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d00e      	beq.n	800a6a0 <HAL_TIM_Base_Start+0x70>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a1e      	ldr	r2, [pc, #120]	@ (800a700 <HAL_TIM_Base_Start+0xd0>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d009      	beq.n	800a6a0 <HAL_TIM_Base_Start+0x70>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a1c      	ldr	r2, [pc, #112]	@ (800a704 <HAL_TIM_Base_Start+0xd4>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d004      	beq.n	800a6a0 <HAL_TIM_Base_Start+0x70>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4a1b      	ldr	r2, [pc, #108]	@ (800a708 <HAL_TIM_Base_Start+0xd8>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d115      	bne.n	800a6cc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	689a      	ldr	r2, [r3, #8]
 800a6a6:	4b19      	ldr	r3, [pc, #100]	@ (800a70c <HAL_TIM_Base_Start+0xdc>)
 800a6a8:	4013      	ands	r3, r2
 800a6aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2b06      	cmp	r3, #6
 800a6b0:	d015      	beq.n	800a6de <HAL_TIM_Base_Start+0xae>
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6b8:	d011      	beq.n	800a6de <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f042 0201 	orr.w	r2, r2, #1
 800a6c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6ca:	e008      	b.n	800a6de <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f042 0201 	orr.w	r2, r2, #1
 800a6da:	601a      	str	r2, [r3, #0]
 800a6dc:	e000      	b.n	800a6e0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3714      	adds	r7, #20
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr
 800a6ee:	bf00      	nop
 800a6f0:	40010000 	.word	0x40010000
 800a6f4:	40000400 	.word	0x40000400
 800a6f8:	40000800 	.word	0x40000800
 800a6fc:	40000c00 	.word	0x40000c00
 800a700:	40010400 	.word	0x40010400
 800a704:	40014000 	.word	0x40014000
 800a708:	40001800 	.word	0x40001800
 800a70c:	00010007 	.word	0x00010007

0800a710 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	6a1a      	ldr	r2, [r3, #32]
 800a71e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a722:	4013      	ands	r3, r2
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10f      	bne.n	800a748 <HAL_TIM_Base_Stop+0x38>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	6a1a      	ldr	r2, [r3, #32]
 800a72e:	f240 4344 	movw	r3, #1092	@ 0x444
 800a732:	4013      	ands	r3, r2
 800a734:	2b00      	cmp	r3, #0
 800a736:	d107      	bne.n	800a748 <HAL_TIM_Base_Stop+0x38>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f022 0201 	bic.w	r2, r2, #1
 800a746:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2201      	movs	r2, #1
 800a74c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a750:	2300      	movs	r3, #0
}
 800a752:	4618      	mov	r0, r3
 800a754:	370c      	adds	r7, #12
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr
	...

0800a760 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a760:	b480      	push	{r7}
 800a762:	b085      	sub	sp, #20
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a76e:	b2db      	uxtb	r3, r3
 800a770:	2b01      	cmp	r3, #1
 800a772:	d001      	beq.n	800a778 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a774:	2301      	movs	r3, #1
 800a776:	e054      	b.n	800a822 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2202      	movs	r2, #2
 800a77c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	68da      	ldr	r2, [r3, #12]
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f042 0201 	orr.w	r2, r2, #1
 800a78e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a26      	ldr	r2, [pc, #152]	@ (800a830 <HAL_TIM_Base_Start_IT+0xd0>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d022      	beq.n	800a7e0 <HAL_TIM_Base_Start_IT+0x80>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7a2:	d01d      	beq.n	800a7e0 <HAL_TIM_Base_Start_IT+0x80>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a22      	ldr	r2, [pc, #136]	@ (800a834 <HAL_TIM_Base_Start_IT+0xd4>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d018      	beq.n	800a7e0 <HAL_TIM_Base_Start_IT+0x80>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4a21      	ldr	r2, [pc, #132]	@ (800a838 <HAL_TIM_Base_Start_IT+0xd8>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d013      	beq.n	800a7e0 <HAL_TIM_Base_Start_IT+0x80>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a1f      	ldr	r2, [pc, #124]	@ (800a83c <HAL_TIM_Base_Start_IT+0xdc>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d00e      	beq.n	800a7e0 <HAL_TIM_Base_Start_IT+0x80>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a1e      	ldr	r2, [pc, #120]	@ (800a840 <HAL_TIM_Base_Start_IT+0xe0>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d009      	beq.n	800a7e0 <HAL_TIM_Base_Start_IT+0x80>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a1c      	ldr	r2, [pc, #112]	@ (800a844 <HAL_TIM_Base_Start_IT+0xe4>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d004      	beq.n	800a7e0 <HAL_TIM_Base_Start_IT+0x80>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a1b      	ldr	r2, [pc, #108]	@ (800a848 <HAL_TIM_Base_Start_IT+0xe8>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d115      	bne.n	800a80c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	689a      	ldr	r2, [r3, #8]
 800a7e6:	4b19      	ldr	r3, [pc, #100]	@ (800a84c <HAL_TIM_Base_Start_IT+0xec>)
 800a7e8:	4013      	ands	r3, r2
 800a7ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2b06      	cmp	r3, #6
 800a7f0:	d015      	beq.n	800a81e <HAL_TIM_Base_Start_IT+0xbe>
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7f8:	d011      	beq.n	800a81e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f042 0201 	orr.w	r2, r2, #1
 800a808:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a80a:	e008      	b.n	800a81e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f042 0201 	orr.w	r2, r2, #1
 800a81a:	601a      	str	r2, [r3, #0]
 800a81c:	e000      	b.n	800a820 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a81e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	3714      	adds	r7, #20
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr
 800a82e:	bf00      	nop
 800a830:	40010000 	.word	0x40010000
 800a834:	40000400 	.word	0x40000400
 800a838:	40000800 	.word	0x40000800
 800a83c:	40000c00 	.word	0x40000c00
 800a840:	40010400 	.word	0x40010400
 800a844:	40014000 	.word	0x40014000
 800a848:	40001800 	.word	0x40001800
 800a84c:	00010007 	.word	0x00010007

0800a850 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d101      	bne.n	800a862 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a85e:	2301      	movs	r3, #1
 800a860:	e049      	b.n	800a8f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d106      	bne.n	800a87c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2200      	movs	r2, #0
 800a872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f7fb fbea 	bl	8006050 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2202      	movs	r2, #2
 800a880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	3304      	adds	r3, #4
 800a88c:	4619      	mov	r1, r3
 800a88e:	4610      	mov	r0, r2
 800a890:	f000 ff7e 	bl	800b790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2201      	movs	r2, #1
 800a898:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a8f4:	2300      	movs	r3, #0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3708      	adds	r7, #8
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
	...

0800a900 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d109      	bne.n	800a924 <HAL_TIM_PWM_Start+0x24>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a916:	b2db      	uxtb	r3, r3
 800a918:	2b01      	cmp	r3, #1
 800a91a:	bf14      	ite	ne
 800a91c:	2301      	movne	r3, #1
 800a91e:	2300      	moveq	r3, #0
 800a920:	b2db      	uxtb	r3, r3
 800a922:	e03c      	b.n	800a99e <HAL_TIM_PWM_Start+0x9e>
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	2b04      	cmp	r3, #4
 800a928:	d109      	bne.n	800a93e <HAL_TIM_PWM_Start+0x3e>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a930:	b2db      	uxtb	r3, r3
 800a932:	2b01      	cmp	r3, #1
 800a934:	bf14      	ite	ne
 800a936:	2301      	movne	r3, #1
 800a938:	2300      	moveq	r3, #0
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	e02f      	b.n	800a99e <HAL_TIM_PWM_Start+0x9e>
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	2b08      	cmp	r3, #8
 800a942:	d109      	bne.n	800a958 <HAL_TIM_PWM_Start+0x58>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	2b01      	cmp	r3, #1
 800a94e:	bf14      	ite	ne
 800a950:	2301      	movne	r3, #1
 800a952:	2300      	moveq	r3, #0
 800a954:	b2db      	uxtb	r3, r3
 800a956:	e022      	b.n	800a99e <HAL_TIM_PWM_Start+0x9e>
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	2b0c      	cmp	r3, #12
 800a95c:	d109      	bne.n	800a972 <HAL_TIM_PWM_Start+0x72>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a964:	b2db      	uxtb	r3, r3
 800a966:	2b01      	cmp	r3, #1
 800a968:	bf14      	ite	ne
 800a96a:	2301      	movne	r3, #1
 800a96c:	2300      	moveq	r3, #0
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	e015      	b.n	800a99e <HAL_TIM_PWM_Start+0x9e>
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	2b10      	cmp	r3, #16
 800a976:	d109      	bne.n	800a98c <HAL_TIM_PWM_Start+0x8c>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	2b01      	cmp	r3, #1
 800a982:	bf14      	ite	ne
 800a984:	2301      	movne	r3, #1
 800a986:	2300      	moveq	r3, #0
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	e008      	b.n	800a99e <HAL_TIM_PWM_Start+0x9e>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a992:	b2db      	uxtb	r3, r3
 800a994:	2b01      	cmp	r3, #1
 800a996:	bf14      	ite	ne
 800a998:	2301      	movne	r3, #1
 800a99a:	2300      	moveq	r3, #0
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d001      	beq.n	800a9a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e092      	b.n	800aacc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d104      	bne.n	800a9b6 <HAL_TIM_PWM_Start+0xb6>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2202      	movs	r2, #2
 800a9b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a9b4:	e023      	b.n	800a9fe <HAL_TIM_PWM_Start+0xfe>
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	2b04      	cmp	r3, #4
 800a9ba:	d104      	bne.n	800a9c6 <HAL_TIM_PWM_Start+0xc6>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2202      	movs	r2, #2
 800a9c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a9c4:	e01b      	b.n	800a9fe <HAL_TIM_PWM_Start+0xfe>
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	2b08      	cmp	r3, #8
 800a9ca:	d104      	bne.n	800a9d6 <HAL_TIM_PWM_Start+0xd6>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2202      	movs	r2, #2
 800a9d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a9d4:	e013      	b.n	800a9fe <HAL_TIM_PWM_Start+0xfe>
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	2b0c      	cmp	r3, #12
 800a9da:	d104      	bne.n	800a9e6 <HAL_TIM_PWM_Start+0xe6>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2202      	movs	r2, #2
 800a9e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a9e4:	e00b      	b.n	800a9fe <HAL_TIM_PWM_Start+0xfe>
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	2b10      	cmp	r3, #16
 800a9ea:	d104      	bne.n	800a9f6 <HAL_TIM_PWM_Start+0xf6>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2202      	movs	r2, #2
 800a9f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a9f4:	e003      	b.n	800a9fe <HAL_TIM_PWM_Start+0xfe>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2202      	movs	r2, #2
 800a9fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	2201      	movs	r2, #1
 800aa04:	6839      	ldr	r1, [r7, #0]
 800aa06:	4618      	mov	r0, r3
 800aa08:	f001 fa66 	bl	800bed8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a30      	ldr	r2, [pc, #192]	@ (800aad4 <HAL_TIM_PWM_Start+0x1d4>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d004      	beq.n	800aa20 <HAL_TIM_PWM_Start+0x120>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4a2f      	ldr	r2, [pc, #188]	@ (800aad8 <HAL_TIM_PWM_Start+0x1d8>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d101      	bne.n	800aa24 <HAL_TIM_PWM_Start+0x124>
 800aa20:	2301      	movs	r3, #1
 800aa22:	e000      	b.n	800aa26 <HAL_TIM_PWM_Start+0x126>
 800aa24:	2300      	movs	r3, #0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d007      	beq.n	800aa3a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800aa38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4a25      	ldr	r2, [pc, #148]	@ (800aad4 <HAL_TIM_PWM_Start+0x1d4>)
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d022      	beq.n	800aa8a <HAL_TIM_PWM_Start+0x18a>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa4c:	d01d      	beq.n	800aa8a <HAL_TIM_PWM_Start+0x18a>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4a22      	ldr	r2, [pc, #136]	@ (800aadc <HAL_TIM_PWM_Start+0x1dc>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d018      	beq.n	800aa8a <HAL_TIM_PWM_Start+0x18a>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a20      	ldr	r2, [pc, #128]	@ (800aae0 <HAL_TIM_PWM_Start+0x1e0>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d013      	beq.n	800aa8a <HAL_TIM_PWM_Start+0x18a>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4a1f      	ldr	r2, [pc, #124]	@ (800aae4 <HAL_TIM_PWM_Start+0x1e4>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d00e      	beq.n	800aa8a <HAL_TIM_PWM_Start+0x18a>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a19      	ldr	r2, [pc, #100]	@ (800aad8 <HAL_TIM_PWM_Start+0x1d8>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d009      	beq.n	800aa8a <HAL_TIM_PWM_Start+0x18a>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a1b      	ldr	r2, [pc, #108]	@ (800aae8 <HAL_TIM_PWM_Start+0x1e8>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d004      	beq.n	800aa8a <HAL_TIM_PWM_Start+0x18a>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a19      	ldr	r2, [pc, #100]	@ (800aaec <HAL_TIM_PWM_Start+0x1ec>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d115      	bne.n	800aab6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	689a      	ldr	r2, [r3, #8]
 800aa90:	4b17      	ldr	r3, [pc, #92]	@ (800aaf0 <HAL_TIM_PWM_Start+0x1f0>)
 800aa92:	4013      	ands	r3, r2
 800aa94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2b06      	cmp	r3, #6
 800aa9a:	d015      	beq.n	800aac8 <HAL_TIM_PWM_Start+0x1c8>
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aaa2:	d011      	beq.n	800aac8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f042 0201 	orr.w	r2, r2, #1
 800aab2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aab4:	e008      	b.n	800aac8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f042 0201 	orr.w	r2, r2, #1
 800aac4:	601a      	str	r2, [r3, #0]
 800aac6:	e000      	b.n	800aaca <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aac8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aaca:	2300      	movs	r3, #0
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3710      	adds	r7, #16
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	40010000 	.word	0x40010000
 800aad8:	40010400 	.word	0x40010400
 800aadc:	40000400 	.word	0x40000400
 800aae0:	40000800 	.word	0x40000800
 800aae4:	40000c00 	.word	0x40000c00
 800aae8:	40014000 	.word	0x40014000
 800aaec:	40001800 	.word	0x40001800
 800aaf0:	00010007 	.word	0x00010007

0800aaf4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b084      	sub	sp, #16
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aafe:	2300      	movs	r3, #0
 800ab00:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d109      	bne.n	800ab1c <HAL_TIM_PWM_Start_IT+0x28>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	bf14      	ite	ne
 800ab14:	2301      	movne	r3, #1
 800ab16:	2300      	moveq	r3, #0
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	e03c      	b.n	800ab96 <HAL_TIM_PWM_Start_IT+0xa2>
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	2b04      	cmp	r3, #4
 800ab20:	d109      	bne.n	800ab36 <HAL_TIM_PWM_Start_IT+0x42>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	bf14      	ite	ne
 800ab2e:	2301      	movne	r3, #1
 800ab30:	2300      	moveq	r3, #0
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	e02f      	b.n	800ab96 <HAL_TIM_PWM_Start_IT+0xa2>
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	2b08      	cmp	r3, #8
 800ab3a:	d109      	bne.n	800ab50 <HAL_TIM_PWM_Start_IT+0x5c>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	bf14      	ite	ne
 800ab48:	2301      	movne	r3, #1
 800ab4a:	2300      	moveq	r3, #0
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	e022      	b.n	800ab96 <HAL_TIM_PWM_Start_IT+0xa2>
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	2b0c      	cmp	r3, #12
 800ab54:	d109      	bne.n	800ab6a <HAL_TIM_PWM_Start_IT+0x76>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	bf14      	ite	ne
 800ab62:	2301      	movne	r3, #1
 800ab64:	2300      	moveq	r3, #0
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	e015      	b.n	800ab96 <HAL_TIM_PWM_Start_IT+0xa2>
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	2b10      	cmp	r3, #16
 800ab6e:	d109      	bne.n	800ab84 <HAL_TIM_PWM_Start_IT+0x90>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	bf14      	ite	ne
 800ab7c:	2301      	movne	r3, #1
 800ab7e:	2300      	moveq	r3, #0
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	e008      	b.n	800ab96 <HAL_TIM_PWM_Start_IT+0xa2>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	bf14      	ite	ne
 800ab90:	2301      	movne	r3, #1
 800ab92:	2300      	moveq	r3, #0
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d001      	beq.n	800ab9e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	e0dd      	b.n	800ad5a <HAL_TIM_PWM_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d104      	bne.n	800abae <HAL_TIM_PWM_Start_IT+0xba>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2202      	movs	r2, #2
 800aba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800abac:	e023      	b.n	800abf6 <HAL_TIM_PWM_Start_IT+0x102>
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	2b04      	cmp	r3, #4
 800abb2:	d104      	bne.n	800abbe <HAL_TIM_PWM_Start_IT+0xca>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2202      	movs	r2, #2
 800abb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800abbc:	e01b      	b.n	800abf6 <HAL_TIM_PWM_Start_IT+0x102>
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	2b08      	cmp	r3, #8
 800abc2:	d104      	bne.n	800abce <HAL_TIM_PWM_Start_IT+0xda>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2202      	movs	r2, #2
 800abc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800abcc:	e013      	b.n	800abf6 <HAL_TIM_PWM_Start_IT+0x102>
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	2b0c      	cmp	r3, #12
 800abd2:	d104      	bne.n	800abde <HAL_TIM_PWM_Start_IT+0xea>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2202      	movs	r2, #2
 800abd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800abdc:	e00b      	b.n	800abf6 <HAL_TIM_PWM_Start_IT+0x102>
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	2b10      	cmp	r3, #16
 800abe2:	d104      	bne.n	800abee <HAL_TIM_PWM_Start_IT+0xfa>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2202      	movs	r2, #2
 800abe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800abec:	e003      	b.n	800abf6 <HAL_TIM_PWM_Start_IT+0x102>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2202      	movs	r2, #2
 800abf2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	2b0c      	cmp	r3, #12
 800abfa:	d841      	bhi.n	800ac80 <HAL_TIM_PWM_Start_IT+0x18c>
 800abfc:	a201      	add	r2, pc, #4	@ (adr r2, 800ac04 <HAL_TIM_PWM_Start_IT+0x110>)
 800abfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac02:	bf00      	nop
 800ac04:	0800ac39 	.word	0x0800ac39
 800ac08:	0800ac81 	.word	0x0800ac81
 800ac0c:	0800ac81 	.word	0x0800ac81
 800ac10:	0800ac81 	.word	0x0800ac81
 800ac14:	0800ac4b 	.word	0x0800ac4b
 800ac18:	0800ac81 	.word	0x0800ac81
 800ac1c:	0800ac81 	.word	0x0800ac81
 800ac20:	0800ac81 	.word	0x0800ac81
 800ac24:	0800ac5d 	.word	0x0800ac5d
 800ac28:	0800ac81 	.word	0x0800ac81
 800ac2c:	0800ac81 	.word	0x0800ac81
 800ac30:	0800ac81 	.word	0x0800ac81
 800ac34:	0800ac6f 	.word	0x0800ac6f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	68da      	ldr	r2, [r3, #12]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f042 0202 	orr.w	r2, r2, #2
 800ac46:	60da      	str	r2, [r3, #12]
      break;
 800ac48:	e01d      	b.n	800ac86 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	68da      	ldr	r2, [r3, #12]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f042 0204 	orr.w	r2, r2, #4
 800ac58:	60da      	str	r2, [r3, #12]
      break;
 800ac5a:	e014      	b.n	800ac86 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	68da      	ldr	r2, [r3, #12]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f042 0208 	orr.w	r2, r2, #8
 800ac6a:	60da      	str	r2, [r3, #12]
      break;
 800ac6c:	e00b      	b.n	800ac86 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	68da      	ldr	r2, [r3, #12]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f042 0210 	orr.w	r2, r2, #16
 800ac7c:	60da      	str	r2, [r3, #12]
      break;
 800ac7e:	e002      	b.n	800ac86 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800ac80:	2301      	movs	r3, #1
 800ac82:	73fb      	strb	r3, [r7, #15]
      break;
 800ac84:	bf00      	nop
  }

  if (status == HAL_OK)
 800ac86:	7bfb      	ldrb	r3, [r7, #15]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d165      	bne.n	800ad58 <HAL_TIM_PWM_Start_IT+0x264>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	2201      	movs	r2, #1
 800ac92:	6839      	ldr	r1, [r7, #0]
 800ac94:	4618      	mov	r0, r3
 800ac96:	f001 f91f 	bl	800bed8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4a31      	ldr	r2, [pc, #196]	@ (800ad64 <HAL_TIM_PWM_Start_IT+0x270>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d004      	beq.n	800acae <HAL_TIM_PWM_Start_IT+0x1ba>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a2f      	ldr	r2, [pc, #188]	@ (800ad68 <HAL_TIM_PWM_Start_IT+0x274>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d101      	bne.n	800acb2 <HAL_TIM_PWM_Start_IT+0x1be>
 800acae:	2301      	movs	r3, #1
 800acb0:	e000      	b.n	800acb4 <HAL_TIM_PWM_Start_IT+0x1c0>
 800acb2:	2300      	movs	r3, #0
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d007      	beq.n	800acc8 <HAL_TIM_PWM_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800acc6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a25      	ldr	r2, [pc, #148]	@ (800ad64 <HAL_TIM_PWM_Start_IT+0x270>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d022      	beq.n	800ad18 <HAL_TIM_PWM_Start_IT+0x224>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acda:	d01d      	beq.n	800ad18 <HAL_TIM_PWM_Start_IT+0x224>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a22      	ldr	r2, [pc, #136]	@ (800ad6c <HAL_TIM_PWM_Start_IT+0x278>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d018      	beq.n	800ad18 <HAL_TIM_PWM_Start_IT+0x224>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4a21      	ldr	r2, [pc, #132]	@ (800ad70 <HAL_TIM_PWM_Start_IT+0x27c>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d013      	beq.n	800ad18 <HAL_TIM_PWM_Start_IT+0x224>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a1f      	ldr	r2, [pc, #124]	@ (800ad74 <HAL_TIM_PWM_Start_IT+0x280>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d00e      	beq.n	800ad18 <HAL_TIM_PWM_Start_IT+0x224>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	4a1a      	ldr	r2, [pc, #104]	@ (800ad68 <HAL_TIM_PWM_Start_IT+0x274>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d009      	beq.n	800ad18 <HAL_TIM_PWM_Start_IT+0x224>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4a1b      	ldr	r2, [pc, #108]	@ (800ad78 <HAL_TIM_PWM_Start_IT+0x284>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d004      	beq.n	800ad18 <HAL_TIM_PWM_Start_IT+0x224>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	4a1a      	ldr	r2, [pc, #104]	@ (800ad7c <HAL_TIM_PWM_Start_IT+0x288>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d115      	bne.n	800ad44 <HAL_TIM_PWM_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	689a      	ldr	r2, [r3, #8]
 800ad1e:	4b18      	ldr	r3, [pc, #96]	@ (800ad80 <HAL_TIM_PWM_Start_IT+0x28c>)
 800ad20:	4013      	ands	r3, r2
 800ad22:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	2b06      	cmp	r3, #6
 800ad28:	d015      	beq.n	800ad56 <HAL_TIM_PWM_Start_IT+0x262>
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad30:	d011      	beq.n	800ad56 <HAL_TIM_PWM_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	681a      	ldr	r2, [r3, #0]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f042 0201 	orr.w	r2, r2, #1
 800ad40:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad42:	e008      	b.n	800ad56 <HAL_TIM_PWM_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	681a      	ldr	r2, [r3, #0]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f042 0201 	orr.w	r2, r2, #1
 800ad52:	601a      	str	r2, [r3, #0]
 800ad54:	e000      	b.n	800ad58 <HAL_TIM_PWM_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad56:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800ad58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3710      	adds	r7, #16
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	40010000 	.word	0x40010000
 800ad68:	40010400 	.word	0x40010400
 800ad6c:	40000400 	.word	0x40000400
 800ad70:	40000800 	.word	0x40000800
 800ad74:	40000c00 	.word	0x40000c00
 800ad78:	40014000 	.word	0x40014000
 800ad7c:	40001800 	.word	0x40001800
 800ad80:	00010007 	.word	0x00010007

0800ad84 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	2b0c      	cmp	r3, #12
 800ad96:	d841      	bhi.n	800ae1c <HAL_TIM_PWM_Stop_IT+0x98>
 800ad98:	a201      	add	r2, pc, #4	@ (adr r2, 800ada0 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800ad9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad9e:	bf00      	nop
 800ada0:	0800add5 	.word	0x0800add5
 800ada4:	0800ae1d 	.word	0x0800ae1d
 800ada8:	0800ae1d 	.word	0x0800ae1d
 800adac:	0800ae1d 	.word	0x0800ae1d
 800adb0:	0800ade7 	.word	0x0800ade7
 800adb4:	0800ae1d 	.word	0x0800ae1d
 800adb8:	0800ae1d 	.word	0x0800ae1d
 800adbc:	0800ae1d 	.word	0x0800ae1d
 800adc0:	0800adf9 	.word	0x0800adf9
 800adc4:	0800ae1d 	.word	0x0800ae1d
 800adc8:	0800ae1d 	.word	0x0800ae1d
 800adcc:	0800ae1d 	.word	0x0800ae1d
 800add0:	0800ae0b 	.word	0x0800ae0b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	68da      	ldr	r2, [r3, #12]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f022 0202 	bic.w	r2, r2, #2
 800ade2:	60da      	str	r2, [r3, #12]
      break;
 800ade4:	e01d      	b.n	800ae22 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	68da      	ldr	r2, [r3, #12]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f022 0204 	bic.w	r2, r2, #4
 800adf4:	60da      	str	r2, [r3, #12]
      break;
 800adf6:	e014      	b.n	800ae22 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	68da      	ldr	r2, [r3, #12]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f022 0208 	bic.w	r2, r2, #8
 800ae06:	60da      	str	r2, [r3, #12]
      break;
 800ae08:	e00b      	b.n	800ae22 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	68da      	ldr	r2, [r3, #12]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f022 0210 	bic.w	r2, r2, #16
 800ae18:	60da      	str	r2, [r3, #12]
      break;
 800ae1a:	e002      	b.n	800ae22 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	73fb      	strb	r3, [r7, #15]
      break;
 800ae20:	bf00      	nop
  }

  if (status == HAL_OK)
 800ae22:	7bfb      	ldrb	r3, [r7, #15]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d171      	bne.n	800af0c <HAL_TIM_PWM_Stop_IT+0x188>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	6839      	ldr	r1, [r7, #0]
 800ae30:	4618      	mov	r0, r3
 800ae32:	f001 f851 	bl	800bed8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4a37      	ldr	r2, [pc, #220]	@ (800af18 <HAL_TIM_PWM_Stop_IT+0x194>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d004      	beq.n	800ae4a <HAL_TIM_PWM_Stop_IT+0xc6>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4a35      	ldr	r2, [pc, #212]	@ (800af1c <HAL_TIM_PWM_Stop_IT+0x198>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d101      	bne.n	800ae4e <HAL_TIM_PWM_Stop_IT+0xca>
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	e000      	b.n	800ae50 <HAL_TIM_PWM_Stop_IT+0xcc>
 800ae4e:	2300      	movs	r3, #0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d017      	beq.n	800ae84 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	6a1a      	ldr	r2, [r3, #32]
 800ae5a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ae5e:	4013      	ands	r3, r2
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d10f      	bne.n	800ae84 <HAL_TIM_PWM_Stop_IT+0x100>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	6a1a      	ldr	r2, [r3, #32]
 800ae6a:	f240 4344 	movw	r3, #1092	@ 0x444
 800ae6e:	4013      	ands	r3, r2
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d107      	bne.n	800ae84 <HAL_TIM_PWM_Stop_IT+0x100>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ae82:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	6a1a      	ldr	r2, [r3, #32]
 800ae8a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ae8e:	4013      	ands	r3, r2
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d10f      	bne.n	800aeb4 <HAL_TIM_PWM_Stop_IT+0x130>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	6a1a      	ldr	r2, [r3, #32]
 800ae9a:	f240 4344 	movw	r3, #1092	@ 0x444
 800ae9e:	4013      	ands	r3, r2
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d107      	bne.n	800aeb4 <HAL_TIM_PWM_Stop_IT+0x130>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	681a      	ldr	r2, [r3, #0]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f022 0201 	bic.w	r2, r2, #1
 800aeb2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d104      	bne.n	800aec4 <HAL_TIM_PWM_Stop_IT+0x140>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2201      	movs	r2, #1
 800aebe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aec2:	e023      	b.n	800af0c <HAL_TIM_PWM_Stop_IT+0x188>
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	2b04      	cmp	r3, #4
 800aec8:	d104      	bne.n	800aed4 <HAL_TIM_PWM_Stop_IT+0x150>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2201      	movs	r2, #1
 800aece:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aed2:	e01b      	b.n	800af0c <HAL_TIM_PWM_Stop_IT+0x188>
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	2b08      	cmp	r3, #8
 800aed8:	d104      	bne.n	800aee4 <HAL_TIM_PWM_Stop_IT+0x160>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2201      	movs	r2, #1
 800aede:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aee2:	e013      	b.n	800af0c <HAL_TIM_PWM_Stop_IT+0x188>
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	2b0c      	cmp	r3, #12
 800aee8:	d104      	bne.n	800aef4 <HAL_TIM_PWM_Stop_IT+0x170>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2201      	movs	r2, #1
 800aeee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aef2:	e00b      	b.n	800af0c <HAL_TIM_PWM_Stop_IT+0x188>
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	2b10      	cmp	r3, #16
 800aef8:	d104      	bne.n	800af04 <HAL_TIM_PWM_Stop_IT+0x180>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2201      	movs	r2, #1
 800aefe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800af02:	e003      	b.n	800af0c <HAL_TIM_PWM_Stop_IT+0x188>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2201      	movs	r2, #1
 800af08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800af0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3710      	adds	r7, #16
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	40010000 	.word	0x40010000
 800af1c:	40010400 	.word	0x40010400

0800af20 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b086      	sub	sp, #24
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d101      	bne.n	800af34 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800af30:	2301      	movs	r3, #1
 800af32:	e08f      	b.n	800b054 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af3a:	b2db      	uxtb	r3, r3
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d106      	bne.n	800af4e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2200      	movs	r2, #0
 800af44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f7fb f835 	bl	8005fb8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2202      	movs	r2, #2
 800af52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	6899      	ldr	r1, [r3, #8]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	4b3e      	ldr	r3, [pc, #248]	@ (800b05c <HAL_TIM_Encoder_Init+0x13c>)
 800af62:	400b      	ands	r3, r1
 800af64:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	3304      	adds	r3, #4
 800af6e:	4619      	mov	r1, r3
 800af70:	4610      	mov	r0, r2
 800af72:	f000 fc0d 	bl	800b790 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	699b      	ldr	r3, [r3, #24]
 800af84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	6a1b      	ldr	r3, [r3, #32]
 800af8c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	697a      	ldr	r2, [r7, #20]
 800af94:	4313      	orrs	r3, r2
 800af96:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800af98:	693a      	ldr	r2, [r7, #16]
 800af9a:	4b31      	ldr	r3, [pc, #196]	@ (800b060 <HAL_TIM_Encoder_Init+0x140>)
 800af9c:	4013      	ands	r3, r2
 800af9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	689a      	ldr	r2, [r3, #8]
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	699b      	ldr	r3, [r3, #24]
 800afa8:	021b      	lsls	r3, r3, #8
 800afaa:	4313      	orrs	r3, r2
 800afac:	693a      	ldr	r2, [r7, #16]
 800afae:	4313      	orrs	r3, r2
 800afb0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800afb2:	693a      	ldr	r2, [r7, #16]
 800afb4:	4b2b      	ldr	r3, [pc, #172]	@ (800b064 <HAL_TIM_Encoder_Init+0x144>)
 800afb6:	4013      	ands	r3, r2
 800afb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800afba:	693a      	ldr	r2, [r7, #16]
 800afbc:	4b2a      	ldr	r3, [pc, #168]	@ (800b068 <HAL_TIM_Encoder_Init+0x148>)
 800afbe:	4013      	ands	r3, r2
 800afc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	68da      	ldr	r2, [r3, #12]
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	69db      	ldr	r3, [r3, #28]
 800afca:	021b      	lsls	r3, r3, #8
 800afcc:	4313      	orrs	r3, r2
 800afce:	693a      	ldr	r2, [r7, #16]
 800afd0:	4313      	orrs	r3, r2
 800afd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	691b      	ldr	r3, [r3, #16]
 800afd8:	011a      	lsls	r2, r3, #4
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	6a1b      	ldr	r3, [r3, #32]
 800afde:	031b      	lsls	r3, r3, #12
 800afe0:	4313      	orrs	r3, r2
 800afe2:	693a      	ldr	r2, [r7, #16]
 800afe4:	4313      	orrs	r3, r2
 800afe6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800afee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800aff6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	685a      	ldr	r2, [r3, #4]
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	695b      	ldr	r3, [r3, #20]
 800b000:	011b      	lsls	r3, r3, #4
 800b002:	4313      	orrs	r3, r2
 800b004:	68fa      	ldr	r2, [r7, #12]
 800b006:	4313      	orrs	r3, r2
 800b008:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	697a      	ldr	r2, [r7, #20]
 800b010:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	693a      	ldr	r2, [r7, #16]
 800b018:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	68fa      	ldr	r2, [r7, #12]
 800b020:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2201      	movs	r2, #1
 800b026:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2201      	movs	r2, #1
 800b02e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2201      	movs	r2, #1
 800b036:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2201      	movs	r2, #1
 800b03e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2201      	movs	r2, #1
 800b046:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2201      	movs	r2, #1
 800b04e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b052:	2300      	movs	r3, #0
}
 800b054:	4618      	mov	r0, r3
 800b056:	3718      	adds	r7, #24
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}
 800b05c:	fffebff8 	.word	0xfffebff8
 800b060:	fffffcfc 	.word	0xfffffcfc
 800b064:	fffff3f3 	.word	0xfffff3f3
 800b068:	ffff0f0f 	.word	0xffff0f0f

0800b06c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b07c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b084:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b08c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b094:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d110      	bne.n	800b0be <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b09c:	7bfb      	ldrb	r3, [r7, #15]
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d102      	bne.n	800b0a8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b0a2:	7b7b      	ldrb	r3, [r7, #13]
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d001      	beq.n	800b0ac <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	e069      	b.n	800b180 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2202      	movs	r2, #2
 800b0b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2202      	movs	r2, #2
 800b0b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b0bc:	e031      	b.n	800b122 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	2b04      	cmp	r3, #4
 800b0c2:	d110      	bne.n	800b0e6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b0c4:	7bbb      	ldrb	r3, [r7, #14]
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	d102      	bne.n	800b0d0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b0ca:	7b3b      	ldrb	r3, [r7, #12]
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d001      	beq.n	800b0d4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	e055      	b.n	800b180 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2202      	movs	r2, #2
 800b0d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2202      	movs	r2, #2
 800b0e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b0e4:	e01d      	b.n	800b122 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b0e6:	7bfb      	ldrb	r3, [r7, #15]
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d108      	bne.n	800b0fe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b0ec:	7bbb      	ldrb	r3, [r7, #14]
 800b0ee:	2b01      	cmp	r3, #1
 800b0f0:	d105      	bne.n	800b0fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b0f2:	7b7b      	ldrb	r3, [r7, #13]
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d102      	bne.n	800b0fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b0f8:	7b3b      	ldrb	r3, [r7, #12]
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d001      	beq.n	800b102 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b0fe:	2301      	movs	r3, #1
 800b100:	e03e      	b.n	800b180 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2202      	movs	r2, #2
 800b106:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2202      	movs	r2, #2
 800b10e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2202      	movs	r2, #2
 800b116:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2202      	movs	r2, #2
 800b11e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d003      	beq.n	800b130 <HAL_TIM_Encoder_Start+0xc4>
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	2b04      	cmp	r3, #4
 800b12c:	d008      	beq.n	800b140 <HAL_TIM_Encoder_Start+0xd4>
 800b12e:	e00f      	b.n	800b150 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	2201      	movs	r2, #1
 800b136:	2100      	movs	r1, #0
 800b138:	4618      	mov	r0, r3
 800b13a:	f000 fecd 	bl	800bed8 <TIM_CCxChannelCmd>
      break;
 800b13e:	e016      	b.n	800b16e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	2201      	movs	r2, #1
 800b146:	2104      	movs	r1, #4
 800b148:	4618      	mov	r0, r3
 800b14a:	f000 fec5 	bl	800bed8 <TIM_CCxChannelCmd>
      break;
 800b14e:	e00e      	b.n	800b16e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	2201      	movs	r2, #1
 800b156:	2100      	movs	r1, #0
 800b158:	4618      	mov	r0, r3
 800b15a:	f000 febd 	bl	800bed8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	2201      	movs	r2, #1
 800b164:	2104      	movs	r1, #4
 800b166:	4618      	mov	r0, r3
 800b168:	f000 feb6 	bl	800bed8 <TIM_CCxChannelCmd>
      break;
 800b16c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f042 0201 	orr.w	r2, r2, #1
 800b17c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b17e:	2300      	movs	r3, #0
}
 800b180:	4618      	mov	r0, r3
 800b182:	3710      	adds	r7, #16
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	68db      	ldr	r3, [r3, #12]
 800b196:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	691b      	ldr	r3, [r3, #16]
 800b19e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	f003 0302 	and.w	r3, r3, #2
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d020      	beq.n	800b1ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f003 0302 	and.w	r3, r3, #2
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d01b      	beq.n	800b1ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f06f 0202 	mvn.w	r2, #2
 800b1bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	699b      	ldr	r3, [r3, #24]
 800b1ca:	f003 0303 	and.w	r3, r3, #3
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d003      	beq.n	800b1da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 fac8 	bl	800b768 <HAL_TIM_IC_CaptureCallback>
 800b1d8:	e005      	b.n	800b1e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 faba 	bl	800b754 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f7f6 ff29 	bl	8002038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	f003 0304 	and.w	r3, r3, #4
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d020      	beq.n	800b238 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	f003 0304 	and.w	r3, r3, #4
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d01b      	beq.n	800b238 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f06f 0204 	mvn.w	r2, #4
 800b208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2202      	movs	r2, #2
 800b20e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	699b      	ldr	r3, [r3, #24]
 800b216:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d003      	beq.n	800b226 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 faa2 	bl	800b768 <HAL_TIM_IC_CaptureCallback>
 800b224:	e005      	b.n	800b232 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 fa94 	bl	800b754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f7f6 ff03 	bl	8002038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2200      	movs	r2, #0
 800b236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	f003 0308 	and.w	r3, r3, #8
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d020      	beq.n	800b284 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f003 0308 	and.w	r3, r3, #8
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d01b      	beq.n	800b284 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f06f 0208 	mvn.w	r2, #8
 800b254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2204      	movs	r2, #4
 800b25a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	69db      	ldr	r3, [r3, #28]
 800b262:	f003 0303 	and.w	r3, r3, #3
 800b266:	2b00      	cmp	r3, #0
 800b268:	d003      	beq.n	800b272 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 fa7c 	bl	800b768 <HAL_TIM_IC_CaptureCallback>
 800b270:	e005      	b.n	800b27e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 fa6e 	bl	800b754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f7f6 fedd 	bl	8002038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2200      	movs	r2, #0
 800b282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	f003 0310 	and.w	r3, r3, #16
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d020      	beq.n	800b2d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f003 0310 	and.w	r3, r3, #16
 800b294:	2b00      	cmp	r3, #0
 800b296:	d01b      	beq.n	800b2d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f06f 0210 	mvn.w	r2, #16
 800b2a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2208      	movs	r2, #8
 800b2a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	69db      	ldr	r3, [r3, #28]
 800b2ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d003      	beq.n	800b2be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 fa56 	bl	800b768 <HAL_TIM_IC_CaptureCallback>
 800b2bc:	e005      	b.n	800b2ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 fa48 	bl	800b754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f7f6 feb7 	bl	8002038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	f003 0301 	and.w	r3, r3, #1
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d00c      	beq.n	800b2f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	f003 0301 	and.w	r3, r3, #1
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d007      	beq.n	800b2f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f06f 0201 	mvn.w	r2, #1
 800b2ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f7fa fcc8 	bl	8005c84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d104      	bne.n	800b308 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b304:	2b00      	cmp	r3, #0
 800b306:	d00c      	beq.n	800b322 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d007      	beq.n	800b322 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b31a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 ff17 	bl	800c150 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d00c      	beq.n	800b346 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b332:	2b00      	cmp	r3, #0
 800b334:	d007      	beq.n	800b346 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b33e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 ff0f 	bl	800c164 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d00c      	beq.n	800b36a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b356:	2b00      	cmp	r3, #0
 800b358:	d007      	beq.n	800b36a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 fa09 	bl	800b77c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	f003 0320 	and.w	r3, r3, #32
 800b370:	2b00      	cmp	r3, #0
 800b372:	d00c      	beq.n	800b38e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f003 0320 	and.w	r3, r3, #32
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d007      	beq.n	800b38e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f06f 0220 	mvn.w	r2, #32
 800b386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f000 fed7 	bl	800c13c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b38e:	bf00      	nop
 800b390:	3710      	adds	r7, #16
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
	...

0800b398 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b086      	sub	sp, #24
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	60f8      	str	r0, [r7, #12]
 800b3a0:	60b9      	str	r1, [r7, #8]
 800b3a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d101      	bne.n	800b3b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b3b2:	2302      	movs	r3, #2
 800b3b4:	e0ff      	b.n	800b5b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2b14      	cmp	r3, #20
 800b3c2:	f200 80f0 	bhi.w	800b5a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b3c6:	a201      	add	r2, pc, #4	@ (adr r2, 800b3cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3cc:	0800b421 	.word	0x0800b421
 800b3d0:	0800b5a7 	.word	0x0800b5a7
 800b3d4:	0800b5a7 	.word	0x0800b5a7
 800b3d8:	0800b5a7 	.word	0x0800b5a7
 800b3dc:	0800b461 	.word	0x0800b461
 800b3e0:	0800b5a7 	.word	0x0800b5a7
 800b3e4:	0800b5a7 	.word	0x0800b5a7
 800b3e8:	0800b5a7 	.word	0x0800b5a7
 800b3ec:	0800b4a3 	.word	0x0800b4a3
 800b3f0:	0800b5a7 	.word	0x0800b5a7
 800b3f4:	0800b5a7 	.word	0x0800b5a7
 800b3f8:	0800b5a7 	.word	0x0800b5a7
 800b3fc:	0800b4e3 	.word	0x0800b4e3
 800b400:	0800b5a7 	.word	0x0800b5a7
 800b404:	0800b5a7 	.word	0x0800b5a7
 800b408:	0800b5a7 	.word	0x0800b5a7
 800b40c:	0800b525 	.word	0x0800b525
 800b410:	0800b5a7 	.word	0x0800b5a7
 800b414:	0800b5a7 	.word	0x0800b5a7
 800b418:	0800b5a7 	.word	0x0800b5a7
 800b41c:	0800b565 	.word	0x0800b565
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	68b9      	ldr	r1, [r7, #8]
 800b426:	4618      	mov	r0, r3
 800b428:	f000 fa5e 	bl	800b8e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	699a      	ldr	r2, [r3, #24]
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f042 0208 	orr.w	r2, r2, #8
 800b43a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	699a      	ldr	r2, [r3, #24]
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f022 0204 	bic.w	r2, r2, #4
 800b44a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	6999      	ldr	r1, [r3, #24]
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	691a      	ldr	r2, [r3, #16]
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	430a      	orrs	r2, r1
 800b45c:	619a      	str	r2, [r3, #24]
      break;
 800b45e:	e0a5      	b.n	800b5ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	68b9      	ldr	r1, [r7, #8]
 800b466:	4618      	mov	r0, r3
 800b468:	f000 fab0 	bl	800b9cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	699a      	ldr	r2, [r3, #24]
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b47a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	699a      	ldr	r2, [r3, #24]
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b48a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	6999      	ldr	r1, [r3, #24]
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	691b      	ldr	r3, [r3, #16]
 800b496:	021a      	lsls	r2, r3, #8
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	430a      	orrs	r2, r1
 800b49e:	619a      	str	r2, [r3, #24]
      break;
 800b4a0:	e084      	b.n	800b5ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	68b9      	ldr	r1, [r7, #8]
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f000 fb07 	bl	800babc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	69da      	ldr	r2, [r3, #28]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f042 0208 	orr.w	r2, r2, #8
 800b4bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	69da      	ldr	r2, [r3, #28]
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f022 0204 	bic.w	r2, r2, #4
 800b4cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	69d9      	ldr	r1, [r3, #28]
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	691a      	ldr	r2, [r3, #16]
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	430a      	orrs	r2, r1
 800b4de:	61da      	str	r2, [r3, #28]
      break;
 800b4e0:	e064      	b.n	800b5ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	68b9      	ldr	r1, [r7, #8]
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f000 fb5d 	bl	800bba8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	69da      	ldr	r2, [r3, #28]
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b4fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	69da      	ldr	r2, [r3, #28]
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b50c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	69d9      	ldr	r1, [r3, #28]
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	691b      	ldr	r3, [r3, #16]
 800b518:	021a      	lsls	r2, r3, #8
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	430a      	orrs	r2, r1
 800b520:	61da      	str	r2, [r3, #28]
      break;
 800b522:	e043      	b.n	800b5ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	68b9      	ldr	r1, [r7, #8]
 800b52a:	4618      	mov	r0, r3
 800b52c:	f000 fb94 	bl	800bc58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f042 0208 	orr.w	r2, r2, #8
 800b53e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f022 0204 	bic.w	r2, r2, #4
 800b54e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	691a      	ldr	r2, [r3, #16]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	430a      	orrs	r2, r1
 800b560:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b562:	e023      	b.n	800b5ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	68b9      	ldr	r1, [r7, #8]
 800b56a:	4618      	mov	r0, r3
 800b56c:	f000 fbc6 	bl	800bcfc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b57e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b58e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	691b      	ldr	r3, [r3, #16]
 800b59a:	021a      	lsls	r2, r3, #8
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	430a      	orrs	r2, r1
 800b5a2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b5a4:	e002      	b.n	800b5ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	75fb      	strb	r3, [r7, #23]
      break;
 800b5aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b5b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3718      	adds	r7, #24
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop

0800b5c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b5d4:	2b01      	cmp	r3, #1
 800b5d6:	d101      	bne.n	800b5dc <HAL_TIM_ConfigClockSource+0x1c>
 800b5d8:	2302      	movs	r3, #2
 800b5da:	e0b4      	b.n	800b746 <HAL_TIM_ConfigClockSource+0x186>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2201      	movs	r2, #1
 800b5e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2202      	movs	r2, #2
 800b5e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	689b      	ldr	r3, [r3, #8]
 800b5f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b5f4:	68ba      	ldr	r2, [r7, #8]
 800b5f6:	4b56      	ldr	r3, [pc, #344]	@ (800b750 <HAL_TIM_ConfigClockSource+0x190>)
 800b5f8:	4013      	ands	r3, r2
 800b5fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b602:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	68ba      	ldr	r2, [r7, #8]
 800b60a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b614:	d03e      	beq.n	800b694 <HAL_TIM_ConfigClockSource+0xd4>
 800b616:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b61a:	f200 8087 	bhi.w	800b72c <HAL_TIM_ConfigClockSource+0x16c>
 800b61e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b622:	f000 8086 	beq.w	800b732 <HAL_TIM_ConfigClockSource+0x172>
 800b626:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b62a:	d87f      	bhi.n	800b72c <HAL_TIM_ConfigClockSource+0x16c>
 800b62c:	2b70      	cmp	r3, #112	@ 0x70
 800b62e:	d01a      	beq.n	800b666 <HAL_TIM_ConfigClockSource+0xa6>
 800b630:	2b70      	cmp	r3, #112	@ 0x70
 800b632:	d87b      	bhi.n	800b72c <HAL_TIM_ConfigClockSource+0x16c>
 800b634:	2b60      	cmp	r3, #96	@ 0x60
 800b636:	d050      	beq.n	800b6da <HAL_TIM_ConfigClockSource+0x11a>
 800b638:	2b60      	cmp	r3, #96	@ 0x60
 800b63a:	d877      	bhi.n	800b72c <HAL_TIM_ConfigClockSource+0x16c>
 800b63c:	2b50      	cmp	r3, #80	@ 0x50
 800b63e:	d03c      	beq.n	800b6ba <HAL_TIM_ConfigClockSource+0xfa>
 800b640:	2b50      	cmp	r3, #80	@ 0x50
 800b642:	d873      	bhi.n	800b72c <HAL_TIM_ConfigClockSource+0x16c>
 800b644:	2b40      	cmp	r3, #64	@ 0x40
 800b646:	d058      	beq.n	800b6fa <HAL_TIM_ConfigClockSource+0x13a>
 800b648:	2b40      	cmp	r3, #64	@ 0x40
 800b64a:	d86f      	bhi.n	800b72c <HAL_TIM_ConfigClockSource+0x16c>
 800b64c:	2b30      	cmp	r3, #48	@ 0x30
 800b64e:	d064      	beq.n	800b71a <HAL_TIM_ConfigClockSource+0x15a>
 800b650:	2b30      	cmp	r3, #48	@ 0x30
 800b652:	d86b      	bhi.n	800b72c <HAL_TIM_ConfigClockSource+0x16c>
 800b654:	2b20      	cmp	r3, #32
 800b656:	d060      	beq.n	800b71a <HAL_TIM_ConfigClockSource+0x15a>
 800b658:	2b20      	cmp	r3, #32
 800b65a:	d867      	bhi.n	800b72c <HAL_TIM_ConfigClockSource+0x16c>
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d05c      	beq.n	800b71a <HAL_TIM_ConfigClockSource+0x15a>
 800b660:	2b10      	cmp	r3, #16
 800b662:	d05a      	beq.n	800b71a <HAL_TIM_ConfigClockSource+0x15a>
 800b664:	e062      	b.n	800b72c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b676:	f000 fc0f 	bl	800be98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	689b      	ldr	r3, [r3, #8]
 800b680:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b688:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	68ba      	ldr	r2, [r7, #8]
 800b690:	609a      	str	r2, [r3, #8]
      break;
 800b692:	e04f      	b.n	800b734 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b6a4:	f000 fbf8 	bl	800be98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	689a      	ldr	r2, [r3, #8]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b6b6:	609a      	str	r2, [r3, #8]
      break;
 800b6b8:	e03c      	b.n	800b734 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	f000 fb6c 	bl	800bda4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	2150      	movs	r1, #80	@ 0x50
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f000 fbc5 	bl	800be62 <TIM_ITRx_SetConfig>
      break;
 800b6d8:	e02c      	b.n	800b734 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	f000 fb8b 	bl	800be02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	2160      	movs	r1, #96	@ 0x60
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f000 fbb5 	bl	800be62 <TIM_ITRx_SetConfig>
      break;
 800b6f8:	e01c      	b.n	800b734 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b706:	461a      	mov	r2, r3
 800b708:	f000 fb4c 	bl	800bda4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	2140      	movs	r1, #64	@ 0x40
 800b712:	4618      	mov	r0, r3
 800b714:	f000 fba5 	bl	800be62 <TIM_ITRx_SetConfig>
      break;
 800b718:	e00c      	b.n	800b734 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681a      	ldr	r2, [r3, #0]
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	4619      	mov	r1, r3
 800b724:	4610      	mov	r0, r2
 800b726:	f000 fb9c 	bl	800be62 <TIM_ITRx_SetConfig>
      break;
 800b72a:	e003      	b.n	800b734 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b72c:	2301      	movs	r3, #1
 800b72e:	73fb      	strb	r3, [r7, #15]
      break;
 800b730:	e000      	b.n	800b734 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b732:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2201      	movs	r2, #1
 800b738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2200      	movs	r2, #0
 800b740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b744:	7bfb      	ldrb	r3, [r7, #15]
}
 800b746:	4618      	mov	r0, r3
 800b748:	3710      	adds	r7, #16
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	fffeff88 	.word	0xfffeff88

0800b754 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b754:	b480      	push	{r7}
 800b756:	b083      	sub	sp, #12
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b75c:	bf00      	nop
 800b75e:	370c      	adds	r7, #12
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr

0800b768 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b768:	b480      	push	{r7}
 800b76a:	b083      	sub	sp, #12
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b770:	bf00      	nop
 800b772:	370c      	adds	r7, #12
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr

0800b77c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b083      	sub	sp, #12
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b784:	bf00      	nop
 800b786:	370c      	adds	r7, #12
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr

0800b790 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b790:	b480      	push	{r7}
 800b792:	b085      	sub	sp, #20
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	4a46      	ldr	r2, [pc, #280]	@ (800b8bc <TIM_Base_SetConfig+0x12c>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d013      	beq.n	800b7d0 <TIM_Base_SetConfig+0x40>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7ae:	d00f      	beq.n	800b7d0 <TIM_Base_SetConfig+0x40>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	4a43      	ldr	r2, [pc, #268]	@ (800b8c0 <TIM_Base_SetConfig+0x130>)
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d00b      	beq.n	800b7d0 <TIM_Base_SetConfig+0x40>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	4a42      	ldr	r2, [pc, #264]	@ (800b8c4 <TIM_Base_SetConfig+0x134>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d007      	beq.n	800b7d0 <TIM_Base_SetConfig+0x40>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	4a41      	ldr	r2, [pc, #260]	@ (800b8c8 <TIM_Base_SetConfig+0x138>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d003      	beq.n	800b7d0 <TIM_Base_SetConfig+0x40>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	4a40      	ldr	r2, [pc, #256]	@ (800b8cc <TIM_Base_SetConfig+0x13c>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d108      	bne.n	800b7e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	68fa      	ldr	r2, [r7, #12]
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	4a35      	ldr	r2, [pc, #212]	@ (800b8bc <TIM_Base_SetConfig+0x12c>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d02b      	beq.n	800b842 <TIM_Base_SetConfig+0xb2>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7f0:	d027      	beq.n	800b842 <TIM_Base_SetConfig+0xb2>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	4a32      	ldr	r2, [pc, #200]	@ (800b8c0 <TIM_Base_SetConfig+0x130>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d023      	beq.n	800b842 <TIM_Base_SetConfig+0xb2>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	4a31      	ldr	r2, [pc, #196]	@ (800b8c4 <TIM_Base_SetConfig+0x134>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d01f      	beq.n	800b842 <TIM_Base_SetConfig+0xb2>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	4a30      	ldr	r2, [pc, #192]	@ (800b8c8 <TIM_Base_SetConfig+0x138>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d01b      	beq.n	800b842 <TIM_Base_SetConfig+0xb2>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4a2f      	ldr	r2, [pc, #188]	@ (800b8cc <TIM_Base_SetConfig+0x13c>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d017      	beq.n	800b842 <TIM_Base_SetConfig+0xb2>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	4a2e      	ldr	r2, [pc, #184]	@ (800b8d0 <TIM_Base_SetConfig+0x140>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d013      	beq.n	800b842 <TIM_Base_SetConfig+0xb2>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	4a2d      	ldr	r2, [pc, #180]	@ (800b8d4 <TIM_Base_SetConfig+0x144>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d00f      	beq.n	800b842 <TIM_Base_SetConfig+0xb2>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	4a2c      	ldr	r2, [pc, #176]	@ (800b8d8 <TIM_Base_SetConfig+0x148>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d00b      	beq.n	800b842 <TIM_Base_SetConfig+0xb2>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	4a2b      	ldr	r2, [pc, #172]	@ (800b8dc <TIM_Base_SetConfig+0x14c>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d007      	beq.n	800b842 <TIM_Base_SetConfig+0xb2>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	4a2a      	ldr	r2, [pc, #168]	@ (800b8e0 <TIM_Base_SetConfig+0x150>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d003      	beq.n	800b842 <TIM_Base_SetConfig+0xb2>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	4a29      	ldr	r2, [pc, #164]	@ (800b8e4 <TIM_Base_SetConfig+0x154>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d108      	bne.n	800b854 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	68db      	ldr	r3, [r3, #12]
 800b84e:	68fa      	ldr	r2, [r7, #12]
 800b850:	4313      	orrs	r3, r2
 800b852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	695b      	ldr	r3, [r3, #20]
 800b85e:	4313      	orrs	r3, r2
 800b860:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	68fa      	ldr	r2, [r7, #12]
 800b866:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	689a      	ldr	r2, [r3, #8]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	681a      	ldr	r2, [r3, #0]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	4a10      	ldr	r2, [pc, #64]	@ (800b8bc <TIM_Base_SetConfig+0x12c>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d003      	beq.n	800b888 <TIM_Base_SetConfig+0xf8>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	4a12      	ldr	r2, [pc, #72]	@ (800b8cc <TIM_Base_SetConfig+0x13c>)
 800b884:	4293      	cmp	r3, r2
 800b886:	d103      	bne.n	800b890 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	691a      	ldr	r2, [r3, #16]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2201      	movs	r2, #1
 800b894:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	691b      	ldr	r3, [r3, #16]
 800b89a:	f003 0301 	and.w	r3, r3, #1
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	d105      	bne.n	800b8ae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	691b      	ldr	r3, [r3, #16]
 800b8a6:	f023 0201 	bic.w	r2, r3, #1
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	611a      	str	r2, [r3, #16]
  }
}
 800b8ae:	bf00      	nop
 800b8b0:	3714      	adds	r7, #20
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b8:	4770      	bx	lr
 800b8ba:	bf00      	nop
 800b8bc:	40010000 	.word	0x40010000
 800b8c0:	40000400 	.word	0x40000400
 800b8c4:	40000800 	.word	0x40000800
 800b8c8:	40000c00 	.word	0x40000c00
 800b8cc:	40010400 	.word	0x40010400
 800b8d0:	40014000 	.word	0x40014000
 800b8d4:	40014400 	.word	0x40014400
 800b8d8:	40014800 	.word	0x40014800
 800b8dc:	40001800 	.word	0x40001800
 800b8e0:	40001c00 	.word	0x40001c00
 800b8e4:	40002000 	.word	0x40002000

0800b8e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b087      	sub	sp, #28
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6a1b      	ldr	r3, [r3, #32]
 800b8f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6a1b      	ldr	r3, [r3, #32]
 800b8fc:	f023 0201 	bic.w	r2, r3, #1
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	699b      	ldr	r3, [r3, #24]
 800b90e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b910:	68fa      	ldr	r2, [r7, #12]
 800b912:	4b2b      	ldr	r3, [pc, #172]	@ (800b9c0 <TIM_OC1_SetConfig+0xd8>)
 800b914:	4013      	ands	r3, r2
 800b916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f023 0303 	bic.w	r3, r3, #3
 800b91e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	68fa      	ldr	r2, [r7, #12]
 800b926:	4313      	orrs	r3, r2
 800b928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	f023 0302 	bic.w	r3, r3, #2
 800b930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	689b      	ldr	r3, [r3, #8]
 800b936:	697a      	ldr	r2, [r7, #20]
 800b938:	4313      	orrs	r3, r2
 800b93a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	4a21      	ldr	r2, [pc, #132]	@ (800b9c4 <TIM_OC1_SetConfig+0xdc>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d003      	beq.n	800b94c <TIM_OC1_SetConfig+0x64>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	4a20      	ldr	r2, [pc, #128]	@ (800b9c8 <TIM_OC1_SetConfig+0xe0>)
 800b948:	4293      	cmp	r3, r2
 800b94a:	d10c      	bne.n	800b966 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	f023 0308 	bic.w	r3, r3, #8
 800b952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	68db      	ldr	r3, [r3, #12]
 800b958:	697a      	ldr	r2, [r7, #20]
 800b95a:	4313      	orrs	r3, r2
 800b95c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	f023 0304 	bic.w	r3, r3, #4
 800b964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	4a16      	ldr	r2, [pc, #88]	@ (800b9c4 <TIM_OC1_SetConfig+0xdc>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d003      	beq.n	800b976 <TIM_OC1_SetConfig+0x8e>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	4a15      	ldr	r2, [pc, #84]	@ (800b9c8 <TIM_OC1_SetConfig+0xe0>)
 800b972:	4293      	cmp	r3, r2
 800b974:	d111      	bne.n	800b99a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b97c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b984:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	695b      	ldr	r3, [r3, #20]
 800b98a:	693a      	ldr	r2, [r7, #16]
 800b98c:	4313      	orrs	r3, r2
 800b98e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	699b      	ldr	r3, [r3, #24]
 800b994:	693a      	ldr	r2, [r7, #16]
 800b996:	4313      	orrs	r3, r2
 800b998:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	693a      	ldr	r2, [r7, #16]
 800b99e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	68fa      	ldr	r2, [r7, #12]
 800b9a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	685a      	ldr	r2, [r3, #4]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	697a      	ldr	r2, [r7, #20]
 800b9b2:	621a      	str	r2, [r3, #32]
}
 800b9b4:	bf00      	nop
 800b9b6:	371c      	adds	r7, #28
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr
 800b9c0:	fffeff8f 	.word	0xfffeff8f
 800b9c4:	40010000 	.word	0x40010000
 800b9c8:	40010400 	.word	0x40010400

0800b9cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b087      	sub	sp, #28
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6a1b      	ldr	r3, [r3, #32]
 800b9da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6a1b      	ldr	r3, [r3, #32]
 800b9e0:	f023 0210 	bic.w	r2, r3, #16
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	699b      	ldr	r3, [r3, #24]
 800b9f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b9f4:	68fa      	ldr	r2, [r7, #12]
 800b9f6:	4b2e      	ldr	r3, [pc, #184]	@ (800bab0 <TIM_OC2_SetConfig+0xe4>)
 800b9f8:	4013      	ands	r3, r2
 800b9fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ba02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	021b      	lsls	r3, r3, #8
 800ba0a:	68fa      	ldr	r2, [r7, #12]
 800ba0c:	4313      	orrs	r3, r2
 800ba0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	f023 0320 	bic.w	r3, r3, #32
 800ba16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	689b      	ldr	r3, [r3, #8]
 800ba1c:	011b      	lsls	r3, r3, #4
 800ba1e:	697a      	ldr	r2, [r7, #20]
 800ba20:	4313      	orrs	r3, r2
 800ba22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	4a23      	ldr	r2, [pc, #140]	@ (800bab4 <TIM_OC2_SetConfig+0xe8>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d003      	beq.n	800ba34 <TIM_OC2_SetConfig+0x68>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	4a22      	ldr	r2, [pc, #136]	@ (800bab8 <TIM_OC2_SetConfig+0xec>)
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d10d      	bne.n	800ba50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	68db      	ldr	r3, [r3, #12]
 800ba40:	011b      	lsls	r3, r3, #4
 800ba42:	697a      	ldr	r2, [r7, #20]
 800ba44:	4313      	orrs	r3, r2
 800ba46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	4a18      	ldr	r2, [pc, #96]	@ (800bab4 <TIM_OC2_SetConfig+0xe8>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d003      	beq.n	800ba60 <TIM_OC2_SetConfig+0x94>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	4a17      	ldr	r2, [pc, #92]	@ (800bab8 <TIM_OC2_SetConfig+0xec>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d113      	bne.n	800ba88 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ba66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ba6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	695b      	ldr	r3, [r3, #20]
 800ba74:	009b      	lsls	r3, r3, #2
 800ba76:	693a      	ldr	r2, [r7, #16]
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	699b      	ldr	r3, [r3, #24]
 800ba80:	009b      	lsls	r3, r3, #2
 800ba82:	693a      	ldr	r2, [r7, #16]
 800ba84:	4313      	orrs	r3, r2
 800ba86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	693a      	ldr	r2, [r7, #16]
 800ba8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	68fa      	ldr	r2, [r7, #12]
 800ba92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	685a      	ldr	r2, [r3, #4]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	697a      	ldr	r2, [r7, #20]
 800baa0:	621a      	str	r2, [r3, #32]
}
 800baa2:	bf00      	nop
 800baa4:	371c      	adds	r7, #28
 800baa6:	46bd      	mov	sp, r7
 800baa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baac:	4770      	bx	lr
 800baae:	bf00      	nop
 800bab0:	feff8fff 	.word	0xfeff8fff
 800bab4:	40010000 	.word	0x40010000
 800bab8:	40010400 	.word	0x40010400

0800babc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800babc:	b480      	push	{r7}
 800babe:	b087      	sub	sp, #28
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6a1b      	ldr	r3, [r3, #32]
 800baca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6a1b      	ldr	r3, [r3, #32]
 800bad0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	69db      	ldr	r3, [r3, #28]
 800bae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bae4:	68fa      	ldr	r2, [r7, #12]
 800bae6:	4b2d      	ldr	r3, [pc, #180]	@ (800bb9c <TIM_OC3_SetConfig+0xe0>)
 800bae8:	4013      	ands	r3, r2
 800baea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f023 0303 	bic.w	r3, r3, #3
 800baf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	4313      	orrs	r3, r2
 800bafc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bb04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	689b      	ldr	r3, [r3, #8]
 800bb0a:	021b      	lsls	r3, r3, #8
 800bb0c:	697a      	ldr	r2, [r7, #20]
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	4a22      	ldr	r2, [pc, #136]	@ (800bba0 <TIM_OC3_SetConfig+0xe4>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d003      	beq.n	800bb22 <TIM_OC3_SetConfig+0x66>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	4a21      	ldr	r2, [pc, #132]	@ (800bba4 <TIM_OC3_SetConfig+0xe8>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d10d      	bne.n	800bb3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bb28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	68db      	ldr	r3, [r3, #12]
 800bb2e:	021b      	lsls	r3, r3, #8
 800bb30:	697a      	ldr	r2, [r7, #20]
 800bb32:	4313      	orrs	r3, r2
 800bb34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bb3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	4a17      	ldr	r2, [pc, #92]	@ (800bba0 <TIM_OC3_SetConfig+0xe4>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d003      	beq.n	800bb4e <TIM_OC3_SetConfig+0x92>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	4a16      	ldr	r2, [pc, #88]	@ (800bba4 <TIM_OC3_SetConfig+0xe8>)
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d113      	bne.n	800bb76 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bb54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bb5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	695b      	ldr	r3, [r3, #20]
 800bb62:	011b      	lsls	r3, r3, #4
 800bb64:	693a      	ldr	r2, [r7, #16]
 800bb66:	4313      	orrs	r3, r2
 800bb68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	699b      	ldr	r3, [r3, #24]
 800bb6e:	011b      	lsls	r3, r3, #4
 800bb70:	693a      	ldr	r2, [r7, #16]
 800bb72:	4313      	orrs	r3, r2
 800bb74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	693a      	ldr	r2, [r7, #16]
 800bb7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	68fa      	ldr	r2, [r7, #12]
 800bb80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	685a      	ldr	r2, [r3, #4]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	697a      	ldr	r2, [r7, #20]
 800bb8e:	621a      	str	r2, [r3, #32]
}
 800bb90:	bf00      	nop
 800bb92:	371c      	adds	r7, #28
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr
 800bb9c:	fffeff8f 	.word	0xfffeff8f
 800bba0:	40010000 	.word	0x40010000
 800bba4:	40010400 	.word	0x40010400

0800bba8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b087      	sub	sp, #28
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6a1b      	ldr	r3, [r3, #32]
 800bbb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6a1b      	ldr	r3, [r3, #32]
 800bbbc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	69db      	ldr	r3, [r3, #28]
 800bbce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bbd0:	68fa      	ldr	r2, [r7, #12]
 800bbd2:	4b1e      	ldr	r3, [pc, #120]	@ (800bc4c <TIM_OC4_SetConfig+0xa4>)
 800bbd4:	4013      	ands	r3, r2
 800bbd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bbde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	021b      	lsls	r3, r3, #8
 800bbe6:	68fa      	ldr	r2, [r7, #12]
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bbf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	689b      	ldr	r3, [r3, #8]
 800bbf8:	031b      	lsls	r3, r3, #12
 800bbfa:	693a      	ldr	r2, [r7, #16]
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	4a13      	ldr	r2, [pc, #76]	@ (800bc50 <TIM_OC4_SetConfig+0xa8>)
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d003      	beq.n	800bc10 <TIM_OC4_SetConfig+0x68>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	4a12      	ldr	r2, [pc, #72]	@ (800bc54 <TIM_OC4_SetConfig+0xac>)
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d109      	bne.n	800bc24 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bc16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	695b      	ldr	r3, [r3, #20]
 800bc1c:	019b      	lsls	r3, r3, #6
 800bc1e:	697a      	ldr	r2, [r7, #20]
 800bc20:	4313      	orrs	r3, r2
 800bc22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	697a      	ldr	r2, [r7, #20]
 800bc28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	68fa      	ldr	r2, [r7, #12]
 800bc2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	685a      	ldr	r2, [r3, #4]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	693a      	ldr	r2, [r7, #16]
 800bc3c:	621a      	str	r2, [r3, #32]
}
 800bc3e:	bf00      	nop
 800bc40:	371c      	adds	r7, #28
 800bc42:	46bd      	mov	sp, r7
 800bc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc48:	4770      	bx	lr
 800bc4a:	bf00      	nop
 800bc4c:	feff8fff 	.word	0xfeff8fff
 800bc50:	40010000 	.word	0x40010000
 800bc54:	40010400 	.word	0x40010400

0800bc58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b087      	sub	sp, #28
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6a1b      	ldr	r3, [r3, #32]
 800bc66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6a1b      	ldr	r3, [r3, #32]
 800bc6c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	685b      	ldr	r3, [r3, #4]
 800bc78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bc80:	68fa      	ldr	r2, [r7, #12]
 800bc82:	4b1b      	ldr	r3, [pc, #108]	@ (800bcf0 <TIM_OC5_SetConfig+0x98>)
 800bc84:	4013      	ands	r3, r2
 800bc86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	68fa      	ldr	r2, [r7, #12]
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bc98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	689b      	ldr	r3, [r3, #8]
 800bc9e:	041b      	lsls	r3, r3, #16
 800bca0:	693a      	ldr	r2, [r7, #16]
 800bca2:	4313      	orrs	r3, r2
 800bca4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	4a12      	ldr	r2, [pc, #72]	@ (800bcf4 <TIM_OC5_SetConfig+0x9c>)
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d003      	beq.n	800bcb6 <TIM_OC5_SetConfig+0x5e>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	4a11      	ldr	r2, [pc, #68]	@ (800bcf8 <TIM_OC5_SetConfig+0xa0>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d109      	bne.n	800bcca <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bcbc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	695b      	ldr	r3, [r3, #20]
 800bcc2:	021b      	lsls	r3, r3, #8
 800bcc4:	697a      	ldr	r2, [r7, #20]
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	697a      	ldr	r2, [r7, #20]
 800bcce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	68fa      	ldr	r2, [r7, #12]
 800bcd4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	685a      	ldr	r2, [r3, #4]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	693a      	ldr	r2, [r7, #16]
 800bce2:	621a      	str	r2, [r3, #32]
}
 800bce4:	bf00      	nop
 800bce6:	371c      	adds	r7, #28
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr
 800bcf0:	fffeff8f 	.word	0xfffeff8f
 800bcf4:	40010000 	.word	0x40010000
 800bcf8:	40010400 	.word	0x40010400

0800bcfc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b087      	sub	sp, #28
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6a1b      	ldr	r3, [r3, #32]
 800bd0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6a1b      	ldr	r3, [r3, #32]
 800bd10:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bd24:	68fa      	ldr	r2, [r7, #12]
 800bd26:	4b1c      	ldr	r3, [pc, #112]	@ (800bd98 <TIM_OC6_SetConfig+0x9c>)
 800bd28:	4013      	ands	r3, r2
 800bd2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	021b      	lsls	r3, r3, #8
 800bd32:	68fa      	ldr	r2, [r7, #12]
 800bd34:	4313      	orrs	r3, r2
 800bd36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bd3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	689b      	ldr	r3, [r3, #8]
 800bd44:	051b      	lsls	r3, r3, #20
 800bd46:	693a      	ldr	r2, [r7, #16]
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	4a13      	ldr	r2, [pc, #76]	@ (800bd9c <TIM_OC6_SetConfig+0xa0>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d003      	beq.n	800bd5c <TIM_OC6_SetConfig+0x60>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	4a12      	ldr	r2, [pc, #72]	@ (800bda0 <TIM_OC6_SetConfig+0xa4>)
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d109      	bne.n	800bd70 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bd62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	695b      	ldr	r3, [r3, #20]
 800bd68:	029b      	lsls	r3, r3, #10
 800bd6a:	697a      	ldr	r2, [r7, #20]
 800bd6c:	4313      	orrs	r3, r2
 800bd6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	697a      	ldr	r2, [r7, #20]
 800bd74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	68fa      	ldr	r2, [r7, #12]
 800bd7a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	685a      	ldr	r2, [r3, #4]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	693a      	ldr	r2, [r7, #16]
 800bd88:	621a      	str	r2, [r3, #32]
}
 800bd8a:	bf00      	nop
 800bd8c:	371c      	adds	r7, #28
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr
 800bd96:	bf00      	nop
 800bd98:	feff8fff 	.word	0xfeff8fff
 800bd9c:	40010000 	.word	0x40010000
 800bda0:	40010400 	.word	0x40010400

0800bda4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b087      	sub	sp, #28
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	60f8      	str	r0, [r7, #12]
 800bdac:	60b9      	str	r1, [r7, #8]
 800bdae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	6a1b      	ldr	r3, [r3, #32]
 800bdb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	6a1b      	ldr	r3, [r3, #32]
 800bdba:	f023 0201 	bic.w	r2, r3, #1
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	699b      	ldr	r3, [r3, #24]
 800bdc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bdce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	011b      	lsls	r3, r3, #4
 800bdd4:	693a      	ldr	r2, [r7, #16]
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	f023 030a 	bic.w	r3, r3, #10
 800bde0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bde2:	697a      	ldr	r2, [r7, #20]
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	4313      	orrs	r3, r2
 800bde8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	693a      	ldr	r2, [r7, #16]
 800bdee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	697a      	ldr	r2, [r7, #20]
 800bdf4:	621a      	str	r2, [r3, #32]
}
 800bdf6:	bf00      	nop
 800bdf8:	371c      	adds	r7, #28
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be00:	4770      	bx	lr

0800be02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be02:	b480      	push	{r7}
 800be04:	b087      	sub	sp, #28
 800be06:	af00      	add	r7, sp, #0
 800be08:	60f8      	str	r0, [r7, #12]
 800be0a:	60b9      	str	r1, [r7, #8]
 800be0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	6a1b      	ldr	r3, [r3, #32]
 800be12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	6a1b      	ldr	r3, [r3, #32]
 800be18:	f023 0210 	bic.w	r2, r3, #16
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	699b      	ldr	r3, [r3, #24]
 800be24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800be2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	031b      	lsls	r3, r3, #12
 800be32:	693a      	ldr	r2, [r7, #16]
 800be34:	4313      	orrs	r3, r2
 800be36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800be3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	011b      	lsls	r3, r3, #4
 800be44:	697a      	ldr	r2, [r7, #20]
 800be46:	4313      	orrs	r3, r2
 800be48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	693a      	ldr	r2, [r7, #16]
 800be4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	697a      	ldr	r2, [r7, #20]
 800be54:	621a      	str	r2, [r3, #32]
}
 800be56:	bf00      	nop
 800be58:	371c      	adds	r7, #28
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr

0800be62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800be62:	b480      	push	{r7}
 800be64:	b085      	sub	sp, #20
 800be66:	af00      	add	r7, sp, #0
 800be68:	6078      	str	r0, [r7, #4]
 800be6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	689b      	ldr	r3, [r3, #8]
 800be70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800be7a:	683a      	ldr	r2, [r7, #0]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	4313      	orrs	r3, r2
 800be80:	f043 0307 	orr.w	r3, r3, #7
 800be84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	68fa      	ldr	r2, [r7, #12]
 800be8a:	609a      	str	r2, [r3, #8]
}
 800be8c:	bf00      	nop
 800be8e:	3714      	adds	r7, #20
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr

0800be98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800be98:	b480      	push	{r7}
 800be9a:	b087      	sub	sp, #28
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	60f8      	str	r0, [r7, #12]
 800bea0:	60b9      	str	r1, [r7, #8]
 800bea2:	607a      	str	r2, [r7, #4]
 800bea4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	689b      	ldr	r3, [r3, #8]
 800beaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800beb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	021a      	lsls	r2, r3, #8
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	431a      	orrs	r2, r3
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	4313      	orrs	r3, r2
 800bec0:	697a      	ldr	r2, [r7, #20]
 800bec2:	4313      	orrs	r3, r2
 800bec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	697a      	ldr	r2, [r7, #20]
 800beca:	609a      	str	r2, [r3, #8]
}
 800becc:	bf00      	nop
 800bece:	371c      	adds	r7, #28
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr

0800bed8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bed8:	b480      	push	{r7}
 800beda:	b087      	sub	sp, #28
 800bedc:	af00      	add	r7, sp, #0
 800bede:	60f8      	str	r0, [r7, #12]
 800bee0:	60b9      	str	r1, [r7, #8]
 800bee2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	f003 031f 	and.w	r3, r3, #31
 800beea:	2201      	movs	r2, #1
 800beec:	fa02 f303 	lsl.w	r3, r2, r3
 800bef0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	6a1a      	ldr	r2, [r3, #32]
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	43db      	mvns	r3, r3
 800befa:	401a      	ands	r2, r3
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	6a1a      	ldr	r2, [r3, #32]
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	f003 031f 	and.w	r3, r3, #31
 800bf0a:	6879      	ldr	r1, [r7, #4]
 800bf0c:	fa01 f303 	lsl.w	r3, r1, r3
 800bf10:	431a      	orrs	r2, r3
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	621a      	str	r2, [r3, #32]
}
 800bf16:	bf00      	nop
 800bf18:	371c      	adds	r7, #28
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf20:	4770      	bx	lr
	...

0800bf24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bf24:	b480      	push	{r7}
 800bf26:	b085      	sub	sp, #20
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d101      	bne.n	800bf3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bf38:	2302      	movs	r3, #2
 800bf3a:	e06d      	b.n	800c018 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2201      	movs	r2, #1
 800bf40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2202      	movs	r2, #2
 800bf48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	689b      	ldr	r3, [r3, #8]
 800bf5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4a30      	ldr	r2, [pc, #192]	@ (800c024 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d004      	beq.n	800bf70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4a2f      	ldr	r2, [pc, #188]	@ (800c028 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d108      	bne.n	800bf82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bf76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	68fa      	ldr	r2, [r7, #12]
 800bf7e:	4313      	orrs	r3, r2
 800bf80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	68fa      	ldr	r2, [r7, #12]
 800bf90:	4313      	orrs	r3, r2
 800bf92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	68fa      	ldr	r2, [r7, #12]
 800bf9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	4a20      	ldr	r2, [pc, #128]	@ (800c024 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d022      	beq.n	800bfec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfae:	d01d      	beq.n	800bfec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a1d      	ldr	r2, [pc, #116]	@ (800c02c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d018      	beq.n	800bfec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	4a1c      	ldr	r2, [pc, #112]	@ (800c030 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d013      	beq.n	800bfec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a1a      	ldr	r2, [pc, #104]	@ (800c034 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d00e      	beq.n	800bfec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	4a15      	ldr	r2, [pc, #84]	@ (800c028 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d009      	beq.n	800bfec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	4a16      	ldr	r2, [pc, #88]	@ (800c038 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d004      	beq.n	800bfec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4a15      	ldr	r2, [pc, #84]	@ (800c03c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d10c      	bne.n	800c006 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bff2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	689b      	ldr	r3, [r3, #8]
 800bff8:	68ba      	ldr	r2, [r7, #8]
 800bffa:	4313      	orrs	r3, r2
 800bffc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	68ba      	ldr	r2, [r7, #8]
 800c004:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2201      	movs	r2, #1
 800c00a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2200      	movs	r2, #0
 800c012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c016:	2300      	movs	r3, #0
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3714      	adds	r7, #20
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr
 800c024:	40010000 	.word	0x40010000
 800c028:	40010400 	.word	0x40010400
 800c02c:	40000400 	.word	0x40000400
 800c030:	40000800 	.word	0x40000800
 800c034:	40000c00 	.word	0x40000c00
 800c038:	40014000 	.word	0x40014000
 800c03c:	40001800 	.word	0x40001800

0800c040 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c040:	b480      	push	{r7}
 800c042:	b085      	sub	sp, #20
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c04a:	2300      	movs	r3, #0
 800c04c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c054:	2b01      	cmp	r3, #1
 800c056:	d101      	bne.n	800c05c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c058:	2302      	movs	r3, #2
 800c05a:	e065      	b.n	800c128 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2201      	movs	r2, #1
 800c060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	68db      	ldr	r3, [r3, #12]
 800c06e:	4313      	orrs	r3, r2
 800c070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	689b      	ldr	r3, [r3, #8]
 800c07c:	4313      	orrs	r3, r2
 800c07e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	685b      	ldr	r3, [r3, #4]
 800c08a:	4313      	orrs	r3, r2
 800c08c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4313      	orrs	r3, r2
 800c09a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	691b      	ldr	r3, [r3, #16]
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	695b      	ldr	r3, [r3, #20]
 800c0b4:	4313      	orrs	r3, r2
 800c0b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	699b      	ldr	r3, [r3, #24]
 800c0d0:	041b      	lsls	r3, r3, #16
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	4a16      	ldr	r2, [pc, #88]	@ (800c134 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d004      	beq.n	800c0ea <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4a14      	ldr	r2, [pc, #80]	@ (800c138 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d115      	bne.n	800c116 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0f4:	051b      	lsls	r3, r3, #20
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	69db      	ldr	r3, [r3, #28]
 800c104:	4313      	orrs	r3, r2
 800c106:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	6a1b      	ldr	r3, [r3, #32]
 800c112:	4313      	orrs	r3, r2
 800c114:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	68fa      	ldr	r2, [r7, #12]
 800c11c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2200      	movs	r2, #0
 800c122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c126:	2300      	movs	r3, #0
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3714      	adds	r7, #20
 800c12c:	46bd      	mov	sp, r7
 800c12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c132:	4770      	bx	lr
 800c134:	40010000 	.word	0x40010000
 800c138:	40010400 	.word	0x40010400

0800c13c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c13c:	b480      	push	{r7}
 800c13e:	b083      	sub	sp, #12
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c144:	bf00      	nop
 800c146:	370c      	adds	r7, #12
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr

0800c150 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c150:	b480      	push	{r7}
 800c152:	b083      	sub	sp, #12
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c158:	bf00      	nop
 800c15a:	370c      	adds	r7, #12
 800c15c:	46bd      	mov	sp, r7
 800c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c162:	4770      	bx	lr

0800c164 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c164:	b480      	push	{r7}
 800c166:	b083      	sub	sp, #12
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c16c:	bf00      	nop
 800c16e:	370c      	adds	r7, #12
 800c170:	46bd      	mov	sp, r7
 800c172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c176:	4770      	bx	lr

0800c178 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b082      	sub	sp, #8
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d101      	bne.n	800c18a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c186:	2301      	movs	r3, #1
 800c188:	e040      	b.n	800c20c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d106      	bne.n	800c1a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2200      	movs	r2, #0
 800c196:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f7fa f86e 	bl	800627c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2224      	movs	r2, #36	@ 0x24
 800c1a4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	681a      	ldr	r2, [r3, #0]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f022 0201 	bic.w	r2, r2, #1
 800c1b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d002      	beq.n	800c1c4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 fedc 	bl	800cf7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f000 fc75 	bl	800cab4 <UART_SetConfig>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	d101      	bne.n	800c1d4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	e01b      	b.n	800c20c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	685a      	ldr	r2, [r3, #4]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c1e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	689a      	ldr	r2, [r3, #8]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c1f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f042 0201 	orr.w	r2, r2, #1
 800c202:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f000 ff5b 	bl	800d0c0 <UART_CheckIdleState>
 800c20a:	4603      	mov	r3, r0
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3708      	adds	r7, #8
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b08a      	sub	sp, #40	@ 0x28
 800c218:	af02      	add	r7, sp, #8
 800c21a:	60f8      	str	r0, [r7, #12]
 800c21c:	60b9      	str	r1, [r7, #8]
 800c21e:	603b      	str	r3, [r7, #0]
 800c220:	4613      	mov	r3, r2
 800c222:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c228:	2b20      	cmp	r3, #32
 800c22a:	d177      	bne.n	800c31c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d002      	beq.n	800c238 <HAL_UART_Transmit+0x24>
 800c232:	88fb      	ldrh	r3, [r7, #6]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d101      	bne.n	800c23c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800c238:	2301      	movs	r3, #1
 800c23a:	e070      	b.n	800c31e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	2200      	movs	r2, #0
 800c240:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2221      	movs	r2, #33	@ 0x21
 800c248:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c24a:	f7fa fde1 	bl	8006e10 <HAL_GetTick>
 800c24e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	88fa      	ldrh	r2, [r7, #6]
 800c254:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	88fa      	ldrh	r2, [r7, #6]
 800c25c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	689b      	ldr	r3, [r3, #8]
 800c264:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c268:	d108      	bne.n	800c27c <HAL_UART_Transmit+0x68>
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	691b      	ldr	r3, [r3, #16]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d104      	bne.n	800c27c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800c272:	2300      	movs	r3, #0
 800c274:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	61bb      	str	r3, [r7, #24]
 800c27a:	e003      	b.n	800c284 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c280:	2300      	movs	r3, #0
 800c282:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c284:	e02f      	b.n	800c2e6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	9300      	str	r3, [sp, #0]
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	2200      	movs	r2, #0
 800c28e:	2180      	movs	r1, #128	@ 0x80
 800c290:	68f8      	ldr	r0, [r7, #12]
 800c292:	f000 ff6c 	bl	800d16e <UART_WaitOnFlagUntilTimeout>
 800c296:	4603      	mov	r3, r0
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d004      	beq.n	800c2a6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2220      	movs	r2, #32
 800c2a0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800c2a2:	2303      	movs	r3, #3
 800c2a4:	e03b      	b.n	800c31e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800c2a6:	69fb      	ldr	r3, [r7, #28]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d10b      	bne.n	800c2c4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c2ac:	69bb      	ldr	r3, [r7, #24]
 800c2ae:	881b      	ldrh	r3, [r3, #0]
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c2ba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c2bc:	69bb      	ldr	r3, [r7, #24]
 800c2be:	3302      	adds	r3, #2
 800c2c0:	61bb      	str	r3, [r7, #24]
 800c2c2:	e007      	b.n	800c2d4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c2c4:	69fb      	ldr	r3, [r7, #28]
 800c2c6:	781a      	ldrb	r2, [r3, #0]
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c2ce:	69fb      	ldr	r3, [r7, #28]
 800c2d0:	3301      	adds	r3, #1
 800c2d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c2da:	b29b      	uxth	r3, r3
 800c2dc:	3b01      	subs	r3, #1
 800c2de:	b29a      	uxth	r2, r3
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c2ec:	b29b      	uxth	r3, r3
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d1c9      	bne.n	800c286 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	9300      	str	r3, [sp, #0]
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	2140      	movs	r1, #64	@ 0x40
 800c2fc:	68f8      	ldr	r0, [r7, #12]
 800c2fe:	f000 ff36 	bl	800d16e <UART_WaitOnFlagUntilTimeout>
 800c302:	4603      	mov	r3, r0
 800c304:	2b00      	cmp	r3, #0
 800c306:	d004      	beq.n	800c312 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	2220      	movs	r2, #32
 800c30c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800c30e:	2303      	movs	r3, #3
 800c310:	e005      	b.n	800c31e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2220      	movs	r2, #32
 800c316:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800c318:	2300      	movs	r3, #0
 800c31a:	e000      	b.n	800c31e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800c31c:	2302      	movs	r3, #2
  }
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3720      	adds	r7, #32
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}
	...

0800c328 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b08a      	sub	sp, #40	@ 0x28
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	4613      	mov	r3, r2
 800c334:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c33a:	2b20      	cmp	r3, #32
 800c33c:	d165      	bne.n	800c40a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d002      	beq.n	800c34a <HAL_UART_Transmit_DMA+0x22>
 800c344:	88fb      	ldrh	r3, [r7, #6]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d101      	bne.n	800c34e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800c34a:	2301      	movs	r3, #1
 800c34c:	e05e      	b.n	800c40c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	68ba      	ldr	r2, [r7, #8]
 800c352:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	88fa      	ldrh	r2, [r7, #6]
 800c358:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	88fa      	ldrh	r2, [r7, #6]
 800c360:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	2200      	movs	r2, #0
 800c368:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	2221      	movs	r2, #33	@ 0x21
 800c370:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c376:	2b00      	cmp	r3, #0
 800c378:	d027      	beq.n	800c3ca <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c37e:	4a25      	ldr	r2, [pc, #148]	@ (800c414 <HAL_UART_Transmit_DMA+0xec>)
 800c380:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c386:	4a24      	ldr	r2, [pc, #144]	@ (800c418 <HAL_UART_Transmit_DMA+0xf0>)
 800c388:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c38e:	4a23      	ldr	r2, [pc, #140]	@ (800c41c <HAL_UART_Transmit_DMA+0xf4>)
 800c390:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c396:	2200      	movs	r2, #0
 800c398:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c3a2:	4619      	mov	r1, r3
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	3328      	adds	r3, #40	@ 0x28
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	88fb      	ldrh	r3, [r7, #6]
 800c3ae:	f7fa feef 	bl	8007190 <HAL_DMA_Start_IT>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d008      	beq.n	800c3ca <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	2210      	movs	r2, #16
 800c3bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	2220      	movs	r2, #32
 800c3c4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	e020      	b.n	800c40c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	2240      	movs	r2, #64	@ 0x40
 800c3d0:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	3308      	adds	r3, #8
 800c3d8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	e853 3f00 	ldrex	r3, [r3]
 800c3e0:	613b      	str	r3, [r7, #16]
   return(result);
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3e8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	3308      	adds	r3, #8
 800c3f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3f2:	623a      	str	r2, [r7, #32]
 800c3f4:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f6:	69f9      	ldr	r1, [r7, #28]
 800c3f8:	6a3a      	ldr	r2, [r7, #32]
 800c3fa:	e841 2300 	strex	r3, r2, [r1]
 800c3fe:	61bb      	str	r3, [r7, #24]
   return(result);
 800c400:	69bb      	ldr	r3, [r7, #24]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d1e5      	bne.n	800c3d2 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800c406:	2300      	movs	r3, #0
 800c408:	e000      	b.n	800c40c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800c40a:	2302      	movs	r3, #2
  }
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3728      	adds	r7, #40	@ 0x28
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}
 800c414:	0800d49d 	.word	0x0800d49d
 800c418:	0800d533 	.word	0x0800d533
 800c41c:	0800d6b5 	.word	0x0800d6b5

0800c420 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b08a      	sub	sp, #40	@ 0x28
 800c424:	af00      	add	r7, sp, #0
 800c426:	60f8      	str	r0, [r7, #12]
 800c428:	60b9      	str	r1, [r7, #8]
 800c42a:	4613      	mov	r3, r2
 800c42c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c434:	2b20      	cmp	r3, #32
 800c436:	d132      	bne.n	800c49e <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d002      	beq.n	800c444 <HAL_UART_Receive_DMA+0x24>
 800c43e:	88fb      	ldrh	r3, [r7, #6]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d101      	bne.n	800c448 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c444:	2301      	movs	r3, #1
 800c446:	e02b      	b.n	800c4a0 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2200      	movs	r2, #0
 800c44c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	685b      	ldr	r3, [r3, #4]
 800c454:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d018      	beq.n	800c48e <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	e853 3f00 	ldrex	r3, [r3]
 800c468:	613b      	str	r3, [r7, #16]
   return(result);
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c470:	627b      	str	r3, [r7, #36]	@ 0x24
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	461a      	mov	r2, r3
 800c478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c47a:	623b      	str	r3, [r7, #32]
 800c47c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c47e:	69f9      	ldr	r1, [r7, #28]
 800c480:	6a3a      	ldr	r2, [r7, #32]
 800c482:	e841 2300 	strex	r3, r2, [r1]
 800c486:	61bb      	str	r3, [r7, #24]
   return(result);
 800c488:	69bb      	ldr	r3, [r7, #24]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d1e6      	bne.n	800c45c <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c48e:	88fb      	ldrh	r3, [r7, #6]
 800c490:	461a      	mov	r2, r3
 800c492:	68b9      	ldr	r1, [r7, #8]
 800c494:	68f8      	ldr	r0, [r7, #12]
 800c496:	f000 fed7 	bl	800d248 <UART_Start_Receive_DMA>
 800c49a:	4603      	mov	r3, r0
 800c49c:	e000      	b.n	800c4a0 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800c49e:	2302      	movs	r3, #2
  }
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3728      	adds	r7, #40	@ 0x28
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b0ba      	sub	sp, #232	@ 0xe8
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	69db      	ldr	r3, [r3, #28]
 800c4b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	689b      	ldr	r3, [r3, #8]
 800c4ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c4ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c4d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c4d6:	4013      	ands	r3, r2
 800c4d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c4dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d115      	bne.n	800c510 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c4e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4e8:	f003 0320 	and.w	r3, r3, #32
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d00f      	beq.n	800c510 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c4f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4f4:	f003 0320 	and.w	r3, r3, #32
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d009      	beq.n	800c510 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c500:	2b00      	cmp	r3, #0
 800c502:	f000 8297 	beq.w	800ca34 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	4798      	blx	r3
      }
      return;
 800c50e:	e291      	b.n	800ca34 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c510:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c514:	2b00      	cmp	r3, #0
 800c516:	f000 8117 	beq.w	800c748 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c51a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c51e:	f003 0301 	and.w	r3, r3, #1
 800c522:	2b00      	cmp	r3, #0
 800c524:	d106      	bne.n	800c534 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800c526:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c52a:	4b85      	ldr	r3, [pc, #532]	@ (800c740 <HAL_UART_IRQHandler+0x298>)
 800c52c:	4013      	ands	r3, r2
 800c52e:	2b00      	cmp	r3, #0
 800c530:	f000 810a 	beq.w	800c748 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c538:	f003 0301 	and.w	r3, r3, #1
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d011      	beq.n	800c564 <HAL_UART_IRQHandler+0xbc>
 800c540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d00b      	beq.n	800c564 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	2201      	movs	r2, #1
 800c552:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c55a:	f043 0201 	orr.w	r2, r3, #1
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c568:	f003 0302 	and.w	r3, r3, #2
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d011      	beq.n	800c594 <HAL_UART_IRQHandler+0xec>
 800c570:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c574:	f003 0301 	and.w	r3, r3, #1
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d00b      	beq.n	800c594 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	2202      	movs	r2, #2
 800c582:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c58a:	f043 0204 	orr.w	r2, r3, #4
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c598:	f003 0304 	and.w	r3, r3, #4
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d011      	beq.n	800c5c4 <HAL_UART_IRQHandler+0x11c>
 800c5a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c5a4:	f003 0301 	and.w	r3, r3, #1
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d00b      	beq.n	800c5c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	2204      	movs	r2, #4
 800c5b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c5ba:	f043 0202 	orr.w	r2, r3, #2
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c5c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5c8:	f003 0308 	and.w	r3, r3, #8
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d017      	beq.n	800c600 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c5d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5d4:	f003 0320 	and.w	r3, r3, #32
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d105      	bne.n	800c5e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c5dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c5e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d00b      	beq.n	800c600 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2208      	movs	r2, #8
 800c5ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c5f6:	f043 0208 	orr.w	r2, r3, #8
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c604:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d012      	beq.n	800c632 <HAL_UART_IRQHandler+0x18a>
 800c60c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c610:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c614:	2b00      	cmp	r3, #0
 800c616:	d00c      	beq.n	800c632 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c620:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c628:	f043 0220 	orr.w	r2, r3, #32
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c638:	2b00      	cmp	r3, #0
 800c63a:	f000 81fd 	beq.w	800ca38 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c63e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c642:	f003 0320 	and.w	r3, r3, #32
 800c646:	2b00      	cmp	r3, #0
 800c648:	d00d      	beq.n	800c666 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c64a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c64e:	f003 0320 	and.w	r3, r3, #32
 800c652:	2b00      	cmp	r3, #0
 800c654:	d007      	beq.n	800c666 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d003      	beq.n	800c666 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c66c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	689b      	ldr	r3, [r3, #8]
 800c676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c67a:	2b40      	cmp	r3, #64	@ 0x40
 800c67c:	d005      	beq.n	800c68a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c67e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c682:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c686:	2b00      	cmp	r3, #0
 800c688:	d04f      	beq.n	800c72a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f000 fea2 	bl	800d3d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	689b      	ldr	r3, [r3, #8]
 800c696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c69a:	2b40      	cmp	r3, #64	@ 0x40
 800c69c:	d141      	bne.n	800c722 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	3308      	adds	r3, #8
 800c6a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c6ac:	e853 3f00 	ldrex	r3, [r3]
 800c6b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c6b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c6b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c6bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	3308      	adds	r3, #8
 800c6c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c6ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c6ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c6d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c6da:	e841 2300 	strex	r3, r2, [r1]
 800c6de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c6e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d1d9      	bne.n	800c69e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d013      	beq.n	800c71a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c6f6:	4a13      	ldr	r2, [pc, #76]	@ (800c744 <HAL_UART_IRQHandler+0x29c>)
 800c6f8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7fa fe16 	bl	8007330 <HAL_DMA_Abort_IT>
 800c704:	4603      	mov	r3, r0
 800c706:	2b00      	cmp	r3, #0
 800c708:	d017      	beq.n	800c73a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c70e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c710:	687a      	ldr	r2, [r7, #4]
 800c712:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c714:	4610      	mov	r0, r2
 800c716:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c718:	e00f      	b.n	800c73a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f000 f9b4 	bl	800ca88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c720:	e00b      	b.n	800c73a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f000 f9b0 	bl	800ca88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c728:	e007      	b.n	800c73a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f000 f9ac 	bl	800ca88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2200      	movs	r2, #0
 800c734:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800c738:	e17e      	b.n	800ca38 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c73a:	bf00      	nop
    return;
 800c73c:	e17c      	b.n	800ca38 <HAL_UART_IRQHandler+0x590>
 800c73e:	bf00      	nop
 800c740:	04000120 	.word	0x04000120
 800c744:	0800d733 	.word	0x0800d733

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	f040 814c 	bne.w	800c9ea <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c756:	f003 0310 	and.w	r3, r3, #16
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	f000 8145 	beq.w	800c9ea <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c764:	f003 0310 	and.w	r3, r3, #16
 800c768:	2b00      	cmp	r3, #0
 800c76a:	f000 813e 	beq.w	800c9ea <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	2210      	movs	r2, #16
 800c774:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	689b      	ldr	r3, [r3, #8]
 800c77c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c780:	2b40      	cmp	r3, #64	@ 0x40
 800c782:	f040 80b6 	bne.w	800c8f2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c792:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c796:	2b00      	cmp	r3, #0
 800c798:	f000 8150 	beq.w	800ca3c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c7a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	f080 8148 	bcs.w	800ca3c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c7b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7ba:	69db      	ldr	r3, [r3, #28]
 800c7bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c7c0:	f000 8086 	beq.w	800c8d0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c7d0:	e853 3f00 	ldrex	r3, [r3]
 800c7d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c7d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c7dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c7e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c7ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c7f2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c7fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c7fe:	e841 2300 	strex	r3, r2, [r1]
 800c802:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c806:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d1da      	bne.n	800c7c4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	3308      	adds	r3, #8
 800c814:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c816:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c818:	e853 3f00 	ldrex	r3, [r3]
 800c81c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c81e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c820:	f023 0301 	bic.w	r3, r3, #1
 800c824:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	3308      	adds	r3, #8
 800c82e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c832:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c836:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c838:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c83a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c83e:	e841 2300 	strex	r3, r2, [r1]
 800c842:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c844:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c846:	2b00      	cmp	r3, #0
 800c848:	d1e1      	bne.n	800c80e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	3308      	adds	r3, #8
 800c850:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c852:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c854:	e853 3f00 	ldrex	r3, [r3]
 800c858:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c85a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c85c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c860:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	3308      	adds	r3, #8
 800c86a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c86e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c870:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c872:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c874:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c876:	e841 2300 	strex	r3, r2, [r1]
 800c87a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c87c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d1e3      	bne.n	800c84a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2220      	movs	r2, #32
 800c886:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2200      	movs	r2, #0
 800c88e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c896:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c898:	e853 3f00 	ldrex	r3, [r3]
 800c89c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c89e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c8a0:	f023 0310 	bic.w	r3, r3, #16
 800c8a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c8b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c8b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c8b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c8ba:	e841 2300 	strex	r3, r2, [r1]
 800c8be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c8c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d1e4      	bne.n	800c890 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f7fa fcc0 	bl	8007250 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2202      	movs	r2, #2
 800c8d4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	1ad3      	subs	r3, r2, r3
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f000 f8d6 	bl	800ca9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c8f0:	e0a4      	b.n	800ca3c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c8fe:	b29b      	uxth	r3, r3
 800c900:	1ad3      	subs	r3, r2, r3
 800c902:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c90c:	b29b      	uxth	r3, r3
 800c90e:	2b00      	cmp	r3, #0
 800c910:	f000 8096 	beq.w	800ca40 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800c914:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c918:	2b00      	cmp	r3, #0
 800c91a:	f000 8091 	beq.w	800ca40 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c926:	e853 3f00 	ldrex	r3, [r3]
 800c92a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c92c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c92e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c932:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	461a      	mov	r2, r3
 800c93c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c940:	647b      	str	r3, [r7, #68]	@ 0x44
 800c942:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c944:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c946:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c948:	e841 2300 	strex	r3, r2, [r1]
 800c94c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c94e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c950:	2b00      	cmp	r3, #0
 800c952:	d1e4      	bne.n	800c91e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	3308      	adds	r3, #8
 800c95a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c95e:	e853 3f00 	ldrex	r3, [r3]
 800c962:	623b      	str	r3, [r7, #32]
   return(result);
 800c964:	6a3b      	ldr	r3, [r7, #32]
 800c966:	f023 0301 	bic.w	r3, r3, #1
 800c96a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	3308      	adds	r3, #8
 800c974:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c978:	633a      	str	r2, [r7, #48]	@ 0x30
 800c97a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c97c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c97e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c980:	e841 2300 	strex	r3, r2, [r1]
 800c984:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d1e3      	bne.n	800c954 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2220      	movs	r2, #32
 800c990:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2200      	movs	r2, #0
 800c998:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2200      	movs	r2, #0
 800c99e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	e853 3f00 	ldrex	r3, [r3]
 800c9ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	f023 0310 	bic.w	r3, r3, #16
 800c9b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	461a      	mov	r2, r3
 800c9be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c9c2:	61fb      	str	r3, [r7, #28]
 800c9c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9c6:	69b9      	ldr	r1, [r7, #24]
 800c9c8:	69fa      	ldr	r2, [r7, #28]
 800c9ca:	e841 2300 	strex	r3, r2, [r1]
 800c9ce:	617b      	str	r3, [r7, #20]
   return(result);
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d1e4      	bne.n	800c9a0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2202      	movs	r2, #2
 800c9da:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c9dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f000 f85a 	bl	800ca9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c9e8:	e02a      	b.n	800ca40 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c9ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d00e      	beq.n	800ca14 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c9f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c9fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d008      	beq.n	800ca14 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d01c      	beq.n	800ca44 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	4798      	blx	r3
    }
    return;
 800ca12:	e017      	b.n	800ca44 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ca14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d012      	beq.n	800ca46 <HAL_UART_IRQHandler+0x59e>
 800ca20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d00c      	beq.n	800ca46 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f000 fe96 	bl	800d75e <UART_EndTransmit_IT>
    return;
 800ca32:	e008      	b.n	800ca46 <HAL_UART_IRQHandler+0x59e>
      return;
 800ca34:	bf00      	nop
 800ca36:	e006      	b.n	800ca46 <HAL_UART_IRQHandler+0x59e>
    return;
 800ca38:	bf00      	nop
 800ca3a:	e004      	b.n	800ca46 <HAL_UART_IRQHandler+0x59e>
      return;
 800ca3c:	bf00      	nop
 800ca3e:	e002      	b.n	800ca46 <HAL_UART_IRQHandler+0x59e>
      return;
 800ca40:	bf00      	nop
 800ca42:	e000      	b.n	800ca46 <HAL_UART_IRQHandler+0x59e>
    return;
 800ca44:	bf00      	nop
  }

}
 800ca46:	37e8      	adds	r7, #232	@ 0xe8
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b083      	sub	sp, #12
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ca54:	bf00      	nop
 800ca56:	370c      	adds	r7, #12
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5e:	4770      	bx	lr

0800ca60 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ca60:	b480      	push	{r7}
 800ca62:	b083      	sub	sp, #12
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ca68:	bf00      	nop
 800ca6a:	370c      	adds	r7, #12
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr

0800ca74 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b083      	sub	sp, #12
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ca7c:	bf00      	nop
 800ca7e:	370c      	adds	r7, #12
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b083      	sub	sp, #12
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ca90:	bf00      	nop
 800ca92:	370c      	adds	r7, #12
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr

0800ca9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b083      	sub	sp, #12
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	460b      	mov	r3, r1
 800caa6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800caa8:	bf00      	nop
 800caaa:	370c      	adds	r7, #12
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr

0800cab4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b088      	sub	sp, #32
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cabc:	2300      	movs	r3, #0
 800cabe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	689a      	ldr	r2, [r3, #8]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	691b      	ldr	r3, [r3, #16]
 800cac8:	431a      	orrs	r2, r3
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	695b      	ldr	r3, [r3, #20]
 800cace:	431a      	orrs	r2, r3
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	69db      	ldr	r3, [r3, #28]
 800cad4:	4313      	orrs	r3, r2
 800cad6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	681a      	ldr	r2, [r3, #0]
 800cade:	4ba6      	ldr	r3, [pc, #664]	@ (800cd78 <UART_SetConfig+0x2c4>)
 800cae0:	4013      	ands	r3, r2
 800cae2:	687a      	ldr	r2, [r7, #4]
 800cae4:	6812      	ldr	r2, [r2, #0]
 800cae6:	6979      	ldr	r1, [r7, #20]
 800cae8:	430b      	orrs	r3, r1
 800caea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	685b      	ldr	r3, [r3, #4]
 800caf2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	68da      	ldr	r2, [r3, #12]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	430a      	orrs	r2, r1
 800cb00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	699b      	ldr	r3, [r3, #24]
 800cb06:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6a1b      	ldr	r3, [r3, #32]
 800cb0c:	697a      	ldr	r2, [r7, #20]
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	689b      	ldr	r3, [r3, #8]
 800cb18:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	697a      	ldr	r2, [r7, #20]
 800cb22:	430a      	orrs	r2, r1
 800cb24:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	4a94      	ldr	r2, [pc, #592]	@ (800cd7c <UART_SetConfig+0x2c8>)
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d120      	bne.n	800cb72 <UART_SetConfig+0xbe>
 800cb30:	4b93      	ldr	r3, [pc, #588]	@ (800cd80 <UART_SetConfig+0x2cc>)
 800cb32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb36:	f003 0303 	and.w	r3, r3, #3
 800cb3a:	2b03      	cmp	r3, #3
 800cb3c:	d816      	bhi.n	800cb6c <UART_SetConfig+0xb8>
 800cb3e:	a201      	add	r2, pc, #4	@ (adr r2, 800cb44 <UART_SetConfig+0x90>)
 800cb40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb44:	0800cb55 	.word	0x0800cb55
 800cb48:	0800cb61 	.word	0x0800cb61
 800cb4c:	0800cb5b 	.word	0x0800cb5b
 800cb50:	0800cb67 	.word	0x0800cb67
 800cb54:	2301      	movs	r3, #1
 800cb56:	77fb      	strb	r3, [r7, #31]
 800cb58:	e150      	b.n	800cdfc <UART_SetConfig+0x348>
 800cb5a:	2302      	movs	r3, #2
 800cb5c:	77fb      	strb	r3, [r7, #31]
 800cb5e:	e14d      	b.n	800cdfc <UART_SetConfig+0x348>
 800cb60:	2304      	movs	r3, #4
 800cb62:	77fb      	strb	r3, [r7, #31]
 800cb64:	e14a      	b.n	800cdfc <UART_SetConfig+0x348>
 800cb66:	2308      	movs	r3, #8
 800cb68:	77fb      	strb	r3, [r7, #31]
 800cb6a:	e147      	b.n	800cdfc <UART_SetConfig+0x348>
 800cb6c:	2310      	movs	r3, #16
 800cb6e:	77fb      	strb	r3, [r7, #31]
 800cb70:	e144      	b.n	800cdfc <UART_SetConfig+0x348>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	4a83      	ldr	r2, [pc, #524]	@ (800cd84 <UART_SetConfig+0x2d0>)
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	d132      	bne.n	800cbe2 <UART_SetConfig+0x12e>
 800cb7c:	4b80      	ldr	r3, [pc, #512]	@ (800cd80 <UART_SetConfig+0x2cc>)
 800cb7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb82:	f003 030c 	and.w	r3, r3, #12
 800cb86:	2b0c      	cmp	r3, #12
 800cb88:	d828      	bhi.n	800cbdc <UART_SetConfig+0x128>
 800cb8a:	a201      	add	r2, pc, #4	@ (adr r2, 800cb90 <UART_SetConfig+0xdc>)
 800cb8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb90:	0800cbc5 	.word	0x0800cbc5
 800cb94:	0800cbdd 	.word	0x0800cbdd
 800cb98:	0800cbdd 	.word	0x0800cbdd
 800cb9c:	0800cbdd 	.word	0x0800cbdd
 800cba0:	0800cbd1 	.word	0x0800cbd1
 800cba4:	0800cbdd 	.word	0x0800cbdd
 800cba8:	0800cbdd 	.word	0x0800cbdd
 800cbac:	0800cbdd 	.word	0x0800cbdd
 800cbb0:	0800cbcb 	.word	0x0800cbcb
 800cbb4:	0800cbdd 	.word	0x0800cbdd
 800cbb8:	0800cbdd 	.word	0x0800cbdd
 800cbbc:	0800cbdd 	.word	0x0800cbdd
 800cbc0:	0800cbd7 	.word	0x0800cbd7
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	77fb      	strb	r3, [r7, #31]
 800cbc8:	e118      	b.n	800cdfc <UART_SetConfig+0x348>
 800cbca:	2302      	movs	r3, #2
 800cbcc:	77fb      	strb	r3, [r7, #31]
 800cbce:	e115      	b.n	800cdfc <UART_SetConfig+0x348>
 800cbd0:	2304      	movs	r3, #4
 800cbd2:	77fb      	strb	r3, [r7, #31]
 800cbd4:	e112      	b.n	800cdfc <UART_SetConfig+0x348>
 800cbd6:	2308      	movs	r3, #8
 800cbd8:	77fb      	strb	r3, [r7, #31]
 800cbda:	e10f      	b.n	800cdfc <UART_SetConfig+0x348>
 800cbdc:	2310      	movs	r3, #16
 800cbde:	77fb      	strb	r3, [r7, #31]
 800cbe0:	e10c      	b.n	800cdfc <UART_SetConfig+0x348>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	4a68      	ldr	r2, [pc, #416]	@ (800cd88 <UART_SetConfig+0x2d4>)
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d120      	bne.n	800cc2e <UART_SetConfig+0x17a>
 800cbec:	4b64      	ldr	r3, [pc, #400]	@ (800cd80 <UART_SetConfig+0x2cc>)
 800cbee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cbf2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800cbf6:	2b30      	cmp	r3, #48	@ 0x30
 800cbf8:	d013      	beq.n	800cc22 <UART_SetConfig+0x16e>
 800cbfa:	2b30      	cmp	r3, #48	@ 0x30
 800cbfc:	d814      	bhi.n	800cc28 <UART_SetConfig+0x174>
 800cbfe:	2b20      	cmp	r3, #32
 800cc00:	d009      	beq.n	800cc16 <UART_SetConfig+0x162>
 800cc02:	2b20      	cmp	r3, #32
 800cc04:	d810      	bhi.n	800cc28 <UART_SetConfig+0x174>
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d002      	beq.n	800cc10 <UART_SetConfig+0x15c>
 800cc0a:	2b10      	cmp	r3, #16
 800cc0c:	d006      	beq.n	800cc1c <UART_SetConfig+0x168>
 800cc0e:	e00b      	b.n	800cc28 <UART_SetConfig+0x174>
 800cc10:	2300      	movs	r3, #0
 800cc12:	77fb      	strb	r3, [r7, #31]
 800cc14:	e0f2      	b.n	800cdfc <UART_SetConfig+0x348>
 800cc16:	2302      	movs	r3, #2
 800cc18:	77fb      	strb	r3, [r7, #31]
 800cc1a:	e0ef      	b.n	800cdfc <UART_SetConfig+0x348>
 800cc1c:	2304      	movs	r3, #4
 800cc1e:	77fb      	strb	r3, [r7, #31]
 800cc20:	e0ec      	b.n	800cdfc <UART_SetConfig+0x348>
 800cc22:	2308      	movs	r3, #8
 800cc24:	77fb      	strb	r3, [r7, #31]
 800cc26:	e0e9      	b.n	800cdfc <UART_SetConfig+0x348>
 800cc28:	2310      	movs	r3, #16
 800cc2a:	77fb      	strb	r3, [r7, #31]
 800cc2c:	e0e6      	b.n	800cdfc <UART_SetConfig+0x348>
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	4a56      	ldr	r2, [pc, #344]	@ (800cd8c <UART_SetConfig+0x2d8>)
 800cc34:	4293      	cmp	r3, r2
 800cc36:	d120      	bne.n	800cc7a <UART_SetConfig+0x1c6>
 800cc38:	4b51      	ldr	r3, [pc, #324]	@ (800cd80 <UART_SetConfig+0x2cc>)
 800cc3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc3e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cc42:	2bc0      	cmp	r3, #192	@ 0xc0
 800cc44:	d013      	beq.n	800cc6e <UART_SetConfig+0x1ba>
 800cc46:	2bc0      	cmp	r3, #192	@ 0xc0
 800cc48:	d814      	bhi.n	800cc74 <UART_SetConfig+0x1c0>
 800cc4a:	2b80      	cmp	r3, #128	@ 0x80
 800cc4c:	d009      	beq.n	800cc62 <UART_SetConfig+0x1ae>
 800cc4e:	2b80      	cmp	r3, #128	@ 0x80
 800cc50:	d810      	bhi.n	800cc74 <UART_SetConfig+0x1c0>
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d002      	beq.n	800cc5c <UART_SetConfig+0x1a8>
 800cc56:	2b40      	cmp	r3, #64	@ 0x40
 800cc58:	d006      	beq.n	800cc68 <UART_SetConfig+0x1b4>
 800cc5a:	e00b      	b.n	800cc74 <UART_SetConfig+0x1c0>
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	77fb      	strb	r3, [r7, #31]
 800cc60:	e0cc      	b.n	800cdfc <UART_SetConfig+0x348>
 800cc62:	2302      	movs	r3, #2
 800cc64:	77fb      	strb	r3, [r7, #31]
 800cc66:	e0c9      	b.n	800cdfc <UART_SetConfig+0x348>
 800cc68:	2304      	movs	r3, #4
 800cc6a:	77fb      	strb	r3, [r7, #31]
 800cc6c:	e0c6      	b.n	800cdfc <UART_SetConfig+0x348>
 800cc6e:	2308      	movs	r3, #8
 800cc70:	77fb      	strb	r3, [r7, #31]
 800cc72:	e0c3      	b.n	800cdfc <UART_SetConfig+0x348>
 800cc74:	2310      	movs	r3, #16
 800cc76:	77fb      	strb	r3, [r7, #31]
 800cc78:	e0c0      	b.n	800cdfc <UART_SetConfig+0x348>
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	4a44      	ldr	r2, [pc, #272]	@ (800cd90 <UART_SetConfig+0x2dc>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d125      	bne.n	800ccd0 <UART_SetConfig+0x21c>
 800cc84:	4b3e      	ldr	r3, [pc, #248]	@ (800cd80 <UART_SetConfig+0x2cc>)
 800cc86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cc8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cc92:	d017      	beq.n	800ccc4 <UART_SetConfig+0x210>
 800cc94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cc98:	d817      	bhi.n	800ccca <UART_SetConfig+0x216>
 800cc9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc9e:	d00b      	beq.n	800ccb8 <UART_SetConfig+0x204>
 800cca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cca4:	d811      	bhi.n	800ccca <UART_SetConfig+0x216>
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d003      	beq.n	800ccb2 <UART_SetConfig+0x1fe>
 800ccaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ccae:	d006      	beq.n	800ccbe <UART_SetConfig+0x20a>
 800ccb0:	e00b      	b.n	800ccca <UART_SetConfig+0x216>
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	77fb      	strb	r3, [r7, #31]
 800ccb6:	e0a1      	b.n	800cdfc <UART_SetConfig+0x348>
 800ccb8:	2302      	movs	r3, #2
 800ccba:	77fb      	strb	r3, [r7, #31]
 800ccbc:	e09e      	b.n	800cdfc <UART_SetConfig+0x348>
 800ccbe:	2304      	movs	r3, #4
 800ccc0:	77fb      	strb	r3, [r7, #31]
 800ccc2:	e09b      	b.n	800cdfc <UART_SetConfig+0x348>
 800ccc4:	2308      	movs	r3, #8
 800ccc6:	77fb      	strb	r3, [r7, #31]
 800ccc8:	e098      	b.n	800cdfc <UART_SetConfig+0x348>
 800ccca:	2310      	movs	r3, #16
 800cccc:	77fb      	strb	r3, [r7, #31]
 800ccce:	e095      	b.n	800cdfc <UART_SetConfig+0x348>
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	4a2f      	ldr	r2, [pc, #188]	@ (800cd94 <UART_SetConfig+0x2e0>)
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d125      	bne.n	800cd26 <UART_SetConfig+0x272>
 800ccda:	4b29      	ldr	r3, [pc, #164]	@ (800cd80 <UART_SetConfig+0x2cc>)
 800ccdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cce0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800cce4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cce8:	d017      	beq.n	800cd1a <UART_SetConfig+0x266>
 800ccea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ccee:	d817      	bhi.n	800cd20 <UART_SetConfig+0x26c>
 800ccf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ccf4:	d00b      	beq.n	800cd0e <UART_SetConfig+0x25a>
 800ccf6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ccfa:	d811      	bhi.n	800cd20 <UART_SetConfig+0x26c>
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d003      	beq.n	800cd08 <UART_SetConfig+0x254>
 800cd00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd04:	d006      	beq.n	800cd14 <UART_SetConfig+0x260>
 800cd06:	e00b      	b.n	800cd20 <UART_SetConfig+0x26c>
 800cd08:	2301      	movs	r3, #1
 800cd0a:	77fb      	strb	r3, [r7, #31]
 800cd0c:	e076      	b.n	800cdfc <UART_SetConfig+0x348>
 800cd0e:	2302      	movs	r3, #2
 800cd10:	77fb      	strb	r3, [r7, #31]
 800cd12:	e073      	b.n	800cdfc <UART_SetConfig+0x348>
 800cd14:	2304      	movs	r3, #4
 800cd16:	77fb      	strb	r3, [r7, #31]
 800cd18:	e070      	b.n	800cdfc <UART_SetConfig+0x348>
 800cd1a:	2308      	movs	r3, #8
 800cd1c:	77fb      	strb	r3, [r7, #31]
 800cd1e:	e06d      	b.n	800cdfc <UART_SetConfig+0x348>
 800cd20:	2310      	movs	r3, #16
 800cd22:	77fb      	strb	r3, [r7, #31]
 800cd24:	e06a      	b.n	800cdfc <UART_SetConfig+0x348>
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	4a1b      	ldr	r2, [pc, #108]	@ (800cd98 <UART_SetConfig+0x2e4>)
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d138      	bne.n	800cda2 <UART_SetConfig+0x2ee>
 800cd30:	4b13      	ldr	r3, [pc, #76]	@ (800cd80 <UART_SetConfig+0x2cc>)
 800cd32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd36:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800cd3a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cd3e:	d017      	beq.n	800cd70 <UART_SetConfig+0x2bc>
 800cd40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cd44:	d82a      	bhi.n	800cd9c <UART_SetConfig+0x2e8>
 800cd46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd4a:	d00b      	beq.n	800cd64 <UART_SetConfig+0x2b0>
 800cd4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd50:	d824      	bhi.n	800cd9c <UART_SetConfig+0x2e8>
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d003      	beq.n	800cd5e <UART_SetConfig+0x2aa>
 800cd56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd5a:	d006      	beq.n	800cd6a <UART_SetConfig+0x2b6>
 800cd5c:	e01e      	b.n	800cd9c <UART_SetConfig+0x2e8>
 800cd5e:	2300      	movs	r3, #0
 800cd60:	77fb      	strb	r3, [r7, #31]
 800cd62:	e04b      	b.n	800cdfc <UART_SetConfig+0x348>
 800cd64:	2302      	movs	r3, #2
 800cd66:	77fb      	strb	r3, [r7, #31]
 800cd68:	e048      	b.n	800cdfc <UART_SetConfig+0x348>
 800cd6a:	2304      	movs	r3, #4
 800cd6c:	77fb      	strb	r3, [r7, #31]
 800cd6e:	e045      	b.n	800cdfc <UART_SetConfig+0x348>
 800cd70:	2308      	movs	r3, #8
 800cd72:	77fb      	strb	r3, [r7, #31]
 800cd74:	e042      	b.n	800cdfc <UART_SetConfig+0x348>
 800cd76:	bf00      	nop
 800cd78:	efff69f3 	.word	0xefff69f3
 800cd7c:	40011000 	.word	0x40011000
 800cd80:	40023800 	.word	0x40023800
 800cd84:	40004400 	.word	0x40004400
 800cd88:	40004800 	.word	0x40004800
 800cd8c:	40004c00 	.word	0x40004c00
 800cd90:	40005000 	.word	0x40005000
 800cd94:	40011400 	.word	0x40011400
 800cd98:	40007800 	.word	0x40007800
 800cd9c:	2310      	movs	r3, #16
 800cd9e:	77fb      	strb	r3, [r7, #31]
 800cda0:	e02c      	b.n	800cdfc <UART_SetConfig+0x348>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4a72      	ldr	r2, [pc, #456]	@ (800cf70 <UART_SetConfig+0x4bc>)
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d125      	bne.n	800cdf8 <UART_SetConfig+0x344>
 800cdac:	4b71      	ldr	r3, [pc, #452]	@ (800cf74 <UART_SetConfig+0x4c0>)
 800cdae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cdb2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800cdb6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800cdba:	d017      	beq.n	800cdec <UART_SetConfig+0x338>
 800cdbc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800cdc0:	d817      	bhi.n	800cdf2 <UART_SetConfig+0x33e>
 800cdc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cdc6:	d00b      	beq.n	800cde0 <UART_SetConfig+0x32c>
 800cdc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cdcc:	d811      	bhi.n	800cdf2 <UART_SetConfig+0x33e>
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d003      	beq.n	800cdda <UART_SetConfig+0x326>
 800cdd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cdd6:	d006      	beq.n	800cde6 <UART_SetConfig+0x332>
 800cdd8:	e00b      	b.n	800cdf2 <UART_SetConfig+0x33e>
 800cdda:	2300      	movs	r3, #0
 800cddc:	77fb      	strb	r3, [r7, #31]
 800cdde:	e00d      	b.n	800cdfc <UART_SetConfig+0x348>
 800cde0:	2302      	movs	r3, #2
 800cde2:	77fb      	strb	r3, [r7, #31]
 800cde4:	e00a      	b.n	800cdfc <UART_SetConfig+0x348>
 800cde6:	2304      	movs	r3, #4
 800cde8:	77fb      	strb	r3, [r7, #31]
 800cdea:	e007      	b.n	800cdfc <UART_SetConfig+0x348>
 800cdec:	2308      	movs	r3, #8
 800cdee:	77fb      	strb	r3, [r7, #31]
 800cdf0:	e004      	b.n	800cdfc <UART_SetConfig+0x348>
 800cdf2:	2310      	movs	r3, #16
 800cdf4:	77fb      	strb	r3, [r7, #31]
 800cdf6:	e001      	b.n	800cdfc <UART_SetConfig+0x348>
 800cdf8:	2310      	movs	r3, #16
 800cdfa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	69db      	ldr	r3, [r3, #28]
 800ce00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ce04:	d15b      	bne.n	800cebe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800ce06:	7ffb      	ldrb	r3, [r7, #31]
 800ce08:	2b08      	cmp	r3, #8
 800ce0a:	d828      	bhi.n	800ce5e <UART_SetConfig+0x3aa>
 800ce0c:	a201      	add	r2, pc, #4	@ (adr r2, 800ce14 <UART_SetConfig+0x360>)
 800ce0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce12:	bf00      	nop
 800ce14:	0800ce39 	.word	0x0800ce39
 800ce18:	0800ce41 	.word	0x0800ce41
 800ce1c:	0800ce49 	.word	0x0800ce49
 800ce20:	0800ce5f 	.word	0x0800ce5f
 800ce24:	0800ce4f 	.word	0x0800ce4f
 800ce28:	0800ce5f 	.word	0x0800ce5f
 800ce2c:	0800ce5f 	.word	0x0800ce5f
 800ce30:	0800ce5f 	.word	0x0800ce5f
 800ce34:	0800ce57 	.word	0x0800ce57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ce38:	f7fc f98e 	bl	8009158 <HAL_RCC_GetPCLK1Freq>
 800ce3c:	61b8      	str	r0, [r7, #24]
        break;
 800ce3e:	e013      	b.n	800ce68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ce40:	f7fc f99e 	bl	8009180 <HAL_RCC_GetPCLK2Freq>
 800ce44:	61b8      	str	r0, [r7, #24]
        break;
 800ce46:	e00f      	b.n	800ce68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ce48:	4b4b      	ldr	r3, [pc, #300]	@ (800cf78 <UART_SetConfig+0x4c4>)
 800ce4a:	61bb      	str	r3, [r7, #24]
        break;
 800ce4c:	e00c      	b.n	800ce68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ce4e:	f7fc f871 	bl	8008f34 <HAL_RCC_GetSysClockFreq>
 800ce52:	61b8      	str	r0, [r7, #24]
        break;
 800ce54:	e008      	b.n	800ce68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ce5a:	61bb      	str	r3, [r7, #24]
        break;
 800ce5c:	e004      	b.n	800ce68 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ce62:	2301      	movs	r3, #1
 800ce64:	77bb      	strb	r3, [r7, #30]
        break;
 800ce66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ce68:	69bb      	ldr	r3, [r7, #24]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d074      	beq.n	800cf58 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ce6e:	69bb      	ldr	r3, [r7, #24]
 800ce70:	005a      	lsls	r2, r3, #1
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	685b      	ldr	r3, [r3, #4]
 800ce76:	085b      	lsrs	r3, r3, #1
 800ce78:	441a      	add	r2, r3
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	685b      	ldr	r3, [r3, #4]
 800ce7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ce84:	693b      	ldr	r3, [r7, #16]
 800ce86:	2b0f      	cmp	r3, #15
 800ce88:	d916      	bls.n	800ceb8 <UART_SetConfig+0x404>
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ce90:	d212      	bcs.n	800ceb8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	b29b      	uxth	r3, r3
 800ce96:	f023 030f 	bic.w	r3, r3, #15
 800ce9a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	085b      	lsrs	r3, r3, #1
 800cea0:	b29b      	uxth	r3, r3
 800cea2:	f003 0307 	and.w	r3, r3, #7
 800cea6:	b29a      	uxth	r2, r3
 800cea8:	89fb      	ldrh	r3, [r7, #14]
 800ceaa:	4313      	orrs	r3, r2
 800ceac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	89fa      	ldrh	r2, [r7, #14]
 800ceb4:	60da      	str	r2, [r3, #12]
 800ceb6:	e04f      	b.n	800cf58 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ceb8:	2301      	movs	r3, #1
 800ceba:	77bb      	strb	r3, [r7, #30]
 800cebc:	e04c      	b.n	800cf58 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cebe:	7ffb      	ldrb	r3, [r7, #31]
 800cec0:	2b08      	cmp	r3, #8
 800cec2:	d828      	bhi.n	800cf16 <UART_SetConfig+0x462>
 800cec4:	a201      	add	r2, pc, #4	@ (adr r2, 800cecc <UART_SetConfig+0x418>)
 800cec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceca:	bf00      	nop
 800cecc:	0800cef1 	.word	0x0800cef1
 800ced0:	0800cef9 	.word	0x0800cef9
 800ced4:	0800cf01 	.word	0x0800cf01
 800ced8:	0800cf17 	.word	0x0800cf17
 800cedc:	0800cf07 	.word	0x0800cf07
 800cee0:	0800cf17 	.word	0x0800cf17
 800cee4:	0800cf17 	.word	0x0800cf17
 800cee8:	0800cf17 	.word	0x0800cf17
 800ceec:	0800cf0f 	.word	0x0800cf0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cef0:	f7fc f932 	bl	8009158 <HAL_RCC_GetPCLK1Freq>
 800cef4:	61b8      	str	r0, [r7, #24]
        break;
 800cef6:	e013      	b.n	800cf20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cef8:	f7fc f942 	bl	8009180 <HAL_RCC_GetPCLK2Freq>
 800cefc:	61b8      	str	r0, [r7, #24]
        break;
 800cefe:	e00f      	b.n	800cf20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cf00:	4b1d      	ldr	r3, [pc, #116]	@ (800cf78 <UART_SetConfig+0x4c4>)
 800cf02:	61bb      	str	r3, [r7, #24]
        break;
 800cf04:	e00c      	b.n	800cf20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cf06:	f7fc f815 	bl	8008f34 <HAL_RCC_GetSysClockFreq>
 800cf0a:	61b8      	str	r0, [r7, #24]
        break;
 800cf0c:	e008      	b.n	800cf20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cf12:	61bb      	str	r3, [r7, #24]
        break;
 800cf14:	e004      	b.n	800cf20 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800cf16:	2300      	movs	r3, #0
 800cf18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	77bb      	strb	r3, [r7, #30]
        break;
 800cf1e:	bf00      	nop
    }

    if (pclk != 0U)
 800cf20:	69bb      	ldr	r3, [r7, #24]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d018      	beq.n	800cf58 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	685b      	ldr	r3, [r3, #4]
 800cf2a:	085a      	lsrs	r2, r3, #1
 800cf2c:	69bb      	ldr	r3, [r7, #24]
 800cf2e:	441a      	add	r2, r3
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	685b      	ldr	r3, [r3, #4]
 800cf34:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cf3a:	693b      	ldr	r3, [r7, #16]
 800cf3c:	2b0f      	cmp	r3, #15
 800cf3e:	d909      	bls.n	800cf54 <UART_SetConfig+0x4a0>
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cf46:	d205      	bcs.n	800cf54 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cf48:	693b      	ldr	r3, [r7, #16]
 800cf4a:	b29a      	uxth	r2, r3
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	60da      	str	r2, [r3, #12]
 800cf52:	e001      	b.n	800cf58 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800cf54:	2301      	movs	r3, #1
 800cf56:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2200      	movs	r2, #0
 800cf62:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800cf64:	7fbb      	ldrb	r3, [r7, #30]
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3720      	adds	r7, #32
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}
 800cf6e:	bf00      	nop
 800cf70:	40007c00 	.word	0x40007c00
 800cf74:	40023800 	.word	0x40023800
 800cf78:	00f42400 	.word	0x00f42400

0800cf7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b083      	sub	sp, #12
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf88:	f003 0308 	and.w	r3, r3, #8
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d00a      	beq.n	800cfa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	685b      	ldr	r3, [r3, #4]
 800cf96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	430a      	orrs	r2, r1
 800cfa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfaa:	f003 0301 	and.w	r3, r3, #1
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d00a      	beq.n	800cfc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	685b      	ldr	r3, [r3, #4]
 800cfb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	430a      	orrs	r2, r1
 800cfc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfcc:	f003 0302 	and.w	r3, r3, #2
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d00a      	beq.n	800cfea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	685b      	ldr	r3, [r3, #4]
 800cfda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	430a      	orrs	r2, r1
 800cfe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfee:	f003 0304 	and.w	r3, r3, #4
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d00a      	beq.n	800d00c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	430a      	orrs	r2, r1
 800d00a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d010:	f003 0310 	and.w	r3, r3, #16
 800d014:	2b00      	cmp	r3, #0
 800d016:	d00a      	beq.n	800d02e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	689b      	ldr	r3, [r3, #8]
 800d01e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	430a      	orrs	r2, r1
 800d02c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d032:	f003 0320 	and.w	r3, r3, #32
 800d036:	2b00      	cmp	r3, #0
 800d038:	d00a      	beq.n	800d050 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	689b      	ldr	r3, [r3, #8]
 800d040:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	430a      	orrs	r2, r1
 800d04e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d01a      	beq.n	800d092 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	685b      	ldr	r3, [r3, #4]
 800d062:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	430a      	orrs	r2, r1
 800d070:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d076:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d07a:	d10a      	bne.n	800d092 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	685b      	ldr	r3, [r3, #4]
 800d082:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	430a      	orrs	r2, r1
 800d090:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d00a      	beq.n	800d0b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	685b      	ldr	r3, [r3, #4]
 800d0a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	430a      	orrs	r2, r1
 800d0b2:	605a      	str	r2, [r3, #4]
  }
}
 800d0b4:	bf00      	nop
 800d0b6:	370c      	adds	r7, #12
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr

0800d0c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b08c      	sub	sp, #48	@ 0x30
 800d0c4:	af02      	add	r7, sp, #8
 800d0c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d0d0:	f7f9 fe9e 	bl	8006e10 <HAL_GetTick>
 800d0d4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	f003 0308 	and.w	r3, r3, #8
 800d0e0:	2b08      	cmp	r3, #8
 800d0e2:	d12e      	bne.n	800d142 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d0e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d0e8:	9300      	str	r3, [sp, #0]
 800d0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f000 f83b 	bl	800d16e <UART_WaitOnFlagUntilTimeout>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d021      	beq.n	800d142 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	e853 3f00 	ldrex	r3, [r3]
 800d10a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d112:	623b      	str	r3, [r7, #32]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	461a      	mov	r2, r3
 800d11a:	6a3b      	ldr	r3, [r7, #32]
 800d11c:	61fb      	str	r3, [r7, #28]
 800d11e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d120:	69b9      	ldr	r1, [r7, #24]
 800d122:	69fa      	ldr	r2, [r7, #28]
 800d124:	e841 2300 	strex	r3, r2, [r1]
 800d128:	617b      	str	r3, [r7, #20]
   return(result);
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d1e6      	bne.n	800d0fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2220      	movs	r2, #32
 800d134:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2200      	movs	r2, #0
 800d13a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d13e:	2303      	movs	r3, #3
 800d140:	e011      	b.n	800d166 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2220      	movs	r2, #32
 800d146:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2220      	movs	r2, #32
 800d14c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2200      	movs	r2, #0
 800d154:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2200      	movs	r2, #0
 800d15a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2200      	movs	r2, #0
 800d160:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800d164:	2300      	movs	r3, #0
}
 800d166:	4618      	mov	r0, r3
 800d168:	3728      	adds	r7, #40	@ 0x28
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}

0800d16e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d16e:	b580      	push	{r7, lr}
 800d170:	b084      	sub	sp, #16
 800d172:	af00      	add	r7, sp, #0
 800d174:	60f8      	str	r0, [r7, #12]
 800d176:	60b9      	str	r1, [r7, #8]
 800d178:	603b      	str	r3, [r7, #0]
 800d17a:	4613      	mov	r3, r2
 800d17c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d17e:	e04f      	b.n	800d220 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d180:	69bb      	ldr	r3, [r7, #24]
 800d182:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d186:	d04b      	beq.n	800d220 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d188:	f7f9 fe42 	bl	8006e10 <HAL_GetTick>
 800d18c:	4602      	mov	r2, r0
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	1ad3      	subs	r3, r2, r3
 800d192:	69ba      	ldr	r2, [r7, #24]
 800d194:	429a      	cmp	r2, r3
 800d196:	d302      	bcc.n	800d19e <UART_WaitOnFlagUntilTimeout+0x30>
 800d198:	69bb      	ldr	r3, [r7, #24]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d101      	bne.n	800d1a2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d19e:	2303      	movs	r3, #3
 800d1a0:	e04e      	b.n	800d240 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f003 0304 	and.w	r3, r3, #4
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d037      	beq.n	800d220 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	2b80      	cmp	r3, #128	@ 0x80
 800d1b4:	d034      	beq.n	800d220 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	2b40      	cmp	r3, #64	@ 0x40
 800d1ba:	d031      	beq.n	800d220 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	69db      	ldr	r3, [r3, #28]
 800d1c2:	f003 0308 	and.w	r3, r3, #8
 800d1c6:	2b08      	cmp	r3, #8
 800d1c8:	d110      	bne.n	800d1ec <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	2208      	movs	r2, #8
 800d1d0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d1d2:	68f8      	ldr	r0, [r7, #12]
 800d1d4:	f000 f8fe 	bl	800d3d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	2208      	movs	r2, #8
 800d1dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	e029      	b.n	800d240 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	69db      	ldr	r3, [r3, #28]
 800d1f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d1f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d1fa:	d111      	bne.n	800d220 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d204:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d206:	68f8      	ldr	r0, [r7, #12]
 800d208:	f000 f8e4 	bl	800d3d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2220      	movs	r2, #32
 800d210:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2200      	movs	r2, #0
 800d218:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800d21c:	2303      	movs	r3, #3
 800d21e:	e00f      	b.n	800d240 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	69da      	ldr	r2, [r3, #28]
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	4013      	ands	r3, r2
 800d22a:	68ba      	ldr	r2, [r7, #8]
 800d22c:	429a      	cmp	r2, r3
 800d22e:	bf0c      	ite	eq
 800d230:	2301      	moveq	r3, #1
 800d232:	2300      	movne	r3, #0
 800d234:	b2db      	uxtb	r3, r3
 800d236:	461a      	mov	r2, r3
 800d238:	79fb      	ldrb	r3, [r7, #7]
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d0a0      	beq.n	800d180 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d23e:	2300      	movs	r3, #0
}
 800d240:	4618      	mov	r0, r3
 800d242:	3710      	adds	r7, #16
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b096      	sub	sp, #88	@ 0x58
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	60f8      	str	r0, [r7, #12]
 800d250:	60b9      	str	r1, [r7, #8]
 800d252:	4613      	mov	r3, r2
 800d254:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	68ba      	ldr	r2, [r7, #8]
 800d25a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	88fa      	ldrh	r2, [r7, #6]
 800d260:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	2200      	movs	r2, #0
 800d268:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	2222      	movs	r2, #34	@ 0x22
 800d270:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d028      	beq.n	800d2ce <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d280:	4a3e      	ldr	r2, [pc, #248]	@ (800d37c <UART_Start_Receive_DMA+0x134>)
 800d282:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d288:	4a3d      	ldr	r2, [pc, #244]	@ (800d380 <UART_Start_Receive_DMA+0x138>)
 800d28a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d290:	4a3c      	ldr	r2, [pc, #240]	@ (800d384 <UART_Start_Receive_DMA+0x13c>)
 800d292:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d298:	2200      	movs	r2, #0
 800d29a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	3324      	adds	r3, #36	@ 0x24
 800d2a6:	4619      	mov	r1, r3
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	88fb      	ldrh	r3, [r7, #6]
 800d2b0:	f7f9 ff6e 	bl	8007190 <HAL_DMA_Start_IT>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d009      	beq.n	800d2ce <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	2210      	movs	r2, #16
 800d2be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	2220      	movs	r2, #32
 800d2c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	e051      	b.n	800d372 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	691b      	ldr	r3, [r3, #16]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d018      	beq.n	800d308 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2de:	e853 3f00 	ldrex	r3, [r3]
 800d2e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d2e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d2ea:	657b      	str	r3, [r7, #84]	@ 0x54
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	461a      	mov	r2, r3
 800d2f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d2f6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2f8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d2fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d2fc:	e841 2300 	strex	r3, r2, [r1]
 800d300:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d302:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d304:	2b00      	cmp	r3, #0
 800d306:	d1e6      	bne.n	800d2d6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	3308      	adds	r3, #8
 800d30e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d312:	e853 3f00 	ldrex	r3, [r3]
 800d316:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d31a:	f043 0301 	orr.w	r3, r3, #1
 800d31e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	3308      	adds	r3, #8
 800d326:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d328:	637a      	str	r2, [r7, #52]	@ 0x34
 800d32a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d32c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d32e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d330:	e841 2300 	strex	r3, r2, [r1]
 800d334:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d1e5      	bne.n	800d308 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	3308      	adds	r3, #8
 800d342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	e853 3f00 	ldrex	r3, [r3]
 800d34a:	613b      	str	r3, [r7, #16]
   return(result);
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d352:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	3308      	adds	r3, #8
 800d35a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d35c:	623a      	str	r2, [r7, #32]
 800d35e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d360:	69f9      	ldr	r1, [r7, #28]
 800d362:	6a3a      	ldr	r2, [r7, #32]
 800d364:	e841 2300 	strex	r3, r2, [r1]
 800d368:	61bb      	str	r3, [r7, #24]
   return(result);
 800d36a:	69bb      	ldr	r3, [r7, #24]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d1e5      	bne.n	800d33c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800d370:	2300      	movs	r3, #0
}
 800d372:	4618      	mov	r0, r3
 800d374:	3758      	adds	r7, #88	@ 0x58
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}
 800d37a:	bf00      	nop
 800d37c:	0800d54f 	.word	0x0800d54f
 800d380:	0800d677 	.word	0x0800d677
 800d384:	0800d6b5 	.word	0x0800d6b5

0800d388 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d388:	b480      	push	{r7}
 800d38a:	b089      	sub	sp, #36	@ 0x24
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	e853 3f00 	ldrex	r3, [r3]
 800d39c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d3a4:	61fb      	str	r3, [r7, #28]
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	461a      	mov	r2, r3
 800d3ac:	69fb      	ldr	r3, [r7, #28]
 800d3ae:	61bb      	str	r3, [r7, #24]
 800d3b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3b2:	6979      	ldr	r1, [r7, #20]
 800d3b4:	69ba      	ldr	r2, [r7, #24]
 800d3b6:	e841 2300 	strex	r3, r2, [r1]
 800d3ba:	613b      	str	r3, [r7, #16]
   return(result);
 800d3bc:	693b      	ldr	r3, [r7, #16]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d1e6      	bne.n	800d390 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2220      	movs	r2, #32
 800d3c6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800d3c8:	bf00      	nop
 800d3ca:	3724      	adds	r7, #36	@ 0x24
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d2:	4770      	bx	lr

0800d3d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b095      	sub	sp, #84	@ 0x54
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3e4:	e853 3f00 	ldrex	r3, [r3]
 800d3e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d3f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	461a      	mov	r2, r3
 800d3f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d3fa:	643b      	str	r3, [r7, #64]	@ 0x40
 800d3fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d400:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d402:	e841 2300 	strex	r3, r2, [r1]
 800d406:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d1e6      	bne.n	800d3dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	3308      	adds	r3, #8
 800d414:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d416:	6a3b      	ldr	r3, [r7, #32]
 800d418:	e853 3f00 	ldrex	r3, [r3]
 800d41c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d41e:	69fb      	ldr	r3, [r7, #28]
 800d420:	f023 0301 	bic.w	r3, r3, #1
 800d424:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	3308      	adds	r3, #8
 800d42c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d42e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d430:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d432:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d434:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d436:	e841 2300 	strex	r3, r2, [r1]
 800d43a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d1e5      	bne.n	800d40e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d446:	2b01      	cmp	r3, #1
 800d448:	d118      	bne.n	800d47c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	e853 3f00 	ldrex	r3, [r3]
 800d456:	60bb      	str	r3, [r7, #8]
   return(result);
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	f023 0310 	bic.w	r3, r3, #16
 800d45e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	461a      	mov	r2, r3
 800d466:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d468:	61bb      	str	r3, [r7, #24]
 800d46a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d46c:	6979      	ldr	r1, [r7, #20]
 800d46e:	69ba      	ldr	r2, [r7, #24]
 800d470:	e841 2300 	strex	r3, r2, [r1]
 800d474:	613b      	str	r3, [r7, #16]
   return(result);
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d1e6      	bne.n	800d44a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2220      	movs	r2, #32
 800d480:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2200      	movs	r2, #0
 800d488:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2200      	movs	r2, #0
 800d48e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800d490:	bf00      	nop
 800d492:	3754      	adds	r7, #84	@ 0x54
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr

0800d49c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b090      	sub	sp, #64	@ 0x40
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4a8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	69db      	ldr	r3, [r3, #28]
 800d4ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d4b2:	d037      	beq.n	800d524 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d4b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d4bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	3308      	adds	r3, #8
 800d4c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4c6:	e853 3f00 	ldrex	r3, [r3]
 800d4ca:	623b      	str	r3, [r7, #32]
   return(result);
 800d4cc:	6a3b      	ldr	r3, [r7, #32]
 800d4ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d4d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d4d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	3308      	adds	r3, #8
 800d4da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d4dc:	633a      	str	r2, [r7, #48]	@ 0x30
 800d4de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d4e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4e4:	e841 2300 	strex	r3, r2, [r1]
 800d4e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d4ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d1e5      	bne.n	800d4bc <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d4f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4f6:	693b      	ldr	r3, [r7, #16]
 800d4f8:	e853 3f00 	ldrex	r3, [r3]
 800d4fc:	60fb      	str	r3, [r7, #12]
   return(result);
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d504:	637b      	str	r3, [r7, #52]	@ 0x34
 800d506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	461a      	mov	r2, r3
 800d50c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d50e:	61fb      	str	r3, [r7, #28]
 800d510:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d512:	69b9      	ldr	r1, [r7, #24]
 800d514:	69fa      	ldr	r2, [r7, #28]
 800d516:	e841 2300 	strex	r3, r2, [r1]
 800d51a:	617b      	str	r3, [r7, #20]
   return(result);
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d1e6      	bne.n	800d4f0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d522:	e002      	b.n	800d52a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d524:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d526:	f7ff fa91 	bl	800ca4c <HAL_UART_TxCpltCallback>
}
 800d52a:	bf00      	nop
 800d52c:	3740      	adds	r7, #64	@ 0x40
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}

0800d532 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d532:	b580      	push	{r7, lr}
 800d534:	b084      	sub	sp, #16
 800d536:	af00      	add	r7, sp, #0
 800d538:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d53e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d540:	68f8      	ldr	r0, [r7, #12]
 800d542:	f7ff fa8d 	bl	800ca60 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d546:	bf00      	nop
 800d548:	3710      	adds	r7, #16
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}

0800d54e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d54e:	b580      	push	{r7, lr}
 800d550:	b09c      	sub	sp, #112	@ 0x70
 800d552:	af00      	add	r7, sp, #0
 800d554:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d55a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	69db      	ldr	r3, [r3, #28]
 800d560:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d564:	d071      	beq.n	800d64a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d566:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d568:	2200      	movs	r2, #0
 800d56a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d56e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d574:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d576:	e853 3f00 	ldrex	r3, [r3]
 800d57a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d57c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d57e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d582:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d584:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	461a      	mov	r2, r3
 800d58a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d58c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d58e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d590:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d592:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d594:	e841 2300 	strex	r3, r2, [r1]
 800d598:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d59a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d1e6      	bne.n	800d56e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	3308      	adds	r3, #8
 800d5a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5aa:	e853 3f00 	ldrex	r3, [r3]
 800d5ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d5b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5b2:	f023 0301 	bic.w	r3, r3, #1
 800d5b6:	667b      	str	r3, [r7, #100]	@ 0x64
 800d5b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	3308      	adds	r3, #8
 800d5be:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d5c0:	647a      	str	r2, [r7, #68]	@ 0x44
 800d5c2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d5c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d5c8:	e841 2300 	strex	r3, r2, [r1]
 800d5cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d5ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d1e5      	bne.n	800d5a0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d5d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	3308      	adds	r3, #8
 800d5da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5de:	e853 3f00 	ldrex	r3, [r3]
 800d5e2:	623b      	str	r3, [r7, #32]
   return(result);
 800d5e4:	6a3b      	ldr	r3, [r7, #32]
 800d5e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d5ea:	663b      	str	r3, [r7, #96]	@ 0x60
 800d5ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	3308      	adds	r3, #8
 800d5f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d5f4:	633a      	str	r2, [r7, #48]	@ 0x30
 800d5f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d5fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5fc:	e841 2300 	strex	r3, r2, [r1]
 800d600:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d604:	2b00      	cmp	r3, #0
 800d606:	d1e5      	bne.n	800d5d4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d608:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d60a:	2220      	movs	r2, #32
 800d60c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d610:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d612:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d614:	2b01      	cmp	r3, #1
 800d616:	d118      	bne.n	800d64a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d618:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	e853 3f00 	ldrex	r3, [r3]
 800d624:	60fb      	str	r3, [r7, #12]
   return(result);
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	f023 0310 	bic.w	r3, r3, #16
 800d62c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d62e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	461a      	mov	r2, r3
 800d634:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d636:	61fb      	str	r3, [r7, #28]
 800d638:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d63a:	69b9      	ldr	r1, [r7, #24]
 800d63c:	69fa      	ldr	r2, [r7, #28]
 800d63e:	e841 2300 	strex	r3, r2, [r1]
 800d642:	617b      	str	r3, [r7, #20]
   return(result);
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d1e6      	bne.n	800d618 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d64a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d64c:	2200      	movs	r2, #0
 800d64e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d650:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d652:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d654:	2b01      	cmp	r3, #1
 800d656:	d107      	bne.n	800d668 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d658:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d65a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d65e:	4619      	mov	r1, r3
 800d660:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d662:	f7ff fa1b 	bl	800ca9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d666:	e002      	b.n	800d66e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800d668:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d66a:	f7f6 f893 	bl	8003794 <HAL_UART_RxCpltCallback>
}
 800d66e:	bf00      	nop
 800d670:	3770      	adds	r7, #112	@ 0x70
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}

0800d676 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d676:	b580      	push	{r7, lr}
 800d678:	b084      	sub	sp, #16
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d682:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	2201      	movs	r2, #1
 800d688:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d68e:	2b01      	cmp	r3, #1
 800d690:	d109      	bne.n	800d6a6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d698:	085b      	lsrs	r3, r3, #1
 800d69a:	b29b      	uxth	r3, r3
 800d69c:	4619      	mov	r1, r3
 800d69e:	68f8      	ldr	r0, [r7, #12]
 800d6a0:	f7ff f9fc 	bl	800ca9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d6a4:	e002      	b.n	800d6ac <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800d6a6:	68f8      	ldr	r0, [r7, #12]
 800d6a8:	f7ff f9e4 	bl	800ca74 <HAL_UART_RxHalfCpltCallback>
}
 800d6ac:	bf00      	nop
 800d6ae:	3710      	adds	r7, #16
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}

0800d6b4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b086      	sub	sp, #24
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6c0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d6c6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6ce:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	689b      	ldr	r3, [r3, #8]
 800d6d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d6da:	2b80      	cmp	r3, #128	@ 0x80
 800d6dc:	d109      	bne.n	800d6f2 <UART_DMAError+0x3e>
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	2b21      	cmp	r3, #33	@ 0x21
 800d6e2:	d106      	bne.n	800d6f2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800d6ec:	6978      	ldr	r0, [r7, #20]
 800d6ee:	f7ff fe4b 	bl	800d388 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	689b      	ldr	r3, [r3, #8]
 800d6f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6fc:	2b40      	cmp	r3, #64	@ 0x40
 800d6fe:	d109      	bne.n	800d714 <UART_DMAError+0x60>
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	2b22      	cmp	r3, #34	@ 0x22
 800d704:	d106      	bne.n	800d714 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	2200      	movs	r2, #0
 800d70a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800d70e:	6978      	ldr	r0, [r7, #20]
 800d710:	f7ff fe60 	bl	800d3d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d71a:	f043 0210 	orr.w	r2, r3, #16
 800d71e:	697b      	ldr	r3, [r7, #20]
 800d720:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d724:	6978      	ldr	r0, [r7, #20]
 800d726:	f7ff f9af 	bl	800ca88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d72a:	bf00      	nop
 800d72c:	3718      	adds	r7, #24
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}

0800d732 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d732:	b580      	push	{r7, lr}
 800d734:	b084      	sub	sp, #16
 800d736:	af00      	add	r7, sp, #0
 800d738:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d73e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	2200      	movs	r2, #0
 800d744:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	2200      	movs	r2, #0
 800d74c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d750:	68f8      	ldr	r0, [r7, #12]
 800d752:	f7ff f999 	bl	800ca88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d756:	bf00      	nop
 800d758:	3710      	adds	r7, #16
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}

0800d75e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d75e:	b580      	push	{r7, lr}
 800d760:	b088      	sub	sp, #32
 800d762:	af00      	add	r7, sp, #0
 800d764:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	e853 3f00 	ldrex	r3, [r3]
 800d772:	60bb      	str	r3, [r7, #8]
   return(result);
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d77a:	61fb      	str	r3, [r7, #28]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	461a      	mov	r2, r3
 800d782:	69fb      	ldr	r3, [r7, #28]
 800d784:	61bb      	str	r3, [r7, #24]
 800d786:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d788:	6979      	ldr	r1, [r7, #20]
 800d78a:	69ba      	ldr	r2, [r7, #24]
 800d78c:	e841 2300 	strex	r3, r2, [r1]
 800d790:	613b      	str	r3, [r7, #16]
   return(result);
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d1e6      	bne.n	800d766 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2220      	movs	r2, #32
 800d79c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f7ff f951 	bl	800ca4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d7aa:	bf00      	nop
 800d7ac:	3720      	adds	r7, #32
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
	...

0800d7b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d7b4:	b084      	sub	sp, #16
 800d7b6:	b580      	push	{r7, lr}
 800d7b8:	b084      	sub	sp, #16
 800d7ba:	af00      	add	r7, sp, #0
 800d7bc:	6078      	str	r0, [r7, #4]
 800d7be:	f107 001c 	add.w	r0, r7, #28
 800d7c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d7c6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d7ca:	2b01      	cmp	r3, #1
 800d7cc:	d121      	bne.n	800d812 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	68da      	ldr	r2, [r3, #12]
 800d7de:	4b21      	ldr	r3, [pc, #132]	@ (800d864 <USB_CoreInit+0xb0>)
 800d7e0:	4013      	ands	r3, r2
 800d7e2:	687a      	ldr	r2, [r7, #4]
 800d7e4:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	68db      	ldr	r3, [r3, #12]
 800d7ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d7f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	d105      	bne.n	800d806 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	68db      	ldr	r3, [r3, #12]
 800d7fe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f000 fa92 	bl	800dd30 <USB_CoreReset>
 800d80c:	4603      	mov	r3, r0
 800d80e:	73fb      	strb	r3, [r7, #15]
 800d810:	e010      	b.n	800d834 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	68db      	ldr	r3, [r3, #12]
 800d816:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f000 fa86 	bl	800dd30 <USB_CoreReset>
 800d824:	4603      	mov	r3, r0
 800d826:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d82c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800d834:	7fbb      	ldrb	r3, [r7, #30]
 800d836:	2b01      	cmp	r3, #1
 800d838:	d10b      	bne.n	800d852 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	689b      	ldr	r3, [r3, #8]
 800d83e:	f043 0206 	orr.w	r2, r3, #6
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	689b      	ldr	r3, [r3, #8]
 800d84a:	f043 0220 	orr.w	r2, r3, #32
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d852:	7bfb      	ldrb	r3, [r7, #15]
}
 800d854:	4618      	mov	r0, r3
 800d856:	3710      	adds	r7, #16
 800d858:	46bd      	mov	sp, r7
 800d85a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d85e:	b004      	add	sp, #16
 800d860:	4770      	bx	lr
 800d862:	bf00      	nop
 800d864:	ffbdffbf 	.word	0xffbdffbf

0800d868 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d868:	b480      	push	{r7}
 800d86a:	b083      	sub	sp, #12
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	689b      	ldr	r3, [r3, #8]
 800d874:	f023 0201 	bic.w	r2, r3, #1
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d87c:	2300      	movs	r3, #0
}
 800d87e:	4618      	mov	r0, r3
 800d880:	370c      	adds	r7, #12
 800d882:	46bd      	mov	sp, r7
 800d884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d888:	4770      	bx	lr

0800d88a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d88a:	b580      	push	{r7, lr}
 800d88c:	b084      	sub	sp, #16
 800d88e:	af00      	add	r7, sp, #0
 800d890:	6078      	str	r0, [r7, #4]
 800d892:	460b      	mov	r3, r1
 800d894:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d896:	2300      	movs	r3, #0
 800d898:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	68db      	ldr	r3, [r3, #12]
 800d89e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d8a6:	78fb      	ldrb	r3, [r7, #3]
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	d115      	bne.n	800d8d8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	68db      	ldr	r3, [r3, #12]
 800d8b0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d8b8:	200a      	movs	r0, #10
 800d8ba:	f7f9 fab5 	bl	8006e28 <HAL_Delay>
      ms += 10U;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	330a      	adds	r3, #10
 800d8c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f000 fa25 	bl	800dd14 <USB_GetMode>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2b01      	cmp	r3, #1
 800d8ce:	d01e      	beq.n	800d90e <USB_SetCurrentMode+0x84>
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	2bc7      	cmp	r3, #199	@ 0xc7
 800d8d4:	d9f0      	bls.n	800d8b8 <USB_SetCurrentMode+0x2e>
 800d8d6:	e01a      	b.n	800d90e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d8d8:	78fb      	ldrb	r3, [r7, #3]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d115      	bne.n	800d90a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	68db      	ldr	r3, [r3, #12]
 800d8e2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d8ea:	200a      	movs	r0, #10
 800d8ec:	f7f9 fa9c 	bl	8006e28 <HAL_Delay>
      ms += 10U;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	330a      	adds	r3, #10
 800d8f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f000 fa0c 	bl	800dd14 <USB_GetMode>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d005      	beq.n	800d90e <USB_SetCurrentMode+0x84>
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	2bc7      	cmp	r3, #199	@ 0xc7
 800d906:	d9f0      	bls.n	800d8ea <USB_SetCurrentMode+0x60>
 800d908:	e001      	b.n	800d90e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d90a:	2301      	movs	r3, #1
 800d90c:	e005      	b.n	800d91a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	2bc8      	cmp	r3, #200	@ 0xc8
 800d912:	d101      	bne.n	800d918 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d914:	2301      	movs	r3, #1
 800d916:	e000      	b.n	800d91a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d918:	2300      	movs	r3, #0
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	3710      	adds	r7, #16
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}
	...

0800d924 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d924:	b084      	sub	sp, #16
 800d926:	b580      	push	{r7, lr}
 800d928:	b086      	sub	sp, #24
 800d92a:	af00      	add	r7, sp, #0
 800d92c:	6078      	str	r0, [r7, #4]
 800d92e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d932:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d936:	2300      	movs	r3, #0
 800d938:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d93e:	2300      	movs	r3, #0
 800d940:	613b      	str	r3, [r7, #16]
 800d942:	e009      	b.n	800d958 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d944:	687a      	ldr	r2, [r7, #4]
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	3340      	adds	r3, #64	@ 0x40
 800d94a:	009b      	lsls	r3, r3, #2
 800d94c:	4413      	add	r3, r2
 800d94e:	2200      	movs	r2, #0
 800d950:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	3301      	adds	r3, #1
 800d956:	613b      	str	r3, [r7, #16]
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	2b0e      	cmp	r3, #14
 800d95c:	d9f2      	bls.n	800d944 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d95e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d962:	2b00      	cmp	r3, #0
 800d964:	d11c      	bne.n	800d9a0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d96c:	685b      	ldr	r3, [r3, #4]
 800d96e:	68fa      	ldr	r2, [r7, #12]
 800d970:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d974:	f043 0302 	orr.w	r3, r3, #2
 800d978:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d97e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	601a      	str	r2, [r3, #0]
 800d99e:	e005      	b.n	800d9ac <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9a4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d9b2:	461a      	mov	r2, r3
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d9b8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800d9bc:	2b01      	cmp	r3, #1
 800d9be:	d10d      	bne.n	800d9dc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d9c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d104      	bne.n	800d9d2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d9c8:	2100      	movs	r1, #0
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f000 f968 	bl	800dca0 <USB_SetDevSpeed>
 800d9d0:	e008      	b.n	800d9e4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d9d2:	2101      	movs	r1, #1
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f000 f963 	bl	800dca0 <USB_SetDevSpeed>
 800d9da:	e003      	b.n	800d9e4 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d9dc:	2103      	movs	r1, #3
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f000 f95e 	bl	800dca0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d9e4:	2110      	movs	r1, #16
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f000 f8fa 	bl	800dbe0 <USB_FlushTxFifo>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d001      	beq.n	800d9f6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f000 f924 	bl	800dc44 <USB_FlushRxFifo>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d001      	beq.n	800da06 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800da02:	2301      	movs	r3, #1
 800da04:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da0c:	461a      	mov	r2, r3
 800da0e:	2300      	movs	r3, #0
 800da10:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da18:	461a      	mov	r2, r3
 800da1a:	2300      	movs	r3, #0
 800da1c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da24:	461a      	mov	r2, r3
 800da26:	2300      	movs	r3, #0
 800da28:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800da2a:	2300      	movs	r3, #0
 800da2c:	613b      	str	r3, [r7, #16]
 800da2e:	e043      	b.n	800dab8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800da30:	693b      	ldr	r3, [r7, #16]
 800da32:	015a      	lsls	r2, r3, #5
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	4413      	add	r3, r2
 800da38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800da42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800da46:	d118      	bne.n	800da7a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d10a      	bne.n	800da64 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	015a      	lsls	r2, r3, #5
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	4413      	add	r3, r2
 800da56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da5a:	461a      	mov	r2, r3
 800da5c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800da60:	6013      	str	r3, [r2, #0]
 800da62:	e013      	b.n	800da8c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	015a      	lsls	r2, r3, #5
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	4413      	add	r3, r2
 800da6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da70:	461a      	mov	r2, r3
 800da72:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800da76:	6013      	str	r3, [r2, #0]
 800da78:	e008      	b.n	800da8c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	015a      	lsls	r2, r3, #5
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	4413      	add	r3, r2
 800da82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da86:	461a      	mov	r2, r3
 800da88:	2300      	movs	r3, #0
 800da8a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800da8c:	693b      	ldr	r3, [r7, #16]
 800da8e:	015a      	lsls	r2, r3, #5
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	4413      	add	r3, r2
 800da94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da98:	461a      	mov	r2, r3
 800da9a:	2300      	movs	r3, #0
 800da9c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800da9e:	693b      	ldr	r3, [r7, #16]
 800daa0:	015a      	lsls	r2, r3, #5
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	4413      	add	r3, r2
 800daa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800daaa:	461a      	mov	r2, r3
 800daac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800dab0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dab2:	693b      	ldr	r3, [r7, #16]
 800dab4:	3301      	adds	r3, #1
 800dab6:	613b      	str	r3, [r7, #16]
 800dab8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dabc:	461a      	mov	r2, r3
 800dabe:	693b      	ldr	r3, [r7, #16]
 800dac0:	4293      	cmp	r3, r2
 800dac2:	d3b5      	bcc.n	800da30 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dac4:	2300      	movs	r3, #0
 800dac6:	613b      	str	r3, [r7, #16]
 800dac8:	e043      	b.n	800db52 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	015a      	lsls	r2, r3, #5
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	4413      	add	r3, r2
 800dad2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dadc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dae0:	d118      	bne.n	800db14 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d10a      	bne.n	800dafe <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800dae8:	693b      	ldr	r3, [r7, #16]
 800daea:	015a      	lsls	r2, r3, #5
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	4413      	add	r3, r2
 800daf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800daf4:	461a      	mov	r2, r3
 800daf6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dafa:	6013      	str	r3, [r2, #0]
 800dafc:	e013      	b.n	800db26 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	015a      	lsls	r2, r3, #5
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	4413      	add	r3, r2
 800db06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db0a:	461a      	mov	r2, r3
 800db0c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800db10:	6013      	str	r3, [r2, #0]
 800db12:	e008      	b.n	800db26 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	015a      	lsls	r2, r3, #5
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	4413      	add	r3, r2
 800db1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db20:	461a      	mov	r2, r3
 800db22:	2300      	movs	r3, #0
 800db24:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800db26:	693b      	ldr	r3, [r7, #16]
 800db28:	015a      	lsls	r2, r3, #5
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	4413      	add	r3, r2
 800db2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db32:	461a      	mov	r2, r3
 800db34:	2300      	movs	r3, #0
 800db36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800db38:	693b      	ldr	r3, [r7, #16]
 800db3a:	015a      	lsls	r2, r3, #5
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	4413      	add	r3, r2
 800db40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db44:	461a      	mov	r2, r3
 800db46:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800db4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800db4c:	693b      	ldr	r3, [r7, #16]
 800db4e:	3301      	adds	r3, #1
 800db50:	613b      	str	r3, [r7, #16]
 800db52:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800db56:	461a      	mov	r2, r3
 800db58:	693b      	ldr	r3, [r7, #16]
 800db5a:	4293      	cmp	r3, r2
 800db5c:	d3b5      	bcc.n	800daca <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db64:	691b      	ldr	r3, [r3, #16]
 800db66:	68fa      	ldr	r2, [r7, #12]
 800db68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800db6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800db70:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2200      	movs	r2, #0
 800db76:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800db7e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800db80:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800db84:	2b00      	cmp	r3, #0
 800db86:	d105      	bne.n	800db94 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	699b      	ldr	r3, [r3, #24]
 800db8c:	f043 0210 	orr.w	r2, r3, #16
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	699a      	ldr	r2, [r3, #24]
 800db98:	4b0f      	ldr	r3, [pc, #60]	@ (800dbd8 <USB_DevInit+0x2b4>)
 800db9a:	4313      	orrs	r3, r2
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800dba0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d005      	beq.n	800dbb4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	699b      	ldr	r3, [r3, #24]
 800dbac:	f043 0208 	orr.w	r2, r3, #8
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800dbb4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800dbb8:	2b01      	cmp	r3, #1
 800dbba:	d105      	bne.n	800dbc8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	699a      	ldr	r2, [r3, #24]
 800dbc0:	4b06      	ldr	r3, [pc, #24]	@ (800dbdc <USB_DevInit+0x2b8>)
 800dbc2:	4313      	orrs	r3, r2
 800dbc4:	687a      	ldr	r2, [r7, #4]
 800dbc6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800dbc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3718      	adds	r7, #24
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dbd4:	b004      	add	sp, #16
 800dbd6:	4770      	bx	lr
 800dbd8:	803c3800 	.word	0x803c3800
 800dbdc:	40000004 	.word	0x40000004

0800dbe0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800dbe0:	b480      	push	{r7}
 800dbe2:	b085      	sub	sp, #20
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
 800dbe8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800dbea:	2300      	movs	r3, #0
 800dbec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	3301      	adds	r3, #1
 800dbf2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dbfa:	d901      	bls.n	800dc00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800dbfc:	2303      	movs	r3, #3
 800dbfe:	e01b      	b.n	800dc38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	691b      	ldr	r3, [r3, #16]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	daf2      	bge.n	800dbee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	019b      	lsls	r3, r3, #6
 800dc10:	f043 0220 	orr.w	r2, r3, #32
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	3301      	adds	r3, #1
 800dc1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dc24:	d901      	bls.n	800dc2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800dc26:	2303      	movs	r3, #3
 800dc28:	e006      	b.n	800dc38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	691b      	ldr	r3, [r3, #16]
 800dc2e:	f003 0320 	and.w	r3, r3, #32
 800dc32:	2b20      	cmp	r3, #32
 800dc34:	d0f0      	beq.n	800dc18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800dc36:	2300      	movs	r3, #0
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3714      	adds	r7, #20
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc42:	4770      	bx	lr

0800dc44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dc44:	b480      	push	{r7}
 800dc46:	b085      	sub	sp, #20
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	3301      	adds	r3, #1
 800dc54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dc5c:	d901      	bls.n	800dc62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800dc5e:	2303      	movs	r3, #3
 800dc60:	e018      	b.n	800dc94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	691b      	ldr	r3, [r3, #16]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	daf2      	bge.n	800dc50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2210      	movs	r2, #16
 800dc72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	3301      	adds	r3, #1
 800dc78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dc80:	d901      	bls.n	800dc86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800dc82:	2303      	movs	r3, #3
 800dc84:	e006      	b.n	800dc94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	691b      	ldr	r3, [r3, #16]
 800dc8a:	f003 0310 	and.w	r3, r3, #16
 800dc8e:	2b10      	cmp	r3, #16
 800dc90:	d0f0      	beq.n	800dc74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800dc92:	2300      	movs	r3, #0
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	3714      	adds	r7, #20
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9e:	4770      	bx	lr

0800dca0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800dca0:	b480      	push	{r7}
 800dca2:	b085      	sub	sp, #20
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	460b      	mov	r3, r1
 800dcaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dcb6:	681a      	ldr	r2, [r3, #0]
 800dcb8:	78fb      	ldrb	r3, [r7, #3]
 800dcba:	68f9      	ldr	r1, [r7, #12]
 800dcbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dcc0:	4313      	orrs	r3, r2
 800dcc2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800dcc4:	2300      	movs	r3, #0
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3714      	adds	r7, #20
 800dcca:	46bd      	mov	sp, r7
 800dccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd0:	4770      	bx	lr

0800dcd2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800dcd2:	b480      	push	{r7}
 800dcd4:	b085      	sub	sp, #20
 800dcd6:	af00      	add	r7, sp, #0
 800dcd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	68fa      	ldr	r2, [r7, #12]
 800dce8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dcec:	f023 0303 	bic.w	r3, r3, #3
 800dcf0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dcf8:	685b      	ldr	r3, [r3, #4]
 800dcfa:	68fa      	ldr	r2, [r7, #12]
 800dcfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dd00:	f043 0302 	orr.w	r3, r3, #2
 800dd04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dd06:	2300      	movs	r3, #0
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3714      	adds	r7, #20
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd12:	4770      	bx	lr

0800dd14 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800dd14:	b480      	push	{r7}
 800dd16:	b083      	sub	sp, #12
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	695b      	ldr	r3, [r3, #20]
 800dd20:	f003 0301 	and.w	r3, r3, #1
}
 800dd24:	4618      	mov	r0, r3
 800dd26:	370c      	adds	r7, #12
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2e:	4770      	bx	lr

0800dd30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800dd30:	b480      	push	{r7}
 800dd32:	b085      	sub	sp, #20
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dd38:	2300      	movs	r3, #0
 800dd3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	3301      	adds	r3, #1
 800dd40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dd48:	d901      	bls.n	800dd4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800dd4a:	2303      	movs	r3, #3
 800dd4c:	e01b      	b.n	800dd86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	691b      	ldr	r3, [r3, #16]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	daf2      	bge.n	800dd3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800dd56:	2300      	movs	r3, #0
 800dd58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	691b      	ldr	r3, [r3, #16]
 800dd5e:	f043 0201 	orr.w	r2, r3, #1
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	3301      	adds	r3, #1
 800dd6a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dd72:	d901      	bls.n	800dd78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800dd74:	2303      	movs	r3, #3
 800dd76:	e006      	b.n	800dd86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	691b      	ldr	r3, [r3, #16]
 800dd7c:	f003 0301 	and.w	r3, r3, #1
 800dd80:	2b01      	cmp	r3, #1
 800dd82:	d0f0      	beq.n	800dd66 <USB_CoreReset+0x36>

  return HAL_OK;
 800dd84:	2300      	movs	r3, #0
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	3714      	adds	r7, #20
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd90:	4770      	bx	lr
	...

0800dd94 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800dd98:	4904      	ldr	r1, [pc, #16]	@ (800ddac <MX_FATFS_Init+0x18>)
 800dd9a:	4805      	ldr	r0, [pc, #20]	@ (800ddb0 <MX_FATFS_Init+0x1c>)
 800dd9c:	f004 f97a 	bl	8012094 <FATFS_LinkDriver>
 800dda0:	4603      	mov	r3, r0
 800dda2:	461a      	mov	r2, r3
 800dda4:	4b03      	ldr	r3, [pc, #12]	@ (800ddb4 <MX_FATFS_Init+0x20>)
 800dda6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800dda8:	bf00      	nop
 800ddaa:	bd80      	pop	{r7, pc}
 800ddac:	20005b80 	.word	0x20005b80
 800ddb0:	20000060 	.word	0x20000060
 800ddb4:	20005b7c 	.word	0x20005b7c

0800ddb8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ddb8:	b480      	push	{r7}
 800ddba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ddbc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	4770      	bx	lr

0800ddc8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b082      	sub	sp, #8
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	4603      	mov	r3, r0
 800ddd0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800ddd2:	79fb      	ldrb	r3, [r7, #7]
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f000 f9d7 	bl	800e188 <USER_SPI_initialize>
 800ddda:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3708      	adds	r7, #8
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b082      	sub	sp, #8
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	4603      	mov	r3, r0
 800ddec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800ddee:	79fb      	ldrb	r3, [r7, #7]
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f000 fabd 	bl	800e370 <USER_SPI_status>
 800ddf6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3708      	adds	r7, #8
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}

0800de00 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b084      	sub	sp, #16
 800de04:	af00      	add	r7, sp, #0
 800de06:	60b9      	str	r1, [r7, #8]
 800de08:	607a      	str	r2, [r7, #4]
 800de0a:	603b      	str	r3, [r7, #0]
 800de0c:	4603      	mov	r3, r0
 800de0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);return RES_OK;
 800de10:	7bf8      	ldrb	r0, [r7, #15]
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	687a      	ldr	r2, [r7, #4]
 800de16:	68b9      	ldr	r1, [r7, #8]
 800de18:	f000 fac0 	bl	800e39c <USER_SPI_read>
 800de1c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3710      	adds	r7, #16
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}

0800de26 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800de26:	b580      	push	{r7, lr}
 800de28:	b084      	sub	sp, #16
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	60b9      	str	r1, [r7, #8]
 800de2e:	607a      	str	r2, [r7, #4]
 800de30:	603b      	str	r3, [r7, #0]
 800de32:	4603      	mov	r3, r0
 800de34:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800de36:	7bf8      	ldrb	r0, [r7, #15]
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	687a      	ldr	r2, [r7, #4]
 800de3c:	68b9      	ldr	r1, [r7, #8]
 800de3e:	f000 fb13 	bl	800e468 <USER_SPI_write>
 800de42:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800de44:	4618      	mov	r0, r3
 800de46:	3710      	adds	r7, #16
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}

0800de4c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b082      	sub	sp, #8
 800de50:	af00      	add	r7, sp, #0
 800de52:	4603      	mov	r3, r0
 800de54:	603a      	str	r2, [r7, #0]
 800de56:	71fb      	strb	r3, [r7, #7]
 800de58:	460b      	mov	r3, r1
 800de5a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800de5c:	79b9      	ldrb	r1, [r7, #6]
 800de5e:	79fb      	ldrb	r3, [r7, #7]
 800de60:	683a      	ldr	r2, [r7, #0]
 800de62:	4618      	mov	r0, r3
 800de64:	f000 fb7c 	bl	800e560 <USER_SPI_ioctl>
 800de68:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3708      	adds	r7, #8
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
	...

0800de74 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800de74:	b580      	push	{r7, lr}
 800de76:	b082      	sub	sp, #8
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800de7c:	f7f8 ffc8 	bl	8006e10 <HAL_GetTick>
 800de80:	4603      	mov	r3, r0
 800de82:	4a04      	ldr	r2, [pc, #16]	@ (800de94 <SPI_Timer_On+0x20>)
 800de84:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800de86:	4a04      	ldr	r2, [pc, #16]	@ (800de98 <SPI_Timer_On+0x24>)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6013      	str	r3, [r2, #0]
}
 800de8c:	bf00      	nop
 800de8e:	3708      	adds	r7, #8
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}
 800de94:	20005b8c 	.word	0x20005b8c
 800de98:	20005b90 	.word	0x20005b90

0800de9c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800de9c:	b580      	push	{r7, lr}
 800de9e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800dea0:	f7f8 ffb6 	bl	8006e10 <HAL_GetTick>
 800dea4:	4602      	mov	r2, r0
 800dea6:	4b06      	ldr	r3, [pc, #24]	@ (800dec0 <SPI_Timer_Status+0x24>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	1ad2      	subs	r2, r2, r3
 800deac:	4b05      	ldr	r3, [pc, #20]	@ (800dec4 <SPI_Timer_Status+0x28>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	429a      	cmp	r2, r3
 800deb2:	bf34      	ite	cc
 800deb4:	2301      	movcc	r3, #1
 800deb6:	2300      	movcs	r3, #0
 800deb8:	b2db      	uxtb	r3, r3
}
 800deba:	4618      	mov	r0, r3
 800debc:	bd80      	pop	{r7, pc}
 800debe:	bf00      	nop
 800dec0:	20005b8c 	.word	0x20005b8c
 800dec4:	20005b90 	.word	0x20005b90

0800dec8 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b086      	sub	sp, #24
 800decc:	af02      	add	r7, sp, #8
 800dece:	4603      	mov	r3, r0
 800ded0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800ded2:	f107 020f 	add.w	r2, r7, #15
 800ded6:	1df9      	adds	r1, r7, #7
 800ded8:	2332      	movs	r3, #50	@ 0x32
 800deda:	9300      	str	r3, [sp, #0]
 800dedc:	2301      	movs	r3, #1
 800dede:	4804      	ldr	r0, [pc, #16]	@ (800def0 <xchg_spi+0x28>)
 800dee0:	f7fb ffa4 	bl	8009e2c <HAL_SPI_TransmitReceive>
    return rxDat;
 800dee4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3710      	adds	r7, #16
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}
 800deee:	bf00      	nop
 800def0:	20004bb8 	.word	0x20004bb8

0800def4 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800def4:	b590      	push	{r4, r7, lr}
 800def6:	b085      	sub	sp, #20
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
 800defc:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800defe:	2300      	movs	r3, #0
 800df00:	60fb      	str	r3, [r7, #12]
 800df02:	e00a      	b.n	800df1a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800df04:	687a      	ldr	r2, [r7, #4]
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	18d4      	adds	r4, r2, r3
 800df0a:	20ff      	movs	r0, #255	@ 0xff
 800df0c:	f7ff ffdc 	bl	800dec8 <xchg_spi>
 800df10:	4603      	mov	r3, r0
 800df12:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	3301      	adds	r3, #1
 800df18:	60fb      	str	r3, [r7, #12]
 800df1a:	68fa      	ldr	r2, [r7, #12]
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	429a      	cmp	r2, r3
 800df20:	d3f0      	bcc.n	800df04 <rcvr_spi_multi+0x10>
	}
}
 800df22:	bf00      	nop
 800df24:	bf00      	nop
 800df26:	3714      	adds	r7, #20
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd90      	pop	{r4, r7, pc}

0800df2c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b082      	sub	sp, #8
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
 800df34:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	b29a      	uxth	r2, r3
 800df3a:	f04f 33ff 	mov.w	r3, #4294967295
 800df3e:	6879      	ldr	r1, [r7, #4]
 800df40:	4803      	ldr	r0, [pc, #12]	@ (800df50 <xmit_spi_multi+0x24>)
 800df42:	f7fb fdfe 	bl	8009b42 <HAL_SPI_Transmit>
}
 800df46:	bf00      	nop
 800df48:	3708      	adds	r7, #8
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
 800df4e:	bf00      	nop
 800df50:	20004bb8 	.word	0x20004bb8

0800df54 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b086      	sub	sp, #24
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800df5c:	f7f8 ff58 	bl	8006e10 <HAL_GetTick>
 800df60:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800df66:	20ff      	movs	r0, #255	@ 0xff
 800df68:	f7ff ffae 	bl	800dec8 <xchg_spi>
 800df6c:	4603      	mov	r3, r0
 800df6e:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800df70:	7bfb      	ldrb	r3, [r7, #15]
 800df72:	2bff      	cmp	r3, #255	@ 0xff
 800df74:	d007      	beq.n	800df86 <wait_ready+0x32>
 800df76:	f7f8 ff4b 	bl	8006e10 <HAL_GetTick>
 800df7a:	4602      	mov	r2, r0
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	1ad3      	subs	r3, r2, r3
 800df80:	693a      	ldr	r2, [r7, #16]
 800df82:	429a      	cmp	r2, r3
 800df84:	d8ef      	bhi.n	800df66 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800df86:	7bfb      	ldrb	r3, [r7, #15]
 800df88:	2bff      	cmp	r3, #255	@ 0xff
 800df8a:	bf0c      	ite	eq
 800df8c:	2301      	moveq	r3, #1
 800df8e:	2300      	movne	r3, #0
 800df90:	b2db      	uxtb	r3, r3
}
 800df92:	4618      	mov	r0, r3
 800df94:	3718      	adds	r7, #24
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}
	...

0800df9c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800dfa0:	2201      	movs	r2, #1
 800dfa2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800dfa6:	4804      	ldr	r0, [pc, #16]	@ (800dfb8 <despiselect+0x1c>)
 800dfa8:	f7f9 fe12 	bl	8007bd0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800dfac:	20ff      	movs	r0, #255	@ 0xff
 800dfae:	f7ff ff8b 	bl	800dec8 <xchg_spi>

}
 800dfb2:	bf00      	nop
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	40020400 	.word	0x40020400

0800dfbc <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800dfc6:	480a      	ldr	r0, [pc, #40]	@ (800dff0 <spiselect+0x34>)
 800dfc8:	f7f9 fe02 	bl	8007bd0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800dfcc:	20ff      	movs	r0, #255	@ 0xff
 800dfce:	f7ff ff7b 	bl	800dec8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800dfd2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800dfd6:	f7ff ffbd 	bl	800df54 <wait_ready>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d001      	beq.n	800dfe4 <spiselect+0x28>
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	e002      	b.n	800dfea <spiselect+0x2e>

	despiselect();
 800dfe4:	f7ff ffda 	bl	800df9c <despiselect>
	return 0;	/* Timeout */
 800dfe8:	2300      	movs	r3, #0
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	bd80      	pop	{r7, pc}
 800dfee:	bf00      	nop
 800dff0:	40020400 	.word	0x40020400

0800dff4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b084      	sub	sp, #16
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800dffe:	20c8      	movs	r0, #200	@ 0xc8
 800e000:	f7ff ff38 	bl	800de74 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800e004:	20ff      	movs	r0, #255	@ 0xff
 800e006:	f7ff ff5f 	bl	800dec8 <xchg_spi>
 800e00a:	4603      	mov	r3, r0
 800e00c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800e00e:	7bfb      	ldrb	r3, [r7, #15]
 800e010:	2bff      	cmp	r3, #255	@ 0xff
 800e012:	d104      	bne.n	800e01e <rcvr_datablock+0x2a>
 800e014:	f7ff ff42 	bl	800de9c <SPI_Timer_Status>
 800e018:	4603      	mov	r3, r0
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d1f2      	bne.n	800e004 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800e01e:	7bfb      	ldrb	r3, [r7, #15]
 800e020:	2bfe      	cmp	r3, #254	@ 0xfe
 800e022:	d001      	beq.n	800e028 <rcvr_datablock+0x34>
 800e024:	2300      	movs	r3, #0
 800e026:	e00a      	b.n	800e03e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800e028:	6839      	ldr	r1, [r7, #0]
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f7ff ff62 	bl	800def4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800e030:	20ff      	movs	r0, #255	@ 0xff
 800e032:	f7ff ff49 	bl	800dec8 <xchg_spi>
 800e036:	20ff      	movs	r0, #255	@ 0xff
 800e038:	f7ff ff46 	bl	800dec8 <xchg_spi>

	return 1;						/* Function succeeded */
 800e03c:	2301      	movs	r3, #1
}
 800e03e:	4618      	mov	r0, r3
 800e040:	3710      	adds	r7, #16
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}

0800e046 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800e046:	b580      	push	{r7, lr}
 800e048:	b084      	sub	sp, #16
 800e04a:	af00      	add	r7, sp, #0
 800e04c:	6078      	str	r0, [r7, #4]
 800e04e:	460b      	mov	r3, r1
 800e050:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800e052:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800e056:	f7ff ff7d 	bl	800df54 <wait_ready>
 800e05a:	4603      	mov	r3, r0
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d101      	bne.n	800e064 <xmit_datablock+0x1e>
 800e060:	2300      	movs	r3, #0
 800e062:	e01e      	b.n	800e0a2 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800e064:	78fb      	ldrb	r3, [r7, #3]
 800e066:	4618      	mov	r0, r3
 800e068:	f7ff ff2e 	bl	800dec8 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800e06c:	78fb      	ldrb	r3, [r7, #3]
 800e06e:	2bfd      	cmp	r3, #253	@ 0xfd
 800e070:	d016      	beq.n	800e0a0 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800e072:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f7ff ff58 	bl	800df2c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800e07c:	20ff      	movs	r0, #255	@ 0xff
 800e07e:	f7ff ff23 	bl	800dec8 <xchg_spi>
 800e082:	20ff      	movs	r0, #255	@ 0xff
 800e084:	f7ff ff20 	bl	800dec8 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800e088:	20ff      	movs	r0, #255	@ 0xff
 800e08a:	f7ff ff1d 	bl	800dec8 <xchg_spi>
 800e08e:	4603      	mov	r3, r0
 800e090:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800e092:	7bfb      	ldrb	r3, [r7, #15]
 800e094:	f003 031f 	and.w	r3, r3, #31
 800e098:	2b05      	cmp	r3, #5
 800e09a:	d001      	beq.n	800e0a0 <xmit_datablock+0x5a>
 800e09c:	2300      	movs	r3, #0
 800e09e:	e000      	b.n	800e0a2 <xmit_datablock+0x5c>
	}
	return 1;
 800e0a0:	2301      	movs	r3, #1
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	3710      	adds	r7, #16
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}

0800e0aa <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800e0aa:	b580      	push	{r7, lr}
 800e0ac:	b084      	sub	sp, #16
 800e0ae:	af00      	add	r7, sp, #0
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	6039      	str	r1, [r7, #0]
 800e0b4:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800e0b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	da0e      	bge.n	800e0dc <send_cmd+0x32>
		cmd &= 0x7F;
 800e0be:	79fb      	ldrb	r3, [r7, #7]
 800e0c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e0c4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800e0c6:	2100      	movs	r1, #0
 800e0c8:	2037      	movs	r0, #55	@ 0x37
 800e0ca:	f7ff ffee 	bl	800e0aa <send_cmd>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800e0d2:	7bbb      	ldrb	r3, [r7, #14]
 800e0d4:	2b01      	cmp	r3, #1
 800e0d6:	d901      	bls.n	800e0dc <send_cmd+0x32>
 800e0d8:	7bbb      	ldrb	r3, [r7, #14]
 800e0da:	e051      	b.n	800e180 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800e0dc:	79fb      	ldrb	r3, [r7, #7]
 800e0de:	2b0c      	cmp	r3, #12
 800e0e0:	d008      	beq.n	800e0f4 <send_cmd+0x4a>
		despiselect();
 800e0e2:	f7ff ff5b 	bl	800df9c <despiselect>
		if (!spiselect()) return 0xFF;
 800e0e6:	f7ff ff69 	bl	800dfbc <spiselect>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d101      	bne.n	800e0f4 <send_cmd+0x4a>
 800e0f0:	23ff      	movs	r3, #255	@ 0xff
 800e0f2:	e045      	b.n	800e180 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800e0f4:	79fb      	ldrb	r3, [r7, #7]
 800e0f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0fa:	b2db      	uxtb	r3, r3
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f7ff fee3 	bl	800dec8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	0e1b      	lsrs	r3, r3, #24
 800e106:	b2db      	uxtb	r3, r3
 800e108:	4618      	mov	r0, r3
 800e10a:	f7ff fedd 	bl	800dec8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	0c1b      	lsrs	r3, r3, #16
 800e112:	b2db      	uxtb	r3, r3
 800e114:	4618      	mov	r0, r3
 800e116:	f7ff fed7 	bl	800dec8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	0a1b      	lsrs	r3, r3, #8
 800e11e:	b2db      	uxtb	r3, r3
 800e120:	4618      	mov	r0, r3
 800e122:	f7ff fed1 	bl	800dec8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	b2db      	uxtb	r3, r3
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7ff fecc 	bl	800dec8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800e130:	2301      	movs	r3, #1
 800e132:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800e134:	79fb      	ldrb	r3, [r7, #7]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d101      	bne.n	800e13e <send_cmd+0x94>
 800e13a:	2395      	movs	r3, #149	@ 0x95
 800e13c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800e13e:	79fb      	ldrb	r3, [r7, #7]
 800e140:	2b08      	cmp	r3, #8
 800e142:	d101      	bne.n	800e148 <send_cmd+0x9e>
 800e144:	2387      	movs	r3, #135	@ 0x87
 800e146:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800e148:	7bfb      	ldrb	r3, [r7, #15]
 800e14a:	4618      	mov	r0, r3
 800e14c:	f7ff febc 	bl	800dec8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800e150:	79fb      	ldrb	r3, [r7, #7]
 800e152:	2b0c      	cmp	r3, #12
 800e154:	d102      	bne.n	800e15c <send_cmd+0xb2>
 800e156:	20ff      	movs	r0, #255	@ 0xff
 800e158:	f7ff feb6 	bl	800dec8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800e15c:	230a      	movs	r3, #10
 800e15e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800e160:	20ff      	movs	r0, #255	@ 0xff
 800e162:	f7ff feb1 	bl	800dec8 <xchg_spi>
 800e166:	4603      	mov	r3, r0
 800e168:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800e16a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	da05      	bge.n	800e17e <send_cmd+0xd4>
 800e172:	7bfb      	ldrb	r3, [r7, #15]
 800e174:	3b01      	subs	r3, #1
 800e176:	73fb      	strb	r3, [r7, #15]
 800e178:	7bfb      	ldrb	r3, [r7, #15]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d1f0      	bne.n	800e160 <send_cmd+0xb6>

	return res;							/* Return received response */
 800e17e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e180:	4618      	mov	r0, r3
 800e182:	3710      	adds	r7, #16
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}

0800e188 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800e188:	b590      	push	{r4, r7, lr}
 800e18a:	b085      	sub	sp, #20
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	4603      	mov	r3, r0
 800e190:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800e192:	79fb      	ldrb	r3, [r7, #7]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d001      	beq.n	800e19c <USER_SPI_initialize+0x14>
 800e198:	2301      	movs	r3, #1
 800e19a:	e0dc      	b.n	800e356 <USER_SPI_initialize+0x1ce>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800e19c:	4b70      	ldr	r3, [pc, #448]	@ (800e360 <USER_SPI_initialize+0x1d8>)
 800e19e:	781b      	ldrb	r3, [r3, #0]
 800e1a0:	b2db      	uxtb	r3, r3
 800e1a2:	f003 0302 	and.w	r3, r3, #2
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d003      	beq.n	800e1b2 <USER_SPI_initialize+0x2a>
 800e1aa:	4b6d      	ldr	r3, [pc, #436]	@ (800e360 <USER_SPI_initialize+0x1d8>)
 800e1ac:	781b      	ldrb	r3, [r3, #0]
 800e1ae:	b2db      	uxtb	r3, r3
 800e1b0:	e0d1      	b.n	800e356 <USER_SPI_initialize+0x1ce>
	flag = Stat;
 800e1b2:	4b6b      	ldr	r3, [pc, #428]	@ (800e360 <USER_SPI_initialize+0x1d8>)
 800e1b4:	781b      	ldrb	r3, [r3, #0]
 800e1b6:	b2db      	uxtb	r3, r3
 800e1b8:	461a      	mov	r2, r3
 800e1ba:	4b6a      	ldr	r3, [pc, #424]	@ (800e364 <USER_SPI_initialize+0x1dc>)
 800e1bc:	601a      	str	r2, [r3, #0]

	FCLK_SLOW();
 800e1be:	4b6a      	ldr	r3, [pc, #424]	@ (800e368 <USER_SPI_initialize+0x1e0>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800e1c8:	4b67      	ldr	r3, [pc, #412]	@ (800e368 <USER_SPI_initialize+0x1e0>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800e1d0:	601a      	str	r2, [r3, #0]
	//SD_SPI_HANDLE.Instance->CR1 = SPI_BAUDRATEPRESCALER_128;


	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800e1d2:	230a      	movs	r3, #10
 800e1d4:	73fb      	strb	r3, [r7, #15]
 800e1d6:	e005      	b.n	800e1e4 <USER_SPI_initialize+0x5c>
 800e1d8:	20ff      	movs	r0, #255	@ 0xff
 800e1da:	f7ff fe75 	bl	800dec8 <xchg_spi>
 800e1de:	7bfb      	ldrb	r3, [r7, #15]
 800e1e0:	3b01      	subs	r3, #1
 800e1e2:	73fb      	strb	r3, [r7, #15]
 800e1e4:	7bfb      	ldrb	r3, [r7, #15]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d1f6      	bne.n	800e1d8 <USER_SPI_initialize+0x50>

	ty = 0;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800e1ee:	2100      	movs	r1, #0
 800e1f0:	2000      	movs	r0, #0
 800e1f2:	f7ff ff5a 	bl	800e0aa <send_cmd>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	2b01      	cmp	r3, #1
 800e1fa:	f040 808b 	bne.w	800e314 <USER_SPI_initialize+0x18c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800e1fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800e202:	f7ff fe37 	bl	800de74 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800e206:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800e20a:	2008      	movs	r0, #8
 800e20c:	f7ff ff4d 	bl	800e0aa <send_cmd>
 800e210:	4603      	mov	r3, r0
 800e212:	2b01      	cmp	r3, #1
 800e214:	d151      	bne.n	800e2ba <USER_SPI_initialize+0x132>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800e216:	2300      	movs	r3, #0
 800e218:	73fb      	strb	r3, [r7, #15]
 800e21a:	e00d      	b.n	800e238 <USER_SPI_initialize+0xb0>
 800e21c:	7bfc      	ldrb	r4, [r7, #15]
 800e21e:	20ff      	movs	r0, #255	@ 0xff
 800e220:	f7ff fe52 	bl	800dec8 <xchg_spi>
 800e224:	4603      	mov	r3, r0
 800e226:	461a      	mov	r2, r3
 800e228:	f104 0310 	add.w	r3, r4, #16
 800e22c:	443b      	add	r3, r7
 800e22e:	f803 2c08 	strb.w	r2, [r3, #-8]
 800e232:	7bfb      	ldrb	r3, [r7, #15]
 800e234:	3301      	adds	r3, #1
 800e236:	73fb      	strb	r3, [r7, #15]
 800e238:	7bfb      	ldrb	r3, [r7, #15]
 800e23a:	2b03      	cmp	r3, #3
 800e23c:	d9ee      	bls.n	800e21c <USER_SPI_initialize+0x94>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800e23e:	7abb      	ldrb	r3, [r7, #10]
 800e240:	2b01      	cmp	r3, #1
 800e242:	d167      	bne.n	800e314 <USER_SPI_initialize+0x18c>
 800e244:	7afb      	ldrb	r3, [r7, #11]
 800e246:	2baa      	cmp	r3, #170	@ 0xaa
 800e248:	d164      	bne.n	800e314 <USER_SPI_initialize+0x18c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800e24a:	bf00      	nop
 800e24c:	f7ff fe26 	bl	800de9c <SPI_Timer_Status>
 800e250:	4603      	mov	r3, r0
 800e252:	2b00      	cmp	r3, #0
 800e254:	d007      	beq.n	800e266 <USER_SPI_initialize+0xde>
 800e256:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800e25a:	20a9      	movs	r0, #169	@ 0xa9
 800e25c:	f7ff ff25 	bl	800e0aa <send_cmd>
 800e260:	4603      	mov	r3, r0
 800e262:	2b00      	cmp	r3, #0
 800e264:	d1f2      	bne.n	800e24c <USER_SPI_initialize+0xc4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800e266:	f7ff fe19 	bl	800de9c <SPI_Timer_Status>
 800e26a:	4603      	mov	r3, r0
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d051      	beq.n	800e314 <USER_SPI_initialize+0x18c>
 800e270:	2100      	movs	r1, #0
 800e272:	203a      	movs	r0, #58	@ 0x3a
 800e274:	f7ff ff19 	bl	800e0aa <send_cmd>
 800e278:	4603      	mov	r3, r0
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d14a      	bne.n	800e314 <USER_SPI_initialize+0x18c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800e27e:	2300      	movs	r3, #0
 800e280:	73fb      	strb	r3, [r7, #15]
 800e282:	e00d      	b.n	800e2a0 <USER_SPI_initialize+0x118>
 800e284:	7bfc      	ldrb	r4, [r7, #15]
 800e286:	20ff      	movs	r0, #255	@ 0xff
 800e288:	f7ff fe1e 	bl	800dec8 <xchg_spi>
 800e28c:	4603      	mov	r3, r0
 800e28e:	461a      	mov	r2, r3
 800e290:	f104 0310 	add.w	r3, r4, #16
 800e294:	443b      	add	r3, r7
 800e296:	f803 2c08 	strb.w	r2, [r3, #-8]
 800e29a:	7bfb      	ldrb	r3, [r7, #15]
 800e29c:	3301      	adds	r3, #1
 800e29e:	73fb      	strb	r3, [r7, #15]
 800e2a0:	7bfb      	ldrb	r3, [r7, #15]
 800e2a2:	2b03      	cmp	r3, #3
 800e2a4:	d9ee      	bls.n	800e284 <USER_SPI_initialize+0xfc>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800e2a6:	7a3b      	ldrb	r3, [r7, #8]
 800e2a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d001      	beq.n	800e2b4 <USER_SPI_initialize+0x12c>
 800e2b0:	230c      	movs	r3, #12
 800e2b2:	e000      	b.n	800e2b6 <USER_SPI_initialize+0x12e>
 800e2b4:	2304      	movs	r3, #4
 800e2b6:	737b      	strb	r3, [r7, #13]
 800e2b8:	e02c      	b.n	800e314 <USER_SPI_initialize+0x18c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800e2ba:	2100      	movs	r1, #0
 800e2bc:	20a9      	movs	r0, #169	@ 0xa9
 800e2be:	f7ff fef4 	bl	800e0aa <send_cmd>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	2b01      	cmp	r3, #1
 800e2c6:	d804      	bhi.n	800e2d2 <USER_SPI_initialize+0x14a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800e2c8:	2302      	movs	r3, #2
 800e2ca:	737b      	strb	r3, [r7, #13]
 800e2cc:	23a9      	movs	r3, #169	@ 0xa9
 800e2ce:	73bb      	strb	r3, [r7, #14]
 800e2d0:	e003      	b.n	800e2da <USER_SPI_initialize+0x152>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	737b      	strb	r3, [r7, #13]
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800e2da:	bf00      	nop
 800e2dc:	f7ff fdde 	bl	800de9c <SPI_Timer_Status>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d007      	beq.n	800e2f6 <USER_SPI_initialize+0x16e>
 800e2e6:	7bbb      	ldrb	r3, [r7, #14]
 800e2e8:	2100      	movs	r1, #0
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f7ff fedd 	bl	800e0aa <send_cmd>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d1f2      	bne.n	800e2dc <USER_SPI_initialize+0x154>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800e2f6:	f7ff fdd1 	bl	800de9c <SPI_Timer_Status>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d007      	beq.n	800e310 <USER_SPI_initialize+0x188>
 800e300:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e304:	2010      	movs	r0, #16
 800e306:	f7ff fed0 	bl	800e0aa <send_cmd>
 800e30a:	4603      	mov	r3, r0
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d001      	beq.n	800e314 <USER_SPI_initialize+0x18c>
				ty = 0;
 800e310:	2300      	movs	r3, #0
 800e312:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800e314:	4a15      	ldr	r2, [pc, #84]	@ (800e36c <USER_SPI_initialize+0x1e4>)
 800e316:	7b7b      	ldrb	r3, [r7, #13]
 800e318:	7013      	strb	r3, [r2, #0]
	despiselect();
 800e31a:	f7ff fe3f 	bl	800df9c <despiselect>

	if (ty) {			/* OK */
 800e31e:	7b7b      	ldrb	r3, [r7, #13]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d012      	beq.n	800e34a <USER_SPI_initialize+0x1c2>
		FCLK_FAST();			/* Set fast clock */
 800e324:	4b10      	ldr	r3, [pc, #64]	@ (800e368 <USER_SPI_initialize+0x1e0>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800e32e:	4b0e      	ldr	r3, [pc, #56]	@ (800e368 <USER_SPI_initialize+0x1e0>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	f042 0210 	orr.w	r2, r2, #16
 800e336:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800e338:	4b09      	ldr	r3, [pc, #36]	@ (800e360 <USER_SPI_initialize+0x1d8>)
 800e33a:	781b      	ldrb	r3, [r3, #0]
 800e33c:	b2db      	uxtb	r3, r3
 800e33e:	f023 0301 	bic.w	r3, r3, #1
 800e342:	b2da      	uxtb	r2, r3
 800e344:	4b06      	ldr	r3, [pc, #24]	@ (800e360 <USER_SPI_initialize+0x1d8>)
 800e346:	701a      	strb	r2, [r3, #0]
 800e348:	e002      	b.n	800e350 <USER_SPI_initialize+0x1c8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800e34a:	4b05      	ldr	r3, [pc, #20]	@ (800e360 <USER_SPI_initialize+0x1d8>)
 800e34c:	2201      	movs	r2, #1
 800e34e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800e350:	4b03      	ldr	r3, [pc, #12]	@ (800e360 <USER_SPI_initialize+0x1d8>)
 800e352:	781b      	ldrb	r3, [r3, #0]
 800e354:	b2db      	uxtb	r3, r3
}
 800e356:	4618      	mov	r0, r3
 800e358:	3714      	adds	r7, #20
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd90      	pop	{r4, r7, pc}
 800e35e:	bf00      	nop
 800e360:	20000074 	.word	0x20000074
 800e364:	20005b84 	.word	0x20005b84
 800e368:	20004bb8 	.word	0x20004bb8
 800e36c:	20005b88 	.word	0x20005b88

0800e370 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800e370:	b480      	push	{r7}
 800e372:	b083      	sub	sp, #12
 800e374:	af00      	add	r7, sp, #0
 800e376:	4603      	mov	r3, r0
 800e378:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800e37a:	79fb      	ldrb	r3, [r7, #7]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d001      	beq.n	800e384 <USER_SPI_status+0x14>
 800e380:	2301      	movs	r3, #1
 800e382:	e002      	b.n	800e38a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800e384:	4b04      	ldr	r3, [pc, #16]	@ (800e398 <USER_SPI_status+0x28>)
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	b2db      	uxtb	r3, r3
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	370c      	adds	r7, #12
 800e38e:	46bd      	mov	sp, r7
 800e390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e394:	4770      	bx	lr
 800e396:	bf00      	nop
 800e398:	20000074 	.word	0x20000074

0800e39c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b084      	sub	sp, #16
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	60b9      	str	r1, [r7, #8]
 800e3a4:	607a      	str	r2, [r7, #4]
 800e3a6:	603b      	str	r3, [r7, #0]
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800e3ac:	7bfb      	ldrb	r3, [r7, #15]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d102      	bne.n	800e3b8 <USER_SPI_read+0x1c>
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d101      	bne.n	800e3bc <USER_SPI_read+0x20>
 800e3b8:	2304      	movs	r3, #4
 800e3ba:	e04d      	b.n	800e458 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800e3bc:	4b28      	ldr	r3, [pc, #160]	@ (800e460 <USER_SPI_read+0xc4>)
 800e3be:	781b      	ldrb	r3, [r3, #0]
 800e3c0:	b2db      	uxtb	r3, r3
 800e3c2:	f003 0301 	and.w	r3, r3, #1
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d001      	beq.n	800e3ce <USER_SPI_read+0x32>
 800e3ca:	2303      	movs	r3, #3
 800e3cc:	e044      	b.n	800e458 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800e3ce:	4b25      	ldr	r3, [pc, #148]	@ (800e464 <USER_SPI_read+0xc8>)
 800e3d0:	781b      	ldrb	r3, [r3, #0]
 800e3d2:	f003 0308 	and.w	r3, r3, #8
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d102      	bne.n	800e3e0 <USER_SPI_read+0x44>
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	025b      	lsls	r3, r3, #9
 800e3de:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	2b01      	cmp	r3, #1
 800e3e4:	d111      	bne.n	800e40a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800e3e6:	6879      	ldr	r1, [r7, #4]
 800e3e8:	2011      	movs	r0, #17
 800e3ea:	f7ff fe5e 	bl	800e0aa <send_cmd>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d129      	bne.n	800e448 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800e3f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e3f8:	68b8      	ldr	r0, [r7, #8]
 800e3fa:	f7ff fdfb 	bl	800dff4 <rcvr_datablock>
 800e3fe:	4603      	mov	r3, r0
 800e400:	2b00      	cmp	r3, #0
 800e402:	d021      	beq.n	800e448 <USER_SPI_read+0xac>
			count = 0;
 800e404:	2300      	movs	r3, #0
 800e406:	603b      	str	r3, [r7, #0]
 800e408:	e01e      	b.n	800e448 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800e40a:	6879      	ldr	r1, [r7, #4]
 800e40c:	2012      	movs	r0, #18
 800e40e:	f7ff fe4c 	bl	800e0aa <send_cmd>
 800e412:	4603      	mov	r3, r0
 800e414:	2b00      	cmp	r3, #0
 800e416:	d117      	bne.n	800e448 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800e418:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e41c:	68b8      	ldr	r0, [r7, #8]
 800e41e:	f7ff fde9 	bl	800dff4 <rcvr_datablock>
 800e422:	4603      	mov	r3, r0
 800e424:	2b00      	cmp	r3, #0
 800e426:	d00a      	beq.n	800e43e <USER_SPI_read+0xa2>
				buff += 512;
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800e42e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	3b01      	subs	r3, #1
 800e434:	603b      	str	r3, [r7, #0]
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d1ed      	bne.n	800e418 <USER_SPI_read+0x7c>
 800e43c:	e000      	b.n	800e440 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800e43e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800e440:	2100      	movs	r1, #0
 800e442:	200c      	movs	r0, #12
 800e444:	f7ff fe31 	bl	800e0aa <send_cmd>
		}
	}
	despiselect();
 800e448:	f7ff fda8 	bl	800df9c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	bf14      	ite	ne
 800e452:	2301      	movne	r3, #1
 800e454:	2300      	moveq	r3, #0
 800e456:	b2db      	uxtb	r3, r3
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3710      	adds	r7, #16
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}
 800e460:	20000074 	.word	0x20000074
 800e464:	20005b88 	.word	0x20005b88

0800e468 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b084      	sub	sp, #16
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	60b9      	str	r1, [r7, #8]
 800e470:	607a      	str	r2, [r7, #4]
 800e472:	603b      	str	r3, [r7, #0]
 800e474:	4603      	mov	r3, r0
 800e476:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800e478:	7bfb      	ldrb	r3, [r7, #15]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d102      	bne.n	800e484 <USER_SPI_write+0x1c>
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d101      	bne.n	800e488 <USER_SPI_write+0x20>
 800e484:	2304      	movs	r3, #4
 800e486:	e063      	b.n	800e550 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800e488:	4b33      	ldr	r3, [pc, #204]	@ (800e558 <USER_SPI_write+0xf0>)
 800e48a:	781b      	ldrb	r3, [r3, #0]
 800e48c:	b2db      	uxtb	r3, r3
 800e48e:	f003 0301 	and.w	r3, r3, #1
 800e492:	2b00      	cmp	r3, #0
 800e494:	d001      	beq.n	800e49a <USER_SPI_write+0x32>
 800e496:	2303      	movs	r3, #3
 800e498:	e05a      	b.n	800e550 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800e49a:	4b2f      	ldr	r3, [pc, #188]	@ (800e558 <USER_SPI_write+0xf0>)
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	b2db      	uxtb	r3, r3
 800e4a0:	f003 0304 	and.w	r3, r3, #4
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d001      	beq.n	800e4ac <USER_SPI_write+0x44>
 800e4a8:	2302      	movs	r3, #2
 800e4aa:	e051      	b.n	800e550 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800e4ac:	4b2b      	ldr	r3, [pc, #172]	@ (800e55c <USER_SPI_write+0xf4>)
 800e4ae:	781b      	ldrb	r3, [r3, #0]
 800e4b0:	f003 0308 	and.w	r3, r3, #8
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d102      	bne.n	800e4be <USER_SPI_write+0x56>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	025b      	lsls	r3, r3, #9
 800e4bc:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	2b01      	cmp	r3, #1
 800e4c2:	d110      	bne.n	800e4e6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800e4c4:	6879      	ldr	r1, [r7, #4]
 800e4c6:	2018      	movs	r0, #24
 800e4c8:	f7ff fdef 	bl	800e0aa <send_cmd>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d136      	bne.n	800e540 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800e4d2:	21fe      	movs	r1, #254	@ 0xfe
 800e4d4:	68b8      	ldr	r0, [r7, #8]
 800e4d6:	f7ff fdb6 	bl	800e046 <xmit_datablock>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d02f      	beq.n	800e540 <USER_SPI_write+0xd8>
			count = 0;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	603b      	str	r3, [r7, #0]
 800e4e4:	e02c      	b.n	800e540 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800e4e6:	4b1d      	ldr	r3, [pc, #116]	@ (800e55c <USER_SPI_write+0xf4>)
 800e4e8:	781b      	ldrb	r3, [r3, #0]
 800e4ea:	f003 0306 	and.w	r3, r3, #6
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d003      	beq.n	800e4fa <USER_SPI_write+0x92>
 800e4f2:	6839      	ldr	r1, [r7, #0]
 800e4f4:	2097      	movs	r0, #151	@ 0x97
 800e4f6:	f7ff fdd8 	bl	800e0aa <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800e4fa:	6879      	ldr	r1, [r7, #4]
 800e4fc:	2019      	movs	r0, #25
 800e4fe:	f7ff fdd4 	bl	800e0aa <send_cmd>
 800e502:	4603      	mov	r3, r0
 800e504:	2b00      	cmp	r3, #0
 800e506:	d11b      	bne.n	800e540 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800e508:	21fc      	movs	r1, #252	@ 0xfc
 800e50a:	68b8      	ldr	r0, [r7, #8]
 800e50c:	f7ff fd9b 	bl	800e046 <xmit_datablock>
 800e510:	4603      	mov	r3, r0
 800e512:	2b00      	cmp	r3, #0
 800e514:	d00a      	beq.n	800e52c <USER_SPI_write+0xc4>
				buff += 512;
 800e516:	68bb      	ldr	r3, [r7, #8]
 800e518:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800e51c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	3b01      	subs	r3, #1
 800e522:	603b      	str	r3, [r7, #0]
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d1ee      	bne.n	800e508 <USER_SPI_write+0xa0>
 800e52a:	e000      	b.n	800e52e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800e52c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800e52e:	21fd      	movs	r1, #253	@ 0xfd
 800e530:	2000      	movs	r0, #0
 800e532:	f7ff fd88 	bl	800e046 <xmit_datablock>
 800e536:	4603      	mov	r3, r0
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d101      	bne.n	800e540 <USER_SPI_write+0xd8>
 800e53c:	2301      	movs	r3, #1
 800e53e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800e540:	f7ff fd2c 	bl	800df9c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	2b00      	cmp	r3, #0
 800e548:	bf14      	ite	ne
 800e54a:	2301      	movne	r3, #1
 800e54c:	2300      	moveq	r3, #0
 800e54e:	b2db      	uxtb	r3, r3
}
 800e550:	4618      	mov	r0, r3
 800e552:	3710      	adds	r7, #16
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}
 800e558:	20000074 	.word	0x20000074
 800e55c:	20005b88 	.word	0x20005b88

0800e560 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b08c      	sub	sp, #48	@ 0x30
 800e564:	af00      	add	r7, sp, #0
 800e566:	4603      	mov	r3, r0
 800e568:	603a      	str	r2, [r7, #0]
 800e56a:	71fb      	strb	r3, [r7, #7]
 800e56c:	460b      	mov	r3, r1
 800e56e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800e570:	79fb      	ldrb	r3, [r7, #7]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d001      	beq.n	800e57a <USER_SPI_ioctl+0x1a>
 800e576:	2304      	movs	r3, #4
 800e578:	e15a      	b.n	800e830 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800e57a:	4baf      	ldr	r3, [pc, #700]	@ (800e838 <USER_SPI_ioctl+0x2d8>)
 800e57c:	781b      	ldrb	r3, [r3, #0]
 800e57e:	b2db      	uxtb	r3, r3
 800e580:	f003 0301 	and.w	r3, r3, #1
 800e584:	2b00      	cmp	r3, #0
 800e586:	d001      	beq.n	800e58c <USER_SPI_ioctl+0x2c>
 800e588:	2303      	movs	r3, #3
 800e58a:	e151      	b.n	800e830 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800e58c:	2301      	movs	r3, #1
 800e58e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800e592:	79bb      	ldrb	r3, [r7, #6]
 800e594:	2b04      	cmp	r3, #4
 800e596:	f200 8136 	bhi.w	800e806 <USER_SPI_ioctl+0x2a6>
 800e59a:	a201      	add	r2, pc, #4	@ (adr r2, 800e5a0 <USER_SPI_ioctl+0x40>)
 800e59c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5a0:	0800e5b5 	.word	0x0800e5b5
 800e5a4:	0800e5c9 	.word	0x0800e5c9
 800e5a8:	0800e807 	.word	0x0800e807
 800e5ac:	0800e675 	.word	0x0800e675
 800e5b0:	0800e76b 	.word	0x0800e76b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800e5b4:	f7ff fd02 	bl	800dfbc <spiselect>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	f000 8127 	beq.w	800e80e <USER_SPI_ioctl+0x2ae>
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800e5c6:	e122      	b.n	800e80e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800e5c8:	2100      	movs	r1, #0
 800e5ca:	2009      	movs	r0, #9
 800e5cc:	f7ff fd6d 	bl	800e0aa <send_cmd>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	f040 811d 	bne.w	800e812 <USER_SPI_ioctl+0x2b2>
 800e5d8:	f107 030c 	add.w	r3, r7, #12
 800e5dc:	2110      	movs	r1, #16
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f7ff fd08 	bl	800dff4 <rcvr_datablock>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	f000 8113 	beq.w	800e812 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800e5ec:	7b3b      	ldrb	r3, [r7, #12]
 800e5ee:	099b      	lsrs	r3, r3, #6
 800e5f0:	b2db      	uxtb	r3, r3
 800e5f2:	2b01      	cmp	r3, #1
 800e5f4:	d111      	bne.n	800e61a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800e5f6:	7d7b      	ldrb	r3, [r7, #21]
 800e5f8:	461a      	mov	r2, r3
 800e5fa:	7d3b      	ldrb	r3, [r7, #20]
 800e5fc:	021b      	lsls	r3, r3, #8
 800e5fe:	4413      	add	r3, r2
 800e600:	461a      	mov	r2, r3
 800e602:	7cfb      	ldrb	r3, [r7, #19]
 800e604:	041b      	lsls	r3, r3, #16
 800e606:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800e60a:	4413      	add	r3, r2
 800e60c:	3301      	adds	r3, #1
 800e60e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800e610:	69fb      	ldr	r3, [r7, #28]
 800e612:	029a      	lsls	r2, r3, #10
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	601a      	str	r2, [r3, #0]
 800e618:	e028      	b.n	800e66c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800e61a:	7c7b      	ldrb	r3, [r7, #17]
 800e61c:	f003 030f 	and.w	r3, r3, #15
 800e620:	b2da      	uxtb	r2, r3
 800e622:	7dbb      	ldrb	r3, [r7, #22]
 800e624:	09db      	lsrs	r3, r3, #7
 800e626:	b2db      	uxtb	r3, r3
 800e628:	4413      	add	r3, r2
 800e62a:	b2da      	uxtb	r2, r3
 800e62c:	7d7b      	ldrb	r3, [r7, #21]
 800e62e:	005b      	lsls	r3, r3, #1
 800e630:	b2db      	uxtb	r3, r3
 800e632:	f003 0306 	and.w	r3, r3, #6
 800e636:	b2db      	uxtb	r3, r3
 800e638:	4413      	add	r3, r2
 800e63a:	b2db      	uxtb	r3, r3
 800e63c:	3302      	adds	r3, #2
 800e63e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800e642:	7d3b      	ldrb	r3, [r7, #20]
 800e644:	099b      	lsrs	r3, r3, #6
 800e646:	b2db      	uxtb	r3, r3
 800e648:	461a      	mov	r2, r3
 800e64a:	7cfb      	ldrb	r3, [r7, #19]
 800e64c:	009b      	lsls	r3, r3, #2
 800e64e:	441a      	add	r2, r3
 800e650:	7cbb      	ldrb	r3, [r7, #18]
 800e652:	029b      	lsls	r3, r3, #10
 800e654:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800e658:	4413      	add	r3, r2
 800e65a:	3301      	adds	r3, #1
 800e65c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800e65e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e662:	3b09      	subs	r3, #9
 800e664:	69fa      	ldr	r2, [r7, #28]
 800e666:	409a      	lsls	r2, r3
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800e66c:	2300      	movs	r3, #0
 800e66e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800e672:	e0ce      	b.n	800e812 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800e674:	4b71      	ldr	r3, [pc, #452]	@ (800e83c <USER_SPI_ioctl+0x2dc>)
 800e676:	781b      	ldrb	r3, [r3, #0]
 800e678:	f003 0304 	and.w	r3, r3, #4
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d031      	beq.n	800e6e4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800e680:	2100      	movs	r1, #0
 800e682:	208d      	movs	r0, #141	@ 0x8d
 800e684:	f7ff fd11 	bl	800e0aa <send_cmd>
 800e688:	4603      	mov	r3, r0
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	f040 80c3 	bne.w	800e816 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800e690:	20ff      	movs	r0, #255	@ 0xff
 800e692:	f7ff fc19 	bl	800dec8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800e696:	f107 030c 	add.w	r3, r7, #12
 800e69a:	2110      	movs	r1, #16
 800e69c:	4618      	mov	r0, r3
 800e69e:	f7ff fca9 	bl	800dff4 <rcvr_datablock>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	f000 80b6 	beq.w	800e816 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800e6aa:	2330      	movs	r3, #48	@ 0x30
 800e6ac:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800e6b0:	e007      	b.n	800e6c2 <USER_SPI_ioctl+0x162>
 800e6b2:	20ff      	movs	r0, #255	@ 0xff
 800e6b4:	f7ff fc08 	bl	800dec8 <xchg_spi>
 800e6b8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e6bc:	3b01      	subs	r3, #1
 800e6be:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800e6c2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d1f3      	bne.n	800e6b2 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800e6ca:	7dbb      	ldrb	r3, [r7, #22]
 800e6cc:	091b      	lsrs	r3, r3, #4
 800e6ce:	b2db      	uxtb	r3, r3
 800e6d0:	461a      	mov	r2, r3
 800e6d2:	2310      	movs	r3, #16
 800e6d4:	fa03 f202 	lsl.w	r2, r3, r2
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800e6e2:	e098      	b.n	800e816 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800e6e4:	2100      	movs	r1, #0
 800e6e6:	2009      	movs	r0, #9
 800e6e8:	f7ff fcdf 	bl	800e0aa <send_cmd>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	f040 8091 	bne.w	800e816 <USER_SPI_ioctl+0x2b6>
 800e6f4:	f107 030c 	add.w	r3, r7, #12
 800e6f8:	2110      	movs	r1, #16
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f7ff fc7a 	bl	800dff4 <rcvr_datablock>
 800e700:	4603      	mov	r3, r0
 800e702:	2b00      	cmp	r3, #0
 800e704:	f000 8087 	beq.w	800e816 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800e708:	4b4c      	ldr	r3, [pc, #304]	@ (800e83c <USER_SPI_ioctl+0x2dc>)
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	f003 0302 	and.w	r3, r3, #2
 800e710:	2b00      	cmp	r3, #0
 800e712:	d012      	beq.n	800e73a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800e714:	7dbb      	ldrb	r3, [r7, #22]
 800e716:	005b      	lsls	r3, r3, #1
 800e718:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800e71c:	7dfa      	ldrb	r2, [r7, #23]
 800e71e:	09d2      	lsrs	r2, r2, #7
 800e720:	b2d2      	uxtb	r2, r2
 800e722:	4413      	add	r3, r2
 800e724:	1c5a      	adds	r2, r3, #1
 800e726:	7e7b      	ldrb	r3, [r7, #25]
 800e728:	099b      	lsrs	r3, r3, #6
 800e72a:	b2db      	uxtb	r3, r3
 800e72c:	3b01      	subs	r3, #1
 800e72e:	fa02 f303 	lsl.w	r3, r2, r3
 800e732:	461a      	mov	r2, r3
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	601a      	str	r2, [r3, #0]
 800e738:	e013      	b.n	800e762 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800e73a:	7dbb      	ldrb	r3, [r7, #22]
 800e73c:	109b      	asrs	r3, r3, #2
 800e73e:	b29b      	uxth	r3, r3
 800e740:	f003 031f 	and.w	r3, r3, #31
 800e744:	3301      	adds	r3, #1
 800e746:	7dfa      	ldrb	r2, [r7, #23]
 800e748:	00d2      	lsls	r2, r2, #3
 800e74a:	f002 0218 	and.w	r2, r2, #24
 800e74e:	7df9      	ldrb	r1, [r7, #23]
 800e750:	0949      	lsrs	r1, r1, #5
 800e752:	b2c9      	uxtb	r1, r1
 800e754:	440a      	add	r2, r1
 800e756:	3201      	adds	r2, #1
 800e758:	fb02 f303 	mul.w	r3, r2, r3
 800e75c:	461a      	mov	r2, r3
 800e75e:	683b      	ldr	r3, [r7, #0]
 800e760:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800e762:	2300      	movs	r3, #0
 800e764:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800e768:	e055      	b.n	800e816 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800e76a:	4b34      	ldr	r3, [pc, #208]	@ (800e83c <USER_SPI_ioctl+0x2dc>)
 800e76c:	781b      	ldrb	r3, [r3, #0]
 800e76e:	f003 0306 	and.w	r3, r3, #6
 800e772:	2b00      	cmp	r3, #0
 800e774:	d051      	beq.n	800e81a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800e776:	f107 020c 	add.w	r2, r7, #12
 800e77a:	79fb      	ldrb	r3, [r7, #7]
 800e77c:	210b      	movs	r1, #11
 800e77e:	4618      	mov	r0, r3
 800e780:	f7ff feee 	bl	800e560 <USER_SPI_ioctl>
 800e784:	4603      	mov	r3, r0
 800e786:	2b00      	cmp	r3, #0
 800e788:	d149      	bne.n	800e81e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800e78a:	7b3b      	ldrb	r3, [r7, #12]
 800e78c:	099b      	lsrs	r3, r3, #6
 800e78e:	b2db      	uxtb	r3, r3
 800e790:	2b00      	cmp	r3, #0
 800e792:	d104      	bne.n	800e79e <USER_SPI_ioctl+0x23e>
 800e794:	7dbb      	ldrb	r3, [r7, #22]
 800e796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d041      	beq.n	800e822 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	623b      	str	r3, [r7, #32]
 800e7a2:	6a3b      	ldr	r3, [r7, #32]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e7a8:	6a3b      	ldr	r3, [r7, #32]
 800e7aa:	685b      	ldr	r3, [r3, #4]
 800e7ac:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800e7ae:	4b23      	ldr	r3, [pc, #140]	@ (800e83c <USER_SPI_ioctl+0x2dc>)
 800e7b0:	781b      	ldrb	r3, [r3, #0]
 800e7b2:	f003 0308 	and.w	r3, r3, #8
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d105      	bne.n	800e7c6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800e7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7bc:	025b      	lsls	r3, r3, #9
 800e7be:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7c2:	025b      	lsls	r3, r3, #9
 800e7c4:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800e7c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e7c8:	2020      	movs	r0, #32
 800e7ca:	f7ff fc6e 	bl	800e0aa <send_cmd>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d128      	bne.n	800e826 <USER_SPI_ioctl+0x2c6>
 800e7d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e7d6:	2021      	movs	r0, #33	@ 0x21
 800e7d8:	f7ff fc67 	bl	800e0aa <send_cmd>
 800e7dc:	4603      	mov	r3, r0
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d121      	bne.n	800e826 <USER_SPI_ioctl+0x2c6>
 800e7e2:	2100      	movs	r1, #0
 800e7e4:	2026      	movs	r0, #38	@ 0x26
 800e7e6:	f7ff fc60 	bl	800e0aa <send_cmd>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d11a      	bne.n	800e826 <USER_SPI_ioctl+0x2c6>
 800e7f0:	f247 5030 	movw	r0, #30000	@ 0x7530
 800e7f4:	f7ff fbae 	bl	800df54 <wait_ready>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d013      	beq.n	800e826 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800e7fe:	2300      	movs	r3, #0
 800e800:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800e804:	e00f      	b.n	800e826 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800e806:	2304      	movs	r3, #4
 800e808:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800e80c:	e00c      	b.n	800e828 <USER_SPI_ioctl+0x2c8>
		break;
 800e80e:	bf00      	nop
 800e810:	e00a      	b.n	800e828 <USER_SPI_ioctl+0x2c8>
		break;
 800e812:	bf00      	nop
 800e814:	e008      	b.n	800e828 <USER_SPI_ioctl+0x2c8>
		break;
 800e816:	bf00      	nop
 800e818:	e006      	b.n	800e828 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800e81a:	bf00      	nop
 800e81c:	e004      	b.n	800e828 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800e81e:	bf00      	nop
 800e820:	e002      	b.n	800e828 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800e822:	bf00      	nop
 800e824:	e000      	b.n	800e828 <USER_SPI_ioctl+0x2c8>
		break;
 800e826:	bf00      	nop
	}

	despiselect();
 800e828:	f7ff fbb8 	bl	800df9c <despiselect>

	return res;
 800e82c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800e830:	4618      	mov	r0, r3
 800e832:	3730      	adds	r7, #48	@ 0x30
 800e834:	46bd      	mov	sp, r7
 800e836:	bd80      	pop	{r7, pc}
 800e838:	20000074 	.word	0x20000074
 800e83c:	20005b88 	.word	0x20005b88

0800e840 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b084      	sub	sp, #16
 800e844:	af00      	add	r7, sp, #0
 800e846:	4603      	mov	r3, r0
 800e848:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e84a:	79fb      	ldrb	r3, [r7, #7]
 800e84c:	4a08      	ldr	r2, [pc, #32]	@ (800e870 <disk_status+0x30>)
 800e84e:	009b      	lsls	r3, r3, #2
 800e850:	4413      	add	r3, r2
 800e852:	685b      	ldr	r3, [r3, #4]
 800e854:	685b      	ldr	r3, [r3, #4]
 800e856:	79fa      	ldrb	r2, [r7, #7]
 800e858:	4905      	ldr	r1, [pc, #20]	@ (800e870 <disk_status+0x30>)
 800e85a:	440a      	add	r2, r1
 800e85c:	7a12      	ldrb	r2, [r2, #8]
 800e85e:	4610      	mov	r0, r2
 800e860:	4798      	blx	r3
 800e862:	4603      	mov	r3, r0
 800e864:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e866:	7bfb      	ldrb	r3, [r7, #15]
}
 800e868:	4618      	mov	r0, r3
 800e86a:	3710      	adds	r7, #16
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}
 800e870:	20005bbc 	.word	0x20005bbc

0800e874 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b084      	sub	sp, #16
 800e878:	af00      	add	r7, sp, #0
 800e87a:	4603      	mov	r3, r0
 800e87c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e87e:	2300      	movs	r3, #0
 800e880:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e882:	79fb      	ldrb	r3, [r7, #7]
 800e884:	4a0d      	ldr	r2, [pc, #52]	@ (800e8bc <disk_initialize+0x48>)
 800e886:	5cd3      	ldrb	r3, [r2, r3]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d111      	bne.n	800e8b0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e88c:	79fb      	ldrb	r3, [r7, #7]
 800e88e:	4a0b      	ldr	r2, [pc, #44]	@ (800e8bc <disk_initialize+0x48>)
 800e890:	2101      	movs	r1, #1
 800e892:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e894:	79fb      	ldrb	r3, [r7, #7]
 800e896:	4a09      	ldr	r2, [pc, #36]	@ (800e8bc <disk_initialize+0x48>)
 800e898:	009b      	lsls	r3, r3, #2
 800e89a:	4413      	add	r3, r2
 800e89c:	685b      	ldr	r3, [r3, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	79fa      	ldrb	r2, [r7, #7]
 800e8a2:	4906      	ldr	r1, [pc, #24]	@ (800e8bc <disk_initialize+0x48>)
 800e8a4:	440a      	add	r2, r1
 800e8a6:	7a12      	ldrb	r2, [r2, #8]
 800e8a8:	4610      	mov	r0, r2
 800e8aa:	4798      	blx	r3
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e8b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3710      	adds	r7, #16
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}
 800e8ba:	bf00      	nop
 800e8bc:	20005bbc 	.word	0x20005bbc

0800e8c0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e8c0:	b590      	push	{r4, r7, lr}
 800e8c2:	b087      	sub	sp, #28
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	60b9      	str	r1, [r7, #8]
 800e8c8:	607a      	str	r2, [r7, #4]
 800e8ca:	603b      	str	r3, [r7, #0]
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e8d0:	7bfb      	ldrb	r3, [r7, #15]
 800e8d2:	4a0a      	ldr	r2, [pc, #40]	@ (800e8fc <disk_read+0x3c>)
 800e8d4:	009b      	lsls	r3, r3, #2
 800e8d6:	4413      	add	r3, r2
 800e8d8:	685b      	ldr	r3, [r3, #4]
 800e8da:	689c      	ldr	r4, [r3, #8]
 800e8dc:	7bfb      	ldrb	r3, [r7, #15]
 800e8de:	4a07      	ldr	r2, [pc, #28]	@ (800e8fc <disk_read+0x3c>)
 800e8e0:	4413      	add	r3, r2
 800e8e2:	7a18      	ldrb	r0, [r3, #8]
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	687a      	ldr	r2, [r7, #4]
 800e8e8:	68b9      	ldr	r1, [r7, #8]
 800e8ea:	47a0      	blx	r4
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	75fb      	strb	r3, [r7, #23]
  return res;
 800e8f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	371c      	adds	r7, #28
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd90      	pop	{r4, r7, pc}
 800e8fa:	bf00      	nop
 800e8fc:	20005bbc 	.word	0x20005bbc

0800e900 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e900:	b590      	push	{r4, r7, lr}
 800e902:	b087      	sub	sp, #28
 800e904:	af00      	add	r7, sp, #0
 800e906:	60b9      	str	r1, [r7, #8]
 800e908:	607a      	str	r2, [r7, #4]
 800e90a:	603b      	str	r3, [r7, #0]
 800e90c:	4603      	mov	r3, r0
 800e90e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e910:	7bfb      	ldrb	r3, [r7, #15]
 800e912:	4a0a      	ldr	r2, [pc, #40]	@ (800e93c <disk_write+0x3c>)
 800e914:	009b      	lsls	r3, r3, #2
 800e916:	4413      	add	r3, r2
 800e918:	685b      	ldr	r3, [r3, #4]
 800e91a:	68dc      	ldr	r4, [r3, #12]
 800e91c:	7bfb      	ldrb	r3, [r7, #15]
 800e91e:	4a07      	ldr	r2, [pc, #28]	@ (800e93c <disk_write+0x3c>)
 800e920:	4413      	add	r3, r2
 800e922:	7a18      	ldrb	r0, [r3, #8]
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	687a      	ldr	r2, [r7, #4]
 800e928:	68b9      	ldr	r1, [r7, #8]
 800e92a:	47a0      	blx	r4
 800e92c:	4603      	mov	r3, r0
 800e92e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e930:	7dfb      	ldrb	r3, [r7, #23]
}
 800e932:	4618      	mov	r0, r3
 800e934:	371c      	adds	r7, #28
 800e936:	46bd      	mov	sp, r7
 800e938:	bd90      	pop	{r4, r7, pc}
 800e93a:	bf00      	nop
 800e93c:	20005bbc 	.word	0x20005bbc

0800e940 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b084      	sub	sp, #16
 800e944:	af00      	add	r7, sp, #0
 800e946:	4603      	mov	r3, r0
 800e948:	603a      	str	r2, [r7, #0]
 800e94a:	71fb      	strb	r3, [r7, #7]
 800e94c:	460b      	mov	r3, r1
 800e94e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e950:	79fb      	ldrb	r3, [r7, #7]
 800e952:	4a09      	ldr	r2, [pc, #36]	@ (800e978 <disk_ioctl+0x38>)
 800e954:	009b      	lsls	r3, r3, #2
 800e956:	4413      	add	r3, r2
 800e958:	685b      	ldr	r3, [r3, #4]
 800e95a:	691b      	ldr	r3, [r3, #16]
 800e95c:	79fa      	ldrb	r2, [r7, #7]
 800e95e:	4906      	ldr	r1, [pc, #24]	@ (800e978 <disk_ioctl+0x38>)
 800e960:	440a      	add	r2, r1
 800e962:	7a10      	ldrb	r0, [r2, #8]
 800e964:	79b9      	ldrb	r1, [r7, #6]
 800e966:	683a      	ldr	r2, [r7, #0]
 800e968:	4798      	blx	r3
 800e96a:	4603      	mov	r3, r0
 800e96c:	73fb      	strb	r3, [r7, #15]
  return res;
 800e96e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e970:	4618      	mov	r0, r3
 800e972:	3710      	adds	r7, #16
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}
 800e978:	20005bbc 	.word	0x20005bbc

0800e97c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e97c:	b480      	push	{r7}
 800e97e:	b085      	sub	sp, #20
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	3301      	adds	r3, #1
 800e988:	781b      	ldrb	r3, [r3, #0]
 800e98a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e98c:	89fb      	ldrh	r3, [r7, #14]
 800e98e:	021b      	lsls	r3, r3, #8
 800e990:	b21a      	sxth	r2, r3
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	781b      	ldrb	r3, [r3, #0]
 800e996:	b21b      	sxth	r3, r3
 800e998:	4313      	orrs	r3, r2
 800e99a:	b21b      	sxth	r3, r3
 800e99c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e99e:	89fb      	ldrh	r3, [r7, #14]
}
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	3714      	adds	r7, #20
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9aa:	4770      	bx	lr

0800e9ac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e9ac:	b480      	push	{r7}
 800e9ae:	b085      	sub	sp, #20
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	3303      	adds	r3, #3
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	021b      	lsls	r3, r3, #8
 800e9c0:	687a      	ldr	r2, [r7, #4]
 800e9c2:	3202      	adds	r2, #2
 800e9c4:	7812      	ldrb	r2, [r2, #0]
 800e9c6:	4313      	orrs	r3, r2
 800e9c8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	021b      	lsls	r3, r3, #8
 800e9ce:	687a      	ldr	r2, [r7, #4]
 800e9d0:	3201      	adds	r2, #1
 800e9d2:	7812      	ldrb	r2, [r2, #0]
 800e9d4:	4313      	orrs	r3, r2
 800e9d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	021b      	lsls	r3, r3, #8
 800e9dc:	687a      	ldr	r2, [r7, #4]
 800e9de:	7812      	ldrb	r2, [r2, #0]
 800e9e0:	4313      	orrs	r3, r2
 800e9e2:	60fb      	str	r3, [r7, #12]
	return rv;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3714      	adds	r7, #20
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f0:	4770      	bx	lr

0800e9f2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e9f2:	b480      	push	{r7}
 800e9f4:	b083      	sub	sp, #12
 800e9f6:	af00      	add	r7, sp, #0
 800e9f8:	6078      	str	r0, [r7, #4]
 800e9fa:	460b      	mov	r3, r1
 800e9fc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	1c5a      	adds	r2, r3, #1
 800ea02:	607a      	str	r2, [r7, #4]
 800ea04:	887a      	ldrh	r2, [r7, #2]
 800ea06:	b2d2      	uxtb	r2, r2
 800ea08:	701a      	strb	r2, [r3, #0]
 800ea0a:	887b      	ldrh	r3, [r7, #2]
 800ea0c:	0a1b      	lsrs	r3, r3, #8
 800ea0e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	1c5a      	adds	r2, r3, #1
 800ea14:	607a      	str	r2, [r7, #4]
 800ea16:	887a      	ldrh	r2, [r7, #2]
 800ea18:	b2d2      	uxtb	r2, r2
 800ea1a:	701a      	strb	r2, [r3, #0]
}
 800ea1c:	bf00      	nop
 800ea1e:	370c      	adds	r7, #12
 800ea20:	46bd      	mov	sp, r7
 800ea22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea26:	4770      	bx	lr

0800ea28 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ea28:	b480      	push	{r7}
 800ea2a:	b083      	sub	sp, #12
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
 800ea30:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	1c5a      	adds	r2, r3, #1
 800ea36:	607a      	str	r2, [r7, #4]
 800ea38:	683a      	ldr	r2, [r7, #0]
 800ea3a:	b2d2      	uxtb	r2, r2
 800ea3c:	701a      	strb	r2, [r3, #0]
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	0a1b      	lsrs	r3, r3, #8
 800ea42:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	1c5a      	adds	r2, r3, #1
 800ea48:	607a      	str	r2, [r7, #4]
 800ea4a:	683a      	ldr	r2, [r7, #0]
 800ea4c:	b2d2      	uxtb	r2, r2
 800ea4e:	701a      	strb	r2, [r3, #0]
 800ea50:	683b      	ldr	r3, [r7, #0]
 800ea52:	0a1b      	lsrs	r3, r3, #8
 800ea54:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	1c5a      	adds	r2, r3, #1
 800ea5a:	607a      	str	r2, [r7, #4]
 800ea5c:	683a      	ldr	r2, [r7, #0]
 800ea5e:	b2d2      	uxtb	r2, r2
 800ea60:	701a      	strb	r2, [r3, #0]
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	0a1b      	lsrs	r3, r3, #8
 800ea66:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	1c5a      	adds	r2, r3, #1
 800ea6c:	607a      	str	r2, [r7, #4]
 800ea6e:	683a      	ldr	r2, [r7, #0]
 800ea70:	b2d2      	uxtb	r2, r2
 800ea72:	701a      	strb	r2, [r3, #0]
}
 800ea74:	bf00      	nop
 800ea76:	370c      	adds	r7, #12
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7e:	4770      	bx	lr

0800ea80 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ea80:	b480      	push	{r7}
 800ea82:	b087      	sub	sp, #28
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	60f8      	str	r0, [r7, #12]
 800ea88:	60b9      	str	r1, [r7, #8]
 800ea8a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d00d      	beq.n	800eab6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ea9a:	693a      	ldr	r2, [r7, #16]
 800ea9c:	1c53      	adds	r3, r2, #1
 800ea9e:	613b      	str	r3, [r7, #16]
 800eaa0:	697b      	ldr	r3, [r7, #20]
 800eaa2:	1c59      	adds	r1, r3, #1
 800eaa4:	6179      	str	r1, [r7, #20]
 800eaa6:	7812      	ldrb	r2, [r2, #0]
 800eaa8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	3b01      	subs	r3, #1
 800eaae:	607b      	str	r3, [r7, #4]
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d1f1      	bne.n	800ea9a <mem_cpy+0x1a>
	}
}
 800eab6:	bf00      	nop
 800eab8:	371c      	adds	r7, #28
 800eaba:	46bd      	mov	sp, r7
 800eabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac0:	4770      	bx	lr

0800eac2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800eac2:	b480      	push	{r7}
 800eac4:	b087      	sub	sp, #28
 800eac6:	af00      	add	r7, sp, #0
 800eac8:	60f8      	str	r0, [r7, #12]
 800eaca:	60b9      	str	r1, [r7, #8]
 800eacc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ead2:	697b      	ldr	r3, [r7, #20]
 800ead4:	1c5a      	adds	r2, r3, #1
 800ead6:	617a      	str	r2, [r7, #20]
 800ead8:	68ba      	ldr	r2, [r7, #8]
 800eada:	b2d2      	uxtb	r2, r2
 800eadc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	3b01      	subs	r3, #1
 800eae2:	607b      	str	r3, [r7, #4]
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d1f3      	bne.n	800ead2 <mem_set+0x10>
}
 800eaea:	bf00      	nop
 800eaec:	bf00      	nop
 800eaee:	371c      	adds	r7, #28
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf6:	4770      	bx	lr

0800eaf8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800eaf8:	b480      	push	{r7}
 800eafa:	b089      	sub	sp, #36	@ 0x24
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	60f8      	str	r0, [r7, #12]
 800eb00:	60b9      	str	r1, [r7, #8]
 800eb02:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	61fb      	str	r3, [r7, #28]
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800eb10:	69fb      	ldr	r3, [r7, #28]
 800eb12:	1c5a      	adds	r2, r3, #1
 800eb14:	61fa      	str	r2, [r7, #28]
 800eb16:	781b      	ldrb	r3, [r3, #0]
 800eb18:	4619      	mov	r1, r3
 800eb1a:	69bb      	ldr	r3, [r7, #24]
 800eb1c:	1c5a      	adds	r2, r3, #1
 800eb1e:	61ba      	str	r2, [r7, #24]
 800eb20:	781b      	ldrb	r3, [r3, #0]
 800eb22:	1acb      	subs	r3, r1, r3
 800eb24:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	3b01      	subs	r3, #1
 800eb2a:	607b      	str	r3, [r7, #4]
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d002      	beq.n	800eb38 <mem_cmp+0x40>
 800eb32:	697b      	ldr	r3, [r7, #20]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d0eb      	beq.n	800eb10 <mem_cmp+0x18>

	return r;
 800eb38:	697b      	ldr	r3, [r7, #20]
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	3724      	adds	r7, #36	@ 0x24
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb44:	4770      	bx	lr

0800eb46 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800eb46:	b480      	push	{r7}
 800eb48:	b083      	sub	sp, #12
 800eb4a:	af00      	add	r7, sp, #0
 800eb4c:	6078      	str	r0, [r7, #4]
 800eb4e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800eb50:	e002      	b.n	800eb58 <chk_chr+0x12>
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	3301      	adds	r3, #1
 800eb56:	607b      	str	r3, [r7, #4]
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	781b      	ldrb	r3, [r3, #0]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d005      	beq.n	800eb6c <chk_chr+0x26>
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	781b      	ldrb	r3, [r3, #0]
 800eb64:	461a      	mov	r2, r3
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	4293      	cmp	r3, r2
 800eb6a:	d1f2      	bne.n	800eb52 <chk_chr+0xc>
	return *str;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	781b      	ldrb	r3, [r3, #0]
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	370c      	adds	r7, #12
 800eb74:	46bd      	mov	sp, r7
 800eb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7a:	4770      	bx	lr

0800eb7c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b082      	sub	sp, #8
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d009      	beq.n	800eb9e <lock_fs+0x22>
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	691b      	ldr	r3, [r3, #16]
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f003 fb82 	bl	8012298 <ff_req_grant>
 800eb94:	4603      	mov	r3, r0
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d001      	beq.n	800eb9e <lock_fs+0x22>
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	e000      	b.n	800eba0 <lock_fs+0x24>
 800eb9e:	2300      	movs	r3, #0
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	3708      	adds	r7, #8
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}

0800eba8 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b082      	sub	sp, #8
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
 800ebb0:	460b      	mov	r3, r1
 800ebb2:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d00d      	beq.n	800ebd6 <unlock_fs+0x2e>
 800ebba:	78fb      	ldrb	r3, [r7, #3]
 800ebbc:	2b0c      	cmp	r3, #12
 800ebbe:	d00a      	beq.n	800ebd6 <unlock_fs+0x2e>
 800ebc0:	78fb      	ldrb	r3, [r7, #3]
 800ebc2:	2b0b      	cmp	r3, #11
 800ebc4:	d007      	beq.n	800ebd6 <unlock_fs+0x2e>
 800ebc6:	78fb      	ldrb	r3, [r7, #3]
 800ebc8:	2b0f      	cmp	r3, #15
 800ebca:	d004      	beq.n	800ebd6 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	691b      	ldr	r3, [r3, #16]
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f003 fb76 	bl	80122c2 <ff_rel_grant>
	}
}
 800ebd6:	bf00      	nop
 800ebd8:	3708      	adds	r7, #8
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bd80      	pop	{r7, pc}
	...

0800ebe0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ebe0:	b480      	push	{r7}
 800ebe2:	b085      	sub	sp, #20
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
 800ebe8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ebea:	2300      	movs	r3, #0
 800ebec:	60bb      	str	r3, [r7, #8]
 800ebee:	68bb      	ldr	r3, [r7, #8]
 800ebf0:	60fb      	str	r3, [r7, #12]
 800ebf2:	e029      	b.n	800ec48 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ebf4:	4a27      	ldr	r2, [pc, #156]	@ (800ec94 <chk_lock+0xb4>)
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	011b      	lsls	r3, r3, #4
 800ebfa:	4413      	add	r3, r2
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d01d      	beq.n	800ec3e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ec02:	4a24      	ldr	r2, [pc, #144]	@ (800ec94 <chk_lock+0xb4>)
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	011b      	lsls	r3, r3, #4
 800ec08:	4413      	add	r3, r2
 800ec0a:	681a      	ldr	r2, [r3, #0]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d116      	bne.n	800ec42 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ec14:	4a1f      	ldr	r2, [pc, #124]	@ (800ec94 <chk_lock+0xb4>)
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	011b      	lsls	r3, r3, #4
 800ec1a:	4413      	add	r3, r2
 800ec1c:	3304      	adds	r3, #4
 800ec1e:	681a      	ldr	r2, [r3, #0]
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ec24:	429a      	cmp	r2, r3
 800ec26:	d10c      	bne.n	800ec42 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ec28:	4a1a      	ldr	r2, [pc, #104]	@ (800ec94 <chk_lock+0xb4>)
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	011b      	lsls	r3, r3, #4
 800ec2e:	4413      	add	r3, r2
 800ec30:	3308      	adds	r3, #8
 800ec32:	681a      	ldr	r2, [r3, #0]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	d102      	bne.n	800ec42 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ec3c:	e007      	b.n	800ec4e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ec3e:	2301      	movs	r3, #1
 800ec40:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	3301      	adds	r3, #1
 800ec46:	60fb      	str	r3, [r7, #12]
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	2b01      	cmp	r3, #1
 800ec4c:	d9d2      	bls.n	800ebf4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	2b02      	cmp	r3, #2
 800ec52:	d109      	bne.n	800ec68 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d102      	bne.n	800ec60 <chk_lock+0x80>
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	2b02      	cmp	r3, #2
 800ec5e:	d101      	bne.n	800ec64 <chk_lock+0x84>
 800ec60:	2300      	movs	r3, #0
 800ec62:	e010      	b.n	800ec86 <chk_lock+0xa6>
 800ec64:	2312      	movs	r3, #18
 800ec66:	e00e      	b.n	800ec86 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d108      	bne.n	800ec80 <chk_lock+0xa0>
 800ec6e:	4a09      	ldr	r2, [pc, #36]	@ (800ec94 <chk_lock+0xb4>)
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	011b      	lsls	r3, r3, #4
 800ec74:	4413      	add	r3, r2
 800ec76:	330c      	adds	r3, #12
 800ec78:	881b      	ldrh	r3, [r3, #0]
 800ec7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ec7e:	d101      	bne.n	800ec84 <chk_lock+0xa4>
 800ec80:	2310      	movs	r3, #16
 800ec82:	e000      	b.n	800ec86 <chk_lock+0xa6>
 800ec84:	2300      	movs	r3, #0
}
 800ec86:	4618      	mov	r0, r3
 800ec88:	3714      	adds	r7, #20
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec90:	4770      	bx	lr
 800ec92:	bf00      	nop
 800ec94:	20005b9c 	.word	0x20005b9c

0800ec98 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b083      	sub	sp, #12
 800ec9c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	607b      	str	r3, [r7, #4]
 800eca2:	e002      	b.n	800ecaa <enq_lock+0x12>
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	3301      	adds	r3, #1
 800eca8:	607b      	str	r3, [r7, #4]
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2b01      	cmp	r3, #1
 800ecae:	d806      	bhi.n	800ecbe <enq_lock+0x26>
 800ecb0:	4a09      	ldr	r2, [pc, #36]	@ (800ecd8 <enq_lock+0x40>)
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	011b      	lsls	r3, r3, #4
 800ecb6:	4413      	add	r3, r2
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d1f2      	bne.n	800eca4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2b02      	cmp	r3, #2
 800ecc2:	bf14      	ite	ne
 800ecc4:	2301      	movne	r3, #1
 800ecc6:	2300      	moveq	r3, #0
 800ecc8:	b2db      	uxtb	r3, r3
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	370c      	adds	r7, #12
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd4:	4770      	bx	lr
 800ecd6:	bf00      	nop
 800ecd8:	20005b9c 	.word	0x20005b9c

0800ecdc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ecdc:	b480      	push	{r7}
 800ecde:	b085      	sub	sp, #20
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
 800ece4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ece6:	2300      	movs	r3, #0
 800ece8:	60fb      	str	r3, [r7, #12]
 800ecea:	e01f      	b.n	800ed2c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ecec:	4a41      	ldr	r2, [pc, #260]	@ (800edf4 <inc_lock+0x118>)
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	011b      	lsls	r3, r3, #4
 800ecf2:	4413      	add	r3, r2
 800ecf4:	681a      	ldr	r2, [r3, #0]
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	429a      	cmp	r2, r3
 800ecfc:	d113      	bne.n	800ed26 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ecfe:	4a3d      	ldr	r2, [pc, #244]	@ (800edf4 <inc_lock+0x118>)
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	011b      	lsls	r3, r3, #4
 800ed04:	4413      	add	r3, r2
 800ed06:	3304      	adds	r3, #4
 800ed08:	681a      	ldr	r2, [r3, #0]
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d109      	bne.n	800ed26 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ed12:	4a38      	ldr	r2, [pc, #224]	@ (800edf4 <inc_lock+0x118>)
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	011b      	lsls	r3, r3, #4
 800ed18:	4413      	add	r3, r2
 800ed1a:	3308      	adds	r3, #8
 800ed1c:	681a      	ldr	r2, [r3, #0]
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ed22:	429a      	cmp	r2, r3
 800ed24:	d006      	beq.n	800ed34 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	3301      	adds	r3, #1
 800ed2a:	60fb      	str	r3, [r7, #12]
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	2b01      	cmp	r3, #1
 800ed30:	d9dc      	bls.n	800ecec <inc_lock+0x10>
 800ed32:	e000      	b.n	800ed36 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ed34:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	2b02      	cmp	r3, #2
 800ed3a:	d132      	bne.n	800eda2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	60fb      	str	r3, [r7, #12]
 800ed40:	e002      	b.n	800ed48 <inc_lock+0x6c>
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	3301      	adds	r3, #1
 800ed46:	60fb      	str	r3, [r7, #12]
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	2b01      	cmp	r3, #1
 800ed4c:	d806      	bhi.n	800ed5c <inc_lock+0x80>
 800ed4e:	4a29      	ldr	r2, [pc, #164]	@ (800edf4 <inc_lock+0x118>)
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	011b      	lsls	r3, r3, #4
 800ed54:	4413      	add	r3, r2
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d1f2      	bne.n	800ed42 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	2b02      	cmp	r3, #2
 800ed60:	d101      	bne.n	800ed66 <inc_lock+0x8a>
 800ed62:	2300      	movs	r3, #0
 800ed64:	e040      	b.n	800ede8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681a      	ldr	r2, [r3, #0]
 800ed6a:	4922      	ldr	r1, [pc, #136]	@ (800edf4 <inc_lock+0x118>)
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	011b      	lsls	r3, r3, #4
 800ed70:	440b      	add	r3, r1
 800ed72:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	689a      	ldr	r2, [r3, #8]
 800ed78:	491e      	ldr	r1, [pc, #120]	@ (800edf4 <inc_lock+0x118>)
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	011b      	lsls	r3, r3, #4
 800ed7e:	440b      	add	r3, r1
 800ed80:	3304      	adds	r3, #4
 800ed82:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	695a      	ldr	r2, [r3, #20]
 800ed88:	491a      	ldr	r1, [pc, #104]	@ (800edf4 <inc_lock+0x118>)
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	011b      	lsls	r3, r3, #4
 800ed8e:	440b      	add	r3, r1
 800ed90:	3308      	adds	r3, #8
 800ed92:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ed94:	4a17      	ldr	r2, [pc, #92]	@ (800edf4 <inc_lock+0x118>)
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	011b      	lsls	r3, r3, #4
 800ed9a:	4413      	add	r3, r2
 800ed9c:	330c      	adds	r3, #12
 800ed9e:	2200      	movs	r2, #0
 800eda0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d009      	beq.n	800edbc <inc_lock+0xe0>
 800eda8:	4a12      	ldr	r2, [pc, #72]	@ (800edf4 <inc_lock+0x118>)
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	011b      	lsls	r3, r3, #4
 800edae:	4413      	add	r3, r2
 800edb0:	330c      	adds	r3, #12
 800edb2:	881b      	ldrh	r3, [r3, #0]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d001      	beq.n	800edbc <inc_lock+0xe0>
 800edb8:	2300      	movs	r3, #0
 800edba:	e015      	b.n	800ede8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d108      	bne.n	800edd4 <inc_lock+0xf8>
 800edc2:	4a0c      	ldr	r2, [pc, #48]	@ (800edf4 <inc_lock+0x118>)
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	011b      	lsls	r3, r3, #4
 800edc8:	4413      	add	r3, r2
 800edca:	330c      	adds	r3, #12
 800edcc:	881b      	ldrh	r3, [r3, #0]
 800edce:	3301      	adds	r3, #1
 800edd0:	b29a      	uxth	r2, r3
 800edd2:	e001      	b.n	800edd8 <inc_lock+0xfc>
 800edd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800edd8:	4906      	ldr	r1, [pc, #24]	@ (800edf4 <inc_lock+0x118>)
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	011b      	lsls	r3, r3, #4
 800edde:	440b      	add	r3, r1
 800ede0:	330c      	adds	r3, #12
 800ede2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	3301      	adds	r3, #1
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3714      	adds	r7, #20
 800edec:	46bd      	mov	sp, r7
 800edee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf2:	4770      	bx	lr
 800edf4:	20005b9c 	.word	0x20005b9c

0800edf8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800edf8:	b480      	push	{r7}
 800edfa:	b085      	sub	sp, #20
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	3b01      	subs	r3, #1
 800ee04:	607b      	str	r3, [r7, #4]
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	2b01      	cmp	r3, #1
 800ee0a:	d825      	bhi.n	800ee58 <dec_lock+0x60>
		n = Files[i].ctr;
 800ee0c:	4a17      	ldr	r2, [pc, #92]	@ (800ee6c <dec_lock+0x74>)
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	011b      	lsls	r3, r3, #4
 800ee12:	4413      	add	r3, r2
 800ee14:	330c      	adds	r3, #12
 800ee16:	881b      	ldrh	r3, [r3, #0]
 800ee18:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ee1a:	89fb      	ldrh	r3, [r7, #14]
 800ee1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ee20:	d101      	bne.n	800ee26 <dec_lock+0x2e>
 800ee22:	2300      	movs	r3, #0
 800ee24:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ee26:	89fb      	ldrh	r3, [r7, #14]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d002      	beq.n	800ee32 <dec_lock+0x3a>
 800ee2c:	89fb      	ldrh	r3, [r7, #14]
 800ee2e:	3b01      	subs	r3, #1
 800ee30:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ee32:	4a0e      	ldr	r2, [pc, #56]	@ (800ee6c <dec_lock+0x74>)
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	011b      	lsls	r3, r3, #4
 800ee38:	4413      	add	r3, r2
 800ee3a:	330c      	adds	r3, #12
 800ee3c:	89fa      	ldrh	r2, [r7, #14]
 800ee3e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ee40:	89fb      	ldrh	r3, [r7, #14]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d105      	bne.n	800ee52 <dec_lock+0x5a>
 800ee46:	4a09      	ldr	r2, [pc, #36]	@ (800ee6c <dec_lock+0x74>)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	011b      	lsls	r3, r3, #4
 800ee4c:	4413      	add	r3, r2
 800ee4e:	2200      	movs	r2, #0
 800ee50:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ee52:	2300      	movs	r3, #0
 800ee54:	737b      	strb	r3, [r7, #13]
 800ee56:	e001      	b.n	800ee5c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ee58:	2302      	movs	r3, #2
 800ee5a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ee5c:	7b7b      	ldrb	r3, [r7, #13]
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	3714      	adds	r7, #20
 800ee62:	46bd      	mov	sp, r7
 800ee64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee68:	4770      	bx	lr
 800ee6a:	bf00      	nop
 800ee6c:	20005b9c 	.word	0x20005b9c

0800ee70 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ee70:	b480      	push	{r7}
 800ee72:	b085      	sub	sp, #20
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ee78:	2300      	movs	r3, #0
 800ee7a:	60fb      	str	r3, [r7, #12]
 800ee7c:	e010      	b.n	800eea0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ee7e:	4a0d      	ldr	r2, [pc, #52]	@ (800eeb4 <clear_lock+0x44>)
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	011b      	lsls	r3, r3, #4
 800ee84:	4413      	add	r3, r2
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	687a      	ldr	r2, [r7, #4]
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	d105      	bne.n	800ee9a <clear_lock+0x2a>
 800ee8e:	4a09      	ldr	r2, [pc, #36]	@ (800eeb4 <clear_lock+0x44>)
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	011b      	lsls	r3, r3, #4
 800ee94:	4413      	add	r3, r2
 800ee96:	2200      	movs	r2, #0
 800ee98:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	3301      	adds	r3, #1
 800ee9e:	60fb      	str	r3, [r7, #12]
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	2b01      	cmp	r3, #1
 800eea4:	d9eb      	bls.n	800ee7e <clear_lock+0xe>
	}
}
 800eea6:	bf00      	nop
 800eea8:	bf00      	nop
 800eeaa:	3714      	adds	r7, #20
 800eeac:	46bd      	mov	sp, r7
 800eeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb2:	4770      	bx	lr
 800eeb4:	20005b9c 	.word	0x20005b9c

0800eeb8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b086      	sub	sp, #24
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800eec0:	2300      	movs	r3, #0
 800eec2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	78db      	ldrb	r3, [r3, #3]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d034      	beq.n	800ef36 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eed0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	7858      	ldrb	r0, [r3, #1]
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800eedc:	2301      	movs	r3, #1
 800eede:	697a      	ldr	r2, [r7, #20]
 800eee0:	f7ff fd0e 	bl	800e900 <disk_write>
 800eee4:	4603      	mov	r3, r0
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d002      	beq.n	800eef0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800eeea:	2301      	movs	r3, #1
 800eeec:	73fb      	strb	r3, [r7, #15]
 800eeee:	e022      	b.n	800ef36 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2200      	movs	r2, #0
 800eef4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eefa:	697a      	ldr	r2, [r7, #20]
 800eefc:	1ad2      	subs	r2, r2, r3
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6a1b      	ldr	r3, [r3, #32]
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d217      	bcs.n	800ef36 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	789b      	ldrb	r3, [r3, #2]
 800ef0a:	613b      	str	r3, [r7, #16]
 800ef0c:	e010      	b.n	800ef30 <sync_window+0x78>
					wsect += fs->fsize;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	6a1b      	ldr	r3, [r3, #32]
 800ef12:	697a      	ldr	r2, [r7, #20]
 800ef14:	4413      	add	r3, r2
 800ef16:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	7858      	ldrb	r0, [r3, #1]
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ef22:	2301      	movs	r3, #1
 800ef24:	697a      	ldr	r2, [r7, #20]
 800ef26:	f7ff fceb 	bl	800e900 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ef2a:	693b      	ldr	r3, [r7, #16]
 800ef2c:	3b01      	subs	r3, #1
 800ef2e:	613b      	str	r3, [r7, #16]
 800ef30:	693b      	ldr	r3, [r7, #16]
 800ef32:	2b01      	cmp	r3, #1
 800ef34:	d8eb      	bhi.n	800ef0e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ef36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3718      	adds	r7, #24
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b084      	sub	sp, #16
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
 800ef48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef52:	683a      	ldr	r2, [r7, #0]
 800ef54:	429a      	cmp	r2, r3
 800ef56:	d01b      	beq.n	800ef90 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ef58:	6878      	ldr	r0, [r7, #4]
 800ef5a:	f7ff ffad 	bl	800eeb8 <sync_window>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ef62:	7bfb      	ldrb	r3, [r7, #15]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d113      	bne.n	800ef90 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	7858      	ldrb	r0, [r3, #1]
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ef72:	2301      	movs	r3, #1
 800ef74:	683a      	ldr	r2, [r7, #0]
 800ef76:	f7ff fca3 	bl	800e8c0 <disk_read>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d004      	beq.n	800ef8a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ef80:	f04f 33ff 	mov.w	r3, #4294967295
 800ef84:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ef86:	2301      	movs	r3, #1
 800ef88:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	683a      	ldr	r2, [r7, #0]
 800ef8e:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800ef90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	3710      	adds	r7, #16
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}
	...

0800ef9c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b084      	sub	sp, #16
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f7ff ff87 	bl	800eeb8 <sync_window>
 800efaa:	4603      	mov	r3, r0
 800efac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800efae:	7bfb      	ldrb	r3, [r7, #15]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d158      	bne.n	800f066 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	781b      	ldrb	r3, [r3, #0]
 800efb8:	2b03      	cmp	r3, #3
 800efba:	d148      	bne.n	800f04e <sync_fs+0xb2>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	791b      	ldrb	r3, [r3, #4]
 800efc0:	2b01      	cmp	r3, #1
 800efc2:	d144      	bne.n	800f04e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	3338      	adds	r3, #56	@ 0x38
 800efc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800efcc:	2100      	movs	r1, #0
 800efce:	4618      	mov	r0, r3
 800efd0:	f7ff fd77 	bl	800eac2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	3338      	adds	r3, #56	@ 0x38
 800efd8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800efdc:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800efe0:	4618      	mov	r0, r3
 800efe2:	f7ff fd06 	bl	800e9f2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	3338      	adds	r3, #56	@ 0x38
 800efea:	4921      	ldr	r1, [pc, #132]	@ (800f070 <sync_fs+0xd4>)
 800efec:	4618      	mov	r0, r3
 800efee:	f7ff fd1b 	bl	800ea28 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	3338      	adds	r3, #56	@ 0x38
 800eff6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800effa:	491e      	ldr	r1, [pc, #120]	@ (800f074 <sync_fs+0xd8>)
 800effc:	4618      	mov	r0, r3
 800effe:	f7ff fd13 	bl	800ea28 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	3338      	adds	r3, #56	@ 0x38
 800f006:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	699b      	ldr	r3, [r3, #24]
 800f00e:	4619      	mov	r1, r3
 800f010:	4610      	mov	r0, r2
 800f012:	f7ff fd09 	bl	800ea28 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	3338      	adds	r3, #56	@ 0x38
 800f01a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	695b      	ldr	r3, [r3, #20]
 800f022:	4619      	mov	r1, r3
 800f024:	4610      	mov	r0, r2
 800f026:	f7ff fcff 	bl	800ea28 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f02e:	1c5a      	adds	r2, r3, #1
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	7858      	ldrb	r0, [r3, #1]
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f042:	2301      	movs	r3, #1
 800f044:	f7ff fc5c 	bl	800e900 <disk_write>
			fs->fsi_flag = 0;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2200      	movs	r2, #0
 800f04c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	785b      	ldrb	r3, [r3, #1]
 800f052:	2200      	movs	r2, #0
 800f054:	2100      	movs	r1, #0
 800f056:	4618      	mov	r0, r3
 800f058:	f7ff fc72 	bl	800e940 <disk_ioctl>
 800f05c:	4603      	mov	r3, r0
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d001      	beq.n	800f066 <sync_fs+0xca>
 800f062:	2301      	movs	r3, #1
 800f064:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f066:	7bfb      	ldrb	r3, [r7, #15]
}
 800f068:	4618      	mov	r0, r3
 800f06a:	3710      	adds	r7, #16
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}
 800f070:	41615252 	.word	0x41615252
 800f074:	61417272 	.word	0x61417272

0800f078 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f078:	b480      	push	{r7}
 800f07a:	b083      	sub	sp, #12
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
 800f080:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	3b02      	subs	r3, #2
 800f086:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	69db      	ldr	r3, [r3, #28]
 800f08c:	3b02      	subs	r3, #2
 800f08e:	683a      	ldr	r2, [r7, #0]
 800f090:	429a      	cmp	r2, r3
 800f092:	d301      	bcc.n	800f098 <clust2sect+0x20>
 800f094:	2300      	movs	r3, #0
 800f096:	e008      	b.n	800f0aa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	895b      	ldrh	r3, [r3, #10]
 800f09c:	461a      	mov	r2, r3
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	fb03 f202 	mul.w	r2, r3, r2
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f0a8:	4413      	add	r3, r2
}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	370c      	adds	r7, #12
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b4:	4770      	bx	lr

0800f0b6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f0b6:	b580      	push	{r7, lr}
 800f0b8:	b086      	sub	sp, #24
 800f0ba:	af00      	add	r7, sp, #0
 800f0bc:	6078      	str	r0, [r7, #4]
 800f0be:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	2b01      	cmp	r3, #1
 800f0ca:	d904      	bls.n	800f0d6 <get_fat+0x20>
 800f0cc:	693b      	ldr	r3, [r7, #16]
 800f0ce:	69db      	ldr	r3, [r3, #28]
 800f0d0:	683a      	ldr	r2, [r7, #0]
 800f0d2:	429a      	cmp	r2, r3
 800f0d4:	d302      	bcc.n	800f0dc <get_fat+0x26>
		val = 1;	/* Internal error */
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	617b      	str	r3, [r7, #20]
 800f0da:	e08e      	b.n	800f1fa <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f0dc:	f04f 33ff 	mov.w	r3, #4294967295
 800f0e0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f0e2:	693b      	ldr	r3, [r7, #16]
 800f0e4:	781b      	ldrb	r3, [r3, #0]
 800f0e6:	2b03      	cmp	r3, #3
 800f0e8:	d061      	beq.n	800f1ae <get_fat+0xf8>
 800f0ea:	2b03      	cmp	r3, #3
 800f0ec:	dc7b      	bgt.n	800f1e6 <get_fat+0x130>
 800f0ee:	2b01      	cmp	r3, #1
 800f0f0:	d002      	beq.n	800f0f8 <get_fat+0x42>
 800f0f2:	2b02      	cmp	r3, #2
 800f0f4:	d041      	beq.n	800f17a <get_fat+0xc4>
 800f0f6:	e076      	b.n	800f1e6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	60fb      	str	r3, [r7, #12]
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	085b      	lsrs	r3, r3, #1
 800f100:	68fa      	ldr	r2, [r7, #12]
 800f102:	4413      	add	r3, r2
 800f104:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f106:	693b      	ldr	r3, [r7, #16]
 800f108:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	0a5b      	lsrs	r3, r3, #9
 800f10e:	4413      	add	r3, r2
 800f110:	4619      	mov	r1, r3
 800f112:	6938      	ldr	r0, [r7, #16]
 800f114:	f7ff ff14 	bl	800ef40 <move_window>
 800f118:	4603      	mov	r3, r0
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d166      	bne.n	800f1ec <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	1c5a      	adds	r2, r3, #1
 800f122:	60fa      	str	r2, [r7, #12]
 800f124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f128:	693a      	ldr	r2, [r7, #16]
 800f12a:	4413      	add	r3, r2
 800f12c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f130:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f132:	693b      	ldr	r3, [r7, #16]
 800f134:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	0a5b      	lsrs	r3, r3, #9
 800f13a:	4413      	add	r3, r2
 800f13c:	4619      	mov	r1, r3
 800f13e:	6938      	ldr	r0, [r7, #16]
 800f140:	f7ff fefe 	bl	800ef40 <move_window>
 800f144:	4603      	mov	r3, r0
 800f146:	2b00      	cmp	r3, #0
 800f148:	d152      	bne.n	800f1f0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f150:	693a      	ldr	r2, [r7, #16]
 800f152:	4413      	add	r3, r2
 800f154:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f158:	021b      	lsls	r3, r3, #8
 800f15a:	68ba      	ldr	r2, [r7, #8]
 800f15c:	4313      	orrs	r3, r2
 800f15e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	f003 0301 	and.w	r3, r3, #1
 800f166:	2b00      	cmp	r3, #0
 800f168:	d002      	beq.n	800f170 <get_fat+0xba>
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	091b      	lsrs	r3, r3, #4
 800f16e:	e002      	b.n	800f176 <get_fat+0xc0>
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f176:	617b      	str	r3, [r7, #20]
			break;
 800f178:	e03f      	b.n	800f1fa <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f17a:	693b      	ldr	r3, [r7, #16]
 800f17c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	0a1b      	lsrs	r3, r3, #8
 800f182:	4413      	add	r3, r2
 800f184:	4619      	mov	r1, r3
 800f186:	6938      	ldr	r0, [r7, #16]
 800f188:	f7ff feda 	bl	800ef40 <move_window>
 800f18c:	4603      	mov	r3, r0
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d130      	bne.n	800f1f4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f192:	693b      	ldr	r3, [r7, #16]
 800f194:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	005b      	lsls	r3, r3, #1
 800f19c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800f1a0:	4413      	add	r3, r2
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f7ff fbea 	bl	800e97c <ld_word>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	617b      	str	r3, [r7, #20]
			break;
 800f1ac:	e025      	b.n	800f1fa <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f1ae:	693b      	ldr	r3, [r7, #16]
 800f1b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	09db      	lsrs	r3, r3, #7
 800f1b6:	4413      	add	r3, r2
 800f1b8:	4619      	mov	r1, r3
 800f1ba:	6938      	ldr	r0, [r7, #16]
 800f1bc:	f7ff fec0 	bl	800ef40 <move_window>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d118      	bne.n	800f1f8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f1c6:	693b      	ldr	r3, [r7, #16]
 800f1c8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	009b      	lsls	r3, r3, #2
 800f1d0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f1d4:	4413      	add	r3, r2
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f7ff fbe8 	bl	800e9ac <ld_dword>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800f1e2:	617b      	str	r3, [r7, #20]
			break;
 800f1e4:	e009      	b.n	800f1fa <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	617b      	str	r3, [r7, #20]
 800f1ea:	e006      	b.n	800f1fa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f1ec:	bf00      	nop
 800f1ee:	e004      	b.n	800f1fa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f1f0:	bf00      	nop
 800f1f2:	e002      	b.n	800f1fa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f1f4:	bf00      	nop
 800f1f6:	e000      	b.n	800f1fa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f1f8:	bf00      	nop
		}
	}

	return val;
 800f1fa:	697b      	ldr	r3, [r7, #20]
}
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	3718      	adds	r7, #24
 800f200:	46bd      	mov	sp, r7
 800f202:	bd80      	pop	{r7, pc}

0800f204 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f204:	b590      	push	{r4, r7, lr}
 800f206:	b089      	sub	sp, #36	@ 0x24
 800f208:	af00      	add	r7, sp, #0
 800f20a:	60f8      	str	r0, [r7, #12]
 800f20c:	60b9      	str	r1, [r7, #8]
 800f20e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f210:	2302      	movs	r3, #2
 800f212:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	2b01      	cmp	r3, #1
 800f218:	f240 80d9 	bls.w	800f3ce <put_fat+0x1ca>
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	69db      	ldr	r3, [r3, #28]
 800f220:	68ba      	ldr	r2, [r7, #8]
 800f222:	429a      	cmp	r2, r3
 800f224:	f080 80d3 	bcs.w	800f3ce <put_fat+0x1ca>
		switch (fs->fs_type) {
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	781b      	ldrb	r3, [r3, #0]
 800f22c:	2b03      	cmp	r3, #3
 800f22e:	f000 8096 	beq.w	800f35e <put_fat+0x15a>
 800f232:	2b03      	cmp	r3, #3
 800f234:	f300 80cb 	bgt.w	800f3ce <put_fat+0x1ca>
 800f238:	2b01      	cmp	r3, #1
 800f23a:	d002      	beq.n	800f242 <put_fat+0x3e>
 800f23c:	2b02      	cmp	r3, #2
 800f23e:	d06e      	beq.n	800f31e <put_fat+0x11a>
 800f240:	e0c5      	b.n	800f3ce <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	61bb      	str	r3, [r7, #24]
 800f246:	69bb      	ldr	r3, [r7, #24]
 800f248:	085b      	lsrs	r3, r3, #1
 800f24a:	69ba      	ldr	r2, [r7, #24]
 800f24c:	4413      	add	r3, r2
 800f24e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f254:	69bb      	ldr	r3, [r7, #24]
 800f256:	0a5b      	lsrs	r3, r3, #9
 800f258:	4413      	add	r3, r2
 800f25a:	4619      	mov	r1, r3
 800f25c:	68f8      	ldr	r0, [r7, #12]
 800f25e:	f7ff fe6f 	bl	800ef40 <move_window>
 800f262:	4603      	mov	r3, r0
 800f264:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f266:	7ffb      	ldrb	r3, [r7, #31]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	f040 80a9 	bne.w	800f3c0 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f274:	69bb      	ldr	r3, [r7, #24]
 800f276:	1c59      	adds	r1, r3, #1
 800f278:	61b9      	str	r1, [r7, #24]
 800f27a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f27e:	4413      	add	r3, r2
 800f280:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	f003 0301 	and.w	r3, r3, #1
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d00d      	beq.n	800f2a8 <put_fat+0xa4>
 800f28c:	697b      	ldr	r3, [r7, #20]
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	b25b      	sxtb	r3, r3
 800f292:	f003 030f 	and.w	r3, r3, #15
 800f296:	b25a      	sxtb	r2, r3
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	b2db      	uxtb	r3, r3
 800f29c:	011b      	lsls	r3, r3, #4
 800f29e:	b25b      	sxtb	r3, r3
 800f2a0:	4313      	orrs	r3, r2
 800f2a2:	b25b      	sxtb	r3, r3
 800f2a4:	b2db      	uxtb	r3, r3
 800f2a6:	e001      	b.n	800f2ac <put_fat+0xa8>
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	b2db      	uxtb	r3, r3
 800f2ac:	697a      	ldr	r2, [r7, #20]
 800f2ae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	2201      	movs	r2, #1
 800f2b4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f2ba:	69bb      	ldr	r3, [r7, #24]
 800f2bc:	0a5b      	lsrs	r3, r3, #9
 800f2be:	4413      	add	r3, r2
 800f2c0:	4619      	mov	r1, r3
 800f2c2:	68f8      	ldr	r0, [r7, #12]
 800f2c4:	f7ff fe3c 	bl	800ef40 <move_window>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f2cc:	7ffb      	ldrb	r3, [r7, #31]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d178      	bne.n	800f3c4 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f2d8:	69bb      	ldr	r3, [r7, #24]
 800f2da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2de:	4413      	add	r3, r2
 800f2e0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f2e2:	68bb      	ldr	r3, [r7, #8]
 800f2e4:	f003 0301 	and.w	r3, r3, #1
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d003      	beq.n	800f2f4 <put_fat+0xf0>
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	091b      	lsrs	r3, r3, #4
 800f2f0:	b2db      	uxtb	r3, r3
 800f2f2:	e00e      	b.n	800f312 <put_fat+0x10e>
 800f2f4:	697b      	ldr	r3, [r7, #20]
 800f2f6:	781b      	ldrb	r3, [r3, #0]
 800f2f8:	b25b      	sxtb	r3, r3
 800f2fa:	f023 030f 	bic.w	r3, r3, #15
 800f2fe:	b25a      	sxtb	r2, r3
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	0a1b      	lsrs	r3, r3, #8
 800f304:	b25b      	sxtb	r3, r3
 800f306:	f003 030f 	and.w	r3, r3, #15
 800f30a:	b25b      	sxtb	r3, r3
 800f30c:	4313      	orrs	r3, r2
 800f30e:	b25b      	sxtb	r3, r3
 800f310:	b2db      	uxtb	r3, r3
 800f312:	697a      	ldr	r2, [r7, #20]
 800f314:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	2201      	movs	r2, #1
 800f31a:	70da      	strb	r2, [r3, #3]
			break;
 800f31c:	e057      	b.n	800f3ce <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f322:	68bb      	ldr	r3, [r7, #8]
 800f324:	0a1b      	lsrs	r3, r3, #8
 800f326:	4413      	add	r3, r2
 800f328:	4619      	mov	r1, r3
 800f32a:	68f8      	ldr	r0, [r7, #12]
 800f32c:	f7ff fe08 	bl	800ef40 <move_window>
 800f330:	4603      	mov	r3, r0
 800f332:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f334:	7ffb      	ldrb	r3, [r7, #31]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d146      	bne.n	800f3c8 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	005b      	lsls	r3, r3, #1
 800f344:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800f348:	4413      	add	r3, r2
 800f34a:	687a      	ldr	r2, [r7, #4]
 800f34c:	b292      	uxth	r2, r2
 800f34e:	4611      	mov	r1, r2
 800f350:	4618      	mov	r0, r3
 800f352:	f7ff fb4e 	bl	800e9f2 <st_word>
			fs->wflag = 1;
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	2201      	movs	r2, #1
 800f35a:	70da      	strb	r2, [r3, #3]
			break;
 800f35c:	e037      	b.n	800f3ce <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f362:	68bb      	ldr	r3, [r7, #8]
 800f364:	09db      	lsrs	r3, r3, #7
 800f366:	4413      	add	r3, r2
 800f368:	4619      	mov	r1, r3
 800f36a:	68f8      	ldr	r0, [r7, #12]
 800f36c:	f7ff fde8 	bl	800ef40 <move_window>
 800f370:	4603      	mov	r3, r0
 800f372:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f374:	7ffb      	ldrb	r3, [r7, #31]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d128      	bne.n	800f3cc <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f386:	68bb      	ldr	r3, [r7, #8]
 800f388:	009b      	lsls	r3, r3, #2
 800f38a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f38e:	4413      	add	r3, r2
 800f390:	4618      	mov	r0, r3
 800f392:	f7ff fb0b 	bl	800e9ac <ld_dword>
 800f396:	4603      	mov	r3, r0
 800f398:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800f39c:	4323      	orrs	r3, r4
 800f39e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	009b      	lsls	r3, r3, #2
 800f3aa:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f3ae:	4413      	add	r3, r2
 800f3b0:	6879      	ldr	r1, [r7, #4]
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f7ff fb38 	bl	800ea28 <st_dword>
			fs->wflag = 1;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	2201      	movs	r2, #1
 800f3bc:	70da      	strb	r2, [r3, #3]
			break;
 800f3be:	e006      	b.n	800f3ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f3c0:	bf00      	nop
 800f3c2:	e004      	b.n	800f3ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f3c4:	bf00      	nop
 800f3c6:	e002      	b.n	800f3ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f3c8:	bf00      	nop
 800f3ca:	e000      	b.n	800f3ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f3cc:	bf00      	nop
		}
	}
	return res;
 800f3ce:	7ffb      	ldrb	r3, [r7, #31]
}
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	3724      	adds	r7, #36	@ 0x24
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	bd90      	pop	{r4, r7, pc}

0800f3d8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b088      	sub	sp, #32
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	60f8      	str	r0, [r7, #12]
 800f3e0:	60b9      	str	r1, [r7, #8]
 800f3e2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	2b01      	cmp	r3, #1
 800f3f2:	d904      	bls.n	800f3fe <remove_chain+0x26>
 800f3f4:	69bb      	ldr	r3, [r7, #24]
 800f3f6:	69db      	ldr	r3, [r3, #28]
 800f3f8:	68ba      	ldr	r2, [r7, #8]
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	d301      	bcc.n	800f402 <remove_chain+0x2a>
 800f3fe:	2302      	movs	r3, #2
 800f400:	e04b      	b.n	800f49a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d00c      	beq.n	800f422 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f408:	f04f 32ff 	mov.w	r2, #4294967295
 800f40c:	6879      	ldr	r1, [r7, #4]
 800f40e:	69b8      	ldr	r0, [r7, #24]
 800f410:	f7ff fef8 	bl	800f204 <put_fat>
 800f414:	4603      	mov	r3, r0
 800f416:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f418:	7ffb      	ldrb	r3, [r7, #31]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d001      	beq.n	800f422 <remove_chain+0x4a>
 800f41e:	7ffb      	ldrb	r3, [r7, #31]
 800f420:	e03b      	b.n	800f49a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f422:	68b9      	ldr	r1, [r7, #8]
 800f424:	68f8      	ldr	r0, [r7, #12]
 800f426:	f7ff fe46 	bl	800f0b6 <get_fat>
 800f42a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d031      	beq.n	800f496 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f432:	697b      	ldr	r3, [r7, #20]
 800f434:	2b01      	cmp	r3, #1
 800f436:	d101      	bne.n	800f43c <remove_chain+0x64>
 800f438:	2302      	movs	r3, #2
 800f43a:	e02e      	b.n	800f49a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f43c:	697b      	ldr	r3, [r7, #20]
 800f43e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f442:	d101      	bne.n	800f448 <remove_chain+0x70>
 800f444:	2301      	movs	r3, #1
 800f446:	e028      	b.n	800f49a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f448:	2200      	movs	r2, #0
 800f44a:	68b9      	ldr	r1, [r7, #8]
 800f44c:	69b8      	ldr	r0, [r7, #24]
 800f44e:	f7ff fed9 	bl	800f204 <put_fat>
 800f452:	4603      	mov	r3, r0
 800f454:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f456:	7ffb      	ldrb	r3, [r7, #31]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d001      	beq.n	800f460 <remove_chain+0x88>
 800f45c:	7ffb      	ldrb	r3, [r7, #31]
 800f45e:	e01c      	b.n	800f49a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f460:	69bb      	ldr	r3, [r7, #24]
 800f462:	699a      	ldr	r2, [r3, #24]
 800f464:	69bb      	ldr	r3, [r7, #24]
 800f466:	69db      	ldr	r3, [r3, #28]
 800f468:	3b02      	subs	r3, #2
 800f46a:	429a      	cmp	r2, r3
 800f46c:	d20b      	bcs.n	800f486 <remove_chain+0xae>
			fs->free_clst++;
 800f46e:	69bb      	ldr	r3, [r7, #24]
 800f470:	699b      	ldr	r3, [r3, #24]
 800f472:	1c5a      	adds	r2, r3, #1
 800f474:	69bb      	ldr	r3, [r7, #24]
 800f476:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800f478:	69bb      	ldr	r3, [r7, #24]
 800f47a:	791b      	ldrb	r3, [r3, #4]
 800f47c:	f043 0301 	orr.w	r3, r3, #1
 800f480:	b2da      	uxtb	r2, r3
 800f482:	69bb      	ldr	r3, [r7, #24]
 800f484:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f486:	697b      	ldr	r3, [r7, #20]
 800f488:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f48a:	69bb      	ldr	r3, [r7, #24]
 800f48c:	69db      	ldr	r3, [r3, #28]
 800f48e:	68ba      	ldr	r2, [r7, #8]
 800f490:	429a      	cmp	r2, r3
 800f492:	d3c6      	bcc.n	800f422 <remove_chain+0x4a>
 800f494:	e000      	b.n	800f498 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f496:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f498:	2300      	movs	r3, #0
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	3720      	adds	r7, #32
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}

0800f4a2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f4a2:	b580      	push	{r7, lr}
 800f4a4:	b088      	sub	sp, #32
 800f4a6:	af00      	add	r7, sp, #0
 800f4a8:	6078      	str	r0, [r7, #4]
 800f4aa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d10d      	bne.n	800f4d4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f4b8:	693b      	ldr	r3, [r7, #16]
 800f4ba:	695b      	ldr	r3, [r3, #20]
 800f4bc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f4be:	69bb      	ldr	r3, [r7, #24]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d004      	beq.n	800f4ce <create_chain+0x2c>
 800f4c4:	693b      	ldr	r3, [r7, #16]
 800f4c6:	69db      	ldr	r3, [r3, #28]
 800f4c8:	69ba      	ldr	r2, [r7, #24]
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d31b      	bcc.n	800f506 <create_chain+0x64>
 800f4ce:	2301      	movs	r3, #1
 800f4d0:	61bb      	str	r3, [r7, #24]
 800f4d2:	e018      	b.n	800f506 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f4d4:	6839      	ldr	r1, [r7, #0]
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	f7ff fded 	bl	800f0b6 <get_fat>
 800f4dc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	2b01      	cmp	r3, #1
 800f4e2:	d801      	bhi.n	800f4e8 <create_chain+0x46>
 800f4e4:	2301      	movs	r3, #1
 800f4e6:	e070      	b.n	800f5ca <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4ee:	d101      	bne.n	800f4f4 <create_chain+0x52>
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	e06a      	b.n	800f5ca <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f4f4:	693b      	ldr	r3, [r7, #16]
 800f4f6:	69db      	ldr	r3, [r3, #28]
 800f4f8:	68fa      	ldr	r2, [r7, #12]
 800f4fa:	429a      	cmp	r2, r3
 800f4fc:	d201      	bcs.n	800f502 <create_chain+0x60>
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	e063      	b.n	800f5ca <create_chain+0x128>
		scl = clst;
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f506:	69bb      	ldr	r3, [r7, #24]
 800f508:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f50a:	69fb      	ldr	r3, [r7, #28]
 800f50c:	3301      	adds	r3, #1
 800f50e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f510:	693b      	ldr	r3, [r7, #16]
 800f512:	69db      	ldr	r3, [r3, #28]
 800f514:	69fa      	ldr	r2, [r7, #28]
 800f516:	429a      	cmp	r2, r3
 800f518:	d307      	bcc.n	800f52a <create_chain+0x88>
				ncl = 2;
 800f51a:	2302      	movs	r3, #2
 800f51c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f51e:	69fa      	ldr	r2, [r7, #28]
 800f520:	69bb      	ldr	r3, [r7, #24]
 800f522:	429a      	cmp	r2, r3
 800f524:	d901      	bls.n	800f52a <create_chain+0x88>
 800f526:	2300      	movs	r3, #0
 800f528:	e04f      	b.n	800f5ca <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f52a:	69f9      	ldr	r1, [r7, #28]
 800f52c:	6878      	ldr	r0, [r7, #4]
 800f52e:	f7ff fdc2 	bl	800f0b6 <get_fat>
 800f532:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d00e      	beq.n	800f558 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	2b01      	cmp	r3, #1
 800f53e:	d003      	beq.n	800f548 <create_chain+0xa6>
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f546:	d101      	bne.n	800f54c <create_chain+0xaa>
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	e03e      	b.n	800f5ca <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f54c:	69fa      	ldr	r2, [r7, #28]
 800f54e:	69bb      	ldr	r3, [r7, #24]
 800f550:	429a      	cmp	r2, r3
 800f552:	d1da      	bne.n	800f50a <create_chain+0x68>
 800f554:	2300      	movs	r3, #0
 800f556:	e038      	b.n	800f5ca <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f558:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f55a:	f04f 32ff 	mov.w	r2, #4294967295
 800f55e:	69f9      	ldr	r1, [r7, #28]
 800f560:	6938      	ldr	r0, [r7, #16]
 800f562:	f7ff fe4f 	bl	800f204 <put_fat>
 800f566:	4603      	mov	r3, r0
 800f568:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f56a:	7dfb      	ldrb	r3, [r7, #23]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d109      	bne.n	800f584 <create_chain+0xe2>
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d006      	beq.n	800f584 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f576:	69fa      	ldr	r2, [r7, #28]
 800f578:	6839      	ldr	r1, [r7, #0]
 800f57a:	6938      	ldr	r0, [r7, #16]
 800f57c:	f7ff fe42 	bl	800f204 <put_fat>
 800f580:	4603      	mov	r3, r0
 800f582:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f584:	7dfb      	ldrb	r3, [r7, #23]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d116      	bne.n	800f5b8 <create_chain+0x116>
		fs->last_clst = ncl;
 800f58a:	693b      	ldr	r3, [r7, #16]
 800f58c:	69fa      	ldr	r2, [r7, #28]
 800f58e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f590:	693b      	ldr	r3, [r7, #16]
 800f592:	699a      	ldr	r2, [r3, #24]
 800f594:	693b      	ldr	r3, [r7, #16]
 800f596:	69db      	ldr	r3, [r3, #28]
 800f598:	3b02      	subs	r3, #2
 800f59a:	429a      	cmp	r2, r3
 800f59c:	d804      	bhi.n	800f5a8 <create_chain+0x106>
 800f59e:	693b      	ldr	r3, [r7, #16]
 800f5a0:	699b      	ldr	r3, [r3, #24]
 800f5a2:	1e5a      	subs	r2, r3, #1
 800f5a4:	693b      	ldr	r3, [r7, #16]
 800f5a6:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800f5a8:	693b      	ldr	r3, [r7, #16]
 800f5aa:	791b      	ldrb	r3, [r3, #4]
 800f5ac:	f043 0301 	orr.w	r3, r3, #1
 800f5b0:	b2da      	uxtb	r2, r3
 800f5b2:	693b      	ldr	r3, [r7, #16]
 800f5b4:	711a      	strb	r2, [r3, #4]
 800f5b6:	e007      	b.n	800f5c8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f5b8:	7dfb      	ldrb	r3, [r7, #23]
 800f5ba:	2b01      	cmp	r3, #1
 800f5bc:	d102      	bne.n	800f5c4 <create_chain+0x122>
 800f5be:	f04f 33ff 	mov.w	r3, #4294967295
 800f5c2:	e000      	b.n	800f5c6 <create_chain+0x124>
 800f5c4:	2301      	movs	r3, #1
 800f5c6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f5c8:	69fb      	ldr	r3, [r7, #28]
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	3720      	adds	r7, #32
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bd80      	pop	{r7, pc}

0800f5d2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f5d2:	b480      	push	{r7}
 800f5d4:	b087      	sub	sp, #28
 800f5d6:	af00      	add	r7, sp, #0
 800f5d8:	6078      	str	r0, [r7, #4]
 800f5da:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5e6:	3304      	adds	r3, #4
 800f5e8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	0a5b      	lsrs	r3, r3, #9
 800f5ee:	68fa      	ldr	r2, [r7, #12]
 800f5f0:	8952      	ldrh	r2, [r2, #10]
 800f5f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800f5f6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f5f8:	693b      	ldr	r3, [r7, #16]
 800f5fa:	1d1a      	adds	r2, r3, #4
 800f5fc:	613a      	str	r2, [r7, #16]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d101      	bne.n	800f60c <clmt_clust+0x3a>
 800f608:	2300      	movs	r3, #0
 800f60a:	e010      	b.n	800f62e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f60c:	697a      	ldr	r2, [r7, #20]
 800f60e:	68bb      	ldr	r3, [r7, #8]
 800f610:	429a      	cmp	r2, r3
 800f612:	d307      	bcc.n	800f624 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f614:	697a      	ldr	r2, [r7, #20]
 800f616:	68bb      	ldr	r3, [r7, #8]
 800f618:	1ad3      	subs	r3, r2, r3
 800f61a:	617b      	str	r3, [r7, #20]
 800f61c:	693b      	ldr	r3, [r7, #16]
 800f61e:	3304      	adds	r3, #4
 800f620:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f622:	e7e9      	b.n	800f5f8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f624:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f626:	693b      	ldr	r3, [r7, #16]
 800f628:	681a      	ldr	r2, [r3, #0]
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	4413      	add	r3, r2
}
 800f62e:	4618      	mov	r0, r3
 800f630:	371c      	adds	r7, #28
 800f632:	46bd      	mov	sp, r7
 800f634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f638:	4770      	bx	lr

0800f63a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f63a:	b580      	push	{r7, lr}
 800f63c:	b086      	sub	sp, #24
 800f63e:	af00      	add	r7, sp, #0
 800f640:	6078      	str	r0, [r7, #4]
 800f642:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f650:	d204      	bcs.n	800f65c <dir_sdi+0x22>
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	f003 031f 	and.w	r3, r3, #31
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d001      	beq.n	800f660 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f65c:	2302      	movs	r3, #2
 800f65e:	e063      	b.n	800f728 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	683a      	ldr	r2, [r7, #0]
 800f664:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	689b      	ldr	r3, [r3, #8]
 800f66a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f66c:	697b      	ldr	r3, [r7, #20]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d106      	bne.n	800f680 <dir_sdi+0x46>
 800f672:	693b      	ldr	r3, [r7, #16]
 800f674:	781b      	ldrb	r3, [r3, #0]
 800f676:	2b02      	cmp	r3, #2
 800f678:	d902      	bls.n	800f680 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f67a:	693b      	ldr	r3, [r7, #16]
 800f67c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f67e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d10c      	bne.n	800f6a0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	095b      	lsrs	r3, r3, #5
 800f68a:	693a      	ldr	r2, [r7, #16]
 800f68c:	8912      	ldrh	r2, [r2, #8]
 800f68e:	4293      	cmp	r3, r2
 800f690:	d301      	bcc.n	800f696 <dir_sdi+0x5c>
 800f692:	2302      	movs	r3, #2
 800f694:	e048      	b.n	800f728 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f696:	693b      	ldr	r3, [r7, #16]
 800f698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	61da      	str	r2, [r3, #28]
 800f69e:	e029      	b.n	800f6f4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f6a0:	693b      	ldr	r3, [r7, #16]
 800f6a2:	895b      	ldrh	r3, [r3, #10]
 800f6a4:	025b      	lsls	r3, r3, #9
 800f6a6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f6a8:	e019      	b.n	800f6de <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	6979      	ldr	r1, [r7, #20]
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f7ff fd01 	bl	800f0b6 <get_fat>
 800f6b4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f6b6:	697b      	ldr	r3, [r7, #20]
 800f6b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6bc:	d101      	bne.n	800f6c2 <dir_sdi+0x88>
 800f6be:	2301      	movs	r3, #1
 800f6c0:	e032      	b.n	800f728 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f6c2:	697b      	ldr	r3, [r7, #20]
 800f6c4:	2b01      	cmp	r3, #1
 800f6c6:	d904      	bls.n	800f6d2 <dir_sdi+0x98>
 800f6c8:	693b      	ldr	r3, [r7, #16]
 800f6ca:	69db      	ldr	r3, [r3, #28]
 800f6cc:	697a      	ldr	r2, [r7, #20]
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	d301      	bcc.n	800f6d6 <dir_sdi+0x9c>
 800f6d2:	2302      	movs	r3, #2
 800f6d4:	e028      	b.n	800f728 <dir_sdi+0xee>
			ofs -= csz;
 800f6d6:	683a      	ldr	r2, [r7, #0]
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	1ad3      	subs	r3, r2, r3
 800f6dc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f6de:	683a      	ldr	r2, [r7, #0]
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	429a      	cmp	r2, r3
 800f6e4:	d2e1      	bcs.n	800f6aa <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f6e6:	6979      	ldr	r1, [r7, #20]
 800f6e8:	6938      	ldr	r0, [r7, #16]
 800f6ea:	f7ff fcc5 	bl	800f078 <clust2sect>
 800f6ee:	4602      	mov	r2, r0
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	697a      	ldr	r2, [r7, #20]
 800f6f8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	69db      	ldr	r3, [r3, #28]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d101      	bne.n	800f706 <dir_sdi+0xcc>
 800f702:	2302      	movs	r3, #2
 800f704:	e010      	b.n	800f728 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	69da      	ldr	r2, [r3, #28]
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	0a5b      	lsrs	r3, r3, #9
 800f70e:	441a      	add	r2, r3
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f714:	693b      	ldr	r3, [r7, #16]
 800f716:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f71a:	683b      	ldr	r3, [r7, #0]
 800f71c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f720:	441a      	add	r2, r3
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f726:	2300      	movs	r3, #0
}
 800f728:	4618      	mov	r0, r3
 800f72a:	3718      	adds	r7, #24
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd80      	pop	{r7, pc}

0800f730 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b086      	sub	sp, #24
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
 800f738:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	695b      	ldr	r3, [r3, #20]
 800f744:	3320      	adds	r3, #32
 800f746:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	69db      	ldr	r3, [r3, #28]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d003      	beq.n	800f758 <dir_next+0x28>
 800f750:	68bb      	ldr	r3, [r7, #8]
 800f752:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f756:	d301      	bcc.n	800f75c <dir_next+0x2c>
 800f758:	2304      	movs	r3, #4
 800f75a:	e0aa      	b.n	800f8b2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f75c:	68bb      	ldr	r3, [r7, #8]
 800f75e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f762:	2b00      	cmp	r3, #0
 800f764:	f040 8098 	bne.w	800f898 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	69db      	ldr	r3, [r3, #28]
 800f76c:	1c5a      	adds	r2, r3, #1
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	699b      	ldr	r3, [r3, #24]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d10b      	bne.n	800f792 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f77a:	68bb      	ldr	r3, [r7, #8]
 800f77c:	095b      	lsrs	r3, r3, #5
 800f77e:	68fa      	ldr	r2, [r7, #12]
 800f780:	8912      	ldrh	r2, [r2, #8]
 800f782:	4293      	cmp	r3, r2
 800f784:	f0c0 8088 	bcc.w	800f898 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2200      	movs	r2, #0
 800f78c:	61da      	str	r2, [r3, #28]
 800f78e:	2304      	movs	r3, #4
 800f790:	e08f      	b.n	800f8b2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f792:	68bb      	ldr	r3, [r7, #8]
 800f794:	0a5b      	lsrs	r3, r3, #9
 800f796:	68fa      	ldr	r2, [r7, #12]
 800f798:	8952      	ldrh	r2, [r2, #10]
 800f79a:	3a01      	subs	r2, #1
 800f79c:	4013      	ands	r3, r2
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d17a      	bne.n	800f898 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f7a2:	687a      	ldr	r2, [r7, #4]
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	699b      	ldr	r3, [r3, #24]
 800f7a8:	4619      	mov	r1, r3
 800f7aa:	4610      	mov	r0, r2
 800f7ac:	f7ff fc83 	bl	800f0b6 <get_fat>
 800f7b0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f7b2:	697b      	ldr	r3, [r7, #20]
 800f7b4:	2b01      	cmp	r3, #1
 800f7b6:	d801      	bhi.n	800f7bc <dir_next+0x8c>
 800f7b8:	2302      	movs	r3, #2
 800f7ba:	e07a      	b.n	800f8b2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f7bc:	697b      	ldr	r3, [r7, #20]
 800f7be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7c2:	d101      	bne.n	800f7c8 <dir_next+0x98>
 800f7c4:	2301      	movs	r3, #1
 800f7c6:	e074      	b.n	800f8b2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	69db      	ldr	r3, [r3, #28]
 800f7cc:	697a      	ldr	r2, [r7, #20]
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	d358      	bcc.n	800f884 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d104      	bne.n	800f7e2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	61da      	str	r2, [r3, #28]
 800f7de:	2304      	movs	r3, #4
 800f7e0:	e067      	b.n	800f8b2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f7e2:	687a      	ldr	r2, [r7, #4]
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	699b      	ldr	r3, [r3, #24]
 800f7e8:	4619      	mov	r1, r3
 800f7ea:	4610      	mov	r0, r2
 800f7ec:	f7ff fe59 	bl	800f4a2 <create_chain>
 800f7f0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f7f2:	697b      	ldr	r3, [r7, #20]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d101      	bne.n	800f7fc <dir_next+0xcc>
 800f7f8:	2307      	movs	r3, #7
 800f7fa:	e05a      	b.n	800f8b2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	2b01      	cmp	r3, #1
 800f800:	d101      	bne.n	800f806 <dir_next+0xd6>
 800f802:	2302      	movs	r3, #2
 800f804:	e055      	b.n	800f8b2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f80c:	d101      	bne.n	800f812 <dir_next+0xe2>
 800f80e:	2301      	movs	r3, #1
 800f810:	e04f      	b.n	800f8b2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f812:	68f8      	ldr	r0, [r7, #12]
 800f814:	f7ff fb50 	bl	800eeb8 <sync_window>
 800f818:	4603      	mov	r3, r0
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d001      	beq.n	800f822 <dir_next+0xf2>
 800f81e:	2301      	movs	r3, #1
 800f820:	e047      	b.n	800f8b2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	3338      	adds	r3, #56	@ 0x38
 800f826:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f82a:	2100      	movs	r1, #0
 800f82c:	4618      	mov	r0, r3
 800f82e:	f7ff f948 	bl	800eac2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f832:	2300      	movs	r3, #0
 800f834:	613b      	str	r3, [r7, #16]
 800f836:	6979      	ldr	r1, [r7, #20]
 800f838:	68f8      	ldr	r0, [r7, #12]
 800f83a:	f7ff fc1d 	bl	800f078 <clust2sect>
 800f83e:	4602      	mov	r2, r0
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	635a      	str	r2, [r3, #52]	@ 0x34
 800f844:	e012      	b.n	800f86c <dir_next+0x13c>
						fs->wflag = 1;
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	2201      	movs	r2, #1
 800f84a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f84c:	68f8      	ldr	r0, [r7, #12]
 800f84e:	f7ff fb33 	bl	800eeb8 <sync_window>
 800f852:	4603      	mov	r3, r0
 800f854:	2b00      	cmp	r3, #0
 800f856:	d001      	beq.n	800f85c <dir_next+0x12c>
 800f858:	2301      	movs	r3, #1
 800f85a:	e02a      	b.n	800f8b2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f85c:	693b      	ldr	r3, [r7, #16]
 800f85e:	3301      	adds	r3, #1
 800f860:	613b      	str	r3, [r7, #16]
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f866:	1c5a      	adds	r2, r3, #1
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	635a      	str	r2, [r3, #52]	@ 0x34
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	895b      	ldrh	r3, [r3, #10]
 800f870:	461a      	mov	r2, r3
 800f872:	693b      	ldr	r3, [r7, #16]
 800f874:	4293      	cmp	r3, r2
 800f876:	d3e6      	bcc.n	800f846 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f87c:	693b      	ldr	r3, [r7, #16]
 800f87e:	1ad2      	subs	r2, r2, r3
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	697a      	ldr	r2, [r7, #20]
 800f888:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f88a:	6979      	ldr	r1, [r7, #20]
 800f88c:	68f8      	ldr	r0, [r7, #12]
 800f88e:	f7ff fbf3 	bl	800f078 <clust2sect>
 800f892:	4602      	mov	r2, r0
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	68ba      	ldr	r2, [r7, #8]
 800f89c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f8a4:	68bb      	ldr	r3, [r7, #8]
 800f8a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8aa:	441a      	add	r2, r3
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f8b0:	2300      	movs	r3, #0
}
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	3718      	adds	r7, #24
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	bd80      	pop	{r7, pc}

0800f8ba <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f8ba:	b580      	push	{r7, lr}
 800f8bc:	b086      	sub	sp, #24
 800f8be:	af00      	add	r7, sp, #0
 800f8c0:	6078      	str	r0, [r7, #4]
 800f8c2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f8ca:	2100      	movs	r1, #0
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	f7ff feb4 	bl	800f63a <dir_sdi>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f8d6:	7dfb      	ldrb	r3, [r7, #23]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d12b      	bne.n	800f934 <dir_alloc+0x7a>
		n = 0;
 800f8dc:	2300      	movs	r3, #0
 800f8de:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	69db      	ldr	r3, [r3, #28]
 800f8e4:	4619      	mov	r1, r3
 800f8e6:	68f8      	ldr	r0, [r7, #12]
 800f8e8:	f7ff fb2a 	bl	800ef40 <move_window>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f8f0:	7dfb      	ldrb	r3, [r7, #23]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d11d      	bne.n	800f932 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	6a1b      	ldr	r3, [r3, #32]
 800f8fa:	781b      	ldrb	r3, [r3, #0]
 800f8fc:	2be5      	cmp	r3, #229	@ 0xe5
 800f8fe:	d004      	beq.n	800f90a <dir_alloc+0x50>
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	6a1b      	ldr	r3, [r3, #32]
 800f904:	781b      	ldrb	r3, [r3, #0]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d107      	bne.n	800f91a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f90a:	693b      	ldr	r3, [r7, #16]
 800f90c:	3301      	adds	r3, #1
 800f90e:	613b      	str	r3, [r7, #16]
 800f910:	693a      	ldr	r2, [r7, #16]
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	429a      	cmp	r2, r3
 800f916:	d102      	bne.n	800f91e <dir_alloc+0x64>
 800f918:	e00c      	b.n	800f934 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f91a:	2300      	movs	r3, #0
 800f91c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f91e:	2101      	movs	r1, #1
 800f920:	6878      	ldr	r0, [r7, #4]
 800f922:	f7ff ff05 	bl	800f730 <dir_next>
 800f926:	4603      	mov	r3, r0
 800f928:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f92a:	7dfb      	ldrb	r3, [r7, #23]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d0d7      	beq.n	800f8e0 <dir_alloc+0x26>
 800f930:	e000      	b.n	800f934 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f932:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f934:	7dfb      	ldrb	r3, [r7, #23]
 800f936:	2b04      	cmp	r3, #4
 800f938:	d101      	bne.n	800f93e <dir_alloc+0x84>
 800f93a:	2307      	movs	r3, #7
 800f93c:	75fb      	strb	r3, [r7, #23]
	return res;
 800f93e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f940:	4618      	mov	r0, r3
 800f942:	3718      	adds	r7, #24
 800f944:	46bd      	mov	sp, r7
 800f946:	bd80      	pop	{r7, pc}

0800f948 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b084      	sub	sp, #16
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
 800f950:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	331a      	adds	r3, #26
 800f956:	4618      	mov	r0, r3
 800f958:	f7ff f810 	bl	800e97c <ld_word>
 800f95c:	4603      	mov	r3, r0
 800f95e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	2b03      	cmp	r3, #3
 800f966:	d109      	bne.n	800f97c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	3314      	adds	r3, #20
 800f96c:	4618      	mov	r0, r3
 800f96e:	f7ff f805 	bl	800e97c <ld_word>
 800f972:	4603      	mov	r3, r0
 800f974:	041b      	lsls	r3, r3, #16
 800f976:	68fa      	ldr	r2, [r7, #12]
 800f978:	4313      	orrs	r3, r2
 800f97a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f97c:	68fb      	ldr	r3, [r7, #12]
}
 800f97e:	4618      	mov	r0, r3
 800f980:	3710      	adds	r7, #16
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}

0800f986 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f986:	b580      	push	{r7, lr}
 800f988:	b084      	sub	sp, #16
 800f98a:	af00      	add	r7, sp, #0
 800f98c:	60f8      	str	r0, [r7, #12]
 800f98e:	60b9      	str	r1, [r7, #8]
 800f990:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	331a      	adds	r3, #26
 800f996:	687a      	ldr	r2, [r7, #4]
 800f998:	b292      	uxth	r2, r2
 800f99a:	4611      	mov	r1, r2
 800f99c:	4618      	mov	r0, r3
 800f99e:	f7ff f828 	bl	800e9f2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	781b      	ldrb	r3, [r3, #0]
 800f9a6:	2b03      	cmp	r3, #3
 800f9a8:	d109      	bne.n	800f9be <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f9aa:	68bb      	ldr	r3, [r7, #8]
 800f9ac:	f103 0214 	add.w	r2, r3, #20
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	0c1b      	lsrs	r3, r3, #16
 800f9b4:	b29b      	uxth	r3, r3
 800f9b6:	4619      	mov	r1, r3
 800f9b8:	4610      	mov	r0, r2
 800f9ba:	f7ff f81a 	bl	800e9f2 <st_word>
	}
}
 800f9be:	bf00      	nop
 800f9c0:	3710      	adds	r7, #16
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}
	...

0800f9c8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800f9c8:	b590      	push	{r4, r7, lr}
 800f9ca:	b087      	sub	sp, #28
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
 800f9d0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	331a      	adds	r3, #26
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f7fe ffd0 	bl	800e97c <ld_word>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d001      	beq.n	800f9e6 <cmp_lfn+0x1e>
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	e059      	b.n	800fa9a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	781b      	ldrb	r3, [r3, #0]
 800f9ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f9ee:	1e5a      	subs	r2, r3, #1
 800f9f0:	4613      	mov	r3, r2
 800f9f2:	005b      	lsls	r3, r3, #1
 800f9f4:	4413      	add	r3, r2
 800f9f6:	009b      	lsls	r3, r3, #2
 800f9f8:	4413      	add	r3, r2
 800f9fa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f9fc:	2301      	movs	r3, #1
 800f9fe:	81fb      	strh	r3, [r7, #14]
 800fa00:	2300      	movs	r3, #0
 800fa02:	613b      	str	r3, [r7, #16]
 800fa04:	e033      	b.n	800fa6e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800fa06:	4a27      	ldr	r2, [pc, #156]	@ (800faa4 <cmp_lfn+0xdc>)
 800fa08:	693b      	ldr	r3, [r7, #16]
 800fa0a:	4413      	add	r3, r2
 800fa0c:	781b      	ldrb	r3, [r3, #0]
 800fa0e:	461a      	mov	r2, r3
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	4413      	add	r3, r2
 800fa14:	4618      	mov	r0, r3
 800fa16:	f7fe ffb1 	bl	800e97c <ld_word>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800fa1e:	89fb      	ldrh	r3, [r7, #14]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d01a      	beq.n	800fa5a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800fa24:	697b      	ldr	r3, [r7, #20]
 800fa26:	2bfe      	cmp	r3, #254	@ 0xfe
 800fa28:	d812      	bhi.n	800fa50 <cmp_lfn+0x88>
 800fa2a:	89bb      	ldrh	r3, [r7, #12]
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f002 fb7d 	bl	801212c <ff_wtoupper>
 800fa32:	4603      	mov	r3, r0
 800fa34:	461c      	mov	r4, r3
 800fa36:	697b      	ldr	r3, [r7, #20]
 800fa38:	1c5a      	adds	r2, r3, #1
 800fa3a:	617a      	str	r2, [r7, #20]
 800fa3c:	005b      	lsls	r3, r3, #1
 800fa3e:	687a      	ldr	r2, [r7, #4]
 800fa40:	4413      	add	r3, r2
 800fa42:	881b      	ldrh	r3, [r3, #0]
 800fa44:	4618      	mov	r0, r3
 800fa46:	f002 fb71 	bl	801212c <ff_wtoupper>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	429c      	cmp	r4, r3
 800fa4e:	d001      	beq.n	800fa54 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800fa50:	2300      	movs	r3, #0
 800fa52:	e022      	b.n	800fa9a <cmp_lfn+0xd2>
			}
			wc = uc;
 800fa54:	89bb      	ldrh	r3, [r7, #12]
 800fa56:	81fb      	strh	r3, [r7, #14]
 800fa58:	e006      	b.n	800fa68 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800fa5a:	89bb      	ldrh	r3, [r7, #12]
 800fa5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fa60:	4293      	cmp	r3, r2
 800fa62:	d001      	beq.n	800fa68 <cmp_lfn+0xa0>
 800fa64:	2300      	movs	r3, #0
 800fa66:	e018      	b.n	800fa9a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800fa68:	693b      	ldr	r3, [r7, #16]
 800fa6a:	3301      	adds	r3, #1
 800fa6c:	613b      	str	r3, [r7, #16]
 800fa6e:	693b      	ldr	r3, [r7, #16]
 800fa70:	2b0c      	cmp	r3, #12
 800fa72:	d9c8      	bls.n	800fa06 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	781b      	ldrb	r3, [r3, #0]
 800fa78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d00b      	beq.n	800fa98 <cmp_lfn+0xd0>
 800fa80:	89fb      	ldrh	r3, [r7, #14]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d008      	beq.n	800fa98 <cmp_lfn+0xd0>
 800fa86:	697b      	ldr	r3, [r7, #20]
 800fa88:	005b      	lsls	r3, r3, #1
 800fa8a:	687a      	ldr	r2, [r7, #4]
 800fa8c:	4413      	add	r3, r2
 800fa8e:	881b      	ldrh	r3, [r3, #0]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d001      	beq.n	800fa98 <cmp_lfn+0xd0>
 800fa94:	2300      	movs	r3, #0
 800fa96:	e000      	b.n	800fa9a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800fa98:	2301      	movs	r3, #1
}
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	371c      	adds	r7, #28
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd90      	pop	{r4, r7, pc}
 800faa2:	bf00      	nop
 800faa4:	0801895c 	.word	0x0801895c

0800faa8 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b086      	sub	sp, #24
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
 800fab0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800fab2:	683b      	ldr	r3, [r7, #0]
 800fab4:	331a      	adds	r3, #26
 800fab6:	4618      	mov	r0, r3
 800fab8:	f7fe ff60 	bl	800e97c <ld_word>
 800fabc:	4603      	mov	r3, r0
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d001      	beq.n	800fac6 <pick_lfn+0x1e>
 800fac2:	2300      	movs	r3, #0
 800fac4:	e04d      	b.n	800fb62 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	781b      	ldrb	r3, [r3, #0]
 800faca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800face:	1e5a      	subs	r2, r3, #1
 800fad0:	4613      	mov	r3, r2
 800fad2:	005b      	lsls	r3, r3, #1
 800fad4:	4413      	add	r3, r2
 800fad6:	009b      	lsls	r3, r3, #2
 800fad8:	4413      	add	r3, r2
 800fada:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800fadc:	2301      	movs	r3, #1
 800fade:	81fb      	strh	r3, [r7, #14]
 800fae0:	2300      	movs	r3, #0
 800fae2:	613b      	str	r3, [r7, #16]
 800fae4:	e028      	b.n	800fb38 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800fae6:	4a21      	ldr	r2, [pc, #132]	@ (800fb6c <pick_lfn+0xc4>)
 800fae8:	693b      	ldr	r3, [r7, #16]
 800faea:	4413      	add	r3, r2
 800faec:	781b      	ldrb	r3, [r3, #0]
 800faee:	461a      	mov	r2, r3
 800faf0:	683b      	ldr	r3, [r7, #0]
 800faf2:	4413      	add	r3, r2
 800faf4:	4618      	mov	r0, r3
 800faf6:	f7fe ff41 	bl	800e97c <ld_word>
 800fafa:	4603      	mov	r3, r0
 800fafc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800fafe:	89fb      	ldrh	r3, [r7, #14]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d00f      	beq.n	800fb24 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800fb04:	697b      	ldr	r3, [r7, #20]
 800fb06:	2bfe      	cmp	r3, #254	@ 0xfe
 800fb08:	d901      	bls.n	800fb0e <pick_lfn+0x66>
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	e029      	b.n	800fb62 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800fb0e:	89bb      	ldrh	r3, [r7, #12]
 800fb10:	81fb      	strh	r3, [r7, #14]
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	1c5a      	adds	r2, r3, #1
 800fb16:	617a      	str	r2, [r7, #20]
 800fb18:	005b      	lsls	r3, r3, #1
 800fb1a:	687a      	ldr	r2, [r7, #4]
 800fb1c:	4413      	add	r3, r2
 800fb1e:	89fa      	ldrh	r2, [r7, #14]
 800fb20:	801a      	strh	r2, [r3, #0]
 800fb22:	e006      	b.n	800fb32 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800fb24:	89bb      	ldrh	r3, [r7, #12]
 800fb26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fb2a:	4293      	cmp	r3, r2
 800fb2c:	d001      	beq.n	800fb32 <pick_lfn+0x8a>
 800fb2e:	2300      	movs	r3, #0
 800fb30:	e017      	b.n	800fb62 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800fb32:	693b      	ldr	r3, [r7, #16]
 800fb34:	3301      	adds	r3, #1
 800fb36:	613b      	str	r3, [r7, #16]
 800fb38:	693b      	ldr	r3, [r7, #16]
 800fb3a:	2b0c      	cmp	r3, #12
 800fb3c:	d9d3      	bls.n	800fae6 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	781b      	ldrb	r3, [r3, #0]
 800fb42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d00a      	beq.n	800fb60 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	2bfe      	cmp	r3, #254	@ 0xfe
 800fb4e:	d901      	bls.n	800fb54 <pick_lfn+0xac>
 800fb50:	2300      	movs	r3, #0
 800fb52:	e006      	b.n	800fb62 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	005b      	lsls	r3, r3, #1
 800fb58:	687a      	ldr	r2, [r7, #4]
 800fb5a:	4413      	add	r3, r2
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800fb60:	2301      	movs	r3, #1
}
 800fb62:	4618      	mov	r0, r3
 800fb64:	3718      	adds	r7, #24
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bd80      	pop	{r7, pc}
 800fb6a:	bf00      	nop
 800fb6c:	0801895c 	.word	0x0801895c

0800fb70 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b088      	sub	sp, #32
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	60f8      	str	r0, [r7, #12]
 800fb78:	60b9      	str	r1, [r7, #8]
 800fb7a:	4611      	mov	r1, r2
 800fb7c:	461a      	mov	r2, r3
 800fb7e:	460b      	mov	r3, r1
 800fb80:	71fb      	strb	r3, [r7, #7]
 800fb82:	4613      	mov	r3, r2
 800fb84:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800fb86:	68bb      	ldr	r3, [r7, #8]
 800fb88:	330d      	adds	r3, #13
 800fb8a:	79ba      	ldrb	r2, [r7, #6]
 800fb8c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800fb8e:	68bb      	ldr	r3, [r7, #8]
 800fb90:	330b      	adds	r3, #11
 800fb92:	220f      	movs	r2, #15
 800fb94:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800fb96:	68bb      	ldr	r3, [r7, #8]
 800fb98:	330c      	adds	r3, #12
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	331a      	adds	r3, #26
 800fba2:	2100      	movs	r1, #0
 800fba4:	4618      	mov	r0, r3
 800fba6:	f7fe ff24 	bl	800e9f2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800fbaa:	79fb      	ldrb	r3, [r7, #7]
 800fbac:	1e5a      	subs	r2, r3, #1
 800fbae:	4613      	mov	r3, r2
 800fbb0:	005b      	lsls	r3, r3, #1
 800fbb2:	4413      	add	r3, r2
 800fbb4:	009b      	lsls	r3, r3, #2
 800fbb6:	4413      	add	r3, r2
 800fbb8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800fbba:	2300      	movs	r3, #0
 800fbbc:	82fb      	strh	r3, [r7, #22]
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800fbc2:	8afb      	ldrh	r3, [r7, #22]
 800fbc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fbc8:	4293      	cmp	r3, r2
 800fbca:	d007      	beq.n	800fbdc <put_lfn+0x6c>
 800fbcc:	69fb      	ldr	r3, [r7, #28]
 800fbce:	1c5a      	adds	r2, r3, #1
 800fbd0:	61fa      	str	r2, [r7, #28]
 800fbd2:	005b      	lsls	r3, r3, #1
 800fbd4:	68fa      	ldr	r2, [r7, #12]
 800fbd6:	4413      	add	r3, r2
 800fbd8:	881b      	ldrh	r3, [r3, #0]
 800fbda:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800fbdc:	4a17      	ldr	r2, [pc, #92]	@ (800fc3c <put_lfn+0xcc>)
 800fbde:	69bb      	ldr	r3, [r7, #24]
 800fbe0:	4413      	add	r3, r2
 800fbe2:	781b      	ldrb	r3, [r3, #0]
 800fbe4:	461a      	mov	r2, r3
 800fbe6:	68bb      	ldr	r3, [r7, #8]
 800fbe8:	4413      	add	r3, r2
 800fbea:	8afa      	ldrh	r2, [r7, #22]
 800fbec:	4611      	mov	r1, r2
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f7fe feff 	bl	800e9f2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800fbf4:	8afb      	ldrh	r3, [r7, #22]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d102      	bne.n	800fc00 <put_lfn+0x90>
 800fbfa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fbfe:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800fc00:	69bb      	ldr	r3, [r7, #24]
 800fc02:	3301      	adds	r3, #1
 800fc04:	61bb      	str	r3, [r7, #24]
 800fc06:	69bb      	ldr	r3, [r7, #24]
 800fc08:	2b0c      	cmp	r3, #12
 800fc0a:	d9da      	bls.n	800fbc2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800fc0c:	8afb      	ldrh	r3, [r7, #22]
 800fc0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fc12:	4293      	cmp	r3, r2
 800fc14:	d006      	beq.n	800fc24 <put_lfn+0xb4>
 800fc16:	69fb      	ldr	r3, [r7, #28]
 800fc18:	005b      	lsls	r3, r3, #1
 800fc1a:	68fa      	ldr	r2, [r7, #12]
 800fc1c:	4413      	add	r3, r2
 800fc1e:	881b      	ldrh	r3, [r3, #0]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d103      	bne.n	800fc2c <put_lfn+0xbc>
 800fc24:	79fb      	ldrb	r3, [r7, #7]
 800fc26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fc2a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800fc2c:	68bb      	ldr	r3, [r7, #8]
 800fc2e:	79fa      	ldrb	r2, [r7, #7]
 800fc30:	701a      	strb	r2, [r3, #0]
}
 800fc32:	bf00      	nop
 800fc34:	3720      	adds	r7, #32
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}
 800fc3a:	bf00      	nop
 800fc3c:	0801895c 	.word	0x0801895c

0800fc40 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b08c      	sub	sp, #48	@ 0x30
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	60f8      	str	r0, [r7, #12]
 800fc48:	60b9      	str	r1, [r7, #8]
 800fc4a:	607a      	str	r2, [r7, #4]
 800fc4c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800fc4e:	220b      	movs	r2, #11
 800fc50:	68b9      	ldr	r1, [r7, #8]
 800fc52:	68f8      	ldr	r0, [r7, #12]
 800fc54:	f7fe ff14 	bl	800ea80 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800fc58:	683b      	ldr	r3, [r7, #0]
 800fc5a:	2b05      	cmp	r3, #5
 800fc5c:	d929      	bls.n	800fcb2 <gen_numname+0x72>
		sr = seq;
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800fc62:	e020      	b.n	800fca6 <gen_numname+0x66>
			wc = *lfn++;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	1c9a      	adds	r2, r3, #2
 800fc68:	607a      	str	r2, [r7, #4]
 800fc6a:	881b      	ldrh	r3, [r3, #0]
 800fc6c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800fc6e:	2300      	movs	r3, #0
 800fc70:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fc72:	e015      	b.n	800fca0 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800fc74:	69fb      	ldr	r3, [r7, #28]
 800fc76:	005a      	lsls	r2, r3, #1
 800fc78:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fc7a:	f003 0301 	and.w	r3, r3, #1
 800fc7e:	4413      	add	r3, r2
 800fc80:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800fc82:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fc84:	085b      	lsrs	r3, r3, #1
 800fc86:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800fc88:	69fb      	ldr	r3, [r7, #28]
 800fc8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d003      	beq.n	800fc9a <gen_numname+0x5a>
 800fc92:	69fa      	ldr	r2, [r7, #28]
 800fc94:	4b30      	ldr	r3, [pc, #192]	@ (800fd58 <gen_numname+0x118>)
 800fc96:	4053      	eors	r3, r2
 800fc98:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800fc9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc9c:	3301      	adds	r3, #1
 800fc9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fca2:	2b0f      	cmp	r3, #15
 800fca4:	d9e6      	bls.n	800fc74 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	881b      	ldrh	r3, [r3, #0]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d1da      	bne.n	800fc64 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800fcae:	69fb      	ldr	r3, [r7, #28]
 800fcb0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800fcb2:	2307      	movs	r3, #7
 800fcb4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800fcb6:	683b      	ldr	r3, [r7, #0]
 800fcb8:	b2db      	uxtb	r3, r3
 800fcba:	f003 030f 	and.w	r3, r3, #15
 800fcbe:	b2db      	uxtb	r3, r3
 800fcc0:	3330      	adds	r3, #48	@ 0x30
 800fcc2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800fcc6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fcca:	2b39      	cmp	r3, #57	@ 0x39
 800fccc:	d904      	bls.n	800fcd8 <gen_numname+0x98>
 800fcce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fcd2:	3307      	adds	r3, #7
 800fcd4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800fcd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcda:	1e5a      	subs	r2, r3, #1
 800fcdc:	62ba      	str	r2, [r7, #40]	@ 0x28
 800fcde:	3330      	adds	r3, #48	@ 0x30
 800fce0:	443b      	add	r3, r7
 800fce2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800fce6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	091b      	lsrs	r3, r3, #4
 800fcee:	603b      	str	r3, [r7, #0]
	} while (seq);
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d1df      	bne.n	800fcb6 <gen_numname+0x76>
	ns[i] = '~';
 800fcf6:	f107 0214 	add.w	r2, r7, #20
 800fcfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcfc:	4413      	add	r3, r2
 800fcfe:	227e      	movs	r2, #126	@ 0x7e
 800fd00:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800fd02:	2300      	movs	r3, #0
 800fd04:	627b      	str	r3, [r7, #36]	@ 0x24
 800fd06:	e002      	b.n	800fd0e <gen_numname+0xce>
 800fd08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd0a:	3301      	adds	r3, #1
 800fd0c:	627b      	str	r3, [r7, #36]	@ 0x24
 800fd0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fd10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd12:	429a      	cmp	r2, r3
 800fd14:	d205      	bcs.n	800fd22 <gen_numname+0xe2>
 800fd16:	68fa      	ldr	r2, [r7, #12]
 800fd18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd1a:	4413      	add	r3, r2
 800fd1c:	781b      	ldrb	r3, [r3, #0]
 800fd1e:	2b20      	cmp	r3, #32
 800fd20:	d1f2      	bne.n	800fd08 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800fd22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd24:	2b07      	cmp	r3, #7
 800fd26:	d807      	bhi.n	800fd38 <gen_numname+0xf8>
 800fd28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd2a:	1c5a      	adds	r2, r3, #1
 800fd2c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800fd2e:	3330      	adds	r3, #48	@ 0x30
 800fd30:	443b      	add	r3, r7
 800fd32:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800fd36:	e000      	b.n	800fd3a <gen_numname+0xfa>
 800fd38:	2120      	movs	r1, #32
 800fd3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd3c:	1c5a      	adds	r2, r3, #1
 800fd3e:	627a      	str	r2, [r7, #36]	@ 0x24
 800fd40:	68fa      	ldr	r2, [r7, #12]
 800fd42:	4413      	add	r3, r2
 800fd44:	460a      	mov	r2, r1
 800fd46:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800fd48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd4a:	2b07      	cmp	r3, #7
 800fd4c:	d9e9      	bls.n	800fd22 <gen_numname+0xe2>
}
 800fd4e:	bf00      	nop
 800fd50:	bf00      	nop
 800fd52:	3730      	adds	r7, #48	@ 0x30
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bd80      	pop	{r7, pc}
 800fd58:	00011021 	.word	0x00011021

0800fd5c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800fd5c:	b480      	push	{r7}
 800fd5e:	b085      	sub	sp, #20
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800fd64:	2300      	movs	r3, #0
 800fd66:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800fd68:	230b      	movs	r3, #11
 800fd6a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800fd6c:	7bfb      	ldrb	r3, [r7, #15]
 800fd6e:	b2da      	uxtb	r2, r3
 800fd70:	0852      	lsrs	r2, r2, #1
 800fd72:	01db      	lsls	r3, r3, #7
 800fd74:	4313      	orrs	r3, r2
 800fd76:	b2da      	uxtb	r2, r3
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	1c59      	adds	r1, r3, #1
 800fd7c:	6079      	str	r1, [r7, #4]
 800fd7e:	781b      	ldrb	r3, [r3, #0]
 800fd80:	4413      	add	r3, r2
 800fd82:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800fd84:	68bb      	ldr	r3, [r7, #8]
 800fd86:	3b01      	subs	r3, #1
 800fd88:	60bb      	str	r3, [r7, #8]
 800fd8a:	68bb      	ldr	r3, [r7, #8]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d1ed      	bne.n	800fd6c <sum_sfn+0x10>
	return sum;
 800fd90:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	3714      	adds	r7, #20
 800fd96:	46bd      	mov	sp, r7
 800fd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9c:	4770      	bx	lr

0800fd9e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800fd9e:	b580      	push	{r7, lr}
 800fda0:	b086      	sub	sp, #24
 800fda2:	af00      	add	r7, sp, #0
 800fda4:	6078      	str	r0, [r7, #4]
 800fda6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800fda8:	2304      	movs	r3, #4
 800fdaa:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800fdb2:	23ff      	movs	r3, #255	@ 0xff
 800fdb4:	757b      	strb	r3, [r7, #21]
 800fdb6:	23ff      	movs	r3, #255	@ 0xff
 800fdb8:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800fdba:	e081      	b.n	800fec0 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	69db      	ldr	r3, [r3, #28]
 800fdc0:	4619      	mov	r1, r3
 800fdc2:	6938      	ldr	r0, [r7, #16]
 800fdc4:	f7ff f8bc 	bl	800ef40 <move_window>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fdcc:	7dfb      	ldrb	r3, [r7, #23]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d17c      	bne.n	800fecc <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	6a1b      	ldr	r3, [r3, #32]
 800fdd6:	781b      	ldrb	r3, [r3, #0]
 800fdd8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800fdda:	7dbb      	ldrb	r3, [r7, #22]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d102      	bne.n	800fde6 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800fde0:	2304      	movs	r3, #4
 800fde2:	75fb      	strb	r3, [r7, #23]
 800fde4:	e077      	b.n	800fed6 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	6a1b      	ldr	r3, [r3, #32]
 800fdea:	330b      	adds	r3, #11
 800fdec:	781b      	ldrb	r3, [r3, #0]
 800fdee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fdf2:	73fb      	strb	r3, [r7, #15]
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	7bfa      	ldrb	r2, [r7, #15]
 800fdf8:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800fdfa:	7dbb      	ldrb	r3, [r7, #22]
 800fdfc:	2be5      	cmp	r3, #229	@ 0xe5
 800fdfe:	d00e      	beq.n	800fe1e <dir_read+0x80>
 800fe00:	7dbb      	ldrb	r3, [r7, #22]
 800fe02:	2b2e      	cmp	r3, #46	@ 0x2e
 800fe04:	d00b      	beq.n	800fe1e <dir_read+0x80>
 800fe06:	7bfb      	ldrb	r3, [r7, #15]
 800fe08:	f023 0320 	bic.w	r3, r3, #32
 800fe0c:	2b08      	cmp	r3, #8
 800fe0e:	bf0c      	ite	eq
 800fe10:	2301      	moveq	r3, #1
 800fe12:	2300      	movne	r3, #0
 800fe14:	b2db      	uxtb	r3, r3
 800fe16:	461a      	mov	r2, r3
 800fe18:	683b      	ldr	r3, [r7, #0]
 800fe1a:	4293      	cmp	r3, r2
 800fe1c:	d002      	beq.n	800fe24 <dir_read+0x86>
				ord = 0xFF;
 800fe1e:	23ff      	movs	r3, #255	@ 0xff
 800fe20:	757b      	strb	r3, [r7, #21]
 800fe22:	e044      	b.n	800feae <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800fe24:	7bfb      	ldrb	r3, [r7, #15]
 800fe26:	2b0f      	cmp	r3, #15
 800fe28:	d12f      	bne.n	800fe8a <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800fe2a:	7dbb      	ldrb	r3, [r7, #22]
 800fe2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d00d      	beq.n	800fe50 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	6a1b      	ldr	r3, [r3, #32]
 800fe38:	7b5b      	ldrb	r3, [r3, #13]
 800fe3a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800fe3c:	7dbb      	ldrb	r3, [r7, #22]
 800fe3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fe42:	75bb      	strb	r3, [r7, #22]
 800fe44:	7dbb      	ldrb	r3, [r7, #22]
 800fe46:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	695a      	ldr	r2, [r3, #20]
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800fe50:	7dba      	ldrb	r2, [r7, #22]
 800fe52:	7d7b      	ldrb	r3, [r7, #21]
 800fe54:	429a      	cmp	r2, r3
 800fe56:	d115      	bne.n	800fe84 <dir_read+0xe6>
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	6a1b      	ldr	r3, [r3, #32]
 800fe5c:	330d      	adds	r3, #13
 800fe5e:	781b      	ldrb	r3, [r3, #0]
 800fe60:	7d3a      	ldrb	r2, [r7, #20]
 800fe62:	429a      	cmp	r2, r3
 800fe64:	d10e      	bne.n	800fe84 <dir_read+0xe6>
 800fe66:	693b      	ldr	r3, [r7, #16]
 800fe68:	68da      	ldr	r2, [r3, #12]
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	6a1b      	ldr	r3, [r3, #32]
 800fe6e:	4619      	mov	r1, r3
 800fe70:	4610      	mov	r0, r2
 800fe72:	f7ff fe19 	bl	800faa8 <pick_lfn>
 800fe76:	4603      	mov	r3, r0
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d003      	beq.n	800fe84 <dir_read+0xe6>
 800fe7c:	7d7b      	ldrb	r3, [r7, #21]
 800fe7e:	3b01      	subs	r3, #1
 800fe80:	b2db      	uxtb	r3, r3
 800fe82:	e000      	b.n	800fe86 <dir_read+0xe8>
 800fe84:	23ff      	movs	r3, #255	@ 0xff
 800fe86:	757b      	strb	r3, [r7, #21]
 800fe88:	e011      	b.n	800feae <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800fe8a:	7d7b      	ldrb	r3, [r7, #21]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d109      	bne.n	800fea4 <dir_read+0x106>
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	6a1b      	ldr	r3, [r3, #32]
 800fe94:	4618      	mov	r0, r3
 800fe96:	f7ff ff61 	bl	800fd5c <sum_sfn>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	7d3b      	ldrb	r3, [r7, #20]
 800fea0:	4293      	cmp	r3, r2
 800fea2:	d015      	beq.n	800fed0 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f04f 32ff 	mov.w	r2, #4294967295
 800feaa:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 800feac:	e010      	b.n	800fed0 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800feae:	2100      	movs	r1, #0
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f7ff fc3d 	bl	800f730 <dir_next>
 800feb6:	4603      	mov	r3, r0
 800feb8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800feba:	7dfb      	ldrb	r3, [r7, #23]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d109      	bne.n	800fed4 <dir_read+0x136>
	while (dp->sect) {
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	69db      	ldr	r3, [r3, #28]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	f47f af79 	bne.w	800fdbc <dir_read+0x1e>
 800feca:	e004      	b.n	800fed6 <dir_read+0x138>
		if (res != FR_OK) break;
 800fecc:	bf00      	nop
 800fece:	e002      	b.n	800fed6 <dir_read+0x138>
					break;
 800fed0:	bf00      	nop
 800fed2:	e000      	b.n	800fed6 <dir_read+0x138>
		if (res != FR_OK) break;
 800fed4:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800fed6:	7dfb      	ldrb	r3, [r7, #23]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d002      	beq.n	800fee2 <dir_read+0x144>
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	2200      	movs	r2, #0
 800fee0:	61da      	str	r2, [r3, #28]
	return res;
 800fee2:	7dfb      	ldrb	r3, [r7, #23]
}
 800fee4:	4618      	mov	r0, r3
 800fee6:	3718      	adds	r7, #24
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}

0800feec <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b086      	sub	sp, #24
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800fefa:	2100      	movs	r1, #0
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	f7ff fb9c 	bl	800f63a <dir_sdi>
 800ff02:	4603      	mov	r3, r0
 800ff04:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ff06:	7dfb      	ldrb	r3, [r7, #23]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d001      	beq.n	800ff10 <dir_find+0x24>
 800ff0c:	7dfb      	ldrb	r3, [r7, #23]
 800ff0e:	e0a9      	b.n	8010064 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ff10:	23ff      	movs	r3, #255	@ 0xff
 800ff12:	753b      	strb	r3, [r7, #20]
 800ff14:	7d3b      	ldrb	r3, [r7, #20]
 800ff16:	757b      	strb	r3, [r7, #21]
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ff1e:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	69db      	ldr	r3, [r3, #28]
 800ff24:	4619      	mov	r1, r3
 800ff26:	6938      	ldr	r0, [r7, #16]
 800ff28:	f7ff f80a 	bl	800ef40 <move_window>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ff30:	7dfb      	ldrb	r3, [r7, #23]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	f040 8090 	bne.w	8010058 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	6a1b      	ldr	r3, [r3, #32]
 800ff3c:	781b      	ldrb	r3, [r3, #0]
 800ff3e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ff40:	7dbb      	ldrb	r3, [r7, #22]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d102      	bne.n	800ff4c <dir_find+0x60>
 800ff46:	2304      	movs	r3, #4
 800ff48:	75fb      	strb	r3, [r7, #23]
 800ff4a:	e08a      	b.n	8010062 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	6a1b      	ldr	r3, [r3, #32]
 800ff50:	330b      	adds	r3, #11
 800ff52:	781b      	ldrb	r3, [r3, #0]
 800ff54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ff58:	73fb      	strb	r3, [r7, #15]
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	7bfa      	ldrb	r2, [r7, #15]
 800ff5e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ff60:	7dbb      	ldrb	r3, [r7, #22]
 800ff62:	2be5      	cmp	r3, #229	@ 0xe5
 800ff64:	d007      	beq.n	800ff76 <dir_find+0x8a>
 800ff66:	7bfb      	ldrb	r3, [r7, #15]
 800ff68:	f003 0308 	and.w	r3, r3, #8
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d009      	beq.n	800ff84 <dir_find+0x98>
 800ff70:	7bfb      	ldrb	r3, [r7, #15]
 800ff72:	2b0f      	cmp	r3, #15
 800ff74:	d006      	beq.n	800ff84 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ff76:	23ff      	movs	r3, #255	@ 0xff
 800ff78:	757b      	strb	r3, [r7, #21]
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ff80:	631a      	str	r2, [r3, #48]	@ 0x30
 800ff82:	e05e      	b.n	8010042 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ff84:	7bfb      	ldrb	r3, [r7, #15]
 800ff86:	2b0f      	cmp	r3, #15
 800ff88:	d136      	bne.n	800fff8 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ff90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d154      	bne.n	8010042 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ff98:	7dbb      	ldrb	r3, [r7, #22]
 800ff9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d00d      	beq.n	800ffbe <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	6a1b      	ldr	r3, [r3, #32]
 800ffa6:	7b5b      	ldrb	r3, [r3, #13]
 800ffa8:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ffaa:	7dbb      	ldrb	r3, [r7, #22]
 800ffac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ffb0:	75bb      	strb	r3, [r7, #22]
 800ffb2:	7dbb      	ldrb	r3, [r7, #22]
 800ffb4:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	695a      	ldr	r2, [r3, #20]
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ffbe:	7dba      	ldrb	r2, [r7, #22]
 800ffc0:	7d7b      	ldrb	r3, [r7, #21]
 800ffc2:	429a      	cmp	r2, r3
 800ffc4:	d115      	bne.n	800fff2 <dir_find+0x106>
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	6a1b      	ldr	r3, [r3, #32]
 800ffca:	330d      	adds	r3, #13
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	7d3a      	ldrb	r2, [r7, #20]
 800ffd0:	429a      	cmp	r2, r3
 800ffd2:	d10e      	bne.n	800fff2 <dir_find+0x106>
 800ffd4:	693b      	ldr	r3, [r7, #16]
 800ffd6:	68da      	ldr	r2, [r3, #12]
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	6a1b      	ldr	r3, [r3, #32]
 800ffdc:	4619      	mov	r1, r3
 800ffde:	4610      	mov	r0, r2
 800ffe0:	f7ff fcf2 	bl	800f9c8 <cmp_lfn>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d003      	beq.n	800fff2 <dir_find+0x106>
 800ffea:	7d7b      	ldrb	r3, [r7, #21]
 800ffec:	3b01      	subs	r3, #1
 800ffee:	b2db      	uxtb	r3, r3
 800fff0:	e000      	b.n	800fff4 <dir_find+0x108>
 800fff2:	23ff      	movs	r3, #255	@ 0xff
 800fff4:	757b      	strb	r3, [r7, #21]
 800fff6:	e024      	b.n	8010042 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800fff8:	7d7b      	ldrb	r3, [r7, #21]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d109      	bne.n	8010012 <dir_find+0x126>
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	6a1b      	ldr	r3, [r3, #32]
 8010002:	4618      	mov	r0, r3
 8010004:	f7ff feaa 	bl	800fd5c <sum_sfn>
 8010008:	4603      	mov	r3, r0
 801000a:	461a      	mov	r2, r3
 801000c:	7d3b      	ldrb	r3, [r7, #20]
 801000e:	4293      	cmp	r3, r2
 8010010:	d024      	beq.n	801005c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010018:	f003 0301 	and.w	r3, r3, #1
 801001c:	2b00      	cmp	r3, #0
 801001e:	d10a      	bne.n	8010036 <dir_find+0x14a>
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	6a18      	ldr	r0, [r3, #32]
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	3324      	adds	r3, #36	@ 0x24
 8010028:	220b      	movs	r2, #11
 801002a:	4619      	mov	r1, r3
 801002c:	f7fe fd64 	bl	800eaf8 <mem_cmp>
 8010030:	4603      	mov	r3, r0
 8010032:	2b00      	cmp	r3, #0
 8010034:	d014      	beq.n	8010060 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010036:	23ff      	movs	r3, #255	@ 0xff
 8010038:	757b      	strb	r3, [r7, #21]
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	f04f 32ff 	mov.w	r2, #4294967295
 8010040:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010042:	2100      	movs	r1, #0
 8010044:	6878      	ldr	r0, [r7, #4]
 8010046:	f7ff fb73 	bl	800f730 <dir_next>
 801004a:	4603      	mov	r3, r0
 801004c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801004e:	7dfb      	ldrb	r3, [r7, #23]
 8010050:	2b00      	cmp	r3, #0
 8010052:	f43f af65 	beq.w	800ff20 <dir_find+0x34>
 8010056:	e004      	b.n	8010062 <dir_find+0x176>
		if (res != FR_OK) break;
 8010058:	bf00      	nop
 801005a:	e002      	b.n	8010062 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801005c:	bf00      	nop
 801005e:	e000      	b.n	8010062 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010060:	bf00      	nop

	return res;
 8010062:	7dfb      	ldrb	r3, [r7, #23]
}
 8010064:	4618      	mov	r0, r3
 8010066:	3718      	adds	r7, #24
 8010068:	46bd      	mov	sp, r7
 801006a:	bd80      	pop	{r7, pc}

0801006c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b08c      	sub	sp, #48	@ 0x30
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010080:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8010084:	2b00      	cmp	r3, #0
 8010086:	d001      	beq.n	801008c <dir_register+0x20>
 8010088:	2306      	movs	r3, #6
 801008a:	e0e0      	b.n	801024e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801008c:	2300      	movs	r3, #0
 801008e:	627b      	str	r3, [r7, #36]	@ 0x24
 8010090:	e002      	b.n	8010098 <dir_register+0x2c>
 8010092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010094:	3301      	adds	r3, #1
 8010096:	627b      	str	r3, [r7, #36]	@ 0x24
 8010098:	69fb      	ldr	r3, [r7, #28]
 801009a:	68da      	ldr	r2, [r3, #12]
 801009c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801009e:	005b      	lsls	r3, r3, #1
 80100a0:	4413      	add	r3, r2
 80100a2:	881b      	ldrh	r3, [r3, #0]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d1f4      	bne.n	8010092 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80100ae:	f107 030c 	add.w	r3, r7, #12
 80100b2:	220c      	movs	r2, #12
 80100b4:	4618      	mov	r0, r3
 80100b6:	f7fe fce3 	bl	800ea80 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80100ba:	7dfb      	ldrb	r3, [r7, #23]
 80100bc:	f003 0301 	and.w	r3, r3, #1
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d032      	beq.n	801012a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	2240      	movs	r2, #64	@ 0x40
 80100c8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 80100cc:	2301      	movs	r3, #1
 80100ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80100d0:	e016      	b.n	8010100 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80100d8:	69fb      	ldr	r3, [r7, #28]
 80100da:	68da      	ldr	r2, [r3, #12]
 80100dc:	f107 010c 	add.w	r1, r7, #12
 80100e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100e2:	f7ff fdad 	bl	800fc40 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80100e6:	6878      	ldr	r0, [r7, #4]
 80100e8:	f7ff ff00 	bl	800feec <dir_find>
 80100ec:	4603      	mov	r3, r0
 80100ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 80100f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d106      	bne.n	8010108 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80100fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100fc:	3301      	adds	r3, #1
 80100fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010102:	2b63      	cmp	r3, #99	@ 0x63
 8010104:	d9e5      	bls.n	80100d2 <dir_register+0x66>
 8010106:	e000      	b.n	801010a <dir_register+0x9e>
			if (res != FR_OK) break;
 8010108:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801010a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801010c:	2b64      	cmp	r3, #100	@ 0x64
 801010e:	d101      	bne.n	8010114 <dir_register+0xa8>
 8010110:	2307      	movs	r3, #7
 8010112:	e09c      	b.n	801024e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8010114:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010118:	2b04      	cmp	r3, #4
 801011a:	d002      	beq.n	8010122 <dir_register+0xb6>
 801011c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010120:	e095      	b.n	801024e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8010122:	7dfa      	ldrb	r2, [r7, #23]
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801012a:	7dfb      	ldrb	r3, [r7, #23]
 801012c:	f003 0302 	and.w	r3, r3, #2
 8010130:	2b00      	cmp	r3, #0
 8010132:	d007      	beq.n	8010144 <dir_register+0xd8>
 8010134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010136:	330c      	adds	r3, #12
 8010138:	4a47      	ldr	r2, [pc, #284]	@ (8010258 <dir_register+0x1ec>)
 801013a:	fba2 2303 	umull	r2, r3, r2, r3
 801013e:	089b      	lsrs	r3, r3, #2
 8010140:	3301      	adds	r3, #1
 8010142:	e000      	b.n	8010146 <dir_register+0xda>
 8010144:	2301      	movs	r3, #1
 8010146:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8010148:	6a39      	ldr	r1, [r7, #32]
 801014a:	6878      	ldr	r0, [r7, #4]
 801014c:	f7ff fbb5 	bl	800f8ba <dir_alloc>
 8010150:	4603      	mov	r3, r0
 8010152:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8010156:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801015a:	2b00      	cmp	r3, #0
 801015c:	d148      	bne.n	80101f0 <dir_register+0x184>
 801015e:	6a3b      	ldr	r3, [r7, #32]
 8010160:	3b01      	subs	r3, #1
 8010162:	623b      	str	r3, [r7, #32]
 8010164:	6a3b      	ldr	r3, [r7, #32]
 8010166:	2b00      	cmp	r3, #0
 8010168:	d042      	beq.n	80101f0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	695a      	ldr	r2, [r3, #20]
 801016e:	6a3b      	ldr	r3, [r7, #32]
 8010170:	015b      	lsls	r3, r3, #5
 8010172:	1ad3      	subs	r3, r2, r3
 8010174:	4619      	mov	r1, r3
 8010176:	6878      	ldr	r0, [r7, #4]
 8010178:	f7ff fa5f 	bl	800f63a <dir_sdi>
 801017c:	4603      	mov	r3, r0
 801017e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8010182:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010186:	2b00      	cmp	r3, #0
 8010188:	d132      	bne.n	80101f0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	3324      	adds	r3, #36	@ 0x24
 801018e:	4618      	mov	r0, r3
 8010190:	f7ff fde4 	bl	800fd5c <sum_sfn>
 8010194:	4603      	mov	r3, r0
 8010196:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	69db      	ldr	r3, [r3, #28]
 801019c:	4619      	mov	r1, r3
 801019e:	69f8      	ldr	r0, [r7, #28]
 80101a0:	f7fe fece 	bl	800ef40 <move_window>
 80101a4:	4603      	mov	r3, r0
 80101a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80101aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d11d      	bne.n	80101ee <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80101b2:	69fb      	ldr	r3, [r7, #28]
 80101b4:	68d8      	ldr	r0, [r3, #12]
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	6a19      	ldr	r1, [r3, #32]
 80101ba:	6a3b      	ldr	r3, [r7, #32]
 80101bc:	b2da      	uxtb	r2, r3
 80101be:	7efb      	ldrb	r3, [r7, #27]
 80101c0:	f7ff fcd6 	bl	800fb70 <put_lfn>
				fs->wflag = 1;
 80101c4:	69fb      	ldr	r3, [r7, #28]
 80101c6:	2201      	movs	r2, #1
 80101c8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80101ca:	2100      	movs	r1, #0
 80101cc:	6878      	ldr	r0, [r7, #4]
 80101ce:	f7ff faaf 	bl	800f730 <dir_next>
 80101d2:	4603      	mov	r3, r0
 80101d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 80101d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d107      	bne.n	80101f0 <dir_register+0x184>
 80101e0:	6a3b      	ldr	r3, [r7, #32]
 80101e2:	3b01      	subs	r3, #1
 80101e4:	623b      	str	r3, [r7, #32]
 80101e6:	6a3b      	ldr	r3, [r7, #32]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d1d5      	bne.n	8010198 <dir_register+0x12c>
 80101ec:	e000      	b.n	80101f0 <dir_register+0x184>
				if (res != FR_OK) break;
 80101ee:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80101f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d128      	bne.n	801024a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	69db      	ldr	r3, [r3, #28]
 80101fc:	4619      	mov	r1, r3
 80101fe:	69f8      	ldr	r0, [r7, #28]
 8010200:	f7fe fe9e 	bl	800ef40 <move_window>
 8010204:	4603      	mov	r3, r0
 8010206:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801020a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801020e:	2b00      	cmp	r3, #0
 8010210:	d11b      	bne.n	801024a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	6a1b      	ldr	r3, [r3, #32]
 8010216:	2220      	movs	r2, #32
 8010218:	2100      	movs	r1, #0
 801021a:	4618      	mov	r0, r3
 801021c:	f7fe fc51 	bl	800eac2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	6a18      	ldr	r0, [r3, #32]
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	3324      	adds	r3, #36	@ 0x24
 8010228:	220b      	movs	r2, #11
 801022a:	4619      	mov	r1, r3
 801022c:	f7fe fc28 	bl	800ea80 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	6a1b      	ldr	r3, [r3, #32]
 801023a:	330c      	adds	r3, #12
 801023c:	f002 0218 	and.w	r2, r2, #24
 8010240:	b2d2      	uxtb	r2, r2
 8010242:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8010244:	69fb      	ldr	r3, [r7, #28]
 8010246:	2201      	movs	r2, #1
 8010248:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801024a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801024e:	4618      	mov	r0, r3
 8010250:	3730      	adds	r7, #48	@ 0x30
 8010252:	46bd      	mov	sp, r7
 8010254:	bd80      	pop	{r7, pc}
 8010256:	bf00      	nop
 8010258:	4ec4ec4f 	.word	0x4ec4ec4f

0801025c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801025c:	b580      	push	{r7, lr}
 801025e:	b088      	sub	sp, #32
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
 8010264:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	2200      	movs	r2, #0
 8010270:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	69db      	ldr	r3, [r3, #28]
 8010276:	2b00      	cmp	r3, #0
 8010278:	f000 80ca 	beq.w	8010410 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010284:	d032      	beq.n	80102ec <get_fileinfo+0x90>
			i = j = 0;
 8010286:	2300      	movs	r3, #0
 8010288:	61bb      	str	r3, [r7, #24]
 801028a:	69bb      	ldr	r3, [r7, #24]
 801028c:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801028e:	e01b      	b.n	80102c8 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8010290:	89fb      	ldrh	r3, [r7, #14]
 8010292:	2100      	movs	r1, #0
 8010294:	4618      	mov	r0, r3
 8010296:	f001 ff0d 	bl	80120b4 <ff_convert>
 801029a:	4603      	mov	r3, r0
 801029c:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 801029e:	89fb      	ldrh	r3, [r7, #14]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d102      	bne.n	80102aa <get_fileinfo+0x4e>
 80102a4:	2300      	movs	r3, #0
 80102a6:	61fb      	str	r3, [r7, #28]
 80102a8:	e01a      	b.n	80102e0 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80102aa:	69fb      	ldr	r3, [r7, #28]
 80102ac:	2bfe      	cmp	r3, #254	@ 0xfe
 80102ae:	d902      	bls.n	80102b6 <get_fileinfo+0x5a>
 80102b0:	2300      	movs	r3, #0
 80102b2:	61fb      	str	r3, [r7, #28]
 80102b4:	e014      	b.n	80102e0 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 80102b6:	69fb      	ldr	r3, [r7, #28]
 80102b8:	1c5a      	adds	r2, r3, #1
 80102ba:	61fa      	str	r2, [r7, #28]
 80102bc:	89fa      	ldrh	r2, [r7, #14]
 80102be:	b2d1      	uxtb	r1, r2
 80102c0:	683a      	ldr	r2, [r7, #0]
 80102c2:	4413      	add	r3, r2
 80102c4:	460a      	mov	r2, r1
 80102c6:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80102c8:	693b      	ldr	r3, [r7, #16]
 80102ca:	68da      	ldr	r2, [r3, #12]
 80102cc:	69bb      	ldr	r3, [r7, #24]
 80102ce:	1c59      	adds	r1, r3, #1
 80102d0:	61b9      	str	r1, [r7, #24]
 80102d2:	005b      	lsls	r3, r3, #1
 80102d4:	4413      	add	r3, r2
 80102d6:	881b      	ldrh	r3, [r3, #0]
 80102d8:	81fb      	strh	r3, [r7, #14]
 80102da:	89fb      	ldrh	r3, [r7, #14]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d1d7      	bne.n	8010290 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 80102e0:	683a      	ldr	r2, [r7, #0]
 80102e2:	69fb      	ldr	r3, [r7, #28]
 80102e4:	4413      	add	r3, r2
 80102e6:	3316      	adds	r3, #22
 80102e8:	2200      	movs	r2, #0
 80102ea:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 80102ec:	2300      	movs	r3, #0
 80102ee:	61bb      	str	r3, [r7, #24]
 80102f0:	69bb      	ldr	r3, [r7, #24]
 80102f2:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 80102f4:	683a      	ldr	r2, [r7, #0]
 80102f6:	69fb      	ldr	r3, [r7, #28]
 80102f8:	4413      	add	r3, r2
 80102fa:	3316      	adds	r3, #22
 80102fc:	781b      	ldrb	r3, [r3, #0]
 80102fe:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8010300:	e04d      	b.n	801039e <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	6a1a      	ldr	r2, [r3, #32]
 8010306:	69fb      	ldr	r3, [r7, #28]
 8010308:	1c59      	adds	r1, r3, #1
 801030a:	61f9      	str	r1, [r7, #28]
 801030c:	4413      	add	r3, r2
 801030e:	781b      	ldrb	r3, [r3, #0]
 8010310:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8010312:	7dfb      	ldrb	r3, [r7, #23]
 8010314:	2b20      	cmp	r3, #32
 8010316:	d041      	beq.n	801039c <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8010318:	7dfb      	ldrb	r3, [r7, #23]
 801031a:	2b05      	cmp	r3, #5
 801031c:	d101      	bne.n	8010322 <get_fileinfo+0xc6>
 801031e:	23e5      	movs	r3, #229	@ 0xe5
 8010320:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8010322:	69fb      	ldr	r3, [r7, #28]
 8010324:	2b09      	cmp	r3, #9
 8010326:	d10f      	bne.n	8010348 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 8010328:	89bb      	ldrh	r3, [r7, #12]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d105      	bne.n	801033a <get_fileinfo+0xde>
 801032e:	683a      	ldr	r2, [r7, #0]
 8010330:	69bb      	ldr	r3, [r7, #24]
 8010332:	4413      	add	r3, r2
 8010334:	3316      	adds	r3, #22
 8010336:	222e      	movs	r2, #46	@ 0x2e
 8010338:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 801033a:	69bb      	ldr	r3, [r7, #24]
 801033c:	1c5a      	adds	r2, r3, #1
 801033e:	61ba      	str	r2, [r7, #24]
 8010340:	683a      	ldr	r2, [r7, #0]
 8010342:	4413      	add	r3, r2
 8010344:	222e      	movs	r2, #46	@ 0x2e
 8010346:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8010348:	683a      	ldr	r2, [r7, #0]
 801034a:	69bb      	ldr	r3, [r7, #24]
 801034c:	4413      	add	r3, r2
 801034e:	3309      	adds	r3, #9
 8010350:	7dfa      	ldrb	r2, [r7, #23]
 8010352:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8010354:	89bb      	ldrh	r3, [r7, #12]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d11c      	bne.n	8010394 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 801035a:	7dfb      	ldrb	r3, [r7, #23]
 801035c:	2b40      	cmp	r3, #64	@ 0x40
 801035e:	d913      	bls.n	8010388 <get_fileinfo+0x12c>
 8010360:	7dfb      	ldrb	r3, [r7, #23]
 8010362:	2b5a      	cmp	r3, #90	@ 0x5a
 8010364:	d810      	bhi.n	8010388 <get_fileinfo+0x12c>
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	6a1b      	ldr	r3, [r3, #32]
 801036a:	330c      	adds	r3, #12
 801036c:	781b      	ldrb	r3, [r3, #0]
 801036e:	461a      	mov	r2, r3
 8010370:	69fb      	ldr	r3, [r7, #28]
 8010372:	2b08      	cmp	r3, #8
 8010374:	d901      	bls.n	801037a <get_fileinfo+0x11e>
 8010376:	2310      	movs	r3, #16
 8010378:	e000      	b.n	801037c <get_fileinfo+0x120>
 801037a:	2308      	movs	r3, #8
 801037c:	4013      	ands	r3, r2
 801037e:	2b00      	cmp	r3, #0
 8010380:	d002      	beq.n	8010388 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 8010382:	7dfb      	ldrb	r3, [r7, #23]
 8010384:	3320      	adds	r3, #32
 8010386:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8010388:	683a      	ldr	r2, [r7, #0]
 801038a:	69bb      	ldr	r3, [r7, #24]
 801038c:	4413      	add	r3, r2
 801038e:	3316      	adds	r3, #22
 8010390:	7dfa      	ldrb	r2, [r7, #23]
 8010392:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8010394:	69bb      	ldr	r3, [r7, #24]
 8010396:	3301      	adds	r3, #1
 8010398:	61bb      	str	r3, [r7, #24]
 801039a:	e000      	b.n	801039e <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 801039c:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 801039e:	69fb      	ldr	r3, [r7, #28]
 80103a0:	2b0a      	cmp	r3, #10
 80103a2:	d9ae      	bls.n	8010302 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 80103a4:	89bb      	ldrh	r3, [r7, #12]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d10d      	bne.n	80103c6 <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 80103aa:	683a      	ldr	r2, [r7, #0]
 80103ac:	69bb      	ldr	r3, [r7, #24]
 80103ae:	4413      	add	r3, r2
 80103b0:	3316      	adds	r3, #22
 80103b2:	2200      	movs	r2, #0
 80103b4:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	6a1b      	ldr	r3, [r3, #32]
 80103ba:	330c      	adds	r3, #12
 80103bc:	781b      	ldrb	r3, [r3, #0]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d101      	bne.n	80103c6 <get_fileinfo+0x16a>
 80103c2:	2300      	movs	r3, #0
 80103c4:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80103c6:	683a      	ldr	r2, [r7, #0]
 80103c8:	69bb      	ldr	r3, [r7, #24]
 80103ca:	4413      	add	r3, r2
 80103cc:	3309      	adds	r3, #9
 80103ce:	2200      	movs	r2, #0
 80103d0:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	6a1b      	ldr	r3, [r3, #32]
 80103d6:	7ada      	ldrb	r2, [r3, #11]
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	6a1b      	ldr	r3, [r3, #32]
 80103e0:	331c      	adds	r3, #28
 80103e2:	4618      	mov	r0, r3
 80103e4:	f7fe fae2 	bl	800e9ac <ld_dword>
 80103e8:	4602      	mov	r2, r0
 80103ea:	683b      	ldr	r3, [r7, #0]
 80103ec:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	6a1b      	ldr	r3, [r3, #32]
 80103f2:	3316      	adds	r3, #22
 80103f4:	4618      	mov	r0, r3
 80103f6:	f7fe fad9 	bl	800e9ac <ld_dword>
 80103fa:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80103fc:	68bb      	ldr	r3, [r7, #8]
 80103fe:	b29a      	uxth	r2, r3
 8010400:	683b      	ldr	r3, [r7, #0]
 8010402:	80da      	strh	r2, [r3, #6]
 8010404:	68bb      	ldr	r3, [r7, #8]
 8010406:	0c1b      	lsrs	r3, r3, #16
 8010408:	b29a      	uxth	r2, r3
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	809a      	strh	r2, [r3, #4]
 801040e:	e000      	b.n	8010412 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010410:	bf00      	nop
}
 8010412:	3720      	adds	r7, #32
 8010414:	46bd      	mov	sp, r7
 8010416:	bd80      	pop	{r7, pc}

08010418 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b08a      	sub	sp, #40	@ 0x28
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
 8010420:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8010422:	683b      	ldr	r3, [r7, #0]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	613b      	str	r3, [r7, #16]
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	68db      	ldr	r3, [r3, #12]
 801042e:	60fb      	str	r3, [r7, #12]
 8010430:	2300      	movs	r3, #0
 8010432:	617b      	str	r3, [r7, #20]
 8010434:	697b      	ldr	r3, [r7, #20]
 8010436:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8010438:	69bb      	ldr	r3, [r7, #24]
 801043a:	1c5a      	adds	r2, r3, #1
 801043c:	61ba      	str	r2, [r7, #24]
 801043e:	693a      	ldr	r2, [r7, #16]
 8010440:	4413      	add	r3, r2
 8010442:	781b      	ldrb	r3, [r3, #0]
 8010444:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8010446:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010448:	2b1f      	cmp	r3, #31
 801044a:	d940      	bls.n	80104ce <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801044c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801044e:	2b2f      	cmp	r3, #47	@ 0x2f
 8010450:	d006      	beq.n	8010460 <create_name+0x48>
 8010452:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010454:	2b5c      	cmp	r3, #92	@ 0x5c
 8010456:	d110      	bne.n	801047a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010458:	e002      	b.n	8010460 <create_name+0x48>
 801045a:	69bb      	ldr	r3, [r7, #24]
 801045c:	3301      	adds	r3, #1
 801045e:	61bb      	str	r3, [r7, #24]
 8010460:	693a      	ldr	r2, [r7, #16]
 8010462:	69bb      	ldr	r3, [r7, #24]
 8010464:	4413      	add	r3, r2
 8010466:	781b      	ldrb	r3, [r3, #0]
 8010468:	2b2f      	cmp	r3, #47	@ 0x2f
 801046a:	d0f6      	beq.n	801045a <create_name+0x42>
 801046c:	693a      	ldr	r2, [r7, #16]
 801046e:	69bb      	ldr	r3, [r7, #24]
 8010470:	4413      	add	r3, r2
 8010472:	781b      	ldrb	r3, [r3, #0]
 8010474:	2b5c      	cmp	r3, #92	@ 0x5c
 8010476:	d0f0      	beq.n	801045a <create_name+0x42>
			break;
 8010478:	e02a      	b.n	80104d0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801047a:	697b      	ldr	r3, [r7, #20]
 801047c:	2bfe      	cmp	r3, #254	@ 0xfe
 801047e:	d901      	bls.n	8010484 <create_name+0x6c>
 8010480:	2306      	movs	r3, #6
 8010482:	e17d      	b.n	8010780 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8010484:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010486:	b2db      	uxtb	r3, r3
 8010488:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801048a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801048c:	2101      	movs	r1, #1
 801048e:	4618      	mov	r0, r3
 8010490:	f001 fe10 	bl	80120b4 <ff_convert>
 8010494:	4603      	mov	r3, r0
 8010496:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8010498:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801049a:	2b00      	cmp	r3, #0
 801049c:	d101      	bne.n	80104a2 <create_name+0x8a>
 801049e:	2306      	movs	r3, #6
 80104a0:	e16e      	b.n	8010780 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80104a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80104a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80104a6:	d809      	bhi.n	80104bc <create_name+0xa4>
 80104a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80104aa:	4619      	mov	r1, r3
 80104ac:	488d      	ldr	r0, [pc, #564]	@ (80106e4 <create_name+0x2cc>)
 80104ae:	f7fe fb4a 	bl	800eb46 <chk_chr>
 80104b2:	4603      	mov	r3, r0
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d001      	beq.n	80104bc <create_name+0xa4>
 80104b8:	2306      	movs	r3, #6
 80104ba:	e161      	b.n	8010780 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80104bc:	697b      	ldr	r3, [r7, #20]
 80104be:	1c5a      	adds	r2, r3, #1
 80104c0:	617a      	str	r2, [r7, #20]
 80104c2:	005b      	lsls	r3, r3, #1
 80104c4:	68fa      	ldr	r2, [r7, #12]
 80104c6:	4413      	add	r3, r2
 80104c8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80104ca:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80104cc:	e7b4      	b.n	8010438 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80104ce:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80104d0:	693a      	ldr	r2, [r7, #16]
 80104d2:	69bb      	ldr	r3, [r7, #24]
 80104d4:	441a      	add	r2, r3
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80104da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80104dc:	2b1f      	cmp	r3, #31
 80104de:	d801      	bhi.n	80104e4 <create_name+0xcc>
 80104e0:	2304      	movs	r3, #4
 80104e2:	e000      	b.n	80104e6 <create_name+0xce>
 80104e4:	2300      	movs	r3, #0
 80104e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80104ea:	e011      	b.n	8010510 <create_name+0xf8>
		w = lfn[di - 1];
 80104ec:	697a      	ldr	r2, [r7, #20]
 80104ee:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80104f2:	4413      	add	r3, r2
 80104f4:	005b      	lsls	r3, r3, #1
 80104f6:	68fa      	ldr	r2, [r7, #12]
 80104f8:	4413      	add	r3, r2
 80104fa:	881b      	ldrh	r3, [r3, #0]
 80104fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80104fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010500:	2b20      	cmp	r3, #32
 8010502:	d002      	beq.n	801050a <create_name+0xf2>
 8010504:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010506:	2b2e      	cmp	r3, #46	@ 0x2e
 8010508:	d106      	bne.n	8010518 <create_name+0x100>
		di--;
 801050a:	697b      	ldr	r3, [r7, #20]
 801050c:	3b01      	subs	r3, #1
 801050e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8010510:	697b      	ldr	r3, [r7, #20]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d1ea      	bne.n	80104ec <create_name+0xd4>
 8010516:	e000      	b.n	801051a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8010518:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801051a:	697b      	ldr	r3, [r7, #20]
 801051c:	005b      	lsls	r3, r3, #1
 801051e:	68fa      	ldr	r2, [r7, #12]
 8010520:	4413      	add	r3, r2
 8010522:	2200      	movs	r2, #0
 8010524:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8010526:	697b      	ldr	r3, [r7, #20]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d101      	bne.n	8010530 <create_name+0x118>
 801052c:	2306      	movs	r3, #6
 801052e:	e127      	b.n	8010780 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	3324      	adds	r3, #36	@ 0x24
 8010534:	220b      	movs	r2, #11
 8010536:	2120      	movs	r1, #32
 8010538:	4618      	mov	r0, r3
 801053a:	f7fe fac2 	bl	800eac2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801053e:	2300      	movs	r3, #0
 8010540:	61bb      	str	r3, [r7, #24]
 8010542:	e002      	b.n	801054a <create_name+0x132>
 8010544:	69bb      	ldr	r3, [r7, #24]
 8010546:	3301      	adds	r3, #1
 8010548:	61bb      	str	r3, [r7, #24]
 801054a:	69bb      	ldr	r3, [r7, #24]
 801054c:	005b      	lsls	r3, r3, #1
 801054e:	68fa      	ldr	r2, [r7, #12]
 8010550:	4413      	add	r3, r2
 8010552:	881b      	ldrh	r3, [r3, #0]
 8010554:	2b20      	cmp	r3, #32
 8010556:	d0f5      	beq.n	8010544 <create_name+0x12c>
 8010558:	69bb      	ldr	r3, [r7, #24]
 801055a:	005b      	lsls	r3, r3, #1
 801055c:	68fa      	ldr	r2, [r7, #12]
 801055e:	4413      	add	r3, r2
 8010560:	881b      	ldrh	r3, [r3, #0]
 8010562:	2b2e      	cmp	r3, #46	@ 0x2e
 8010564:	d0ee      	beq.n	8010544 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8010566:	69bb      	ldr	r3, [r7, #24]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d009      	beq.n	8010580 <create_name+0x168>
 801056c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010570:	f043 0303 	orr.w	r3, r3, #3
 8010574:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8010578:	e002      	b.n	8010580 <create_name+0x168>
 801057a:	697b      	ldr	r3, [r7, #20]
 801057c:	3b01      	subs	r3, #1
 801057e:	617b      	str	r3, [r7, #20]
 8010580:	697b      	ldr	r3, [r7, #20]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d009      	beq.n	801059a <create_name+0x182>
 8010586:	697a      	ldr	r2, [r7, #20]
 8010588:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801058c:	4413      	add	r3, r2
 801058e:	005b      	lsls	r3, r3, #1
 8010590:	68fa      	ldr	r2, [r7, #12]
 8010592:	4413      	add	r3, r2
 8010594:	881b      	ldrh	r3, [r3, #0]
 8010596:	2b2e      	cmp	r3, #46	@ 0x2e
 8010598:	d1ef      	bne.n	801057a <create_name+0x162>

	i = b = 0; ni = 8;
 801059a:	2300      	movs	r3, #0
 801059c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80105a0:	2300      	movs	r3, #0
 80105a2:	623b      	str	r3, [r7, #32]
 80105a4:	2308      	movs	r3, #8
 80105a6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80105a8:	69bb      	ldr	r3, [r7, #24]
 80105aa:	1c5a      	adds	r2, r3, #1
 80105ac:	61ba      	str	r2, [r7, #24]
 80105ae:	005b      	lsls	r3, r3, #1
 80105b0:	68fa      	ldr	r2, [r7, #12]
 80105b2:	4413      	add	r3, r2
 80105b4:	881b      	ldrh	r3, [r3, #0]
 80105b6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80105b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	f000 8090 	beq.w	80106e0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80105c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80105c2:	2b20      	cmp	r3, #32
 80105c4:	d006      	beq.n	80105d4 <create_name+0x1bc>
 80105c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80105c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80105ca:	d10a      	bne.n	80105e2 <create_name+0x1ca>
 80105cc:	69ba      	ldr	r2, [r7, #24]
 80105ce:	697b      	ldr	r3, [r7, #20]
 80105d0:	429a      	cmp	r2, r3
 80105d2:	d006      	beq.n	80105e2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80105d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80105d8:	f043 0303 	orr.w	r3, r3, #3
 80105dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80105e0:	e07d      	b.n	80106de <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80105e2:	6a3a      	ldr	r2, [r7, #32]
 80105e4:	69fb      	ldr	r3, [r7, #28]
 80105e6:	429a      	cmp	r2, r3
 80105e8:	d203      	bcs.n	80105f2 <create_name+0x1da>
 80105ea:	69ba      	ldr	r2, [r7, #24]
 80105ec:	697b      	ldr	r3, [r7, #20]
 80105ee:	429a      	cmp	r2, r3
 80105f0:	d123      	bne.n	801063a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80105f2:	69fb      	ldr	r3, [r7, #28]
 80105f4:	2b0b      	cmp	r3, #11
 80105f6:	d106      	bne.n	8010606 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80105f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80105fc:	f043 0303 	orr.w	r3, r3, #3
 8010600:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010604:	e075      	b.n	80106f2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8010606:	69ba      	ldr	r2, [r7, #24]
 8010608:	697b      	ldr	r3, [r7, #20]
 801060a:	429a      	cmp	r2, r3
 801060c:	d005      	beq.n	801061a <create_name+0x202>
 801060e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010612:	f043 0303 	orr.w	r3, r3, #3
 8010616:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801061a:	69ba      	ldr	r2, [r7, #24]
 801061c:	697b      	ldr	r3, [r7, #20]
 801061e:	429a      	cmp	r2, r3
 8010620:	d866      	bhi.n	80106f0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8010622:	697b      	ldr	r3, [r7, #20]
 8010624:	61bb      	str	r3, [r7, #24]
 8010626:	2308      	movs	r3, #8
 8010628:	623b      	str	r3, [r7, #32]
 801062a:	230b      	movs	r3, #11
 801062c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801062e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010632:	009b      	lsls	r3, r3, #2
 8010634:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010638:	e051      	b.n	80106de <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801063a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801063c:	2b7f      	cmp	r3, #127	@ 0x7f
 801063e:	d914      	bls.n	801066a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8010640:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010642:	2100      	movs	r1, #0
 8010644:	4618      	mov	r0, r3
 8010646:	f001 fd35 	bl	80120b4 <ff_convert>
 801064a:	4603      	mov	r3, r0
 801064c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801064e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010650:	2b00      	cmp	r3, #0
 8010652:	d004      	beq.n	801065e <create_name+0x246>
 8010654:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010656:	3b80      	subs	r3, #128	@ 0x80
 8010658:	4a23      	ldr	r2, [pc, #140]	@ (80106e8 <create_name+0x2d0>)
 801065a:	5cd3      	ldrb	r3, [r2, r3]
 801065c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801065e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010662:	f043 0302 	orr.w	r3, r3, #2
 8010666:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801066a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801066c:	2b00      	cmp	r3, #0
 801066e:	d007      	beq.n	8010680 <create_name+0x268>
 8010670:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010672:	4619      	mov	r1, r3
 8010674:	481d      	ldr	r0, [pc, #116]	@ (80106ec <create_name+0x2d4>)
 8010676:	f7fe fa66 	bl	800eb46 <chk_chr>
 801067a:	4603      	mov	r3, r0
 801067c:	2b00      	cmp	r3, #0
 801067e:	d008      	beq.n	8010692 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8010680:	235f      	movs	r3, #95	@ 0x5f
 8010682:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8010684:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010688:	f043 0303 	orr.w	r3, r3, #3
 801068c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010690:	e01b      	b.n	80106ca <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8010692:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010694:	2b40      	cmp	r3, #64	@ 0x40
 8010696:	d909      	bls.n	80106ac <create_name+0x294>
 8010698:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801069a:	2b5a      	cmp	r3, #90	@ 0x5a
 801069c:	d806      	bhi.n	80106ac <create_name+0x294>
					b |= 2;
 801069e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80106a2:	f043 0302 	orr.w	r3, r3, #2
 80106a6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80106aa:	e00e      	b.n	80106ca <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80106ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106ae:	2b60      	cmp	r3, #96	@ 0x60
 80106b0:	d90b      	bls.n	80106ca <create_name+0x2b2>
 80106b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106b4:	2b7a      	cmp	r3, #122	@ 0x7a
 80106b6:	d808      	bhi.n	80106ca <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80106b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80106bc:	f043 0301 	orr.w	r3, r3, #1
 80106c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80106c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106c6:	3b20      	subs	r3, #32
 80106c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80106ca:	6a3b      	ldr	r3, [r7, #32]
 80106cc:	1c5a      	adds	r2, r3, #1
 80106ce:	623a      	str	r2, [r7, #32]
 80106d0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80106d2:	b2d1      	uxtb	r1, r2
 80106d4:	687a      	ldr	r2, [r7, #4]
 80106d6:	4413      	add	r3, r2
 80106d8:	460a      	mov	r2, r1
 80106da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80106de:	e763      	b.n	80105a8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80106e0:	bf00      	nop
 80106e2:	e006      	b.n	80106f2 <create_name+0x2da>
 80106e4:	08018868 	.word	0x08018868
 80106e8:	080188dc 	.word	0x080188dc
 80106ec:	08018874 	.word	0x08018874
			if (si > di) break;			/* No extension */
 80106f0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80106f8:	2be5      	cmp	r3, #229	@ 0xe5
 80106fa:	d103      	bne.n	8010704 <create_name+0x2ec>
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2205      	movs	r2, #5
 8010700:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8010704:	69fb      	ldr	r3, [r7, #28]
 8010706:	2b08      	cmp	r3, #8
 8010708:	d104      	bne.n	8010714 <create_name+0x2fc>
 801070a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801070e:	009b      	lsls	r3, r3, #2
 8010710:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8010714:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010718:	f003 030c 	and.w	r3, r3, #12
 801071c:	2b0c      	cmp	r3, #12
 801071e:	d005      	beq.n	801072c <create_name+0x314>
 8010720:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010724:	f003 0303 	and.w	r3, r3, #3
 8010728:	2b03      	cmp	r3, #3
 801072a:	d105      	bne.n	8010738 <create_name+0x320>
 801072c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010730:	f043 0302 	orr.w	r3, r3, #2
 8010734:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8010738:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801073c:	f003 0302 	and.w	r3, r3, #2
 8010740:	2b00      	cmp	r3, #0
 8010742:	d117      	bne.n	8010774 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8010744:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010748:	f003 0303 	and.w	r3, r3, #3
 801074c:	2b01      	cmp	r3, #1
 801074e:	d105      	bne.n	801075c <create_name+0x344>
 8010750:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010754:	f043 0310 	orr.w	r3, r3, #16
 8010758:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801075c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010760:	f003 030c 	and.w	r3, r3, #12
 8010764:	2b04      	cmp	r3, #4
 8010766:	d105      	bne.n	8010774 <create_name+0x35c>
 8010768:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801076c:	f043 0308 	orr.w	r3, r3, #8
 8010770:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801077a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801077e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8010780:	4618      	mov	r0, r3
 8010782:	3728      	adds	r7, #40	@ 0x28
 8010784:	46bd      	mov	sp, r7
 8010786:	bd80      	pop	{r7, pc}

08010788 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b086      	sub	sp, #24
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
 8010790:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010796:	693b      	ldr	r3, [r7, #16]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801079c:	e002      	b.n	80107a4 <follow_path+0x1c>
 801079e:	683b      	ldr	r3, [r7, #0]
 80107a0:	3301      	adds	r3, #1
 80107a2:	603b      	str	r3, [r7, #0]
 80107a4:	683b      	ldr	r3, [r7, #0]
 80107a6:	781b      	ldrb	r3, [r3, #0]
 80107a8:	2b2f      	cmp	r3, #47	@ 0x2f
 80107aa:	d0f8      	beq.n	801079e <follow_path+0x16>
 80107ac:	683b      	ldr	r3, [r7, #0]
 80107ae:	781b      	ldrb	r3, [r3, #0]
 80107b0:	2b5c      	cmp	r3, #92	@ 0x5c
 80107b2:	d0f4      	beq.n	801079e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80107b4:	693b      	ldr	r3, [r7, #16]
 80107b6:	2200      	movs	r2, #0
 80107b8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80107ba:	683b      	ldr	r3, [r7, #0]
 80107bc:	781b      	ldrb	r3, [r3, #0]
 80107be:	2b1f      	cmp	r3, #31
 80107c0:	d80a      	bhi.n	80107d8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	2280      	movs	r2, #128	@ 0x80
 80107c6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80107ca:	2100      	movs	r1, #0
 80107cc:	6878      	ldr	r0, [r7, #4]
 80107ce:	f7fe ff34 	bl	800f63a <dir_sdi>
 80107d2:	4603      	mov	r3, r0
 80107d4:	75fb      	strb	r3, [r7, #23]
 80107d6:	e043      	b.n	8010860 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80107d8:	463b      	mov	r3, r7
 80107da:	4619      	mov	r1, r3
 80107dc:	6878      	ldr	r0, [r7, #4]
 80107de:	f7ff fe1b 	bl	8010418 <create_name>
 80107e2:	4603      	mov	r3, r0
 80107e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80107e6:	7dfb      	ldrb	r3, [r7, #23]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d134      	bne.n	8010856 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80107ec:	6878      	ldr	r0, [r7, #4]
 80107ee:	f7ff fb7d 	bl	800feec <dir_find>
 80107f2:	4603      	mov	r3, r0
 80107f4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80107fc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80107fe:	7dfb      	ldrb	r3, [r7, #23]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d00a      	beq.n	801081a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010804:	7dfb      	ldrb	r3, [r7, #23]
 8010806:	2b04      	cmp	r3, #4
 8010808:	d127      	bne.n	801085a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801080a:	7afb      	ldrb	r3, [r7, #11]
 801080c:	f003 0304 	and.w	r3, r3, #4
 8010810:	2b00      	cmp	r3, #0
 8010812:	d122      	bne.n	801085a <follow_path+0xd2>
 8010814:	2305      	movs	r3, #5
 8010816:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010818:	e01f      	b.n	801085a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801081a:	7afb      	ldrb	r3, [r7, #11]
 801081c:	f003 0304 	and.w	r3, r3, #4
 8010820:	2b00      	cmp	r3, #0
 8010822:	d11c      	bne.n	801085e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010824:	693b      	ldr	r3, [r7, #16]
 8010826:	799b      	ldrb	r3, [r3, #6]
 8010828:	f003 0310 	and.w	r3, r3, #16
 801082c:	2b00      	cmp	r3, #0
 801082e:	d102      	bne.n	8010836 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010830:	2305      	movs	r3, #5
 8010832:	75fb      	strb	r3, [r7, #23]
 8010834:	e014      	b.n	8010860 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	695b      	ldr	r3, [r3, #20]
 8010840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010844:	4413      	add	r3, r2
 8010846:	4619      	mov	r1, r3
 8010848:	68f8      	ldr	r0, [r7, #12]
 801084a:	f7ff f87d 	bl	800f948 <ld_clust>
 801084e:	4602      	mov	r2, r0
 8010850:	693b      	ldr	r3, [r7, #16]
 8010852:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010854:	e7c0      	b.n	80107d8 <follow_path+0x50>
			if (res != FR_OK) break;
 8010856:	bf00      	nop
 8010858:	e002      	b.n	8010860 <follow_path+0xd8>
				break;
 801085a:	bf00      	nop
 801085c:	e000      	b.n	8010860 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801085e:	bf00      	nop
			}
		}
	}

	return res;
 8010860:	7dfb      	ldrb	r3, [r7, #23]
}
 8010862:	4618      	mov	r0, r3
 8010864:	3718      	adds	r7, #24
 8010866:	46bd      	mov	sp, r7
 8010868:	bd80      	pop	{r7, pc}

0801086a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801086a:	b480      	push	{r7}
 801086c:	b087      	sub	sp, #28
 801086e:	af00      	add	r7, sp, #0
 8010870:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010872:	f04f 33ff 	mov.w	r3, #4294967295
 8010876:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d031      	beq.n	80108e4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	617b      	str	r3, [r7, #20]
 8010886:	e002      	b.n	801088e <get_ldnumber+0x24>
 8010888:	697b      	ldr	r3, [r7, #20]
 801088a:	3301      	adds	r3, #1
 801088c:	617b      	str	r3, [r7, #20]
 801088e:	697b      	ldr	r3, [r7, #20]
 8010890:	781b      	ldrb	r3, [r3, #0]
 8010892:	2b1f      	cmp	r3, #31
 8010894:	d903      	bls.n	801089e <get_ldnumber+0x34>
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	781b      	ldrb	r3, [r3, #0]
 801089a:	2b3a      	cmp	r3, #58	@ 0x3a
 801089c:	d1f4      	bne.n	8010888 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801089e:	697b      	ldr	r3, [r7, #20]
 80108a0:	781b      	ldrb	r3, [r3, #0]
 80108a2:	2b3a      	cmp	r3, #58	@ 0x3a
 80108a4:	d11c      	bne.n	80108e0 <get_ldnumber+0x76>
			tp = *path;
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	1c5a      	adds	r2, r3, #1
 80108b0:	60fa      	str	r2, [r7, #12]
 80108b2:	781b      	ldrb	r3, [r3, #0]
 80108b4:	3b30      	subs	r3, #48	@ 0x30
 80108b6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80108b8:	68bb      	ldr	r3, [r7, #8]
 80108ba:	2b09      	cmp	r3, #9
 80108bc:	d80e      	bhi.n	80108dc <get_ldnumber+0x72>
 80108be:	68fa      	ldr	r2, [r7, #12]
 80108c0:	697b      	ldr	r3, [r7, #20]
 80108c2:	429a      	cmp	r2, r3
 80108c4:	d10a      	bne.n	80108dc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80108c6:	68bb      	ldr	r3, [r7, #8]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d107      	bne.n	80108dc <get_ldnumber+0x72>
					vol = (int)i;
 80108cc:	68bb      	ldr	r3, [r7, #8]
 80108ce:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80108d0:	697b      	ldr	r3, [r7, #20]
 80108d2:	3301      	adds	r3, #1
 80108d4:	617b      	str	r3, [r7, #20]
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	697a      	ldr	r2, [r7, #20]
 80108da:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80108dc:	693b      	ldr	r3, [r7, #16]
 80108de:	e002      	b.n	80108e6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80108e0:	2300      	movs	r3, #0
 80108e2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80108e4:	693b      	ldr	r3, [r7, #16]
}
 80108e6:	4618      	mov	r0, r3
 80108e8:	371c      	adds	r7, #28
 80108ea:	46bd      	mov	sp, r7
 80108ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f0:	4770      	bx	lr
	...

080108f4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b082      	sub	sp, #8
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
 80108fc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	2200      	movs	r2, #0
 8010902:	70da      	strb	r2, [r3, #3]
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f04f 32ff 	mov.w	r2, #4294967295
 801090a:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801090c:	6839      	ldr	r1, [r7, #0]
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	f7fe fb16 	bl	800ef40 <move_window>
 8010914:	4603      	mov	r3, r0
 8010916:	2b00      	cmp	r3, #0
 8010918:	d001      	beq.n	801091e <check_fs+0x2a>
 801091a:	2304      	movs	r3, #4
 801091c:	e038      	b.n	8010990 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	3338      	adds	r3, #56	@ 0x38
 8010922:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010926:	4618      	mov	r0, r3
 8010928:	f7fe f828 	bl	800e97c <ld_word>
 801092c:	4603      	mov	r3, r0
 801092e:	461a      	mov	r2, r3
 8010930:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010934:	429a      	cmp	r2, r3
 8010936:	d001      	beq.n	801093c <check_fs+0x48>
 8010938:	2303      	movs	r3, #3
 801093a:	e029      	b.n	8010990 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010942:	2be9      	cmp	r3, #233	@ 0xe9
 8010944:	d009      	beq.n	801095a <check_fs+0x66>
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801094c:	2beb      	cmp	r3, #235	@ 0xeb
 801094e:	d11e      	bne.n	801098e <check_fs+0x9a>
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8010956:	2b90      	cmp	r3, #144	@ 0x90
 8010958:	d119      	bne.n	801098e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	3338      	adds	r3, #56	@ 0x38
 801095e:	3336      	adds	r3, #54	@ 0x36
 8010960:	4618      	mov	r0, r3
 8010962:	f7fe f823 	bl	800e9ac <ld_dword>
 8010966:	4603      	mov	r3, r0
 8010968:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801096c:	4a0a      	ldr	r2, [pc, #40]	@ (8010998 <check_fs+0xa4>)
 801096e:	4293      	cmp	r3, r2
 8010970:	d101      	bne.n	8010976 <check_fs+0x82>
 8010972:	2300      	movs	r3, #0
 8010974:	e00c      	b.n	8010990 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	3338      	adds	r3, #56	@ 0x38
 801097a:	3352      	adds	r3, #82	@ 0x52
 801097c:	4618      	mov	r0, r3
 801097e:	f7fe f815 	bl	800e9ac <ld_dword>
 8010982:	4603      	mov	r3, r0
 8010984:	4a05      	ldr	r2, [pc, #20]	@ (801099c <check_fs+0xa8>)
 8010986:	4293      	cmp	r3, r2
 8010988:	d101      	bne.n	801098e <check_fs+0x9a>
 801098a:	2300      	movs	r3, #0
 801098c:	e000      	b.n	8010990 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801098e:	2302      	movs	r3, #2
}
 8010990:	4618      	mov	r0, r3
 8010992:	3708      	adds	r7, #8
 8010994:	46bd      	mov	sp, r7
 8010996:	bd80      	pop	{r7, pc}
 8010998:	00544146 	.word	0x00544146
 801099c:	33544146 	.word	0x33544146

080109a0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b096      	sub	sp, #88	@ 0x58
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	60f8      	str	r0, [r7, #12]
 80109a8:	60b9      	str	r1, [r7, #8]
 80109aa:	4613      	mov	r3, r2
 80109ac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80109ae:	68bb      	ldr	r3, [r7, #8]
 80109b0:	2200      	movs	r2, #0
 80109b2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80109b4:	68f8      	ldr	r0, [r7, #12]
 80109b6:	f7ff ff58 	bl	801086a <get_ldnumber>
 80109ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80109bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80109be:	2b00      	cmp	r3, #0
 80109c0:	da01      	bge.n	80109c6 <find_volume+0x26>
 80109c2:	230b      	movs	r3, #11
 80109c4:	e235      	b.n	8010e32 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80109c6:	4aa5      	ldr	r2, [pc, #660]	@ (8010c5c <find_volume+0x2bc>)
 80109c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80109ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80109ce:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80109d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d101      	bne.n	80109da <find_volume+0x3a>
 80109d6:	230c      	movs	r3, #12
 80109d8:	e22b      	b.n	8010e32 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 80109da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80109dc:	f7fe f8ce 	bl	800eb7c <lock_fs>
 80109e0:	4603      	mov	r3, r0
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d101      	bne.n	80109ea <find_volume+0x4a>
 80109e6:	230f      	movs	r3, #15
 80109e8:	e223      	b.n	8010e32 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 80109ea:	68bb      	ldr	r3, [r7, #8]
 80109ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80109ee:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80109f0:	79fb      	ldrb	r3, [r7, #7]
 80109f2:	f023 0301 	bic.w	r3, r3, #1
 80109f6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80109f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109fa:	781b      	ldrb	r3, [r3, #0]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d01a      	beq.n	8010a36 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8010a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a02:	785b      	ldrb	r3, [r3, #1]
 8010a04:	4618      	mov	r0, r3
 8010a06:	f7fd ff1b 	bl	800e840 <disk_status>
 8010a0a:	4603      	mov	r3, r0
 8010a0c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010a10:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010a14:	f003 0301 	and.w	r3, r3, #1
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d10c      	bne.n	8010a36 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010a1c:	79fb      	ldrb	r3, [r7, #7]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d007      	beq.n	8010a32 <find_volume+0x92>
 8010a22:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010a26:	f003 0304 	and.w	r3, r3, #4
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d001      	beq.n	8010a32 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8010a2e:	230a      	movs	r3, #10
 8010a30:	e1ff      	b.n	8010e32 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8010a32:	2300      	movs	r3, #0
 8010a34:	e1fd      	b.n	8010e32 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a38:	2200      	movs	r2, #0
 8010a3a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010a3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a3e:	b2da      	uxtb	r2, r3
 8010a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a42:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a46:	785b      	ldrb	r3, [r3, #1]
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f7fd ff13 	bl	800e874 <disk_initialize>
 8010a4e:	4603      	mov	r3, r0
 8010a50:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010a54:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010a58:	f003 0301 	and.w	r3, r3, #1
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d001      	beq.n	8010a64 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010a60:	2303      	movs	r3, #3
 8010a62:	e1e6      	b.n	8010e32 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010a64:	79fb      	ldrb	r3, [r7, #7]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d007      	beq.n	8010a7a <find_volume+0xda>
 8010a6a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010a6e:	f003 0304 	and.w	r3, r3, #4
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d001      	beq.n	8010a7a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8010a76:	230a      	movs	r3, #10
 8010a78:	e1db      	b.n	8010e32 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010a7e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010a80:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010a82:	f7ff ff37 	bl	80108f4 <check_fs>
 8010a86:	4603      	mov	r3, r0
 8010a88:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010a8c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010a90:	2b02      	cmp	r3, #2
 8010a92:	d149      	bne.n	8010b28 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010a94:	2300      	movs	r3, #0
 8010a96:	643b      	str	r3, [r7, #64]	@ 0x40
 8010a98:	e01e      	b.n	8010ad8 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a9c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8010aa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010aa2:	011b      	lsls	r3, r3, #4
 8010aa4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8010aa8:	4413      	add	r3, r2
 8010aaa:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010aae:	3304      	adds	r3, #4
 8010ab0:	781b      	ldrb	r3, [r3, #0]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d006      	beq.n	8010ac4 <find_volume+0x124>
 8010ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ab8:	3308      	adds	r3, #8
 8010aba:	4618      	mov	r0, r3
 8010abc:	f7fd ff76 	bl	800e9ac <ld_dword>
 8010ac0:	4602      	mov	r2, r0
 8010ac2:	e000      	b.n	8010ac6 <find_volume+0x126>
 8010ac4:	2200      	movs	r2, #0
 8010ac6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ac8:	009b      	lsls	r3, r3, #2
 8010aca:	3358      	adds	r3, #88	@ 0x58
 8010acc:	443b      	add	r3, r7
 8010ace:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010ad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ad4:	3301      	adds	r3, #1
 8010ad6:	643b      	str	r3, [r7, #64]	@ 0x40
 8010ad8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ada:	2b03      	cmp	r3, #3
 8010adc:	d9dd      	bls.n	8010a9a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010ade:	2300      	movs	r3, #0
 8010ae0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8010ae2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d002      	beq.n	8010aee <find_volume+0x14e>
 8010ae8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010aea:	3b01      	subs	r3, #1
 8010aec:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010aee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010af0:	009b      	lsls	r3, r3, #2
 8010af2:	3358      	adds	r3, #88	@ 0x58
 8010af4:	443b      	add	r3, r7
 8010af6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010afa:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010afc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d005      	beq.n	8010b0e <find_volume+0x16e>
 8010b02:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010b04:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010b06:	f7ff fef5 	bl	80108f4 <check_fs>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	e000      	b.n	8010b10 <find_volume+0x170>
 8010b0e:	2303      	movs	r3, #3
 8010b10:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010b14:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010b18:	2b01      	cmp	r3, #1
 8010b1a:	d905      	bls.n	8010b28 <find_volume+0x188>
 8010b1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b1e:	3301      	adds	r3, #1
 8010b20:	643b      	str	r3, [r7, #64]	@ 0x40
 8010b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b24:	2b03      	cmp	r3, #3
 8010b26:	d9e2      	bls.n	8010aee <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010b28:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010b2c:	2b04      	cmp	r3, #4
 8010b2e:	d101      	bne.n	8010b34 <find_volume+0x194>
 8010b30:	2301      	movs	r3, #1
 8010b32:	e17e      	b.n	8010e32 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010b34:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010b38:	2b01      	cmp	r3, #1
 8010b3a:	d901      	bls.n	8010b40 <find_volume+0x1a0>
 8010b3c:	230d      	movs	r3, #13
 8010b3e:	e178      	b.n	8010e32 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b42:	3338      	adds	r3, #56	@ 0x38
 8010b44:	330b      	adds	r3, #11
 8010b46:	4618      	mov	r0, r3
 8010b48:	f7fd ff18 	bl	800e97c <ld_word>
 8010b4c:	4603      	mov	r3, r0
 8010b4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010b52:	d001      	beq.n	8010b58 <find_volume+0x1b8>
 8010b54:	230d      	movs	r3, #13
 8010b56:	e16c      	b.n	8010e32 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b5a:	3338      	adds	r3, #56	@ 0x38
 8010b5c:	3316      	adds	r3, #22
 8010b5e:	4618      	mov	r0, r3
 8010b60:	f7fd ff0c 	bl	800e97c <ld_word>
 8010b64:	4603      	mov	r3, r0
 8010b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010b68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d106      	bne.n	8010b7c <find_volume+0x1dc>
 8010b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b70:	3338      	adds	r3, #56	@ 0x38
 8010b72:	3324      	adds	r3, #36	@ 0x24
 8010b74:	4618      	mov	r0, r3
 8010b76:	f7fd ff19 	bl	800e9ac <ld_dword>
 8010b7a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8010b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b7e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010b80:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b84:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8010b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b8a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b8e:	789b      	ldrb	r3, [r3, #2]
 8010b90:	2b01      	cmp	r3, #1
 8010b92:	d005      	beq.n	8010ba0 <find_volume+0x200>
 8010b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b96:	789b      	ldrb	r3, [r3, #2]
 8010b98:	2b02      	cmp	r3, #2
 8010b9a:	d001      	beq.n	8010ba0 <find_volume+0x200>
 8010b9c:	230d      	movs	r3, #13
 8010b9e:	e148      	b.n	8010e32 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ba2:	789b      	ldrb	r3, [r3, #2]
 8010ba4:	461a      	mov	r2, r3
 8010ba6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ba8:	fb02 f303 	mul.w	r3, r2, r3
 8010bac:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010bb4:	461a      	mov	r2, r3
 8010bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bb8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bbc:	895b      	ldrh	r3, [r3, #10]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d008      	beq.n	8010bd4 <find_volume+0x234>
 8010bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bc4:	895b      	ldrh	r3, [r3, #10]
 8010bc6:	461a      	mov	r2, r3
 8010bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bca:	895b      	ldrh	r3, [r3, #10]
 8010bcc:	3b01      	subs	r3, #1
 8010bce:	4013      	ands	r3, r2
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d001      	beq.n	8010bd8 <find_volume+0x238>
 8010bd4:	230d      	movs	r3, #13
 8010bd6:	e12c      	b.n	8010e32 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bda:	3338      	adds	r3, #56	@ 0x38
 8010bdc:	3311      	adds	r3, #17
 8010bde:	4618      	mov	r0, r3
 8010be0:	f7fd fecc 	bl	800e97c <ld_word>
 8010be4:	4603      	mov	r3, r0
 8010be6:	461a      	mov	r2, r3
 8010be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bea:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bee:	891b      	ldrh	r3, [r3, #8]
 8010bf0:	f003 030f 	and.w	r3, r3, #15
 8010bf4:	b29b      	uxth	r3, r3
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d001      	beq.n	8010bfe <find_volume+0x25e>
 8010bfa:	230d      	movs	r3, #13
 8010bfc:	e119      	b.n	8010e32 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c00:	3338      	adds	r3, #56	@ 0x38
 8010c02:	3313      	adds	r3, #19
 8010c04:	4618      	mov	r0, r3
 8010c06:	f7fd feb9 	bl	800e97c <ld_word>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010c0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d106      	bne.n	8010c22 <find_volume+0x282>
 8010c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c16:	3338      	adds	r3, #56	@ 0x38
 8010c18:	3320      	adds	r3, #32
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	f7fd fec6 	bl	800e9ac <ld_dword>
 8010c20:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c24:	3338      	adds	r3, #56	@ 0x38
 8010c26:	330e      	adds	r3, #14
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f7fd fea7 	bl	800e97c <ld_word>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010c32:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d101      	bne.n	8010c3c <find_volume+0x29c>
 8010c38:	230d      	movs	r3, #13
 8010c3a:	e0fa      	b.n	8010e32 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010c3c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010c3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c40:	4413      	add	r3, r2
 8010c42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010c44:	8912      	ldrh	r2, [r2, #8]
 8010c46:	0912      	lsrs	r2, r2, #4
 8010c48:	b292      	uxth	r2, r2
 8010c4a:	4413      	add	r3, r2
 8010c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010c4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c52:	429a      	cmp	r2, r3
 8010c54:	d204      	bcs.n	8010c60 <find_volume+0x2c0>
 8010c56:	230d      	movs	r3, #13
 8010c58:	e0eb      	b.n	8010e32 <find_volume+0x492>
 8010c5a:	bf00      	nop
 8010c5c:	20005b94 	.word	0x20005b94
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010c60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c64:	1ad3      	subs	r3, r2, r3
 8010c66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010c68:	8952      	ldrh	r2, [r2, #10]
 8010c6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8010c6e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d101      	bne.n	8010c7a <find_volume+0x2da>
 8010c76:	230d      	movs	r3, #13
 8010c78:	e0db      	b.n	8010e32 <find_volume+0x492>
		fmt = FS_FAT32;
 8010c7a:	2303      	movs	r3, #3
 8010c7c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c82:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8010c86:	4293      	cmp	r3, r2
 8010c88:	d802      	bhi.n	8010c90 <find_volume+0x2f0>
 8010c8a:	2302      	movs	r3, #2
 8010c8c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c92:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8010c96:	4293      	cmp	r3, r2
 8010c98:	d802      	bhi.n	8010ca0 <find_volume+0x300>
 8010c9a:	2301      	movs	r3, #1
 8010c9c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ca2:	1c9a      	adds	r2, r3, #2
 8010ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ca6:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8010ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010caa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010cac:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010cae:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010cb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010cb2:	441a      	add	r2, r3
 8010cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cb6:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8010cb8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cbc:	441a      	add	r2, r3
 8010cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cc0:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8010cc2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010cc6:	2b03      	cmp	r3, #3
 8010cc8:	d11e      	bne.n	8010d08 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ccc:	3338      	adds	r3, #56	@ 0x38
 8010cce:	332a      	adds	r3, #42	@ 0x2a
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f7fd fe53 	bl	800e97c <ld_word>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d001      	beq.n	8010ce0 <find_volume+0x340>
 8010cdc:	230d      	movs	r3, #13
 8010cde:	e0a8      	b.n	8010e32 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ce2:	891b      	ldrh	r3, [r3, #8]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d001      	beq.n	8010cec <find_volume+0x34c>
 8010ce8:	230d      	movs	r3, #13
 8010cea:	e0a2      	b.n	8010e32 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cee:	3338      	adds	r3, #56	@ 0x38
 8010cf0:	332c      	adds	r3, #44	@ 0x2c
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f7fd fe5a 	bl	800e9ac <ld_dword>
 8010cf8:	4602      	mov	r2, r0
 8010cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cfc:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d00:	69db      	ldr	r3, [r3, #28]
 8010d02:	009b      	lsls	r3, r3, #2
 8010d04:	647b      	str	r3, [r7, #68]	@ 0x44
 8010d06:	e01f      	b.n	8010d48 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d0a:	891b      	ldrh	r3, [r3, #8]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d101      	bne.n	8010d14 <find_volume+0x374>
 8010d10:	230d      	movs	r3, #13
 8010d12:	e08e      	b.n	8010e32 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010d18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d1a:	441a      	add	r2, r3
 8010d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d1e:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010d20:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010d24:	2b02      	cmp	r3, #2
 8010d26:	d103      	bne.n	8010d30 <find_volume+0x390>
 8010d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d2a:	69db      	ldr	r3, [r3, #28]
 8010d2c:	005b      	lsls	r3, r3, #1
 8010d2e:	e00a      	b.n	8010d46 <find_volume+0x3a6>
 8010d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d32:	69da      	ldr	r2, [r3, #28]
 8010d34:	4613      	mov	r3, r2
 8010d36:	005b      	lsls	r3, r3, #1
 8010d38:	4413      	add	r3, r2
 8010d3a:	085a      	lsrs	r2, r3, #1
 8010d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d3e:	69db      	ldr	r3, [r3, #28]
 8010d40:	f003 0301 	and.w	r3, r3, #1
 8010d44:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010d46:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d4a:	6a1a      	ldr	r2, [r3, #32]
 8010d4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010d4e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8010d52:	0a5b      	lsrs	r3, r3, #9
 8010d54:	429a      	cmp	r2, r3
 8010d56:	d201      	bcs.n	8010d5c <find_volume+0x3bc>
 8010d58:	230d      	movs	r3, #13
 8010d5a:	e06a      	b.n	8010e32 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8010d62:	619a      	str	r2, [r3, #24]
 8010d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d66:	699a      	ldr	r2, [r3, #24]
 8010d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d6a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8010d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d6e:	2280      	movs	r2, #128	@ 0x80
 8010d70:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010d72:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010d76:	2b03      	cmp	r3, #3
 8010d78:	d149      	bne.n	8010e0e <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d7c:	3338      	adds	r3, #56	@ 0x38
 8010d7e:	3330      	adds	r3, #48	@ 0x30
 8010d80:	4618      	mov	r0, r3
 8010d82:	f7fd fdfb 	bl	800e97c <ld_word>
 8010d86:	4603      	mov	r3, r0
 8010d88:	2b01      	cmp	r3, #1
 8010d8a:	d140      	bne.n	8010e0e <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010d8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d8e:	3301      	adds	r3, #1
 8010d90:	4619      	mov	r1, r3
 8010d92:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010d94:	f7fe f8d4 	bl	800ef40 <move_window>
 8010d98:	4603      	mov	r3, r0
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d137      	bne.n	8010e0e <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8010d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010da0:	2200      	movs	r2, #0
 8010da2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010da6:	3338      	adds	r3, #56	@ 0x38
 8010da8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010dac:	4618      	mov	r0, r3
 8010dae:	f7fd fde5 	bl	800e97c <ld_word>
 8010db2:	4603      	mov	r3, r0
 8010db4:	461a      	mov	r2, r3
 8010db6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010dba:	429a      	cmp	r2, r3
 8010dbc:	d127      	bne.n	8010e0e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dc0:	3338      	adds	r3, #56	@ 0x38
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f7fd fdf2 	bl	800e9ac <ld_dword>
 8010dc8:	4603      	mov	r3, r0
 8010dca:	4a1c      	ldr	r2, [pc, #112]	@ (8010e3c <find_volume+0x49c>)
 8010dcc:	4293      	cmp	r3, r2
 8010dce:	d11e      	bne.n	8010e0e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dd2:	3338      	adds	r3, #56	@ 0x38
 8010dd4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f7fd fde7 	bl	800e9ac <ld_dword>
 8010dde:	4603      	mov	r3, r0
 8010de0:	4a17      	ldr	r2, [pc, #92]	@ (8010e40 <find_volume+0x4a0>)
 8010de2:	4293      	cmp	r3, r2
 8010de4:	d113      	bne.n	8010e0e <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010de8:	3338      	adds	r3, #56	@ 0x38
 8010dea:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8010dee:	4618      	mov	r0, r3
 8010df0:	f7fd fddc 	bl	800e9ac <ld_dword>
 8010df4:	4602      	mov	r2, r0
 8010df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010df8:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dfc:	3338      	adds	r3, #56	@ 0x38
 8010dfe:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8010e02:	4618      	mov	r0, r3
 8010e04:	f7fd fdd2 	bl	800e9ac <ld_dword>
 8010e08:	4602      	mov	r2, r0
 8010e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e0c:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e10:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8010e14:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010e16:	4b0b      	ldr	r3, [pc, #44]	@ (8010e44 <find_volume+0x4a4>)
 8010e18:	881b      	ldrh	r3, [r3, #0]
 8010e1a:	3301      	adds	r3, #1
 8010e1c:	b29a      	uxth	r2, r3
 8010e1e:	4b09      	ldr	r3, [pc, #36]	@ (8010e44 <find_volume+0x4a4>)
 8010e20:	801a      	strh	r2, [r3, #0]
 8010e22:	4b08      	ldr	r3, [pc, #32]	@ (8010e44 <find_volume+0x4a4>)
 8010e24:	881a      	ldrh	r2, [r3, #0]
 8010e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e28:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010e2a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010e2c:	f7fe f820 	bl	800ee70 <clear_lock>
#endif
	return FR_OK;
 8010e30:	2300      	movs	r3, #0
}
 8010e32:	4618      	mov	r0, r3
 8010e34:	3758      	adds	r7, #88	@ 0x58
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}
 8010e3a:	bf00      	nop
 8010e3c:	41615252 	.word	0x41615252
 8010e40:	61417272 	.word	0x61417272
 8010e44:	20005b98 	.word	0x20005b98

08010e48 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b084      	sub	sp, #16
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
 8010e50:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010e52:	2309      	movs	r3, #9
 8010e54:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d02e      	beq.n	8010eba <validate+0x72>
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d02a      	beq.n	8010eba <validate+0x72>
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	781b      	ldrb	r3, [r3, #0]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d025      	beq.n	8010eba <validate+0x72>
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	889a      	ldrh	r2, [r3, #4]
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	88db      	ldrh	r3, [r3, #6]
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	d11e      	bne.n	8010eba <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	4618      	mov	r0, r3
 8010e82:	f7fd fe7b 	bl	800eb7c <lock_fs>
 8010e86:	4603      	mov	r3, r0
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d014      	beq.n	8010eb6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	785b      	ldrb	r3, [r3, #1]
 8010e92:	4618      	mov	r0, r3
 8010e94:	f7fd fcd4 	bl	800e840 <disk_status>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	f003 0301 	and.w	r3, r3, #1
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d102      	bne.n	8010ea8 <validate+0x60>
				res = FR_OK;
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	73fb      	strb	r3, [r7, #15]
 8010ea6:	e008      	b.n	8010eba <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	2100      	movs	r1, #0
 8010eae:	4618      	mov	r0, r3
 8010eb0:	f7fd fe7a 	bl	800eba8 <unlock_fs>
 8010eb4:	e001      	b.n	8010eba <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8010eb6:	230f      	movs	r3, #15
 8010eb8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010eba:	7bfb      	ldrb	r3, [r7, #15]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d102      	bne.n	8010ec6 <validate+0x7e>
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	e000      	b.n	8010ec8 <validate+0x80>
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	683a      	ldr	r2, [r7, #0]
 8010eca:	6013      	str	r3, [r2, #0]
	return res;
 8010ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ece:	4618      	mov	r0, r3
 8010ed0:	3710      	adds	r7, #16
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}
	...

08010ed8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b088      	sub	sp, #32
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	60f8      	str	r0, [r7, #12]
 8010ee0:	60b9      	str	r1, [r7, #8]
 8010ee2:	4613      	mov	r3, r2
 8010ee4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010ee6:	68bb      	ldr	r3, [r7, #8]
 8010ee8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010eea:	f107 0310 	add.w	r3, r7, #16
 8010eee:	4618      	mov	r0, r3
 8010ef0:	f7ff fcbb 	bl	801086a <get_ldnumber>
 8010ef4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010ef6:	69fb      	ldr	r3, [r7, #28]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	da01      	bge.n	8010f00 <f_mount+0x28>
 8010efc:	230b      	movs	r3, #11
 8010efe:	e048      	b.n	8010f92 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010f00:	4a26      	ldr	r2, [pc, #152]	@ (8010f9c <f_mount+0xc4>)
 8010f02:	69fb      	ldr	r3, [r7, #28]
 8010f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f08:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010f0a:	69bb      	ldr	r3, [r7, #24]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d00f      	beq.n	8010f30 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010f10:	69b8      	ldr	r0, [r7, #24]
 8010f12:	f7fd ffad 	bl	800ee70 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8010f16:	69bb      	ldr	r3, [r7, #24]
 8010f18:	691b      	ldr	r3, [r3, #16]
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f001 f9b0 	bl	8012280 <ff_del_syncobj>
 8010f20:	4603      	mov	r3, r0
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d101      	bne.n	8010f2a <f_mount+0x52>
 8010f26:	2302      	movs	r3, #2
 8010f28:	e033      	b.n	8010f92 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010f2a:	69bb      	ldr	r3, [r7, #24]
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d00f      	beq.n	8010f56 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	2200      	movs	r2, #0
 8010f3a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8010f3c:	69fb      	ldr	r3, [r7, #28]
 8010f3e:	b2da      	uxtb	r2, r3
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	3310      	adds	r3, #16
 8010f44:	4619      	mov	r1, r3
 8010f46:	4610      	mov	r0, r2
 8010f48:	f001 f97a 	bl	8012240 <ff_cre_syncobj>
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d101      	bne.n	8010f56 <f_mount+0x7e>
 8010f52:	2302      	movs	r3, #2
 8010f54:	e01d      	b.n	8010f92 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010f56:	68fa      	ldr	r2, [r7, #12]
 8010f58:	4910      	ldr	r1, [pc, #64]	@ (8010f9c <f_mount+0xc4>)
 8010f5a:	69fb      	ldr	r3, [r7, #28]
 8010f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d002      	beq.n	8010f6c <f_mount+0x94>
 8010f66:	79fb      	ldrb	r3, [r7, #7]
 8010f68:	2b01      	cmp	r3, #1
 8010f6a:	d001      	beq.n	8010f70 <f_mount+0x98>
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	e010      	b.n	8010f92 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010f70:	f107 010c 	add.w	r1, r7, #12
 8010f74:	f107 0308 	add.w	r3, r7, #8
 8010f78:	2200      	movs	r2, #0
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f7ff fd10 	bl	80109a0 <find_volume>
 8010f80:	4603      	mov	r3, r0
 8010f82:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	7dfa      	ldrb	r2, [r7, #23]
 8010f88:	4611      	mov	r1, r2
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f7fd fe0c 	bl	800eba8 <unlock_fs>
 8010f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f92:	4618      	mov	r0, r3
 8010f94:	3720      	adds	r7, #32
 8010f96:	46bd      	mov	sp, r7
 8010f98:	bd80      	pop	{r7, pc}
 8010f9a:	bf00      	nop
 8010f9c:	20005b94 	.word	0x20005b94

08010fa0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8010fa6:	af00      	add	r7, sp, #0
 8010fa8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010fac:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8010fb0:	6018      	str	r0, [r3, #0]
 8010fb2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010fb6:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8010fba:	6019      	str	r1, [r3, #0]
 8010fbc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010fc0:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8010fc4:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010fc6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010fca:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d101      	bne.n	8010fd8 <f_open+0x38>
 8010fd4:	2309      	movs	r3, #9
 8010fd6:	e299      	b.n	801150c <f_open+0x56c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010fd8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010fdc:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8010fe0:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8010fe4:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 8010fe8:	7812      	ldrb	r2, [r2, #0]
 8010fea:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8010fee:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8010ff0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010ff4:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8010ff8:	781a      	ldrb	r2, [r3, #0]
 8010ffa:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 8010ffe:	f107 0308 	add.w	r3, r7, #8
 8011002:	4618      	mov	r0, r3
 8011004:	f7ff fccc 	bl	80109a0 <find_volume>
 8011008:	4603      	mov	r3, r0
 801100a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	if (res == FR_OK) {
 801100e:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8011012:	2b00      	cmp	r3, #0
 8011014:	f040 8265 	bne.w	80114e2 <f_open+0x542>
		dj.obj.fs = fs;
 8011018:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 801101c:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
		INIT_NAMBUF(fs);
 8011020:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8011024:	f107 0214 	add.w	r2, r7, #20
 8011028:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 801102a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801102e:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8011032:	681a      	ldr	r2, [r3, #0]
 8011034:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011038:	4611      	mov	r1, r2
 801103a:	4618      	mov	r0, r3
 801103c:	f7ff fba4 	bl	8010788 <follow_path>
 8011040:	4603      	mov	r3, r0
 8011042:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011046:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 801104a:	2b00      	cmp	r3, #0
 801104c:	d11c      	bne.n	8011088 <f_open+0xe8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801104e:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8011052:	b25b      	sxtb	r3, r3
 8011054:	2b00      	cmp	r3, #0
 8011056:	da03      	bge.n	8011060 <f_open+0xc0>
				res = FR_INVALID_NAME;
 8011058:	2306      	movs	r3, #6
 801105a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 801105e:	e013      	b.n	8011088 <f_open+0xe8>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011060:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011064:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8011068:	781b      	ldrb	r3, [r3, #0]
 801106a:	2b01      	cmp	r3, #1
 801106c:	bf8c      	ite	hi
 801106e:	2301      	movhi	r3, #1
 8011070:	2300      	movls	r3, #0
 8011072:	b2db      	uxtb	r3, r3
 8011074:	461a      	mov	r2, r3
 8011076:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 801107a:	4611      	mov	r1, r2
 801107c:	4618      	mov	r0, r3
 801107e:	f7fd fdaf 	bl	800ebe0 <chk_lock>
 8011082:	4603      	mov	r3, r0
 8011084:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011088:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801108c:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8011090:	781b      	ldrb	r3, [r3, #0]
 8011092:	f003 031c 	and.w	r3, r3, #28
 8011096:	2b00      	cmp	r3, #0
 8011098:	f000 80a7 	beq.w	80111ea <f_open+0x24a>
			if (res != FR_OK) {					/* No file, create new */
 801109c:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d01f      	beq.n	80110e4 <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80110a4:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80110a8:	2b04      	cmp	r3, #4
 80110aa:	d10e      	bne.n	80110ca <f_open+0x12a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80110ac:	f7fd fdf4 	bl	800ec98 <enq_lock>
 80110b0:	4603      	mov	r3, r0
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d006      	beq.n	80110c4 <f_open+0x124>
 80110b6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80110ba:	4618      	mov	r0, r3
 80110bc:	f7fe ffd6 	bl	801006c <dir_register>
 80110c0:	4603      	mov	r3, r0
 80110c2:	e000      	b.n	80110c6 <f_open+0x126>
 80110c4:	2312      	movs	r3, #18
 80110c6:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80110ca:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80110ce:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80110d2:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80110d6:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 80110da:	7812      	ldrb	r2, [r2, #0]
 80110dc:	f042 0208 	orr.w	r2, r2, #8
 80110e0:	701a      	strb	r2, [r3, #0]
 80110e2:	e015      	b.n	8011110 <f_open+0x170>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80110e4:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 80110e8:	f003 0311 	and.w	r3, r3, #17
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d003      	beq.n	80110f8 <f_open+0x158>
					res = FR_DENIED;
 80110f0:	2307      	movs	r3, #7
 80110f2:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 80110f6:	e00b      	b.n	8011110 <f_open+0x170>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80110f8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80110fc:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8011100:	781b      	ldrb	r3, [r3, #0]
 8011102:	f003 0304 	and.w	r3, r3, #4
 8011106:	2b00      	cmp	r3, #0
 8011108:	d002      	beq.n	8011110 <f_open+0x170>
 801110a:	2308      	movs	r3, #8
 801110c:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011110:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8011114:	2b00      	cmp	r3, #0
 8011116:	f040 8088 	bne.w	801122a <f_open+0x28a>
 801111a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801111e:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8011122:	781b      	ldrb	r3, [r3, #0]
 8011124:	f003 0308 	and.w	r3, r3, #8
 8011128:	2b00      	cmp	r3, #0
 801112a:	d07e      	beq.n	801122a <f_open+0x28a>
				dw = GET_FATTIME();
 801112c:	f7fc fe44 	bl	800ddb8 <get_fattime>
 8011130:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011134:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8011138:	330e      	adds	r3, #14
 801113a:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 801113e:	4618      	mov	r0, r3
 8011140:	f7fd fc72 	bl	800ea28 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011144:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8011148:	3316      	adds	r3, #22
 801114a:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 801114e:	4618      	mov	r0, r3
 8011150:	f7fd fc6a 	bl	800ea28 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011154:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8011158:	330b      	adds	r3, #11
 801115a:	2220      	movs	r2, #32
 801115c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801115e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8011162:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8011166:	4611      	mov	r1, r2
 8011168:	4618      	mov	r0, r3
 801116a:	f7fe fbed 	bl	800f948 <ld_clust>
 801116e:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011172:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8011176:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 801117a:	2200      	movs	r2, #0
 801117c:	4618      	mov	r0, r3
 801117e:	f7fe fc02 	bl	800f986 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011182:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8011186:	331c      	adds	r3, #28
 8011188:	2100      	movs	r1, #0
 801118a:	4618      	mov	r0, r3
 801118c:	f7fd fc4c 	bl	800ea28 <st_dword>
					fs->wflag = 1;
 8011190:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8011194:	2201      	movs	r2, #1
 8011196:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011198:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 801119c:	2b00      	cmp	r3, #0
 801119e:	d044      	beq.n	801122a <f_open+0x28a>
						dw = fs->winsect;
 80111a0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80111a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80111a6:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
						res = remove_chain(&dj.obj, cl, 0);
 80111aa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80111ae:	2200      	movs	r2, #0
 80111b0:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 80111b4:	4618      	mov	r0, r3
 80111b6:	f7fe f90f 	bl	800f3d8 <remove_chain>
 80111ba:	4603      	mov	r3, r0
 80111bc:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
						if (res == FR_OK) {
 80111c0:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d130      	bne.n	801122a <f_open+0x28a>
							res = move_window(fs, dw);
 80111c8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80111cc:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 80111d0:	4618      	mov	r0, r3
 80111d2:	f7fd feb5 	bl	800ef40 <move_window>
 80111d6:	4603      	mov	r3, r0
 80111d8:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80111dc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80111e0:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 80111e4:	3a01      	subs	r2, #1
 80111e6:	615a      	str	r2, [r3, #20]
 80111e8:	e01f      	b.n	801122a <f_open+0x28a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80111ea:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d11b      	bne.n	801122a <f_open+0x28a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80111f2:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 80111f6:	f003 0310 	and.w	r3, r3, #16
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d003      	beq.n	8011206 <f_open+0x266>
					res = FR_NO_FILE;
 80111fe:	2304      	movs	r3, #4
 8011200:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 8011204:	e011      	b.n	801122a <f_open+0x28a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8011206:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801120a:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 801120e:	781b      	ldrb	r3, [r3, #0]
 8011210:	f003 0302 	and.w	r3, r3, #2
 8011214:	2b00      	cmp	r3, #0
 8011216:	d008      	beq.n	801122a <f_open+0x28a>
 8011218:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 801121c:	f003 0301 	and.w	r3, r3, #1
 8011220:	2b00      	cmp	r3, #0
 8011222:	d002      	beq.n	801122a <f_open+0x28a>
						res = FR_DENIED;
 8011224:	2307      	movs	r3, #7
 8011226:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 801122a:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 801122e:	2b00      	cmp	r3, #0
 8011230:	d148      	bne.n	80112c4 <f_open+0x324>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011232:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011236:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 801123a:	781b      	ldrb	r3, [r3, #0]
 801123c:	f003 0308 	and.w	r3, r3, #8
 8011240:	2b00      	cmp	r3, #0
 8011242:	d00b      	beq.n	801125c <f_open+0x2bc>
				mode |= FA_MODIFIED;
 8011244:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011248:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 801124c:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8011250:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 8011254:	7812      	ldrb	r2, [r2, #0]
 8011256:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801125a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801125c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8011260:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011262:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011266:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801126e:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8011272:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011276:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801127e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011282:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8011286:	781b      	ldrb	r3, [r3, #0]
 8011288:	2b01      	cmp	r3, #1
 801128a:	bf8c      	ite	hi
 801128c:	2301      	movhi	r3, #1
 801128e:	2300      	movls	r3, #0
 8011290:	b2db      	uxtb	r3, r3
 8011292:	461a      	mov	r2, r3
 8011294:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011298:	4611      	mov	r1, r2
 801129a:	4618      	mov	r0, r3
 801129c:	f7fd fd1e 	bl	800ecdc <inc_lock>
 80112a0:	4602      	mov	r2, r0
 80112a2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80112a6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80112ae:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80112b2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	691b      	ldr	r3, [r3, #16]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d102      	bne.n	80112c4 <f_open+0x324>
 80112be:	2302      	movs	r3, #2
 80112c0:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 80112c4:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	f040 810a 	bne.w	80114e2 <f_open+0x542>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80112ce:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80112d2:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 80112d6:	4611      	mov	r1, r2
 80112d8:	4618      	mov	r0, r3
 80112da:	f7fe fb35 	bl	800f948 <ld_clust>
 80112de:	4602      	mov	r2, r0
 80112e0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80112e4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80112ec:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80112f0:	331c      	adds	r3, #28
 80112f2:	4618      	mov	r0, r3
 80112f4:	f7fd fb5a 	bl	800e9ac <ld_dword>
 80112f8:	4602      	mov	r2, r0
 80112fa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80112fe:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011306:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801130a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	2200      	movs	r2, #0
 8011312:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011314:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8011318:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801131c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011324:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8011328:	88da      	ldrh	r2, [r3, #6]
 801132a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801132e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011336:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801133a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8011344:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 8011348:	7812      	ldrb	r2, [r2, #0]
 801134a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801134c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011350:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	2200      	movs	r2, #0
 8011358:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801135a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801135e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	2200      	movs	r2, #0
 8011366:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011368:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801136c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	2200      	movs	r2, #0
 8011374:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011376:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801137a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	3330      	adds	r3, #48	@ 0x30
 8011382:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011386:	2100      	movs	r1, #0
 8011388:	4618      	mov	r0, r3
 801138a:	f7fd fb9a 	bl	800eac2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801138e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011392:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8011396:	781b      	ldrb	r3, [r3, #0]
 8011398:	f003 0320 	and.w	r3, r3, #32
 801139c:	2b00      	cmp	r3, #0
 801139e:	f000 80a0 	beq.w	80114e2 <f_open+0x542>
 80113a2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80113a6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	68db      	ldr	r3, [r3, #12]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	f000 8097 	beq.w	80114e2 <f_open+0x542>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80113b4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80113b8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	68da      	ldr	r2, [r3, #12]
 80113c0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80113c4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80113cc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80113d0:	895b      	ldrh	r3, [r3, #10]
 80113d2:	025b      	lsls	r3, r3, #9
 80113d4:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80113d8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80113dc:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	689b      	ldr	r3, [r3, #8]
 80113e4:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80113e8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80113ec:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	68db      	ldr	r3, [r3, #12]
 80113f4:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 80113f8:	e021      	b.n	801143e <f_open+0x49e>
					clst = get_fat(&fp->obj, clst);
 80113fa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80113fe:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 8011408:	4618      	mov	r0, r3
 801140a:	f7fd fe54 	bl	800f0b6 <get_fat>
 801140e:	f8c7 0260 	str.w	r0, [r7, #608]	@ 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8011412:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8011416:	2b01      	cmp	r3, #1
 8011418:	d802      	bhi.n	8011420 <f_open+0x480>
 801141a:	2302      	movs	r3, #2
 801141c:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011420:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8011424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011428:	d102      	bne.n	8011430 <f_open+0x490>
 801142a:	2301      	movs	r3, #1
 801142c:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011430:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8011434:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8011438:	1ad3      	subs	r3, r2, r3
 801143a:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 801143e:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8011442:	2b00      	cmp	r3, #0
 8011444:	d105      	bne.n	8011452 <f_open+0x4b2>
 8011446:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 801144a:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 801144e:	429a      	cmp	r2, r3
 8011450:	d8d3      	bhi.n	80113fa <f_open+0x45a>
				}
				fp->clust = clst;
 8011452:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011456:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8011460:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011462:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8011466:	2b00      	cmp	r3, #0
 8011468:	d13b      	bne.n	80114e2 <f_open+0x542>
 801146a:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801146e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011472:	2b00      	cmp	r3, #0
 8011474:	d035      	beq.n	80114e2 <f_open+0x542>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011476:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 801147a:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 801147e:	4618      	mov	r0, r3
 8011480:	f7fd fdfa 	bl	800f078 <clust2sect>
 8011484:	f8c7 024c 	str.w	r0, [r7, #588]	@ 0x24c
 8011488:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 801148c:	2b00      	cmp	r3, #0
 801148e:	d103      	bne.n	8011498 <f_open+0x4f8>
						res = FR_INT_ERR;
 8011490:	2302      	movs	r3, #2
 8011492:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 8011496:	e024      	b.n	80114e2 <f_open+0x542>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011498:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801149c:	0a5a      	lsrs	r2, r3, #9
 801149e:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80114a2:	441a      	add	r2, r3
 80114a4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80114a8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80114b0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80114b4:	7858      	ldrb	r0, [r3, #1]
 80114b6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80114ba:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80114c4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80114c8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	6a1a      	ldr	r2, [r3, #32]
 80114d0:	2301      	movs	r3, #1
 80114d2:	f7fd f9f5 	bl	800e8c0 <disk_read>
 80114d6:	4603      	mov	r3, r0
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d002      	beq.n	80114e2 <f_open+0x542>
 80114dc:	2301      	movs	r3, #1
 80114de:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80114e2:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d006      	beq.n	80114f8 <f_open+0x558>
 80114ea:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80114ee:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	2200      	movs	r2, #0
 80114f6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80114f8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80114fc:	f897 2267 	ldrb.w	r2, [r7, #615]	@ 0x267
 8011500:	4611      	mov	r1, r2
 8011502:	4618      	mov	r0, r3
 8011504:	f7fd fb50 	bl	800eba8 <unlock_fs>
 8011508:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
}
 801150c:	4618      	mov	r0, r3
 801150e:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 8011512:	46bd      	mov	sp, r7
 8011514:	bd80      	pop	{r7, pc}

08011516 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8011516:	b580      	push	{r7, lr}
 8011518:	b08e      	sub	sp, #56	@ 0x38
 801151a:	af00      	add	r7, sp, #0
 801151c:	60f8      	str	r0, [r7, #12]
 801151e:	60b9      	str	r1, [r7, #8]
 8011520:	607a      	str	r2, [r7, #4]
 8011522:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8011524:	68bb      	ldr	r3, [r7, #8]
 8011526:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	2200      	movs	r2, #0
 801152c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	f107 0214 	add.w	r2, r7, #20
 8011534:	4611      	mov	r1, r2
 8011536:	4618      	mov	r0, r3
 8011538:	f7ff fc86 	bl	8010e48 <validate>
 801153c:	4603      	mov	r3, r0
 801153e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011542:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011546:	2b00      	cmp	r3, #0
 8011548:	d107      	bne.n	801155a <f_read+0x44>
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	7d5b      	ldrb	r3, [r3, #21]
 801154e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011552:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011556:	2b00      	cmp	r3, #0
 8011558:	d009      	beq.n	801156e <f_read+0x58>
 801155a:	697b      	ldr	r3, [r7, #20]
 801155c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8011560:	4611      	mov	r1, r2
 8011562:	4618      	mov	r0, r3
 8011564:	f7fd fb20 	bl	800eba8 <unlock_fs>
 8011568:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801156c:	e13d      	b.n	80117ea <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	7d1b      	ldrb	r3, [r3, #20]
 8011572:	f003 0301 	and.w	r3, r3, #1
 8011576:	2b00      	cmp	r3, #0
 8011578:	d106      	bne.n	8011588 <f_read+0x72>
 801157a:	697b      	ldr	r3, [r7, #20]
 801157c:	2107      	movs	r1, #7
 801157e:	4618      	mov	r0, r3
 8011580:	f7fd fb12 	bl	800eba8 <unlock_fs>
 8011584:	2307      	movs	r3, #7
 8011586:	e130      	b.n	80117ea <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	68da      	ldr	r2, [r3, #12]
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	699b      	ldr	r3, [r3, #24]
 8011590:	1ad3      	subs	r3, r2, r3
 8011592:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8011594:	687a      	ldr	r2, [r7, #4]
 8011596:	6a3b      	ldr	r3, [r7, #32]
 8011598:	429a      	cmp	r2, r3
 801159a:	f240 811c 	bls.w	80117d6 <f_read+0x2c0>
 801159e:	6a3b      	ldr	r3, [r7, #32]
 80115a0:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80115a2:	e118      	b.n	80117d6 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	699b      	ldr	r3, [r3, #24]
 80115a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	f040 80e4 	bne.w	801177a <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	699b      	ldr	r3, [r3, #24]
 80115b6:	0a5b      	lsrs	r3, r3, #9
 80115b8:	697a      	ldr	r2, [r7, #20]
 80115ba:	8952      	ldrh	r2, [r2, #10]
 80115bc:	3a01      	subs	r2, #1
 80115be:	4013      	ands	r3, r2
 80115c0:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80115c2:	69fb      	ldr	r3, [r7, #28]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d139      	bne.n	801163c <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	699b      	ldr	r3, [r3, #24]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d103      	bne.n	80115d8 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	689b      	ldr	r3, [r3, #8]
 80115d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80115d6:	e013      	b.n	8011600 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d007      	beq.n	80115f0 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	699b      	ldr	r3, [r3, #24]
 80115e4:	4619      	mov	r1, r3
 80115e6:	68f8      	ldr	r0, [r7, #12]
 80115e8:	f7fd fff3 	bl	800f5d2 <clmt_clust>
 80115ec:	6338      	str	r0, [r7, #48]	@ 0x30
 80115ee:	e007      	b.n	8011600 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80115f0:	68fa      	ldr	r2, [r7, #12]
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	69db      	ldr	r3, [r3, #28]
 80115f6:	4619      	mov	r1, r3
 80115f8:	4610      	mov	r0, r2
 80115fa:	f7fd fd5c 	bl	800f0b6 <get_fat>
 80115fe:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8011600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011602:	2b01      	cmp	r3, #1
 8011604:	d809      	bhi.n	801161a <f_read+0x104>
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	2202      	movs	r2, #2
 801160a:	755a      	strb	r2, [r3, #21]
 801160c:	697b      	ldr	r3, [r7, #20]
 801160e:	2102      	movs	r1, #2
 8011610:	4618      	mov	r0, r3
 8011612:	f7fd fac9 	bl	800eba8 <unlock_fs>
 8011616:	2302      	movs	r3, #2
 8011618:	e0e7      	b.n	80117ea <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801161a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801161c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011620:	d109      	bne.n	8011636 <f_read+0x120>
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	2201      	movs	r2, #1
 8011626:	755a      	strb	r2, [r3, #21]
 8011628:	697b      	ldr	r3, [r7, #20]
 801162a:	2101      	movs	r1, #1
 801162c:	4618      	mov	r0, r3
 801162e:	f7fd fabb 	bl	800eba8 <unlock_fs>
 8011632:	2301      	movs	r3, #1
 8011634:	e0d9      	b.n	80117ea <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801163a:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801163c:	697a      	ldr	r2, [r7, #20]
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	69db      	ldr	r3, [r3, #28]
 8011642:	4619      	mov	r1, r3
 8011644:	4610      	mov	r0, r2
 8011646:	f7fd fd17 	bl	800f078 <clust2sect>
 801164a:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801164c:	69bb      	ldr	r3, [r7, #24]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d109      	bne.n	8011666 <f_read+0x150>
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	2202      	movs	r2, #2
 8011656:	755a      	strb	r2, [r3, #21]
 8011658:	697b      	ldr	r3, [r7, #20]
 801165a:	2102      	movs	r1, #2
 801165c:	4618      	mov	r0, r3
 801165e:	f7fd faa3 	bl	800eba8 <unlock_fs>
 8011662:	2302      	movs	r3, #2
 8011664:	e0c1      	b.n	80117ea <f_read+0x2d4>
			sect += csect;
 8011666:	69ba      	ldr	r2, [r7, #24]
 8011668:	69fb      	ldr	r3, [r7, #28]
 801166a:	4413      	add	r3, r2
 801166c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	0a5b      	lsrs	r3, r3, #9
 8011672:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8011674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011676:	2b00      	cmp	r3, #0
 8011678:	d03e      	beq.n	80116f8 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801167a:	69fa      	ldr	r2, [r7, #28]
 801167c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801167e:	4413      	add	r3, r2
 8011680:	697a      	ldr	r2, [r7, #20]
 8011682:	8952      	ldrh	r2, [r2, #10]
 8011684:	4293      	cmp	r3, r2
 8011686:	d905      	bls.n	8011694 <f_read+0x17e>
					cc = fs->csize - csect;
 8011688:	697b      	ldr	r3, [r7, #20]
 801168a:	895b      	ldrh	r3, [r3, #10]
 801168c:	461a      	mov	r2, r3
 801168e:	69fb      	ldr	r3, [r7, #28]
 8011690:	1ad3      	subs	r3, r2, r3
 8011692:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	7858      	ldrb	r0, [r3, #1]
 8011698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801169a:	69ba      	ldr	r2, [r7, #24]
 801169c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801169e:	f7fd f90f 	bl	800e8c0 <disk_read>
 80116a2:	4603      	mov	r3, r0
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d009      	beq.n	80116bc <f_read+0x1a6>
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	2201      	movs	r2, #1
 80116ac:	755a      	strb	r2, [r3, #21]
 80116ae:	697b      	ldr	r3, [r7, #20]
 80116b0:	2101      	movs	r1, #1
 80116b2:	4618      	mov	r0, r3
 80116b4:	f7fd fa78 	bl	800eba8 <unlock_fs>
 80116b8:	2301      	movs	r3, #1
 80116ba:	e096      	b.n	80117ea <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	7d1b      	ldrb	r3, [r3, #20]
 80116c0:	b25b      	sxtb	r3, r3
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	da14      	bge.n	80116f0 <f_read+0x1da>
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	6a1a      	ldr	r2, [r3, #32]
 80116ca:	69bb      	ldr	r3, [r7, #24]
 80116cc:	1ad3      	subs	r3, r2, r3
 80116ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80116d0:	429a      	cmp	r2, r3
 80116d2:	d90d      	bls.n	80116f0 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	6a1a      	ldr	r2, [r3, #32]
 80116d8:	69bb      	ldr	r3, [r7, #24]
 80116da:	1ad3      	subs	r3, r2, r3
 80116dc:	025b      	lsls	r3, r3, #9
 80116de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80116e0:	18d0      	adds	r0, r2, r3
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	3330      	adds	r3, #48	@ 0x30
 80116e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80116ea:	4619      	mov	r1, r3
 80116ec:	f7fd f9c8 	bl	800ea80 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80116f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116f2:	025b      	lsls	r3, r3, #9
 80116f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80116f6:	e05a      	b.n	80117ae <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	6a1b      	ldr	r3, [r3, #32]
 80116fc:	69ba      	ldr	r2, [r7, #24]
 80116fe:	429a      	cmp	r2, r3
 8011700:	d038      	beq.n	8011774 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	7d1b      	ldrb	r3, [r3, #20]
 8011706:	b25b      	sxtb	r3, r3
 8011708:	2b00      	cmp	r3, #0
 801170a:	da1d      	bge.n	8011748 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801170c:	697b      	ldr	r3, [r7, #20]
 801170e:	7858      	ldrb	r0, [r3, #1]
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	6a1a      	ldr	r2, [r3, #32]
 801171a:	2301      	movs	r3, #1
 801171c:	f7fd f8f0 	bl	800e900 <disk_write>
 8011720:	4603      	mov	r3, r0
 8011722:	2b00      	cmp	r3, #0
 8011724:	d009      	beq.n	801173a <f_read+0x224>
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	2201      	movs	r2, #1
 801172a:	755a      	strb	r2, [r3, #21]
 801172c:	697b      	ldr	r3, [r7, #20]
 801172e:	2101      	movs	r1, #1
 8011730:	4618      	mov	r0, r3
 8011732:	f7fd fa39 	bl	800eba8 <unlock_fs>
 8011736:	2301      	movs	r3, #1
 8011738:	e057      	b.n	80117ea <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	7d1b      	ldrb	r3, [r3, #20]
 801173e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011742:	b2da      	uxtb	r2, r3
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011748:	697b      	ldr	r3, [r7, #20]
 801174a:	7858      	ldrb	r0, [r3, #1]
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011752:	2301      	movs	r3, #1
 8011754:	69ba      	ldr	r2, [r7, #24]
 8011756:	f7fd f8b3 	bl	800e8c0 <disk_read>
 801175a:	4603      	mov	r3, r0
 801175c:	2b00      	cmp	r3, #0
 801175e:	d009      	beq.n	8011774 <f_read+0x25e>
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	2201      	movs	r2, #1
 8011764:	755a      	strb	r2, [r3, #21]
 8011766:	697b      	ldr	r3, [r7, #20]
 8011768:	2101      	movs	r1, #1
 801176a:	4618      	mov	r0, r3
 801176c:	f7fd fa1c 	bl	800eba8 <unlock_fs>
 8011770:	2301      	movs	r3, #1
 8011772:	e03a      	b.n	80117ea <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	69ba      	ldr	r2, [r7, #24]
 8011778:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	699b      	ldr	r3, [r3, #24]
 801177e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011782:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8011786:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8011788:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	429a      	cmp	r2, r3
 801178e:	d901      	bls.n	8011794 <f_read+0x27e>
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	699b      	ldr	r3, [r3, #24]
 801179e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80117a2:	4413      	add	r3, r2
 80117a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80117a6:	4619      	mov	r1, r3
 80117a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80117aa:	f7fd f969 	bl	800ea80 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80117ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80117b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117b2:	4413      	add	r3, r2
 80117b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	699a      	ldr	r2, [r3, #24]
 80117ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117bc:	441a      	add	r2, r3
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	619a      	str	r2, [r3, #24]
 80117c2:	683b      	ldr	r3, [r7, #0]
 80117c4:	681a      	ldr	r2, [r3, #0]
 80117c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117c8:	441a      	add	r2, r3
 80117ca:	683b      	ldr	r3, [r7, #0]
 80117cc:	601a      	str	r2, [r3, #0]
 80117ce:	687a      	ldr	r2, [r7, #4]
 80117d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117d2:	1ad3      	subs	r3, r2, r3
 80117d4:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	f47f aee3 	bne.w	80115a4 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80117de:	697b      	ldr	r3, [r7, #20]
 80117e0:	2100      	movs	r1, #0
 80117e2:	4618      	mov	r0, r3
 80117e4:	f7fd f9e0 	bl	800eba8 <unlock_fs>
 80117e8:	2300      	movs	r3, #0
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	3738      	adds	r7, #56	@ 0x38
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}

080117f2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80117f2:	b580      	push	{r7, lr}
 80117f4:	b08c      	sub	sp, #48	@ 0x30
 80117f6:	af00      	add	r7, sp, #0
 80117f8:	60f8      	str	r0, [r7, #12]
 80117fa:	60b9      	str	r1, [r7, #8]
 80117fc:	607a      	str	r2, [r7, #4]
 80117fe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011800:	68bb      	ldr	r3, [r7, #8]
 8011802:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011804:	683b      	ldr	r3, [r7, #0]
 8011806:	2200      	movs	r2, #0
 8011808:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	f107 0210 	add.w	r2, r7, #16
 8011810:	4611      	mov	r1, r2
 8011812:	4618      	mov	r0, r3
 8011814:	f7ff fb18 	bl	8010e48 <validate>
 8011818:	4603      	mov	r3, r0
 801181a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801181e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011822:	2b00      	cmp	r3, #0
 8011824:	d107      	bne.n	8011836 <f_write+0x44>
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	7d5b      	ldrb	r3, [r3, #21]
 801182a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801182e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011832:	2b00      	cmp	r3, #0
 8011834:	d009      	beq.n	801184a <f_write+0x58>
 8011836:	693b      	ldr	r3, [r7, #16]
 8011838:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801183c:	4611      	mov	r1, r2
 801183e:	4618      	mov	r0, r3
 8011840:	f7fd f9b2 	bl	800eba8 <unlock_fs>
 8011844:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011848:	e173      	b.n	8011b32 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	7d1b      	ldrb	r3, [r3, #20]
 801184e:	f003 0302 	and.w	r3, r3, #2
 8011852:	2b00      	cmp	r3, #0
 8011854:	d106      	bne.n	8011864 <f_write+0x72>
 8011856:	693b      	ldr	r3, [r7, #16]
 8011858:	2107      	movs	r1, #7
 801185a:	4618      	mov	r0, r3
 801185c:	f7fd f9a4 	bl	800eba8 <unlock_fs>
 8011860:	2307      	movs	r3, #7
 8011862:	e166      	b.n	8011b32 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	699a      	ldr	r2, [r3, #24]
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	441a      	add	r2, r3
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	699b      	ldr	r3, [r3, #24]
 8011870:	429a      	cmp	r2, r3
 8011872:	f080 814b 	bcs.w	8011b0c <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	699b      	ldr	r3, [r3, #24]
 801187a:	43db      	mvns	r3, r3
 801187c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801187e:	e145      	b.n	8011b0c <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	699b      	ldr	r3, [r3, #24]
 8011884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011888:	2b00      	cmp	r3, #0
 801188a:	f040 8101 	bne.w	8011a90 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	699b      	ldr	r3, [r3, #24]
 8011892:	0a5b      	lsrs	r3, r3, #9
 8011894:	693a      	ldr	r2, [r7, #16]
 8011896:	8952      	ldrh	r2, [r2, #10]
 8011898:	3a01      	subs	r2, #1
 801189a:	4013      	ands	r3, r2
 801189c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801189e:	69bb      	ldr	r3, [r7, #24]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d14d      	bne.n	8011940 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	699b      	ldr	r3, [r3, #24]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d10c      	bne.n	80118c6 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	689b      	ldr	r3, [r3, #8]
 80118b0:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80118b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d11a      	bne.n	80118ee <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	2100      	movs	r1, #0
 80118bc:	4618      	mov	r0, r3
 80118be:	f7fd fdf0 	bl	800f4a2 <create_chain>
 80118c2:	62b8      	str	r0, [r7, #40]	@ 0x28
 80118c4:	e013      	b.n	80118ee <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d007      	beq.n	80118de <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	699b      	ldr	r3, [r3, #24]
 80118d2:	4619      	mov	r1, r3
 80118d4:	68f8      	ldr	r0, [r7, #12]
 80118d6:	f7fd fe7c 	bl	800f5d2 <clmt_clust>
 80118da:	62b8      	str	r0, [r7, #40]	@ 0x28
 80118dc:	e007      	b.n	80118ee <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80118de:	68fa      	ldr	r2, [r7, #12]
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	69db      	ldr	r3, [r3, #28]
 80118e4:	4619      	mov	r1, r3
 80118e6:	4610      	mov	r0, r2
 80118e8:	f7fd fddb 	bl	800f4a2 <create_chain>
 80118ec:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80118ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	f000 8110 	beq.w	8011b16 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80118f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118f8:	2b01      	cmp	r3, #1
 80118fa:	d109      	bne.n	8011910 <f_write+0x11e>
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	2202      	movs	r2, #2
 8011900:	755a      	strb	r2, [r3, #21]
 8011902:	693b      	ldr	r3, [r7, #16]
 8011904:	2102      	movs	r1, #2
 8011906:	4618      	mov	r0, r3
 8011908:	f7fd f94e 	bl	800eba8 <unlock_fs>
 801190c:	2302      	movs	r3, #2
 801190e:	e110      	b.n	8011b32 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011916:	d109      	bne.n	801192c <f_write+0x13a>
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	2201      	movs	r2, #1
 801191c:	755a      	strb	r2, [r3, #21]
 801191e:	693b      	ldr	r3, [r7, #16]
 8011920:	2101      	movs	r1, #1
 8011922:	4618      	mov	r0, r3
 8011924:	f7fd f940 	bl	800eba8 <unlock_fs>
 8011928:	2301      	movs	r3, #1
 801192a:	e102      	b.n	8011b32 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011930:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	689b      	ldr	r3, [r3, #8]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d102      	bne.n	8011940 <f_write+0x14e>
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801193e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	7d1b      	ldrb	r3, [r3, #20]
 8011944:	b25b      	sxtb	r3, r3
 8011946:	2b00      	cmp	r3, #0
 8011948:	da1d      	bge.n	8011986 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801194a:	693b      	ldr	r3, [r7, #16]
 801194c:	7858      	ldrb	r0, [r3, #1]
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	6a1a      	ldr	r2, [r3, #32]
 8011958:	2301      	movs	r3, #1
 801195a:	f7fc ffd1 	bl	800e900 <disk_write>
 801195e:	4603      	mov	r3, r0
 8011960:	2b00      	cmp	r3, #0
 8011962:	d009      	beq.n	8011978 <f_write+0x186>
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	2201      	movs	r2, #1
 8011968:	755a      	strb	r2, [r3, #21]
 801196a:	693b      	ldr	r3, [r7, #16]
 801196c:	2101      	movs	r1, #1
 801196e:	4618      	mov	r0, r3
 8011970:	f7fd f91a 	bl	800eba8 <unlock_fs>
 8011974:	2301      	movs	r3, #1
 8011976:	e0dc      	b.n	8011b32 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	7d1b      	ldrb	r3, [r3, #20]
 801197c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011980:	b2da      	uxtb	r2, r3
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011986:	693a      	ldr	r2, [r7, #16]
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	69db      	ldr	r3, [r3, #28]
 801198c:	4619      	mov	r1, r3
 801198e:	4610      	mov	r0, r2
 8011990:	f7fd fb72 	bl	800f078 <clust2sect>
 8011994:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011996:	697b      	ldr	r3, [r7, #20]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d109      	bne.n	80119b0 <f_write+0x1be>
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	2202      	movs	r2, #2
 80119a0:	755a      	strb	r2, [r3, #21]
 80119a2:	693b      	ldr	r3, [r7, #16]
 80119a4:	2102      	movs	r1, #2
 80119a6:	4618      	mov	r0, r3
 80119a8:	f7fd f8fe 	bl	800eba8 <unlock_fs>
 80119ac:	2302      	movs	r3, #2
 80119ae:	e0c0      	b.n	8011b32 <f_write+0x340>
			sect += csect;
 80119b0:	697a      	ldr	r2, [r7, #20]
 80119b2:	69bb      	ldr	r3, [r7, #24]
 80119b4:	4413      	add	r3, r2
 80119b6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	0a5b      	lsrs	r3, r3, #9
 80119bc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80119be:	6a3b      	ldr	r3, [r7, #32]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d041      	beq.n	8011a48 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80119c4:	69ba      	ldr	r2, [r7, #24]
 80119c6:	6a3b      	ldr	r3, [r7, #32]
 80119c8:	4413      	add	r3, r2
 80119ca:	693a      	ldr	r2, [r7, #16]
 80119cc:	8952      	ldrh	r2, [r2, #10]
 80119ce:	4293      	cmp	r3, r2
 80119d0:	d905      	bls.n	80119de <f_write+0x1ec>
					cc = fs->csize - csect;
 80119d2:	693b      	ldr	r3, [r7, #16]
 80119d4:	895b      	ldrh	r3, [r3, #10]
 80119d6:	461a      	mov	r2, r3
 80119d8:	69bb      	ldr	r3, [r7, #24]
 80119da:	1ad3      	subs	r3, r2, r3
 80119dc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80119de:	693b      	ldr	r3, [r7, #16]
 80119e0:	7858      	ldrb	r0, [r3, #1]
 80119e2:	6a3b      	ldr	r3, [r7, #32]
 80119e4:	697a      	ldr	r2, [r7, #20]
 80119e6:	69f9      	ldr	r1, [r7, #28]
 80119e8:	f7fc ff8a 	bl	800e900 <disk_write>
 80119ec:	4603      	mov	r3, r0
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d009      	beq.n	8011a06 <f_write+0x214>
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	2201      	movs	r2, #1
 80119f6:	755a      	strb	r2, [r3, #21]
 80119f8:	693b      	ldr	r3, [r7, #16]
 80119fa:	2101      	movs	r1, #1
 80119fc:	4618      	mov	r0, r3
 80119fe:	f7fd f8d3 	bl	800eba8 <unlock_fs>
 8011a02:	2301      	movs	r3, #1
 8011a04:	e095      	b.n	8011b32 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	6a1a      	ldr	r2, [r3, #32]
 8011a0a:	697b      	ldr	r3, [r7, #20]
 8011a0c:	1ad3      	subs	r3, r2, r3
 8011a0e:	6a3a      	ldr	r2, [r7, #32]
 8011a10:	429a      	cmp	r2, r3
 8011a12:	d915      	bls.n	8011a40 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	6a1a      	ldr	r2, [r3, #32]
 8011a1e:	697b      	ldr	r3, [r7, #20]
 8011a20:	1ad3      	subs	r3, r2, r3
 8011a22:	025b      	lsls	r3, r3, #9
 8011a24:	69fa      	ldr	r2, [r7, #28]
 8011a26:	4413      	add	r3, r2
 8011a28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011a2c:	4619      	mov	r1, r3
 8011a2e:	f7fd f827 	bl	800ea80 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	7d1b      	ldrb	r3, [r3, #20]
 8011a36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011a3a:	b2da      	uxtb	r2, r3
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011a40:	6a3b      	ldr	r3, [r7, #32]
 8011a42:	025b      	lsls	r3, r3, #9
 8011a44:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8011a46:	e044      	b.n	8011ad2 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	6a1b      	ldr	r3, [r3, #32]
 8011a4c:	697a      	ldr	r2, [r7, #20]
 8011a4e:	429a      	cmp	r2, r3
 8011a50:	d01b      	beq.n	8011a8a <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	699a      	ldr	r2, [r3, #24]
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011a5a:	429a      	cmp	r2, r3
 8011a5c:	d215      	bcs.n	8011a8a <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011a5e:	693b      	ldr	r3, [r7, #16]
 8011a60:	7858      	ldrb	r0, [r3, #1]
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011a68:	2301      	movs	r3, #1
 8011a6a:	697a      	ldr	r2, [r7, #20]
 8011a6c:	f7fc ff28 	bl	800e8c0 <disk_read>
 8011a70:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d009      	beq.n	8011a8a <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	2201      	movs	r2, #1
 8011a7a:	755a      	strb	r2, [r3, #21]
 8011a7c:	693b      	ldr	r3, [r7, #16]
 8011a7e:	2101      	movs	r1, #1
 8011a80:	4618      	mov	r0, r3
 8011a82:	f7fd f891 	bl	800eba8 <unlock_fs>
 8011a86:	2301      	movs	r3, #1
 8011a88:	e053      	b.n	8011b32 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	697a      	ldr	r2, [r7, #20]
 8011a8e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	699b      	ldr	r3, [r3, #24]
 8011a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a98:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8011a9c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	429a      	cmp	r2, r3
 8011aa4:	d901      	bls.n	8011aaa <f_write+0x2b8>
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	699b      	ldr	r3, [r3, #24]
 8011ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ab8:	4413      	add	r3, r2
 8011aba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011abc:	69f9      	ldr	r1, [r7, #28]
 8011abe:	4618      	mov	r0, r3
 8011ac0:	f7fc ffde 	bl	800ea80 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	7d1b      	ldrb	r3, [r3, #20]
 8011ac8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011acc:	b2da      	uxtb	r2, r3
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011ad2:	69fa      	ldr	r2, [r7, #28]
 8011ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ad6:	4413      	add	r3, r2
 8011ad8:	61fb      	str	r3, [r7, #28]
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	699a      	ldr	r2, [r3, #24]
 8011ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ae0:	441a      	add	r2, r3
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	619a      	str	r2, [r3, #24]
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	68da      	ldr	r2, [r3, #12]
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	699b      	ldr	r3, [r3, #24]
 8011aee:	429a      	cmp	r2, r3
 8011af0:	bf38      	it	cc
 8011af2:	461a      	movcc	r2, r3
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	60da      	str	r2, [r3, #12]
 8011af8:	683b      	ldr	r3, [r7, #0]
 8011afa:	681a      	ldr	r2, [r3, #0]
 8011afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011afe:	441a      	add	r2, r3
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	601a      	str	r2, [r3, #0]
 8011b04:	687a      	ldr	r2, [r7, #4]
 8011b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b08:	1ad3      	subs	r3, r2, r3
 8011b0a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	f47f aeb6 	bne.w	8011880 <f_write+0x8e>
 8011b14:	e000      	b.n	8011b18 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011b16:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	7d1b      	ldrb	r3, [r3, #20]
 8011b1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b20:	b2da      	uxtb	r2, r3
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011b26:	693b      	ldr	r3, [r7, #16]
 8011b28:	2100      	movs	r1, #0
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	f7fd f83c 	bl	800eba8 <unlock_fs>
 8011b30:	2300      	movs	r3, #0
}
 8011b32:	4618      	mov	r0, r3
 8011b34:	3730      	adds	r7, #48	@ 0x30
 8011b36:	46bd      	mov	sp, r7
 8011b38:	bd80      	pop	{r7, pc}

08011b3a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011b3a:	b580      	push	{r7, lr}
 8011b3c:	b086      	sub	sp, #24
 8011b3e:	af00      	add	r7, sp, #0
 8011b40:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	f107 0208 	add.w	r2, r7, #8
 8011b48:	4611      	mov	r1, r2
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	f7ff f97c 	bl	8010e48 <validate>
 8011b50:	4603      	mov	r3, r0
 8011b52:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011b54:	7dfb      	ldrb	r3, [r7, #23]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d16d      	bne.n	8011c36 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	7d1b      	ldrb	r3, [r3, #20]
 8011b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d067      	beq.n	8011c36 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	7d1b      	ldrb	r3, [r3, #20]
 8011b6a:	b25b      	sxtb	r3, r3
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	da1a      	bge.n	8011ba6 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011b70:	68bb      	ldr	r3, [r7, #8]
 8011b72:	7858      	ldrb	r0, [r3, #1]
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	6a1a      	ldr	r2, [r3, #32]
 8011b7e:	2301      	movs	r3, #1
 8011b80:	f7fc febe 	bl	800e900 <disk_write>
 8011b84:	4603      	mov	r3, r0
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d006      	beq.n	8011b98 <f_sync+0x5e>
 8011b8a:	68bb      	ldr	r3, [r7, #8]
 8011b8c:	2101      	movs	r1, #1
 8011b8e:	4618      	mov	r0, r3
 8011b90:	f7fd f80a 	bl	800eba8 <unlock_fs>
 8011b94:	2301      	movs	r3, #1
 8011b96:	e055      	b.n	8011c44 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	7d1b      	ldrb	r3, [r3, #20]
 8011b9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011ba0:	b2da      	uxtb	r2, r3
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011ba6:	f7fc f907 	bl	800ddb8 <get_fattime>
 8011baa:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011bac:	68ba      	ldr	r2, [r7, #8]
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011bb2:	4619      	mov	r1, r3
 8011bb4:	4610      	mov	r0, r2
 8011bb6:	f7fd f9c3 	bl	800ef40 <move_window>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011bbe:	7dfb      	ldrb	r3, [r7, #23]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d138      	bne.n	8011c36 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011bc8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	330b      	adds	r3, #11
 8011bce:	781a      	ldrb	r2, [r3, #0]
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	330b      	adds	r3, #11
 8011bd4:	f042 0220 	orr.w	r2, r2, #32
 8011bd8:	b2d2      	uxtb	r2, r2
 8011bda:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	6818      	ldr	r0, [r3, #0]
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	689b      	ldr	r3, [r3, #8]
 8011be4:	461a      	mov	r2, r3
 8011be6:	68f9      	ldr	r1, [r7, #12]
 8011be8:	f7fd fecd 	bl	800f986 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	f103 021c 	add.w	r2, r3, #28
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	68db      	ldr	r3, [r3, #12]
 8011bf6:	4619      	mov	r1, r3
 8011bf8:	4610      	mov	r0, r2
 8011bfa:	f7fc ff15 	bl	800ea28 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	3316      	adds	r3, #22
 8011c02:	6939      	ldr	r1, [r7, #16]
 8011c04:	4618      	mov	r0, r3
 8011c06:	f7fc ff0f 	bl	800ea28 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	3312      	adds	r3, #18
 8011c0e:	2100      	movs	r1, #0
 8011c10:	4618      	mov	r0, r3
 8011c12:	f7fc feee 	bl	800e9f2 <st_word>
					fs->wflag = 1;
 8011c16:	68bb      	ldr	r3, [r7, #8]
 8011c18:	2201      	movs	r2, #1
 8011c1a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011c1c:	68bb      	ldr	r3, [r7, #8]
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f7fd f9bc 	bl	800ef9c <sync_fs>
 8011c24:	4603      	mov	r3, r0
 8011c26:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	7d1b      	ldrb	r3, [r3, #20]
 8011c2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011c30:	b2da      	uxtb	r2, r3
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011c36:	68bb      	ldr	r3, [r7, #8]
 8011c38:	7dfa      	ldrb	r2, [r7, #23]
 8011c3a:	4611      	mov	r1, r2
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f7fc ffb3 	bl	800eba8 <unlock_fs>
 8011c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c44:	4618      	mov	r0, r3
 8011c46:	3718      	adds	r7, #24
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	bd80      	pop	{r7, pc}

08011c4c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b084      	sub	sp, #16
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011c54:	6878      	ldr	r0, [r7, #4]
 8011c56:	f7ff ff70 	bl	8011b3a <f_sync>
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011c5e:	7bfb      	ldrb	r3, [r7, #15]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d11d      	bne.n	8011ca0 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	f107 0208 	add.w	r2, r7, #8
 8011c6a:	4611      	mov	r1, r2
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	f7ff f8eb 	bl	8010e48 <validate>
 8011c72:	4603      	mov	r3, r0
 8011c74:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011c76:	7bfb      	ldrb	r3, [r7, #15]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d111      	bne.n	8011ca0 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	691b      	ldr	r3, [r3, #16]
 8011c80:	4618      	mov	r0, r3
 8011c82:	f7fd f8b9 	bl	800edf8 <dec_lock>
 8011c86:	4603      	mov	r3, r0
 8011c88:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011c8a:	7bfb      	ldrb	r3, [r7, #15]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d102      	bne.n	8011c96 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	2200      	movs	r2, #0
 8011c94:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	2100      	movs	r1, #0
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	f7fc ff84 	bl	800eba8 <unlock_fs>
#endif
		}
	}
	return res;
 8011ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	3710      	adds	r7, #16
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	bd80      	pop	{r7, pc}

08011caa <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8011caa:	b580      	push	{r7, lr}
 8011cac:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011cb6:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8011cba:	6018      	str	r0, [r3, #0]
 8011cbc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011cc0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8011cc4:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8011cc6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011cca:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d101      	bne.n	8011cd8 <f_opendir+0x2e>
 8011cd4:	2309      	movs	r3, #9
 8011cd6:	e0a8      	b.n	8011e2a <f_opendir+0x180>

	/* Get logical drive */
	obj = &dp->obj;
 8011cd8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011cdc:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
	res = find_volume(&path, &fs, 0);
 8011ce6:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8011cea:	463b      	mov	r3, r7
 8011cec:	2200      	movs	r2, #0
 8011cee:	4618      	mov	r0, r3
 8011cf0:	f7fe fe56 	bl	80109a0 <find_volume>
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	if (res == FR_OK) {
 8011cfa:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	f040 8081 	bne.w	8011e06 <f_opendir+0x15c>
		obj->fs = fs;
 8011d04:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8011d08:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8011d0c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 8011d0e:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8011d12:	f107 020c 	add.w	r2, r7, #12
 8011d16:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8011d18:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011d1c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8011d20:	681a      	ldr	r2, [r3, #0]
 8011d22:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011d26:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8011d2a:	4611      	mov	r1, r2
 8011d2c:	6818      	ldr	r0, [r3, #0]
 8011d2e:	f7fe fd2b 	bl	8010788 <follow_path>
 8011d32:	4603      	mov	r3, r0
 8011d34:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
		if (res == FR_OK) {						/* Follow completed */
 8011d38:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d15b      	bne.n	8011df8 <f_opendir+0x14e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8011d40:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011d44:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011d4e:	b25b      	sxtb	r3, r3
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	db1a      	blt.n	8011d8a <f_opendir+0xe0>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8011d54:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8011d58:	799b      	ldrb	r3, [r3, #6]
 8011d5a:	f003 0310 	and.w	r3, r3, #16
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d010      	beq.n	8011d84 <f_opendir+0xda>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8011d62:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8011d66:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011d6a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	6a1b      	ldr	r3, [r3, #32]
 8011d72:	4619      	mov	r1, r3
 8011d74:	4610      	mov	r0, r2
 8011d76:	f7fd fde7 	bl	800f948 <ld_clust>
 8011d7a:	4602      	mov	r2, r0
 8011d7c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8011d80:	609a      	str	r2, [r3, #8]
 8011d82:	e002      	b.n	8011d8a <f_opendir+0xe0>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8011d84:	2305      	movs	r3, #5
 8011d86:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
				}
			}
			if (res == FR_OK) {
 8011d8a:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d132      	bne.n	8011df8 <f_opendir+0x14e>
				obj->id = fs->id;
 8011d92:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8011d96:	88da      	ldrh	r2, [r3, #6]
 8011d98:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8011d9c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8011d9e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011da2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8011da6:	2100      	movs	r1, #0
 8011da8:	6818      	ldr	r0, [r3, #0]
 8011daa:	f7fd fc46 	bl	800f63a <dir_sdi>
 8011dae:	4603      	mov	r3, r0
 8011db0:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8011db4:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d11d      	bne.n	8011df8 <f_opendir+0x14e>
					if (obj->sclust) {
 8011dbc:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8011dc0:	689b      	ldr	r3, [r3, #8]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d014      	beq.n	8011df0 <f_opendir+0x146>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8011dc6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011dca:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8011dce:	2100      	movs	r1, #0
 8011dd0:	6818      	ldr	r0, [r3, #0]
 8011dd2:	f7fc ff83 	bl	800ecdc <inc_lock>
 8011dd6:	4602      	mov	r2, r0
 8011dd8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8011ddc:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8011dde:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8011de2:	691b      	ldr	r3, [r3, #16]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d107      	bne.n	8011df8 <f_opendir+0x14e>
 8011de8:	2312      	movs	r3, #18
 8011dea:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 8011dee:	e003      	b.n	8011df8 <f_opendir+0x14e>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8011df0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8011df4:	2200      	movs	r2, #0
 8011df6:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8011df8:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8011dfc:	2b04      	cmp	r3, #4
 8011dfe:	d102      	bne.n	8011e06 <f_opendir+0x15c>
 8011e00:	2305      	movs	r3, #5
 8011e02:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8011e06:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d003      	beq.n	8011e16 <f_opendir+0x16c>
 8011e0e:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8011e12:	2200      	movs	r2, #0
 8011e14:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011e16:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8011e1a:	f897 2217 	ldrb.w	r2, [r7, #535]	@ 0x217
 8011e1e:	4611      	mov	r1, r2
 8011e20:	4618      	mov	r0, r3
 8011e22:	f7fc fec1 	bl	800eba8 <unlock_fs>
 8011e26:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
}
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8011e30:	46bd      	mov	sp, r7
 8011e32:	bd80      	pop	{r7, pc}

08011e34 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8011e34:	b580      	push	{r7, lr}
 8011e36:	b084      	sub	sp, #16
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	f107 0208 	add.w	r2, r7, #8
 8011e42:	4611      	mov	r1, r2
 8011e44:	4618      	mov	r0, r3
 8011e46:	f7fe ffff 	bl	8010e48 <validate>
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011e4e:	7bfb      	ldrb	r3, [r7, #15]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d115      	bne.n	8011e80 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	691b      	ldr	r3, [r3, #16]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d006      	beq.n	8011e6a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	691b      	ldr	r3, [r3, #16]
 8011e60:	4618      	mov	r0, r3
 8011e62:	f7fc ffc9 	bl	800edf8 <dec_lock>
 8011e66:	4603      	mov	r3, r0
 8011e68:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8011e6a:	7bfb      	ldrb	r3, [r7, #15]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d102      	bne.n	8011e76 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	2200      	movs	r2, #0
 8011e74:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8011e76:	68bb      	ldr	r3, [r7, #8]
 8011e78:	2100      	movs	r1, #0
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f7fc fe94 	bl	800eba8 <unlock_fs>
#endif
	}
	return res;
 8011e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e82:	4618      	mov	r0, r3
 8011e84:	3710      	adds	r7, #16
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bd80      	pop	{r7, pc}

08011e8a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8011e8a:	b580      	push	{r7, lr}
 8011e8c:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8011e96:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8011e9a:	6018      	str	r0, [r3, #0]
 8011e9c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8011ea0:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8011ea4:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8011ea6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8011eaa:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8011eb4:	4611      	mov	r1, r2
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	f7fe ffc6 	bl	8010e48 <validate>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (res == FR_OK) {
 8011ec2:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d14b      	bne.n	8011f62 <f_readdir+0xd8>
		if (!fno) {
 8011eca:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8011ece:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d10b      	bne.n	8011ef0 <f_readdir+0x66>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8011ed8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8011edc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8011ee0:	2100      	movs	r1, #0
 8011ee2:	6818      	ldr	r0, [r3, #0]
 8011ee4:	f7fd fba9 	bl	800f63a <dir_sdi>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8011eee:	e038      	b.n	8011f62 <f_readdir+0xd8>
		} else {
			INIT_NAMBUF(fs);
 8011ef0:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8011ef4:	f107 0208 	add.w	r2, r7, #8
 8011ef8:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 8011efa:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8011efe:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8011f02:	2100      	movs	r1, #0
 8011f04:	6818      	ldr	r0, [r3, #0]
 8011f06:	f7fd ff4a 	bl	800fd9e <dir_read>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8011f10:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8011f14:	2b04      	cmp	r3, #4
 8011f16:	d102      	bne.n	8011f1e <f_readdir+0x94>
 8011f18:	2300      	movs	r3, #0
 8011f1a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 8011f1e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d11d      	bne.n	8011f62 <f_readdir+0xd8>
				get_fileinfo(dp, fno);		/* Get the object information */
 8011f26:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8011f2a:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8011f2e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8011f32:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8011f36:	6811      	ldr	r1, [r2, #0]
 8011f38:	6818      	ldr	r0, [r3, #0]
 8011f3a:	f7fe f98f 	bl	801025c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8011f3e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8011f42:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8011f46:	2100      	movs	r1, #0
 8011f48:	6818      	ldr	r0, [r3, #0]
 8011f4a:	f7fd fbf1 	bl	800f730 <dir_next>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8011f54:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8011f58:	2b04      	cmp	r3, #4
 8011f5a:	d102      	bne.n	8011f62 <f_readdir+0xd8>
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8011f62:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8011f66:	f897 220f 	ldrb.w	r2, [r7, #527]	@ 0x20f
 8011f6a:	4611      	mov	r1, r2
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	f7fc fe1b 	bl	800eba8 <unlock_fs>
 8011f72:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
}
 8011f76:	4618      	mov	r0, r3
 8011f78:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	bd80      	pop	{r7, pc}

08011f80 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b088      	sub	sp, #32
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	60f8      	str	r0, [r7, #12]
 8011f88:	60b9      	str	r1, [r7, #8]
 8011f8a:	607a      	str	r2, [r7, #4]
	int n = 0;
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011f94:	e01c      	b.n	8011fd0 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8011f96:	f107 0310 	add.w	r3, r7, #16
 8011f9a:	f107 0114 	add.w	r1, r7, #20
 8011f9e:	2201      	movs	r2, #1
 8011fa0:	6878      	ldr	r0, [r7, #4]
 8011fa2:	f7ff fab8 	bl	8011516 <f_read>
		if (rc != 1) break;
 8011fa6:	693b      	ldr	r3, [r7, #16]
 8011fa8:	2b01      	cmp	r3, #1
 8011faa:	d117      	bne.n	8011fdc <f_gets+0x5c>
		c = s[0];
 8011fac:	7d3b      	ldrb	r3, [r7, #20]
 8011fae:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8011fb0:	7dfb      	ldrb	r3, [r7, #23]
 8011fb2:	2b0d      	cmp	r3, #13
 8011fb4:	d00b      	beq.n	8011fce <f_gets+0x4e>
		*p++ = c;
 8011fb6:	69bb      	ldr	r3, [r7, #24]
 8011fb8:	1c5a      	adds	r2, r3, #1
 8011fba:	61ba      	str	r2, [r7, #24]
 8011fbc:	7dfa      	ldrb	r2, [r7, #23]
 8011fbe:	701a      	strb	r2, [r3, #0]
		n++;
 8011fc0:	69fb      	ldr	r3, [r7, #28]
 8011fc2:	3301      	adds	r3, #1
 8011fc4:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8011fc6:	7dfb      	ldrb	r3, [r7, #23]
 8011fc8:	2b0a      	cmp	r3, #10
 8011fca:	d009      	beq.n	8011fe0 <f_gets+0x60>
 8011fcc:	e000      	b.n	8011fd0 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8011fce:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011fd0:	68bb      	ldr	r3, [r7, #8]
 8011fd2:	3b01      	subs	r3, #1
 8011fd4:	69fa      	ldr	r2, [r7, #28]
 8011fd6:	429a      	cmp	r2, r3
 8011fd8:	dbdd      	blt.n	8011f96 <f_gets+0x16>
 8011fda:	e002      	b.n	8011fe2 <f_gets+0x62>
		if (rc != 1) break;
 8011fdc:	bf00      	nop
 8011fde:	e000      	b.n	8011fe2 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8011fe0:	bf00      	nop
	}
	*p = 0;
 8011fe2:	69bb      	ldr	r3, [r7, #24]
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8011fe8:	69fb      	ldr	r3, [r7, #28]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d001      	beq.n	8011ff2 <f_gets+0x72>
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	e000      	b.n	8011ff4 <f_gets+0x74>
 8011ff2:	2300      	movs	r3, #0
}
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	3720      	adds	r7, #32
 8011ff8:	46bd      	mov	sp, r7
 8011ffa:	bd80      	pop	{r7, pc}

08011ffc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011ffc:	b480      	push	{r7}
 8011ffe:	b087      	sub	sp, #28
 8012000:	af00      	add	r7, sp, #0
 8012002:	60f8      	str	r0, [r7, #12]
 8012004:	60b9      	str	r1, [r7, #8]
 8012006:	4613      	mov	r3, r2
 8012008:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801200a:	2301      	movs	r3, #1
 801200c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801200e:	2300      	movs	r3, #0
 8012010:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012012:	4b1f      	ldr	r3, [pc, #124]	@ (8012090 <FATFS_LinkDriverEx+0x94>)
 8012014:	7a5b      	ldrb	r3, [r3, #9]
 8012016:	b2db      	uxtb	r3, r3
 8012018:	2b00      	cmp	r3, #0
 801201a:	d131      	bne.n	8012080 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801201c:	4b1c      	ldr	r3, [pc, #112]	@ (8012090 <FATFS_LinkDriverEx+0x94>)
 801201e:	7a5b      	ldrb	r3, [r3, #9]
 8012020:	b2db      	uxtb	r3, r3
 8012022:	461a      	mov	r2, r3
 8012024:	4b1a      	ldr	r3, [pc, #104]	@ (8012090 <FATFS_LinkDriverEx+0x94>)
 8012026:	2100      	movs	r1, #0
 8012028:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801202a:	4b19      	ldr	r3, [pc, #100]	@ (8012090 <FATFS_LinkDriverEx+0x94>)
 801202c:	7a5b      	ldrb	r3, [r3, #9]
 801202e:	b2db      	uxtb	r3, r3
 8012030:	4a17      	ldr	r2, [pc, #92]	@ (8012090 <FATFS_LinkDriverEx+0x94>)
 8012032:	009b      	lsls	r3, r3, #2
 8012034:	4413      	add	r3, r2
 8012036:	68fa      	ldr	r2, [r7, #12]
 8012038:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801203a:	4b15      	ldr	r3, [pc, #84]	@ (8012090 <FATFS_LinkDriverEx+0x94>)
 801203c:	7a5b      	ldrb	r3, [r3, #9]
 801203e:	b2db      	uxtb	r3, r3
 8012040:	461a      	mov	r2, r3
 8012042:	4b13      	ldr	r3, [pc, #76]	@ (8012090 <FATFS_LinkDriverEx+0x94>)
 8012044:	4413      	add	r3, r2
 8012046:	79fa      	ldrb	r2, [r7, #7]
 8012048:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801204a:	4b11      	ldr	r3, [pc, #68]	@ (8012090 <FATFS_LinkDriverEx+0x94>)
 801204c:	7a5b      	ldrb	r3, [r3, #9]
 801204e:	b2db      	uxtb	r3, r3
 8012050:	1c5a      	adds	r2, r3, #1
 8012052:	b2d1      	uxtb	r1, r2
 8012054:	4a0e      	ldr	r2, [pc, #56]	@ (8012090 <FATFS_LinkDriverEx+0x94>)
 8012056:	7251      	strb	r1, [r2, #9]
 8012058:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801205a:	7dbb      	ldrb	r3, [r7, #22]
 801205c:	3330      	adds	r3, #48	@ 0x30
 801205e:	b2da      	uxtb	r2, r3
 8012060:	68bb      	ldr	r3, [r7, #8]
 8012062:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012064:	68bb      	ldr	r3, [r7, #8]
 8012066:	3301      	adds	r3, #1
 8012068:	223a      	movs	r2, #58	@ 0x3a
 801206a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801206c:	68bb      	ldr	r3, [r7, #8]
 801206e:	3302      	adds	r3, #2
 8012070:	222f      	movs	r2, #47	@ 0x2f
 8012072:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012074:	68bb      	ldr	r3, [r7, #8]
 8012076:	3303      	adds	r3, #3
 8012078:	2200      	movs	r2, #0
 801207a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801207c:	2300      	movs	r3, #0
 801207e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012080:	7dfb      	ldrb	r3, [r7, #23]
}
 8012082:	4618      	mov	r0, r3
 8012084:	371c      	adds	r7, #28
 8012086:	46bd      	mov	sp, r7
 8012088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801208c:	4770      	bx	lr
 801208e:	bf00      	nop
 8012090:	20005bbc 	.word	0x20005bbc

08012094 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b082      	sub	sp, #8
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
 801209c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801209e:	2200      	movs	r2, #0
 80120a0:	6839      	ldr	r1, [r7, #0]
 80120a2:	6878      	ldr	r0, [r7, #4]
 80120a4:	f7ff ffaa 	bl	8011ffc <FATFS_LinkDriverEx>
 80120a8:	4603      	mov	r3, r0
}
 80120aa:	4618      	mov	r0, r3
 80120ac:	3708      	adds	r7, #8
 80120ae:	46bd      	mov	sp, r7
 80120b0:	bd80      	pop	{r7, pc}
	...

080120b4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80120b4:	b480      	push	{r7}
 80120b6:	b085      	sub	sp, #20
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	4603      	mov	r3, r0
 80120bc:	6039      	str	r1, [r7, #0]
 80120be:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80120c0:	88fb      	ldrh	r3, [r7, #6]
 80120c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80120c4:	d802      	bhi.n	80120cc <ff_convert+0x18>
		c = chr;
 80120c6:	88fb      	ldrh	r3, [r7, #6]
 80120c8:	81fb      	strh	r3, [r7, #14]
 80120ca:	e025      	b.n	8012118 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80120cc:	683b      	ldr	r3, [r7, #0]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d00b      	beq.n	80120ea <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80120d2:	88fb      	ldrh	r3, [r7, #6]
 80120d4:	2bff      	cmp	r3, #255	@ 0xff
 80120d6:	d805      	bhi.n	80120e4 <ff_convert+0x30>
 80120d8:	88fb      	ldrh	r3, [r7, #6]
 80120da:	3b80      	subs	r3, #128	@ 0x80
 80120dc:	4a12      	ldr	r2, [pc, #72]	@ (8012128 <ff_convert+0x74>)
 80120de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80120e2:	e000      	b.n	80120e6 <ff_convert+0x32>
 80120e4:	2300      	movs	r3, #0
 80120e6:	81fb      	strh	r3, [r7, #14]
 80120e8:	e016      	b.n	8012118 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80120ea:	2300      	movs	r3, #0
 80120ec:	81fb      	strh	r3, [r7, #14]
 80120ee:	e009      	b.n	8012104 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80120f0:	89fb      	ldrh	r3, [r7, #14]
 80120f2:	4a0d      	ldr	r2, [pc, #52]	@ (8012128 <ff_convert+0x74>)
 80120f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80120f8:	88fa      	ldrh	r2, [r7, #6]
 80120fa:	429a      	cmp	r2, r3
 80120fc:	d006      	beq.n	801210c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80120fe:	89fb      	ldrh	r3, [r7, #14]
 8012100:	3301      	adds	r3, #1
 8012102:	81fb      	strh	r3, [r7, #14]
 8012104:	89fb      	ldrh	r3, [r7, #14]
 8012106:	2b7f      	cmp	r3, #127	@ 0x7f
 8012108:	d9f2      	bls.n	80120f0 <ff_convert+0x3c>
 801210a:	e000      	b.n	801210e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801210c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801210e:	89fb      	ldrh	r3, [r7, #14]
 8012110:	3380      	adds	r3, #128	@ 0x80
 8012112:	b29b      	uxth	r3, r3
 8012114:	b2db      	uxtb	r3, r3
 8012116:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8012118:	89fb      	ldrh	r3, [r7, #14]
}
 801211a:	4618      	mov	r0, r3
 801211c:	3714      	adds	r7, #20
 801211e:	46bd      	mov	sp, r7
 8012120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012124:	4770      	bx	lr
 8012126:	bf00      	nop
 8012128:	0801896c 	.word	0x0801896c

0801212c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801212c:	b480      	push	{r7}
 801212e:	b087      	sub	sp, #28
 8012130:	af00      	add	r7, sp, #0
 8012132:	4603      	mov	r3, r0
 8012134:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8012136:	88fb      	ldrh	r3, [r7, #6]
 8012138:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801213c:	d201      	bcs.n	8012142 <ff_wtoupper+0x16>
 801213e:	4b3e      	ldr	r3, [pc, #248]	@ (8012238 <ff_wtoupper+0x10c>)
 8012140:	e000      	b.n	8012144 <ff_wtoupper+0x18>
 8012142:	4b3e      	ldr	r3, [pc, #248]	@ (801223c <ff_wtoupper+0x110>)
 8012144:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8012146:	697b      	ldr	r3, [r7, #20]
 8012148:	1c9a      	adds	r2, r3, #2
 801214a:	617a      	str	r2, [r7, #20]
 801214c:	881b      	ldrh	r3, [r3, #0]
 801214e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8012150:	8a7b      	ldrh	r3, [r7, #18]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d068      	beq.n	8012228 <ff_wtoupper+0xfc>
 8012156:	88fa      	ldrh	r2, [r7, #6]
 8012158:	8a7b      	ldrh	r3, [r7, #18]
 801215a:	429a      	cmp	r2, r3
 801215c:	d364      	bcc.n	8012228 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801215e:	697b      	ldr	r3, [r7, #20]
 8012160:	1c9a      	adds	r2, r3, #2
 8012162:	617a      	str	r2, [r7, #20]
 8012164:	881b      	ldrh	r3, [r3, #0]
 8012166:	823b      	strh	r3, [r7, #16]
 8012168:	8a3b      	ldrh	r3, [r7, #16]
 801216a:	0a1b      	lsrs	r3, r3, #8
 801216c:	81fb      	strh	r3, [r7, #14]
 801216e:	8a3b      	ldrh	r3, [r7, #16]
 8012170:	b2db      	uxtb	r3, r3
 8012172:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8012174:	88fa      	ldrh	r2, [r7, #6]
 8012176:	8a79      	ldrh	r1, [r7, #18]
 8012178:	8a3b      	ldrh	r3, [r7, #16]
 801217a:	440b      	add	r3, r1
 801217c:	429a      	cmp	r2, r3
 801217e:	da49      	bge.n	8012214 <ff_wtoupper+0xe8>
			switch (cmd) {
 8012180:	89fb      	ldrh	r3, [r7, #14]
 8012182:	2b08      	cmp	r3, #8
 8012184:	d84f      	bhi.n	8012226 <ff_wtoupper+0xfa>
 8012186:	a201      	add	r2, pc, #4	@ (adr r2, 801218c <ff_wtoupper+0x60>)
 8012188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801218c:	080121b1 	.word	0x080121b1
 8012190:	080121c3 	.word	0x080121c3
 8012194:	080121d9 	.word	0x080121d9
 8012198:	080121e1 	.word	0x080121e1
 801219c:	080121e9 	.word	0x080121e9
 80121a0:	080121f1 	.word	0x080121f1
 80121a4:	080121f9 	.word	0x080121f9
 80121a8:	08012201 	.word	0x08012201
 80121ac:	08012209 	.word	0x08012209
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80121b0:	88fa      	ldrh	r2, [r7, #6]
 80121b2:	8a7b      	ldrh	r3, [r7, #18]
 80121b4:	1ad3      	subs	r3, r2, r3
 80121b6:	005b      	lsls	r3, r3, #1
 80121b8:	697a      	ldr	r2, [r7, #20]
 80121ba:	4413      	add	r3, r2
 80121bc:	881b      	ldrh	r3, [r3, #0]
 80121be:	80fb      	strh	r3, [r7, #6]
 80121c0:	e027      	b.n	8012212 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80121c2:	88fa      	ldrh	r2, [r7, #6]
 80121c4:	8a7b      	ldrh	r3, [r7, #18]
 80121c6:	1ad3      	subs	r3, r2, r3
 80121c8:	b29b      	uxth	r3, r3
 80121ca:	f003 0301 	and.w	r3, r3, #1
 80121ce:	b29b      	uxth	r3, r3
 80121d0:	88fa      	ldrh	r2, [r7, #6]
 80121d2:	1ad3      	subs	r3, r2, r3
 80121d4:	80fb      	strh	r3, [r7, #6]
 80121d6:	e01c      	b.n	8012212 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80121d8:	88fb      	ldrh	r3, [r7, #6]
 80121da:	3b10      	subs	r3, #16
 80121dc:	80fb      	strh	r3, [r7, #6]
 80121de:	e018      	b.n	8012212 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80121e0:	88fb      	ldrh	r3, [r7, #6]
 80121e2:	3b20      	subs	r3, #32
 80121e4:	80fb      	strh	r3, [r7, #6]
 80121e6:	e014      	b.n	8012212 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80121e8:	88fb      	ldrh	r3, [r7, #6]
 80121ea:	3b30      	subs	r3, #48	@ 0x30
 80121ec:	80fb      	strh	r3, [r7, #6]
 80121ee:	e010      	b.n	8012212 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80121f0:	88fb      	ldrh	r3, [r7, #6]
 80121f2:	3b1a      	subs	r3, #26
 80121f4:	80fb      	strh	r3, [r7, #6]
 80121f6:	e00c      	b.n	8012212 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80121f8:	88fb      	ldrh	r3, [r7, #6]
 80121fa:	3308      	adds	r3, #8
 80121fc:	80fb      	strh	r3, [r7, #6]
 80121fe:	e008      	b.n	8012212 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8012200:	88fb      	ldrh	r3, [r7, #6]
 8012202:	3b50      	subs	r3, #80	@ 0x50
 8012204:	80fb      	strh	r3, [r7, #6]
 8012206:	e004      	b.n	8012212 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8012208:	88fb      	ldrh	r3, [r7, #6]
 801220a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801220e:	80fb      	strh	r3, [r7, #6]
 8012210:	bf00      	nop
			}
			break;
 8012212:	e008      	b.n	8012226 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8012214:	89fb      	ldrh	r3, [r7, #14]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d195      	bne.n	8012146 <ff_wtoupper+0x1a>
 801221a:	8a3b      	ldrh	r3, [r7, #16]
 801221c:	005b      	lsls	r3, r3, #1
 801221e:	697a      	ldr	r2, [r7, #20]
 8012220:	4413      	add	r3, r2
 8012222:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8012224:	e78f      	b.n	8012146 <ff_wtoupper+0x1a>
			break;
 8012226:	bf00      	nop
	}

	return chr;
 8012228:	88fb      	ldrh	r3, [r7, #6]
}
 801222a:	4618      	mov	r0, r3
 801222c:	371c      	adds	r7, #28
 801222e:	46bd      	mov	sp, r7
 8012230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012234:	4770      	bx	lr
 8012236:	bf00      	nop
 8012238:	08018a6c 	.word	0x08018a6c
 801223c:	08018c60 	.word	0x08018c60

08012240 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b086      	sub	sp, #24
 8012244:	af00      	add	r7, sp, #0
 8012246:	4603      	mov	r3, r0
 8012248:	6039      	str	r1, [r7, #0]
 801224a:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 801224c:	2300      	movs	r3, #0
 801224e:	60fb      	str	r3, [r7, #12]
 8012250:	2300      	movs	r3, #0
 8012252:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8012254:	f107 030c 	add.w	r3, r7, #12
 8012258:	2101      	movs	r1, #1
 801225a:	4618      	mov	r0, r3
 801225c:	f000 f869 	bl	8012332 <osSemaphoreCreate>
 8012260:	4602      	mov	r2, r0
 8012262:	683b      	ldr	r3, [r7, #0]
 8012264:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8012266:	683b      	ldr	r3, [r7, #0]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	2b00      	cmp	r3, #0
 801226c:	bf14      	ite	ne
 801226e:	2301      	movne	r3, #1
 8012270:	2300      	moveq	r3, #0
 8012272:	b2db      	uxtb	r3, r3
 8012274:	617b      	str	r3, [r7, #20]

    return ret;
 8012276:	697b      	ldr	r3, [r7, #20]
}
 8012278:	4618      	mov	r0, r3
 801227a:	3718      	adds	r7, #24
 801227c:	46bd      	mov	sp, r7
 801227e:	bd80      	pop	{r7, pc}

08012280 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b082      	sub	sp, #8
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8012288:	6878      	ldr	r0, [r7, #4]
 801228a:	f000 f909 	bl	80124a0 <osSemaphoreDelete>
#endif
    return 1;
 801228e:	2301      	movs	r3, #1
}
 8012290:	4618      	mov	r0, r3
 8012292:	3708      	adds	r7, #8
 8012294:	46bd      	mov	sp, r7
 8012296:	bd80      	pop	{r7, pc}

08012298 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8012298:	b580      	push	{r7, lr}
 801229a:	b084      	sub	sp, #16
 801229c:	af00      	add	r7, sp, #0
 801229e:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80122a0:	2300      	movs	r3, #0
 80122a2:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80122a4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80122a8:	6878      	ldr	r0, [r7, #4]
 80122aa:	f000 f875 	bl	8012398 <osSemaphoreWait>
 80122ae:	4603      	mov	r3, r0
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d101      	bne.n	80122b8 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 80122b4:	2301      	movs	r3, #1
 80122b6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80122b8:	68fb      	ldr	r3, [r7, #12]
}
 80122ba:	4618      	mov	r0, r3
 80122bc:	3710      	adds	r7, #16
 80122be:	46bd      	mov	sp, r7
 80122c0:	bd80      	pop	{r7, pc}

080122c2 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80122c2:	b580      	push	{r7, lr}
 80122c4:	b082      	sub	sp, #8
 80122c6:	af00      	add	r7, sp, #0
 80122c8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80122ca:	6878      	ldr	r0, [r7, #4]
 80122cc:	f000 f8b2 	bl	8012434 <osSemaphoreRelease>
#endif
}
 80122d0:	bf00      	nop
 80122d2:	3708      	adds	r7, #8
 80122d4:	46bd      	mov	sp, r7
 80122d6:	bd80      	pop	{r7, pc}

080122d8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80122d8:	b480      	push	{r7}
 80122da:	b083      	sub	sp, #12
 80122dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80122de:	f3ef 8305 	mrs	r3, IPSR
 80122e2:	607b      	str	r3, [r7, #4]
  return(result);
 80122e4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	bf14      	ite	ne
 80122ea:	2301      	movne	r3, #1
 80122ec:	2300      	moveq	r3, #0
 80122ee:	b2db      	uxtb	r3, r3
}
 80122f0:	4618      	mov	r0, r3
 80122f2:	370c      	adds	r7, #12
 80122f4:	46bd      	mov	sp, r7
 80122f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fa:	4770      	bx	lr

080122fc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80122fc:	b580      	push	{r7, lr}
 80122fe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012300:	f001 fc50 	bl	8013ba4 <vTaskStartScheduler>
  
  return osOK;
 8012304:	2300      	movs	r3, #0
}
 8012306:	4618      	mov	r0, r3
 8012308:	bd80      	pop	{r7, pc}

0801230a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801230a:	b580      	push	{r7, lr}
 801230c:	b084      	sub	sp, #16
 801230e:	af00      	add	r7, sp, #0
 8012310:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d001      	beq.n	8012320 <osDelay+0x16>
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	e000      	b.n	8012322 <osDelay+0x18>
 8012320:	2301      	movs	r3, #1
 8012322:	4618      	mov	r0, r3
 8012324:	f001 fc06 	bl	8013b34 <vTaskDelay>
  
  return osOK;
 8012328:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801232a:	4618      	mov	r0, r3
 801232c:	3710      	adds	r7, #16
 801232e:	46bd      	mov	sp, r7
 8012330:	bd80      	pop	{r7, pc}

08012332 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8012332:	b580      	push	{r7, lr}
 8012334:	b086      	sub	sp, #24
 8012336:	af02      	add	r7, sp, #8
 8012338:	6078      	str	r0, [r7, #4]
 801233a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	685b      	ldr	r3, [r3, #4]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d00f      	beq.n	8012364 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8012344:	683b      	ldr	r3, [r7, #0]
 8012346:	2b01      	cmp	r3, #1
 8012348:	d10a      	bne.n	8012360 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	685b      	ldr	r3, [r3, #4]
 801234e:	2203      	movs	r2, #3
 8012350:	9200      	str	r2, [sp, #0]
 8012352:	2200      	movs	r2, #0
 8012354:	2100      	movs	r1, #0
 8012356:	2001      	movs	r0, #1
 8012358:	f000 fb7c 	bl	8012a54 <xQueueGenericCreateStatic>
 801235c:	4603      	mov	r3, r0
 801235e:	e016      	b.n	801238e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8012360:	2300      	movs	r3, #0
 8012362:	e014      	b.n	801238e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8012364:	683b      	ldr	r3, [r7, #0]
 8012366:	2b01      	cmp	r3, #1
 8012368:	d110      	bne.n	801238c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 801236a:	2203      	movs	r2, #3
 801236c:	2100      	movs	r1, #0
 801236e:	2001      	movs	r0, #1
 8012370:	f000 fbf7 	bl	8012b62 <xQueueGenericCreate>
 8012374:	60f8      	str	r0, [r7, #12]
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d005      	beq.n	8012388 <osSemaphoreCreate+0x56>
 801237c:	2300      	movs	r3, #0
 801237e:	2200      	movs	r2, #0
 8012380:	2100      	movs	r1, #0
 8012382:	68f8      	ldr	r0, [r7, #12]
 8012384:	f000 fc86 	bl	8012c94 <xQueueGenericSend>
      return sema;
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	e000      	b.n	801238e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 801238c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 801238e:	4618      	mov	r0, r3
 8012390:	3710      	adds	r7, #16
 8012392:	46bd      	mov	sp, r7
 8012394:	bd80      	pop	{r7, pc}
	...

08012398 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8012398:	b580      	push	{r7, lr}
 801239a:	b084      	sub	sp, #16
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
 80123a0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80123a2:	2300      	movs	r3, #0
 80123a4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d101      	bne.n	80123b0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80123ac:	2380      	movs	r3, #128	@ 0x80
 80123ae:	e03a      	b.n	8012426 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80123b0:	2300      	movs	r3, #0
 80123b2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80123b4:	683b      	ldr	r3, [r7, #0]
 80123b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123ba:	d103      	bne.n	80123c4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80123bc:	f04f 33ff 	mov.w	r3, #4294967295
 80123c0:	60fb      	str	r3, [r7, #12]
 80123c2:	e009      	b.n	80123d8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80123c4:	683b      	ldr	r3, [r7, #0]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d006      	beq.n	80123d8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80123ca:	683b      	ldr	r3, [r7, #0]
 80123cc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d101      	bne.n	80123d8 <osSemaphoreWait+0x40>
      ticks = 1;
 80123d4:	2301      	movs	r3, #1
 80123d6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80123d8:	f7ff ff7e 	bl	80122d8 <inHandlerMode>
 80123dc:	4603      	mov	r3, r0
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d017      	beq.n	8012412 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80123e2:	f107 0308 	add.w	r3, r7, #8
 80123e6:	461a      	mov	r2, r3
 80123e8:	2100      	movs	r1, #0
 80123ea:	6878      	ldr	r0, [r7, #4]
 80123ec:	f000 fff4 	bl	80133d8 <xQueueReceiveFromISR>
 80123f0:	4603      	mov	r3, r0
 80123f2:	2b01      	cmp	r3, #1
 80123f4:	d001      	beq.n	80123fa <osSemaphoreWait+0x62>
      return osErrorOS;
 80123f6:	23ff      	movs	r3, #255	@ 0xff
 80123f8:	e015      	b.n	8012426 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80123fa:	68bb      	ldr	r3, [r7, #8]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d011      	beq.n	8012424 <osSemaphoreWait+0x8c>
 8012400:	4b0b      	ldr	r3, [pc, #44]	@ (8012430 <osSemaphoreWait+0x98>)
 8012402:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012406:	601a      	str	r2, [r3, #0]
 8012408:	f3bf 8f4f 	dsb	sy
 801240c:	f3bf 8f6f 	isb	sy
 8012410:	e008      	b.n	8012424 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8012412:	68f9      	ldr	r1, [r7, #12]
 8012414:	6878      	ldr	r0, [r7, #4]
 8012416:	f000 fec7 	bl	80131a8 <xQueueSemaphoreTake>
 801241a:	4603      	mov	r3, r0
 801241c:	2b01      	cmp	r3, #1
 801241e:	d001      	beq.n	8012424 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8012420:	23ff      	movs	r3, #255	@ 0xff
 8012422:	e000      	b.n	8012426 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8012424:	2300      	movs	r3, #0
}
 8012426:	4618      	mov	r0, r3
 8012428:	3710      	adds	r7, #16
 801242a:	46bd      	mov	sp, r7
 801242c:	bd80      	pop	{r7, pc}
 801242e:	bf00      	nop
 8012430:	e000ed04 	.word	0xe000ed04

08012434 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b084      	sub	sp, #16
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 801243c:	2300      	movs	r3, #0
 801243e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8012440:	2300      	movs	r3, #0
 8012442:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8012444:	f7ff ff48 	bl	80122d8 <inHandlerMode>
 8012448:	4603      	mov	r3, r0
 801244a:	2b00      	cmp	r3, #0
 801244c:	d016      	beq.n	801247c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801244e:	f107 0308 	add.w	r3, r7, #8
 8012452:	4619      	mov	r1, r3
 8012454:	6878      	ldr	r0, [r7, #4]
 8012456:	f000 fd27 	bl	8012ea8 <xQueueGiveFromISR>
 801245a:	4603      	mov	r3, r0
 801245c:	2b01      	cmp	r3, #1
 801245e:	d001      	beq.n	8012464 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8012460:	23ff      	movs	r3, #255	@ 0xff
 8012462:	e017      	b.n	8012494 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012464:	68bb      	ldr	r3, [r7, #8]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d013      	beq.n	8012492 <osSemaphoreRelease+0x5e>
 801246a:	4b0c      	ldr	r3, [pc, #48]	@ (801249c <osSemaphoreRelease+0x68>)
 801246c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012470:	601a      	str	r2, [r3, #0]
 8012472:	f3bf 8f4f 	dsb	sy
 8012476:	f3bf 8f6f 	isb	sy
 801247a:	e00a      	b.n	8012492 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 801247c:	2300      	movs	r3, #0
 801247e:	2200      	movs	r2, #0
 8012480:	2100      	movs	r1, #0
 8012482:	6878      	ldr	r0, [r7, #4]
 8012484:	f000 fc06 	bl	8012c94 <xQueueGenericSend>
 8012488:	4603      	mov	r3, r0
 801248a:	2b01      	cmp	r3, #1
 801248c:	d001      	beq.n	8012492 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 801248e:	23ff      	movs	r3, #255	@ 0xff
 8012490:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8012492:	68fb      	ldr	r3, [r7, #12]
}
 8012494:	4618      	mov	r0, r3
 8012496:	3710      	adds	r7, #16
 8012498:	46bd      	mov	sp, r7
 801249a:	bd80      	pop	{r7, pc}
 801249c:	e000ed04 	.word	0xe000ed04

080124a0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80124a0:	b580      	push	{r7, lr}
 80124a2:	b082      	sub	sp, #8
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80124a8:	f7ff ff16 	bl	80122d8 <inHandlerMode>
 80124ac:	4603      	mov	r3, r0
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d001      	beq.n	80124b6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80124b2:	2382      	movs	r3, #130	@ 0x82
 80124b4:	e003      	b.n	80124be <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80124b6:	6878      	ldr	r0, [r7, #4]
 80124b8:	f001 f816 	bl	80134e8 <vQueueDelete>

  return osOK; 
 80124bc:	2300      	movs	r3, #0
}
 80124be:	4618      	mov	r0, r3
 80124c0:	3708      	adds	r7, #8
 80124c2:	46bd      	mov	sp, r7
 80124c4:	bd80      	pop	{r7, pc}

080124c6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80124c6:	b580      	push	{r7, lr}
 80124c8:	b082      	sub	sp, #8
 80124ca:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80124cc:	2020      	movs	r0, #32
 80124ce:	f002 fd1b 	bl	8014f08 <pvPortMalloc>
 80124d2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d00a      	beq.n	80124f0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	2200      	movs	r2, #0
 80124de:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	3304      	adds	r3, #4
 80124e4:	4618      	mov	r0, r3
 80124e6:	f000 f995 	bl	8012814 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	2200      	movs	r2, #0
 80124ee:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80124f0:	687b      	ldr	r3, [r7, #4]
	}
 80124f2:	4618      	mov	r0, r3
 80124f4:	3708      	adds	r7, #8
 80124f6:	46bd      	mov	sp, r7
 80124f8:	bd80      	pop	{r7, pc}
	...

080124fc <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b090      	sub	sp, #64	@ 0x40
 8012500:	af00      	add	r7, sp, #0
 8012502:	60f8      	str	r0, [r7, #12]
 8012504:	60b9      	str	r1, [r7, #8]
 8012506:	607a      	str	r2, [r7, #4]
 8012508:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801250e:	2300      	movs	r3, #0
 8012510:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8012512:	2300      	movs	r3, #0
 8012514:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d10d      	bne.n	8012538 <xEventGroupWaitBits+0x3c>
	__asm volatile
 801251c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012520:	b672      	cpsid	i
 8012522:	f383 8811 	msr	BASEPRI, r3
 8012526:	f3bf 8f6f 	isb	sy
 801252a:	f3bf 8f4f 	dsb	sy
 801252e:	b662      	cpsie	i
 8012530:	623b      	str	r3, [r7, #32]
}
 8012532:	bf00      	nop
 8012534:	bf00      	nop
 8012536:	e7fd      	b.n	8012534 <xEventGroupWaitBits+0x38>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012538:	68bb      	ldr	r3, [r7, #8]
 801253a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801253e:	d30d      	bcc.n	801255c <xEventGroupWaitBits+0x60>
	__asm volatile
 8012540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012544:	b672      	cpsid	i
 8012546:	f383 8811 	msr	BASEPRI, r3
 801254a:	f3bf 8f6f 	isb	sy
 801254e:	f3bf 8f4f 	dsb	sy
 8012552:	b662      	cpsie	i
 8012554:	61fb      	str	r3, [r7, #28]
}
 8012556:	bf00      	nop
 8012558:	bf00      	nop
 801255a:	e7fd      	b.n	8012558 <xEventGroupWaitBits+0x5c>
	configASSERT( uxBitsToWaitFor != 0 );
 801255c:	68bb      	ldr	r3, [r7, #8]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d10d      	bne.n	801257e <xEventGroupWaitBits+0x82>
	__asm volatile
 8012562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012566:	b672      	cpsid	i
 8012568:	f383 8811 	msr	BASEPRI, r3
 801256c:	f3bf 8f6f 	isb	sy
 8012570:	f3bf 8f4f 	dsb	sy
 8012574:	b662      	cpsie	i
 8012576:	61bb      	str	r3, [r7, #24]
}
 8012578:	bf00      	nop
 801257a:	bf00      	nop
 801257c:	e7fd      	b.n	801257a <xEventGroupWaitBits+0x7e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801257e:	f002 f82d 	bl	80145dc <xTaskGetSchedulerState>
 8012582:	4603      	mov	r3, r0
 8012584:	2b00      	cmp	r3, #0
 8012586:	d102      	bne.n	801258e <xEventGroupWaitBits+0x92>
 8012588:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801258a:	2b00      	cmp	r3, #0
 801258c:	d101      	bne.n	8012592 <xEventGroupWaitBits+0x96>
 801258e:	2301      	movs	r3, #1
 8012590:	e000      	b.n	8012594 <xEventGroupWaitBits+0x98>
 8012592:	2300      	movs	r3, #0
 8012594:	2b00      	cmp	r3, #0
 8012596:	d10d      	bne.n	80125b4 <xEventGroupWaitBits+0xb8>
	__asm volatile
 8012598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801259c:	b672      	cpsid	i
 801259e:	f383 8811 	msr	BASEPRI, r3
 80125a2:	f3bf 8f6f 	isb	sy
 80125a6:	f3bf 8f4f 	dsb	sy
 80125aa:	b662      	cpsie	i
 80125ac:	617b      	str	r3, [r7, #20]
}
 80125ae:	bf00      	nop
 80125b0:	bf00      	nop
 80125b2:	e7fd      	b.n	80125b0 <xEventGroupWaitBits+0xb4>
	}
	#endif

	vTaskSuspendAll();
 80125b4:	f001 fb5e 	bl	8013c74 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80125b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80125be:	683a      	ldr	r2, [r7, #0]
 80125c0:	68b9      	ldr	r1, [r7, #8]
 80125c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80125c4:	f000 f904 	bl	80127d0 <prvTestWaitCondition>
 80125c8:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 80125ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d00e      	beq.n	80125ee <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80125d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80125d4:	2300      	movs	r3, #0
 80125d6:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d028      	beq.n	8012630 <xEventGroupWaitBits+0x134>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80125de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125e0:	681a      	ldr	r2, [r3, #0]
 80125e2:	68bb      	ldr	r3, [r7, #8]
 80125e4:	43db      	mvns	r3, r3
 80125e6:	401a      	ands	r2, r3
 80125e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125ea:	601a      	str	r2, [r3, #0]
 80125ec:	e020      	b.n	8012630 <xEventGroupWaitBits+0x134>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80125ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d104      	bne.n	80125fe <xEventGroupWaitBits+0x102>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80125f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 80125f8:	2301      	movs	r3, #1
 80125fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80125fc:	e018      	b.n	8012630 <xEventGroupWaitBits+0x134>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d003      	beq.n	801260c <xEventGroupWaitBits+0x110>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8012604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012606:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801260a:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 801260c:	683b      	ldr	r3, [r7, #0]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d003      	beq.n	801261a <xEventGroupWaitBits+0x11e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8012612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012614:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8012618:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 801261a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801261c:	1d18      	adds	r0, r3, #4
 801261e:	68ba      	ldr	r2, [r7, #8]
 8012620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012622:	4313      	orrs	r3, r2
 8012624:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012626:	4619      	mov	r1, r3
 8012628:	f001 fd66 	bl	80140f8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 801262c:	2300      	movs	r3, #0
 801262e:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8012630:	f001 fb2e 	bl	8013c90 <xTaskResumeAll>
 8012634:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8012636:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012638:	2b00      	cmp	r3, #0
 801263a:	d031      	beq.n	80126a0 <xEventGroupWaitBits+0x1a4>
	{
		if( xAlreadyYielded == pdFALSE )
 801263c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801263e:	2b00      	cmp	r3, #0
 8012640:	d107      	bne.n	8012652 <xEventGroupWaitBits+0x156>
		{
			portYIELD_WITHIN_API();
 8012642:	4b1a      	ldr	r3, [pc, #104]	@ (80126ac <xEventGroupWaitBits+0x1b0>)
 8012644:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012648:	601a      	str	r2, [r3, #0]
 801264a:	f3bf 8f4f 	dsb	sy
 801264e:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8012652:	f002 f98d 	bl	8014970 <uxTaskResetEventItemValue>
 8012656:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8012658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801265a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801265e:	2b00      	cmp	r3, #0
 8012660:	d11a      	bne.n	8012698 <xEventGroupWaitBits+0x19c>
		{
			taskENTER_CRITICAL();
 8012662:	f002 fb23 	bl	8014cac <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8012666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 801266c:	683a      	ldr	r2, [r7, #0]
 801266e:	68b9      	ldr	r1, [r7, #8]
 8012670:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012672:	f000 f8ad 	bl	80127d0 <prvTestWaitCondition>
 8012676:	4603      	mov	r3, r0
 8012678:	2b00      	cmp	r3, #0
 801267a:	d009      	beq.n	8012690 <xEventGroupWaitBits+0x194>
				{
					if( xClearOnExit != pdFALSE )
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d006      	beq.n	8012690 <xEventGroupWaitBits+0x194>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8012682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012684:	681a      	ldr	r2, [r3, #0]
 8012686:	68bb      	ldr	r3, [r7, #8]
 8012688:	43db      	mvns	r3, r3
 801268a:	401a      	ands	r2, r3
 801268c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801268e:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8012690:	2301      	movs	r3, #1
 8012692:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8012694:	f002 fb40 	bl	8014d18 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8012698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801269a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801269e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80126a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80126a2:	4618      	mov	r0, r3
 80126a4:	3740      	adds	r7, #64	@ 0x40
 80126a6:	46bd      	mov	sp, r7
 80126a8:	bd80      	pop	{r7, pc}
 80126aa:	bf00      	nop
 80126ac:	e000ed04 	.word	0xe000ed04

080126b0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b08e      	sub	sp, #56	@ 0x38
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
 80126b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80126ba:	2300      	movs	r3, #0
 80126bc:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 80126c2:	2300      	movs	r3, #0
 80126c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d10d      	bne.n	80126e8 <xEventGroupSetBits+0x38>
	__asm volatile
 80126cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126d0:	b672      	cpsid	i
 80126d2:	f383 8811 	msr	BASEPRI, r3
 80126d6:	f3bf 8f6f 	isb	sy
 80126da:	f3bf 8f4f 	dsb	sy
 80126de:	b662      	cpsie	i
 80126e0:	613b      	str	r3, [r7, #16]
}
 80126e2:	bf00      	nop
 80126e4:	bf00      	nop
 80126e6:	e7fd      	b.n	80126e4 <xEventGroupSetBits+0x34>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80126e8:	683b      	ldr	r3, [r7, #0]
 80126ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80126ee:	d30d      	bcc.n	801270c <xEventGroupSetBits+0x5c>
	__asm volatile
 80126f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126f4:	b672      	cpsid	i
 80126f6:	f383 8811 	msr	BASEPRI, r3
 80126fa:	f3bf 8f6f 	isb	sy
 80126fe:	f3bf 8f4f 	dsb	sy
 8012702:	b662      	cpsie	i
 8012704:	60fb      	str	r3, [r7, #12]
}
 8012706:	bf00      	nop
 8012708:	bf00      	nop
 801270a:	e7fd      	b.n	8012708 <xEventGroupSetBits+0x58>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 801270c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801270e:	3304      	adds	r3, #4
 8012710:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012714:	3308      	adds	r3, #8
 8012716:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8012718:	f001 faac 	bl	8013c74 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 801271c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801271e:	68db      	ldr	r3, [r3, #12]
 8012720:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8012722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012724:	681a      	ldr	r2, [r3, #0]
 8012726:	683b      	ldr	r3, [r7, #0]
 8012728:	431a      	orrs	r2, r3
 801272a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801272c:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 801272e:	e03c      	b.n	80127aa <xEventGroupSetBits+0xfa>
		{
			pxNext = listGET_NEXT( pxListItem );
 8012730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012732:	685b      	ldr	r3, [r3, #4]
 8012734:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8012736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 801273c:	2300      	movs	r3, #0
 801273e:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8012740:	69bb      	ldr	r3, [r7, #24]
 8012742:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8012746:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8012748:	69bb      	ldr	r3, [r7, #24]
 801274a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801274e:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8012750:	697b      	ldr	r3, [r7, #20]
 8012752:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8012756:	2b00      	cmp	r3, #0
 8012758:	d108      	bne.n	801276c <xEventGroupSetBits+0xbc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 801275a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801275c:	681a      	ldr	r2, [r3, #0]
 801275e:	69bb      	ldr	r3, [r7, #24]
 8012760:	4013      	ands	r3, r2
 8012762:	2b00      	cmp	r3, #0
 8012764:	d00b      	beq.n	801277e <xEventGroupSetBits+0xce>
				{
					xMatchFound = pdTRUE;
 8012766:	2301      	movs	r3, #1
 8012768:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801276a:	e008      	b.n	801277e <xEventGroupSetBits+0xce>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 801276c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801276e:	681a      	ldr	r2, [r3, #0]
 8012770:	69bb      	ldr	r3, [r7, #24]
 8012772:	4013      	ands	r3, r2
 8012774:	69ba      	ldr	r2, [r7, #24]
 8012776:	429a      	cmp	r2, r3
 8012778:	d101      	bne.n	801277e <xEventGroupSetBits+0xce>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 801277a:	2301      	movs	r3, #1
 801277c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 801277e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012780:	2b00      	cmp	r3, #0
 8012782:	d010      	beq.n	80127a6 <xEventGroupSetBits+0xf6>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8012784:	697b      	ldr	r3, [r7, #20]
 8012786:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801278a:	2b00      	cmp	r3, #0
 801278c:	d003      	beq.n	8012796 <xEventGroupSetBits+0xe6>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 801278e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012790:	69bb      	ldr	r3, [r7, #24]
 8012792:	4313      	orrs	r3, r2
 8012794:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8012796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801279e:	4619      	mov	r1, r3
 80127a0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80127a2:	f001 fd51 	bl	8014248 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80127a6:	69fb      	ldr	r3, [r7, #28]
 80127a8:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 80127aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80127ac:	6a3b      	ldr	r3, [r7, #32]
 80127ae:	429a      	cmp	r2, r3
 80127b0:	d1be      	bne.n	8012730 <xEventGroupSetBits+0x80>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80127b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127b4:	681a      	ldr	r2, [r3, #0]
 80127b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127b8:	43db      	mvns	r3, r3
 80127ba:	401a      	ands	r2, r3
 80127bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127be:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80127c0:	f001 fa66 	bl	8013c90 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80127c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127c6:	681b      	ldr	r3, [r3, #0]
}
 80127c8:	4618      	mov	r0, r3
 80127ca:	3738      	adds	r7, #56	@ 0x38
 80127cc:	46bd      	mov	sp, r7
 80127ce:	bd80      	pop	{r7, pc}

080127d0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80127d0:	b480      	push	{r7}
 80127d2:	b087      	sub	sp, #28
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	60f8      	str	r0, [r7, #12]
 80127d8:	60b9      	str	r1, [r7, #8]
 80127da:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80127dc:	2300      	movs	r3, #0
 80127de:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d107      	bne.n	80127f6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80127e6:	68fa      	ldr	r2, [r7, #12]
 80127e8:	68bb      	ldr	r3, [r7, #8]
 80127ea:	4013      	ands	r3, r2
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d00a      	beq.n	8012806 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80127f0:	2301      	movs	r3, #1
 80127f2:	617b      	str	r3, [r7, #20]
 80127f4:	e007      	b.n	8012806 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80127f6:	68fa      	ldr	r2, [r7, #12]
 80127f8:	68bb      	ldr	r3, [r7, #8]
 80127fa:	4013      	ands	r3, r2
 80127fc:	68ba      	ldr	r2, [r7, #8]
 80127fe:	429a      	cmp	r2, r3
 8012800:	d101      	bne.n	8012806 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8012802:	2301      	movs	r3, #1
 8012804:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8012806:	697b      	ldr	r3, [r7, #20]
}
 8012808:	4618      	mov	r0, r3
 801280a:	371c      	adds	r7, #28
 801280c:	46bd      	mov	sp, r7
 801280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012812:	4770      	bx	lr

08012814 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012814:	b480      	push	{r7}
 8012816:	b083      	sub	sp, #12
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	f103 0208 	add.w	r2, r3, #8
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	f04f 32ff 	mov.w	r2, #4294967295
 801282c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	f103 0208 	add.w	r2, r3, #8
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	f103 0208 	add.w	r2, r3, #8
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	2200      	movs	r2, #0
 8012846:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012848:	bf00      	nop
 801284a:	370c      	adds	r7, #12
 801284c:	46bd      	mov	sp, r7
 801284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012852:	4770      	bx	lr

08012854 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012854:	b480      	push	{r7}
 8012856:	b083      	sub	sp, #12
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	2200      	movs	r2, #0
 8012860:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012862:	bf00      	nop
 8012864:	370c      	adds	r7, #12
 8012866:	46bd      	mov	sp, r7
 8012868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286c:	4770      	bx	lr

0801286e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801286e:	b480      	push	{r7}
 8012870:	b085      	sub	sp, #20
 8012872:	af00      	add	r7, sp, #0
 8012874:	6078      	str	r0, [r7, #4]
 8012876:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	685b      	ldr	r3, [r3, #4]
 801287c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801287e:	683b      	ldr	r3, [r7, #0]
 8012880:	68fa      	ldr	r2, [r7, #12]
 8012882:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	689a      	ldr	r2, [r3, #8]
 8012888:	683b      	ldr	r3, [r7, #0]
 801288a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	689b      	ldr	r3, [r3, #8]
 8012890:	683a      	ldr	r2, [r7, #0]
 8012892:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	683a      	ldr	r2, [r7, #0]
 8012898:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801289a:	683b      	ldr	r3, [r7, #0]
 801289c:	687a      	ldr	r2, [r7, #4]
 801289e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	1c5a      	adds	r2, r3, #1
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	601a      	str	r2, [r3, #0]
}
 80128aa:	bf00      	nop
 80128ac:	3714      	adds	r7, #20
 80128ae:	46bd      	mov	sp, r7
 80128b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b4:	4770      	bx	lr

080128b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80128b6:	b480      	push	{r7}
 80128b8:	b085      	sub	sp, #20
 80128ba:	af00      	add	r7, sp, #0
 80128bc:	6078      	str	r0, [r7, #4]
 80128be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80128c0:	683b      	ldr	r3, [r7, #0]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80128c6:	68bb      	ldr	r3, [r7, #8]
 80128c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128cc:	d103      	bne.n	80128d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	691b      	ldr	r3, [r3, #16]
 80128d2:	60fb      	str	r3, [r7, #12]
 80128d4:	e00c      	b.n	80128f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	3308      	adds	r3, #8
 80128da:	60fb      	str	r3, [r7, #12]
 80128dc:	e002      	b.n	80128e4 <vListInsert+0x2e>
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	685b      	ldr	r3, [r3, #4]
 80128e2:	60fb      	str	r3, [r7, #12]
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	685b      	ldr	r3, [r3, #4]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	68ba      	ldr	r2, [r7, #8]
 80128ec:	429a      	cmp	r2, r3
 80128ee:	d2f6      	bcs.n	80128de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	685a      	ldr	r2, [r3, #4]
 80128f4:	683b      	ldr	r3, [r7, #0]
 80128f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80128f8:	683b      	ldr	r3, [r7, #0]
 80128fa:	685b      	ldr	r3, [r3, #4]
 80128fc:	683a      	ldr	r2, [r7, #0]
 80128fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012900:	683b      	ldr	r3, [r7, #0]
 8012902:	68fa      	ldr	r2, [r7, #12]
 8012904:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	683a      	ldr	r2, [r7, #0]
 801290a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801290c:	683b      	ldr	r3, [r7, #0]
 801290e:	687a      	ldr	r2, [r7, #4]
 8012910:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	1c5a      	adds	r2, r3, #1
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	601a      	str	r2, [r3, #0]
}
 801291c:	bf00      	nop
 801291e:	3714      	adds	r7, #20
 8012920:	46bd      	mov	sp, r7
 8012922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012926:	4770      	bx	lr

08012928 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012928:	b480      	push	{r7}
 801292a:	b085      	sub	sp, #20
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	691b      	ldr	r3, [r3, #16]
 8012934:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	685b      	ldr	r3, [r3, #4]
 801293a:	687a      	ldr	r2, [r7, #4]
 801293c:	6892      	ldr	r2, [r2, #8]
 801293e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	689b      	ldr	r3, [r3, #8]
 8012944:	687a      	ldr	r2, [r7, #4]
 8012946:	6852      	ldr	r2, [r2, #4]
 8012948:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	685b      	ldr	r3, [r3, #4]
 801294e:	687a      	ldr	r2, [r7, #4]
 8012950:	429a      	cmp	r2, r3
 8012952:	d103      	bne.n	801295c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	689a      	ldr	r2, [r3, #8]
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	2200      	movs	r2, #0
 8012960:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	1e5a      	subs	r2, r3, #1
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	681b      	ldr	r3, [r3, #0]
}
 8012970:	4618      	mov	r0, r3
 8012972:	3714      	adds	r7, #20
 8012974:	46bd      	mov	sp, r7
 8012976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297a:	4770      	bx	lr

0801297c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b084      	sub	sp, #16
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
 8012984:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d10d      	bne.n	80129ac <xQueueGenericReset+0x30>
	__asm volatile
 8012990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012994:	b672      	cpsid	i
 8012996:	f383 8811 	msr	BASEPRI, r3
 801299a:	f3bf 8f6f 	isb	sy
 801299e:	f3bf 8f4f 	dsb	sy
 80129a2:	b662      	cpsie	i
 80129a4:	60bb      	str	r3, [r7, #8]
}
 80129a6:	bf00      	nop
 80129a8:	bf00      	nop
 80129aa:	e7fd      	b.n	80129a8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80129ac:	f002 f97e 	bl	8014cac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	681a      	ldr	r2, [r3, #0]
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80129b8:	68f9      	ldr	r1, [r7, #12]
 80129ba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80129bc:	fb01 f303 	mul.w	r3, r1, r3
 80129c0:	441a      	add	r2, r3
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	2200      	movs	r2, #0
 80129ca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	681a      	ldr	r2, [r3, #0]
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	681a      	ldr	r2, [r3, #0]
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80129dc:	3b01      	subs	r3, #1
 80129de:	68f9      	ldr	r1, [r7, #12]
 80129e0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80129e2:	fb01 f303 	mul.w	r3, r1, r3
 80129e6:	441a      	add	r2, r3
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	22ff      	movs	r2, #255	@ 0xff
 80129f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	22ff      	movs	r2, #255	@ 0xff
 80129f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80129fc:	683b      	ldr	r3, [r7, #0]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d114      	bne.n	8012a2c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	691b      	ldr	r3, [r3, #16]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d01a      	beq.n	8012a40 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	3310      	adds	r3, #16
 8012a0e:	4618      	mov	r0, r3
 8012a10:	f001 fbb4 	bl	801417c <xTaskRemoveFromEventList>
 8012a14:	4603      	mov	r3, r0
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d012      	beq.n	8012a40 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8012a50 <xQueueGenericReset+0xd4>)
 8012a1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012a20:	601a      	str	r2, [r3, #0]
 8012a22:	f3bf 8f4f 	dsb	sy
 8012a26:	f3bf 8f6f 	isb	sy
 8012a2a:	e009      	b.n	8012a40 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	3310      	adds	r3, #16
 8012a30:	4618      	mov	r0, r3
 8012a32:	f7ff feef 	bl	8012814 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	3324      	adds	r3, #36	@ 0x24
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f7ff feea 	bl	8012814 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012a40:	f002 f96a 	bl	8014d18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012a44:	2301      	movs	r3, #1
}
 8012a46:	4618      	mov	r0, r3
 8012a48:	3710      	adds	r7, #16
 8012a4a:	46bd      	mov	sp, r7
 8012a4c:	bd80      	pop	{r7, pc}
 8012a4e:	bf00      	nop
 8012a50:	e000ed04 	.word	0xe000ed04

08012a54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b08e      	sub	sp, #56	@ 0x38
 8012a58:	af02      	add	r7, sp, #8
 8012a5a:	60f8      	str	r0, [r7, #12]
 8012a5c:	60b9      	str	r1, [r7, #8]
 8012a5e:	607a      	str	r2, [r7, #4]
 8012a60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d10d      	bne.n	8012a84 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8012a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a6c:	b672      	cpsid	i
 8012a6e:	f383 8811 	msr	BASEPRI, r3
 8012a72:	f3bf 8f6f 	isb	sy
 8012a76:	f3bf 8f4f 	dsb	sy
 8012a7a:	b662      	cpsie	i
 8012a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012a7e:	bf00      	nop
 8012a80:	bf00      	nop
 8012a82:	e7fd      	b.n	8012a80 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012a84:	683b      	ldr	r3, [r7, #0]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d10d      	bne.n	8012aa6 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8012a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a8e:	b672      	cpsid	i
 8012a90:	f383 8811 	msr	BASEPRI, r3
 8012a94:	f3bf 8f6f 	isb	sy
 8012a98:	f3bf 8f4f 	dsb	sy
 8012a9c:	b662      	cpsie	i
 8012a9e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012aa0:	bf00      	nop
 8012aa2:	bf00      	nop
 8012aa4:	e7fd      	b.n	8012aa2 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d002      	beq.n	8012ab2 <xQueueGenericCreateStatic+0x5e>
 8012aac:	68bb      	ldr	r3, [r7, #8]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d001      	beq.n	8012ab6 <xQueueGenericCreateStatic+0x62>
 8012ab2:	2301      	movs	r3, #1
 8012ab4:	e000      	b.n	8012ab8 <xQueueGenericCreateStatic+0x64>
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d10d      	bne.n	8012ad8 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8012abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ac0:	b672      	cpsid	i
 8012ac2:	f383 8811 	msr	BASEPRI, r3
 8012ac6:	f3bf 8f6f 	isb	sy
 8012aca:	f3bf 8f4f 	dsb	sy
 8012ace:	b662      	cpsie	i
 8012ad0:	623b      	str	r3, [r7, #32]
}
 8012ad2:	bf00      	nop
 8012ad4:	bf00      	nop
 8012ad6:	e7fd      	b.n	8012ad4 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d102      	bne.n	8012ae4 <xQueueGenericCreateStatic+0x90>
 8012ade:	68bb      	ldr	r3, [r7, #8]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d101      	bne.n	8012ae8 <xQueueGenericCreateStatic+0x94>
 8012ae4:	2301      	movs	r3, #1
 8012ae6:	e000      	b.n	8012aea <xQueueGenericCreateStatic+0x96>
 8012ae8:	2300      	movs	r3, #0
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d10d      	bne.n	8012b0a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8012aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012af2:	b672      	cpsid	i
 8012af4:	f383 8811 	msr	BASEPRI, r3
 8012af8:	f3bf 8f6f 	isb	sy
 8012afc:	f3bf 8f4f 	dsb	sy
 8012b00:	b662      	cpsie	i
 8012b02:	61fb      	str	r3, [r7, #28]
}
 8012b04:	bf00      	nop
 8012b06:	bf00      	nop
 8012b08:	e7fd      	b.n	8012b06 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012b0a:	2350      	movs	r3, #80	@ 0x50
 8012b0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012b0e:	697b      	ldr	r3, [r7, #20]
 8012b10:	2b50      	cmp	r3, #80	@ 0x50
 8012b12:	d00d      	beq.n	8012b30 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8012b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b18:	b672      	cpsid	i
 8012b1a:	f383 8811 	msr	BASEPRI, r3
 8012b1e:	f3bf 8f6f 	isb	sy
 8012b22:	f3bf 8f4f 	dsb	sy
 8012b26:	b662      	cpsie	i
 8012b28:	61bb      	str	r3, [r7, #24]
}
 8012b2a:	bf00      	nop
 8012b2c:	bf00      	nop
 8012b2e:	e7fd      	b.n	8012b2c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012b30:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012b32:	683b      	ldr	r3, [r7, #0]
 8012b34:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8012b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d00d      	beq.n	8012b58 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b3e:	2201      	movs	r2, #1
 8012b40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012b44:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8012b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b4a:	9300      	str	r3, [sp, #0]
 8012b4c:	4613      	mov	r3, r2
 8012b4e:	687a      	ldr	r2, [r7, #4]
 8012b50:	68b9      	ldr	r1, [r7, #8]
 8012b52:	68f8      	ldr	r0, [r7, #12]
 8012b54:	f000 f848 	bl	8012be8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	3730      	adds	r7, #48	@ 0x30
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	bd80      	pop	{r7, pc}

08012b62 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012b62:	b580      	push	{r7, lr}
 8012b64:	b08a      	sub	sp, #40	@ 0x28
 8012b66:	af02      	add	r7, sp, #8
 8012b68:	60f8      	str	r0, [r7, #12]
 8012b6a:	60b9      	str	r1, [r7, #8]
 8012b6c:	4613      	mov	r3, r2
 8012b6e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d10d      	bne.n	8012b92 <xQueueGenericCreate+0x30>
	__asm volatile
 8012b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b7a:	b672      	cpsid	i
 8012b7c:	f383 8811 	msr	BASEPRI, r3
 8012b80:	f3bf 8f6f 	isb	sy
 8012b84:	f3bf 8f4f 	dsb	sy
 8012b88:	b662      	cpsie	i
 8012b8a:	613b      	str	r3, [r7, #16]
}
 8012b8c:	bf00      	nop
 8012b8e:	bf00      	nop
 8012b90:	e7fd      	b.n	8012b8e <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012b92:	68bb      	ldr	r3, [r7, #8]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d102      	bne.n	8012b9e <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012b98:	2300      	movs	r3, #0
 8012b9a:	61fb      	str	r3, [r7, #28]
 8012b9c:	e004      	b.n	8012ba8 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	68ba      	ldr	r2, [r7, #8]
 8012ba2:	fb02 f303 	mul.w	r3, r2, r3
 8012ba6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012ba8:	69fb      	ldr	r3, [r7, #28]
 8012baa:	3350      	adds	r3, #80	@ 0x50
 8012bac:	4618      	mov	r0, r3
 8012bae:	f002 f9ab 	bl	8014f08 <pvPortMalloc>
 8012bb2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012bb4:	69bb      	ldr	r3, [r7, #24]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d011      	beq.n	8012bde <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012bba:	69bb      	ldr	r3, [r7, #24]
 8012bbc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012bbe:	697b      	ldr	r3, [r7, #20]
 8012bc0:	3350      	adds	r3, #80	@ 0x50
 8012bc2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012bc4:	69bb      	ldr	r3, [r7, #24]
 8012bc6:	2200      	movs	r2, #0
 8012bc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012bcc:	79fa      	ldrb	r2, [r7, #7]
 8012bce:	69bb      	ldr	r3, [r7, #24]
 8012bd0:	9300      	str	r3, [sp, #0]
 8012bd2:	4613      	mov	r3, r2
 8012bd4:	697a      	ldr	r2, [r7, #20]
 8012bd6:	68b9      	ldr	r1, [r7, #8]
 8012bd8:	68f8      	ldr	r0, [r7, #12]
 8012bda:	f000 f805 	bl	8012be8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012bde:	69bb      	ldr	r3, [r7, #24]
	}
 8012be0:	4618      	mov	r0, r3
 8012be2:	3720      	adds	r7, #32
 8012be4:	46bd      	mov	sp, r7
 8012be6:	bd80      	pop	{r7, pc}

08012be8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b084      	sub	sp, #16
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	60f8      	str	r0, [r7, #12]
 8012bf0:	60b9      	str	r1, [r7, #8]
 8012bf2:	607a      	str	r2, [r7, #4]
 8012bf4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012bf6:	68bb      	ldr	r3, [r7, #8]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d103      	bne.n	8012c04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012bfc:	69bb      	ldr	r3, [r7, #24]
 8012bfe:	69ba      	ldr	r2, [r7, #24]
 8012c00:	601a      	str	r2, [r3, #0]
 8012c02:	e002      	b.n	8012c0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012c04:	69bb      	ldr	r3, [r7, #24]
 8012c06:	687a      	ldr	r2, [r7, #4]
 8012c08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012c0a:	69bb      	ldr	r3, [r7, #24]
 8012c0c:	68fa      	ldr	r2, [r7, #12]
 8012c0e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012c10:	69bb      	ldr	r3, [r7, #24]
 8012c12:	68ba      	ldr	r2, [r7, #8]
 8012c14:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012c16:	2101      	movs	r1, #1
 8012c18:	69b8      	ldr	r0, [r7, #24]
 8012c1a:	f7ff feaf 	bl	801297c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012c1e:	69bb      	ldr	r3, [r7, #24]
 8012c20:	78fa      	ldrb	r2, [r7, #3]
 8012c22:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012c26:	bf00      	nop
 8012c28:	3710      	adds	r7, #16
 8012c2a:	46bd      	mov	sp, r7
 8012c2c:	bd80      	pop	{r7, pc}

08012c2e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8012c2e:	b580      	push	{r7, lr}
 8012c30:	b082      	sub	sp, #8
 8012c32:	af00      	add	r7, sp, #0
 8012c34:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d00e      	beq.n	8012c5a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	2200      	movs	r2, #0
 8012c40:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	2200      	movs	r2, #0
 8012c46:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8012c4e:	2300      	movs	r3, #0
 8012c50:	2200      	movs	r2, #0
 8012c52:	2100      	movs	r1, #0
 8012c54:	6878      	ldr	r0, [r7, #4]
 8012c56:	f000 f81d 	bl	8012c94 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8012c5a:	bf00      	nop
 8012c5c:	3708      	adds	r7, #8
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}

08012c62 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8012c62:	b580      	push	{r7, lr}
 8012c64:	b086      	sub	sp, #24
 8012c66:	af00      	add	r7, sp, #0
 8012c68:	4603      	mov	r3, r0
 8012c6a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012c6c:	2301      	movs	r3, #1
 8012c6e:	617b      	str	r3, [r7, #20]
 8012c70:	2300      	movs	r3, #0
 8012c72:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8012c74:	79fb      	ldrb	r3, [r7, #7]
 8012c76:	461a      	mov	r2, r3
 8012c78:	6939      	ldr	r1, [r7, #16]
 8012c7a:	6978      	ldr	r0, [r7, #20]
 8012c7c:	f7ff ff71 	bl	8012b62 <xQueueGenericCreate>
 8012c80:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012c82:	68f8      	ldr	r0, [r7, #12]
 8012c84:	f7ff ffd3 	bl	8012c2e <prvInitialiseMutex>

		return xNewQueue;
 8012c88:	68fb      	ldr	r3, [r7, #12]
	}
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	3718      	adds	r7, #24
 8012c8e:	46bd      	mov	sp, r7
 8012c90:	bd80      	pop	{r7, pc}
	...

08012c94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b08e      	sub	sp, #56	@ 0x38
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	60f8      	str	r0, [r7, #12]
 8012c9c:	60b9      	str	r1, [r7, #8]
 8012c9e:	607a      	str	r2, [r7, #4]
 8012ca0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8012caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d10d      	bne.n	8012ccc <xQueueGenericSend+0x38>
	__asm volatile
 8012cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cb4:	b672      	cpsid	i
 8012cb6:	f383 8811 	msr	BASEPRI, r3
 8012cba:	f3bf 8f6f 	isb	sy
 8012cbe:	f3bf 8f4f 	dsb	sy
 8012cc2:	b662      	cpsie	i
 8012cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012cc6:	bf00      	nop
 8012cc8:	bf00      	nop
 8012cca:	e7fd      	b.n	8012cc8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012ccc:	68bb      	ldr	r3, [r7, #8]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d103      	bne.n	8012cda <xQueueGenericSend+0x46>
 8012cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d101      	bne.n	8012cde <xQueueGenericSend+0x4a>
 8012cda:	2301      	movs	r3, #1
 8012cdc:	e000      	b.n	8012ce0 <xQueueGenericSend+0x4c>
 8012cde:	2300      	movs	r3, #0
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d10d      	bne.n	8012d00 <xQueueGenericSend+0x6c>
	__asm volatile
 8012ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ce8:	b672      	cpsid	i
 8012cea:	f383 8811 	msr	BASEPRI, r3
 8012cee:	f3bf 8f6f 	isb	sy
 8012cf2:	f3bf 8f4f 	dsb	sy
 8012cf6:	b662      	cpsie	i
 8012cf8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012cfa:	bf00      	nop
 8012cfc:	bf00      	nop
 8012cfe:	e7fd      	b.n	8012cfc <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012d00:	683b      	ldr	r3, [r7, #0]
 8012d02:	2b02      	cmp	r3, #2
 8012d04:	d103      	bne.n	8012d0e <xQueueGenericSend+0x7a>
 8012d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d0a:	2b01      	cmp	r3, #1
 8012d0c:	d101      	bne.n	8012d12 <xQueueGenericSend+0x7e>
 8012d0e:	2301      	movs	r3, #1
 8012d10:	e000      	b.n	8012d14 <xQueueGenericSend+0x80>
 8012d12:	2300      	movs	r3, #0
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d10d      	bne.n	8012d34 <xQueueGenericSend+0xa0>
	__asm volatile
 8012d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d1c:	b672      	cpsid	i
 8012d1e:	f383 8811 	msr	BASEPRI, r3
 8012d22:	f3bf 8f6f 	isb	sy
 8012d26:	f3bf 8f4f 	dsb	sy
 8012d2a:	b662      	cpsie	i
 8012d2c:	623b      	str	r3, [r7, #32]
}
 8012d2e:	bf00      	nop
 8012d30:	bf00      	nop
 8012d32:	e7fd      	b.n	8012d30 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012d34:	f001 fc52 	bl	80145dc <xTaskGetSchedulerState>
 8012d38:	4603      	mov	r3, r0
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d102      	bne.n	8012d44 <xQueueGenericSend+0xb0>
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d101      	bne.n	8012d48 <xQueueGenericSend+0xb4>
 8012d44:	2301      	movs	r3, #1
 8012d46:	e000      	b.n	8012d4a <xQueueGenericSend+0xb6>
 8012d48:	2300      	movs	r3, #0
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d10d      	bne.n	8012d6a <xQueueGenericSend+0xd6>
	__asm volatile
 8012d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d52:	b672      	cpsid	i
 8012d54:	f383 8811 	msr	BASEPRI, r3
 8012d58:	f3bf 8f6f 	isb	sy
 8012d5c:	f3bf 8f4f 	dsb	sy
 8012d60:	b662      	cpsie	i
 8012d62:	61fb      	str	r3, [r7, #28]
}
 8012d64:	bf00      	nop
 8012d66:	bf00      	nop
 8012d68:	e7fd      	b.n	8012d66 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012d6a:	f001 ff9f 	bl	8014cac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d76:	429a      	cmp	r2, r3
 8012d78:	d302      	bcc.n	8012d80 <xQueueGenericSend+0xec>
 8012d7a:	683b      	ldr	r3, [r7, #0]
 8012d7c:	2b02      	cmp	r3, #2
 8012d7e:	d129      	bne.n	8012dd4 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012d80:	683a      	ldr	r2, [r7, #0]
 8012d82:	68b9      	ldr	r1, [r7, #8]
 8012d84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012d86:	f000 fbed 	bl	8013564 <prvCopyDataToQueue>
 8012d8a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d010      	beq.n	8012db6 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d96:	3324      	adds	r3, #36	@ 0x24
 8012d98:	4618      	mov	r0, r3
 8012d9a:	f001 f9ef 	bl	801417c <xTaskRemoveFromEventList>
 8012d9e:	4603      	mov	r3, r0
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d013      	beq.n	8012dcc <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012da4:	4b3f      	ldr	r3, [pc, #252]	@ (8012ea4 <xQueueGenericSend+0x210>)
 8012da6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012daa:	601a      	str	r2, [r3, #0]
 8012dac:	f3bf 8f4f 	dsb	sy
 8012db0:	f3bf 8f6f 	isb	sy
 8012db4:	e00a      	b.n	8012dcc <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d007      	beq.n	8012dcc <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012dbc:	4b39      	ldr	r3, [pc, #228]	@ (8012ea4 <xQueueGenericSend+0x210>)
 8012dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012dc2:	601a      	str	r2, [r3, #0]
 8012dc4:	f3bf 8f4f 	dsb	sy
 8012dc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012dcc:	f001 ffa4 	bl	8014d18 <vPortExitCritical>
				return pdPASS;
 8012dd0:	2301      	movs	r3, #1
 8012dd2:	e063      	b.n	8012e9c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d103      	bne.n	8012de2 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012dda:	f001 ff9d 	bl	8014d18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012dde:	2300      	movs	r3, #0
 8012de0:	e05c      	b.n	8012e9c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d106      	bne.n	8012df6 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012de8:	f107 0314 	add.w	r3, r7, #20
 8012dec:	4618      	mov	r0, r3
 8012dee:	f001 fa93 	bl	8014318 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012df2:	2301      	movs	r3, #1
 8012df4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012df6:	f001 ff8f 	bl	8014d18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012dfa:	f000 ff3b 	bl	8013c74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012dfe:	f001 ff55 	bl	8014cac <vPortEnterCritical>
 8012e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012e08:	b25b      	sxtb	r3, r3
 8012e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e0e:	d103      	bne.n	8012e18 <xQueueGenericSend+0x184>
 8012e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e12:	2200      	movs	r2, #0
 8012e14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012e1e:	b25b      	sxtb	r3, r3
 8012e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e24:	d103      	bne.n	8012e2e <xQueueGenericSend+0x19a>
 8012e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e28:	2200      	movs	r2, #0
 8012e2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012e2e:	f001 ff73 	bl	8014d18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012e32:	1d3a      	adds	r2, r7, #4
 8012e34:	f107 0314 	add.w	r3, r7, #20
 8012e38:	4611      	mov	r1, r2
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	f001 fa82 	bl	8014344 <xTaskCheckForTimeOut>
 8012e40:	4603      	mov	r3, r0
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d124      	bne.n	8012e90 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012e46:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012e48:	f000 fc84 	bl	8013754 <prvIsQueueFull>
 8012e4c:	4603      	mov	r3, r0
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d018      	beq.n	8012e84 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e54:	3310      	adds	r3, #16
 8012e56:	687a      	ldr	r2, [r7, #4]
 8012e58:	4611      	mov	r1, r2
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f001 f924 	bl	80140a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012e60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012e62:	f000 fc0f 	bl	8013684 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012e66:	f000 ff13 	bl	8013c90 <xTaskResumeAll>
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	f47f af7c 	bne.w	8012d6a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8012e72:	4b0c      	ldr	r3, [pc, #48]	@ (8012ea4 <xQueueGenericSend+0x210>)
 8012e74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012e78:	601a      	str	r2, [r3, #0]
 8012e7a:	f3bf 8f4f 	dsb	sy
 8012e7e:	f3bf 8f6f 	isb	sy
 8012e82:	e772      	b.n	8012d6a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012e84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012e86:	f000 fbfd 	bl	8013684 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012e8a:	f000 ff01 	bl	8013c90 <xTaskResumeAll>
 8012e8e:	e76c      	b.n	8012d6a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012e90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012e92:	f000 fbf7 	bl	8013684 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012e96:	f000 fefb 	bl	8013c90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012e9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	3738      	adds	r7, #56	@ 0x38
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	bd80      	pop	{r7, pc}
 8012ea4:	e000ed04 	.word	0xe000ed04

08012ea8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b08e      	sub	sp, #56	@ 0x38
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
 8012eb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d10d      	bne.n	8012ed8 <xQueueGiveFromISR+0x30>
	__asm volatile
 8012ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ec0:	b672      	cpsid	i
 8012ec2:	f383 8811 	msr	BASEPRI, r3
 8012ec6:	f3bf 8f6f 	isb	sy
 8012eca:	f3bf 8f4f 	dsb	sy
 8012ece:	b662      	cpsie	i
 8012ed0:	623b      	str	r3, [r7, #32]
}
 8012ed2:	bf00      	nop
 8012ed4:	bf00      	nop
 8012ed6:	e7fd      	b.n	8012ed4 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d00d      	beq.n	8012efc <xQueueGiveFromISR+0x54>
	__asm volatile
 8012ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ee4:	b672      	cpsid	i
 8012ee6:	f383 8811 	msr	BASEPRI, r3
 8012eea:	f3bf 8f6f 	isb	sy
 8012eee:	f3bf 8f4f 	dsb	sy
 8012ef2:	b662      	cpsie	i
 8012ef4:	61fb      	str	r3, [r7, #28]
}
 8012ef6:	bf00      	nop
 8012ef8:	bf00      	nop
 8012efa:	e7fd      	b.n	8012ef8 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d103      	bne.n	8012f0c <xQueueGiveFromISR+0x64>
 8012f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f06:	689b      	ldr	r3, [r3, #8]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d101      	bne.n	8012f10 <xQueueGiveFromISR+0x68>
 8012f0c:	2301      	movs	r3, #1
 8012f0e:	e000      	b.n	8012f12 <xQueueGiveFromISR+0x6a>
 8012f10:	2300      	movs	r3, #0
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d10d      	bne.n	8012f32 <xQueueGiveFromISR+0x8a>
	__asm volatile
 8012f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f1a:	b672      	cpsid	i
 8012f1c:	f383 8811 	msr	BASEPRI, r3
 8012f20:	f3bf 8f6f 	isb	sy
 8012f24:	f3bf 8f4f 	dsb	sy
 8012f28:	b662      	cpsie	i
 8012f2a:	61bb      	str	r3, [r7, #24]
}
 8012f2c:	bf00      	nop
 8012f2e:	bf00      	nop
 8012f30:	e7fd      	b.n	8012f2e <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012f32:	f001 ffa3 	bl	8014e7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012f36:	f3ef 8211 	mrs	r2, BASEPRI
 8012f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f3e:	b672      	cpsid	i
 8012f40:	f383 8811 	msr	BASEPRI, r3
 8012f44:	f3bf 8f6f 	isb	sy
 8012f48:	f3bf 8f4f 	dsb	sy
 8012f4c:	b662      	cpsie	i
 8012f4e:	617a      	str	r2, [r7, #20]
 8012f50:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012f52:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f5a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012f60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012f62:	429a      	cmp	r2, r3
 8012f64:	d22b      	bcs.n	8012fbe <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012f6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f72:	1c5a      	adds	r2, r3, #1
 8012f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f76:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012f78:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8012f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f80:	d112      	bne.n	8012fa8 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d016      	beq.n	8012fb8 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f8c:	3324      	adds	r3, #36	@ 0x24
 8012f8e:	4618      	mov	r0, r3
 8012f90:	f001 f8f4 	bl	801417c <xTaskRemoveFromEventList>
 8012f94:	4603      	mov	r3, r0
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d00e      	beq.n	8012fb8 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012f9a:	683b      	ldr	r3, [r7, #0]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d00b      	beq.n	8012fb8 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012fa0:	683b      	ldr	r3, [r7, #0]
 8012fa2:	2201      	movs	r2, #1
 8012fa4:	601a      	str	r2, [r3, #0]
 8012fa6:	e007      	b.n	8012fb8 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012fac:	3301      	adds	r3, #1
 8012fae:	b2db      	uxtb	r3, r3
 8012fb0:	b25a      	sxtb	r2, r3
 8012fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8012fb8:	2301      	movs	r3, #1
 8012fba:	637b      	str	r3, [r7, #52]	@ 0x34
 8012fbc:	e001      	b.n	8012fc2 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8012fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fc4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012fcc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	3738      	adds	r7, #56	@ 0x38
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bd80      	pop	{r7, pc}

08012fd8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b08c      	sub	sp, #48	@ 0x30
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	60f8      	str	r0, [r7, #12]
 8012fe0:	60b9      	str	r1, [r7, #8]
 8012fe2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d10d      	bne.n	801300e <xQueueReceive+0x36>
	__asm volatile
 8012ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ff6:	b672      	cpsid	i
 8012ff8:	f383 8811 	msr	BASEPRI, r3
 8012ffc:	f3bf 8f6f 	isb	sy
 8013000:	f3bf 8f4f 	dsb	sy
 8013004:	b662      	cpsie	i
 8013006:	623b      	str	r3, [r7, #32]
}
 8013008:	bf00      	nop
 801300a:	bf00      	nop
 801300c:	e7fd      	b.n	801300a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801300e:	68bb      	ldr	r3, [r7, #8]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d103      	bne.n	801301c <xQueueReceive+0x44>
 8013014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013018:	2b00      	cmp	r3, #0
 801301a:	d101      	bne.n	8013020 <xQueueReceive+0x48>
 801301c:	2301      	movs	r3, #1
 801301e:	e000      	b.n	8013022 <xQueueReceive+0x4a>
 8013020:	2300      	movs	r3, #0
 8013022:	2b00      	cmp	r3, #0
 8013024:	d10d      	bne.n	8013042 <xQueueReceive+0x6a>
	__asm volatile
 8013026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801302a:	b672      	cpsid	i
 801302c:	f383 8811 	msr	BASEPRI, r3
 8013030:	f3bf 8f6f 	isb	sy
 8013034:	f3bf 8f4f 	dsb	sy
 8013038:	b662      	cpsie	i
 801303a:	61fb      	str	r3, [r7, #28]
}
 801303c:	bf00      	nop
 801303e:	bf00      	nop
 8013040:	e7fd      	b.n	801303e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013042:	f001 facb 	bl	80145dc <xTaskGetSchedulerState>
 8013046:	4603      	mov	r3, r0
 8013048:	2b00      	cmp	r3, #0
 801304a:	d102      	bne.n	8013052 <xQueueReceive+0x7a>
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	2b00      	cmp	r3, #0
 8013050:	d101      	bne.n	8013056 <xQueueReceive+0x7e>
 8013052:	2301      	movs	r3, #1
 8013054:	e000      	b.n	8013058 <xQueueReceive+0x80>
 8013056:	2300      	movs	r3, #0
 8013058:	2b00      	cmp	r3, #0
 801305a:	d10d      	bne.n	8013078 <xQueueReceive+0xa0>
	__asm volatile
 801305c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013060:	b672      	cpsid	i
 8013062:	f383 8811 	msr	BASEPRI, r3
 8013066:	f3bf 8f6f 	isb	sy
 801306a:	f3bf 8f4f 	dsb	sy
 801306e:	b662      	cpsie	i
 8013070:	61bb      	str	r3, [r7, #24]
}
 8013072:	bf00      	nop
 8013074:	bf00      	nop
 8013076:	e7fd      	b.n	8013074 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013078:	f001 fe18 	bl	8014cac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801307c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801307e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013080:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013084:	2b00      	cmp	r3, #0
 8013086:	d01f      	beq.n	80130c8 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013088:	68b9      	ldr	r1, [r7, #8]
 801308a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801308c:	f000 fad4 	bl	8013638 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013092:	1e5a      	subs	r2, r3, #1
 8013094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013096:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801309a:	691b      	ldr	r3, [r3, #16]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d00f      	beq.n	80130c0 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80130a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130a2:	3310      	adds	r3, #16
 80130a4:	4618      	mov	r0, r3
 80130a6:	f001 f869 	bl	801417c <xTaskRemoveFromEventList>
 80130aa:	4603      	mov	r3, r0
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d007      	beq.n	80130c0 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80130b0:	4b3c      	ldr	r3, [pc, #240]	@ (80131a4 <xQueueReceive+0x1cc>)
 80130b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80130b6:	601a      	str	r2, [r3, #0]
 80130b8:	f3bf 8f4f 	dsb	sy
 80130bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80130c0:	f001 fe2a 	bl	8014d18 <vPortExitCritical>
				return pdPASS;
 80130c4:	2301      	movs	r3, #1
 80130c6:	e069      	b.n	801319c <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d103      	bne.n	80130d6 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80130ce:	f001 fe23 	bl	8014d18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80130d2:	2300      	movs	r3, #0
 80130d4:	e062      	b.n	801319c <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80130d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d106      	bne.n	80130ea <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80130dc:	f107 0310 	add.w	r3, r7, #16
 80130e0:	4618      	mov	r0, r3
 80130e2:	f001 f919 	bl	8014318 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80130e6:	2301      	movs	r3, #1
 80130e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80130ea:	f001 fe15 	bl	8014d18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80130ee:	f000 fdc1 	bl	8013c74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80130f2:	f001 fddb 	bl	8014cac <vPortEnterCritical>
 80130f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80130fc:	b25b      	sxtb	r3, r3
 80130fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013102:	d103      	bne.n	801310c <xQueueReceive+0x134>
 8013104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013106:	2200      	movs	r2, #0
 8013108:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801310c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801310e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013112:	b25b      	sxtb	r3, r3
 8013114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013118:	d103      	bne.n	8013122 <xQueueReceive+0x14a>
 801311a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801311c:	2200      	movs	r2, #0
 801311e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013122:	f001 fdf9 	bl	8014d18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013126:	1d3a      	adds	r2, r7, #4
 8013128:	f107 0310 	add.w	r3, r7, #16
 801312c:	4611      	mov	r1, r2
 801312e:	4618      	mov	r0, r3
 8013130:	f001 f908 	bl	8014344 <xTaskCheckForTimeOut>
 8013134:	4603      	mov	r3, r0
 8013136:	2b00      	cmp	r3, #0
 8013138:	d123      	bne.n	8013182 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801313a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801313c:	f000 faf4 	bl	8013728 <prvIsQueueEmpty>
 8013140:	4603      	mov	r3, r0
 8013142:	2b00      	cmp	r3, #0
 8013144:	d017      	beq.n	8013176 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013148:	3324      	adds	r3, #36	@ 0x24
 801314a:	687a      	ldr	r2, [r7, #4]
 801314c:	4611      	mov	r1, r2
 801314e:	4618      	mov	r0, r3
 8013150:	f000 ffaa 	bl	80140a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013154:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013156:	f000 fa95 	bl	8013684 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801315a:	f000 fd99 	bl	8013c90 <xTaskResumeAll>
 801315e:	4603      	mov	r3, r0
 8013160:	2b00      	cmp	r3, #0
 8013162:	d189      	bne.n	8013078 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8013164:	4b0f      	ldr	r3, [pc, #60]	@ (80131a4 <xQueueReceive+0x1cc>)
 8013166:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801316a:	601a      	str	r2, [r3, #0]
 801316c:	f3bf 8f4f 	dsb	sy
 8013170:	f3bf 8f6f 	isb	sy
 8013174:	e780      	b.n	8013078 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013176:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013178:	f000 fa84 	bl	8013684 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801317c:	f000 fd88 	bl	8013c90 <xTaskResumeAll>
 8013180:	e77a      	b.n	8013078 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013182:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013184:	f000 fa7e 	bl	8013684 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013188:	f000 fd82 	bl	8013c90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801318c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801318e:	f000 facb 	bl	8013728 <prvIsQueueEmpty>
 8013192:	4603      	mov	r3, r0
 8013194:	2b00      	cmp	r3, #0
 8013196:	f43f af6f 	beq.w	8013078 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801319a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801319c:	4618      	mov	r0, r3
 801319e:	3730      	adds	r7, #48	@ 0x30
 80131a0:	46bd      	mov	sp, r7
 80131a2:	bd80      	pop	{r7, pc}
 80131a4:	e000ed04 	.word	0xe000ed04

080131a8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80131a8:	b580      	push	{r7, lr}
 80131aa:	b08e      	sub	sp, #56	@ 0x38
 80131ac:	af00      	add	r7, sp, #0
 80131ae:	6078      	str	r0, [r7, #4]
 80131b0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80131b2:	2300      	movs	r3, #0
 80131b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80131ba:	2300      	movs	r3, #0
 80131bc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80131be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d10d      	bne.n	80131e0 <xQueueSemaphoreTake+0x38>
	__asm volatile
 80131c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131c8:	b672      	cpsid	i
 80131ca:	f383 8811 	msr	BASEPRI, r3
 80131ce:	f3bf 8f6f 	isb	sy
 80131d2:	f3bf 8f4f 	dsb	sy
 80131d6:	b662      	cpsie	i
 80131d8:	623b      	str	r3, [r7, #32]
}
 80131da:	bf00      	nop
 80131dc:	bf00      	nop
 80131de:	e7fd      	b.n	80131dc <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80131e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d00d      	beq.n	8013204 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80131e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131ec:	b672      	cpsid	i
 80131ee:	f383 8811 	msr	BASEPRI, r3
 80131f2:	f3bf 8f6f 	isb	sy
 80131f6:	f3bf 8f4f 	dsb	sy
 80131fa:	b662      	cpsie	i
 80131fc:	61fb      	str	r3, [r7, #28]
}
 80131fe:	bf00      	nop
 8013200:	bf00      	nop
 8013202:	e7fd      	b.n	8013200 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013204:	f001 f9ea 	bl	80145dc <xTaskGetSchedulerState>
 8013208:	4603      	mov	r3, r0
 801320a:	2b00      	cmp	r3, #0
 801320c:	d102      	bne.n	8013214 <xQueueSemaphoreTake+0x6c>
 801320e:	683b      	ldr	r3, [r7, #0]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d101      	bne.n	8013218 <xQueueSemaphoreTake+0x70>
 8013214:	2301      	movs	r3, #1
 8013216:	e000      	b.n	801321a <xQueueSemaphoreTake+0x72>
 8013218:	2300      	movs	r3, #0
 801321a:	2b00      	cmp	r3, #0
 801321c:	d10d      	bne.n	801323a <xQueueSemaphoreTake+0x92>
	__asm volatile
 801321e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013222:	b672      	cpsid	i
 8013224:	f383 8811 	msr	BASEPRI, r3
 8013228:	f3bf 8f6f 	isb	sy
 801322c:	f3bf 8f4f 	dsb	sy
 8013230:	b662      	cpsie	i
 8013232:	61bb      	str	r3, [r7, #24]
}
 8013234:	bf00      	nop
 8013236:	bf00      	nop
 8013238:	e7fd      	b.n	8013236 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801323a:	f001 fd37 	bl	8014cac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801323e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013242:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013246:	2b00      	cmp	r3, #0
 8013248:	d024      	beq.n	8013294 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801324a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801324c:	1e5a      	subs	r2, r3, #1
 801324e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013250:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d104      	bne.n	8013264 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801325a:	f001 fba1 	bl	80149a0 <pvTaskIncrementMutexHeldCount>
 801325e:	4602      	mov	r2, r0
 8013260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013262:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013266:	691b      	ldr	r3, [r3, #16]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d00f      	beq.n	801328c <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801326c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801326e:	3310      	adds	r3, #16
 8013270:	4618      	mov	r0, r3
 8013272:	f000 ff83 	bl	801417c <xTaskRemoveFromEventList>
 8013276:	4603      	mov	r3, r0
 8013278:	2b00      	cmp	r3, #0
 801327a:	d007      	beq.n	801328c <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801327c:	4b55      	ldr	r3, [pc, #340]	@ (80133d4 <xQueueSemaphoreTake+0x22c>)
 801327e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013282:	601a      	str	r2, [r3, #0]
 8013284:	f3bf 8f4f 	dsb	sy
 8013288:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801328c:	f001 fd44 	bl	8014d18 <vPortExitCritical>
				return pdPASS;
 8013290:	2301      	movs	r3, #1
 8013292:	e09a      	b.n	80133ca <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013294:	683b      	ldr	r3, [r7, #0]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d114      	bne.n	80132c4 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801329a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801329c:	2b00      	cmp	r3, #0
 801329e:	d00d      	beq.n	80132bc <xQueueSemaphoreTake+0x114>
	__asm volatile
 80132a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132a4:	b672      	cpsid	i
 80132a6:	f383 8811 	msr	BASEPRI, r3
 80132aa:	f3bf 8f6f 	isb	sy
 80132ae:	f3bf 8f4f 	dsb	sy
 80132b2:	b662      	cpsie	i
 80132b4:	617b      	str	r3, [r7, #20]
}
 80132b6:	bf00      	nop
 80132b8:	bf00      	nop
 80132ba:	e7fd      	b.n	80132b8 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80132bc:	f001 fd2c 	bl	8014d18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80132c0:	2300      	movs	r3, #0
 80132c2:	e082      	b.n	80133ca <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 80132c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d106      	bne.n	80132d8 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80132ca:	f107 030c 	add.w	r3, r7, #12
 80132ce:	4618      	mov	r0, r3
 80132d0:	f001 f822 	bl	8014318 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80132d4:	2301      	movs	r3, #1
 80132d6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80132d8:	f001 fd1e 	bl	8014d18 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80132dc:	f000 fcca 	bl	8013c74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80132e0:	f001 fce4 	bl	8014cac <vPortEnterCritical>
 80132e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132e6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80132ea:	b25b      	sxtb	r3, r3
 80132ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132f0:	d103      	bne.n	80132fa <xQueueSemaphoreTake+0x152>
 80132f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132f4:	2200      	movs	r2, #0
 80132f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80132fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013300:	b25b      	sxtb	r3, r3
 8013302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013306:	d103      	bne.n	8013310 <xQueueSemaphoreTake+0x168>
 8013308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801330a:	2200      	movs	r2, #0
 801330c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013310:	f001 fd02 	bl	8014d18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013314:	463a      	mov	r2, r7
 8013316:	f107 030c 	add.w	r3, r7, #12
 801331a:	4611      	mov	r1, r2
 801331c:	4618      	mov	r0, r3
 801331e:	f001 f811 	bl	8014344 <xTaskCheckForTimeOut>
 8013322:	4603      	mov	r3, r0
 8013324:	2b00      	cmp	r3, #0
 8013326:	d132      	bne.n	801338e <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013328:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801332a:	f000 f9fd 	bl	8013728 <prvIsQueueEmpty>
 801332e:	4603      	mov	r3, r0
 8013330:	2b00      	cmp	r3, #0
 8013332:	d026      	beq.n	8013382 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d109      	bne.n	8013350 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 801333c:	f001 fcb6 	bl	8014cac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013342:	689b      	ldr	r3, [r3, #8]
 8013344:	4618      	mov	r0, r3
 8013346:	f001 f967 	bl	8014618 <xTaskPriorityInherit>
 801334a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 801334c:	f001 fce4 	bl	8014d18 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013352:	3324      	adds	r3, #36	@ 0x24
 8013354:	683a      	ldr	r2, [r7, #0]
 8013356:	4611      	mov	r1, r2
 8013358:	4618      	mov	r0, r3
 801335a:	f000 fea5 	bl	80140a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801335e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013360:	f000 f990 	bl	8013684 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013364:	f000 fc94 	bl	8013c90 <xTaskResumeAll>
 8013368:	4603      	mov	r3, r0
 801336a:	2b00      	cmp	r3, #0
 801336c:	f47f af65 	bne.w	801323a <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8013370:	4b18      	ldr	r3, [pc, #96]	@ (80133d4 <xQueueSemaphoreTake+0x22c>)
 8013372:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013376:	601a      	str	r2, [r3, #0]
 8013378:	f3bf 8f4f 	dsb	sy
 801337c:	f3bf 8f6f 	isb	sy
 8013380:	e75b      	b.n	801323a <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013382:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013384:	f000 f97e 	bl	8013684 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013388:	f000 fc82 	bl	8013c90 <xTaskResumeAll>
 801338c:	e755      	b.n	801323a <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801338e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013390:	f000 f978 	bl	8013684 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013394:	f000 fc7c 	bl	8013c90 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013398:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801339a:	f000 f9c5 	bl	8013728 <prvIsQueueEmpty>
 801339e:	4603      	mov	r3, r0
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	f43f af4a 	beq.w	801323a <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80133a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d00d      	beq.n	80133c8 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 80133ac:	f001 fc7e 	bl	8014cac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80133b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80133b2:	f000 f8bf 	bl	8013534 <prvGetDisinheritPriorityAfterTimeout>
 80133b6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80133b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133ba:	689b      	ldr	r3, [r3, #8]
 80133bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80133be:	4618      	mov	r0, r3
 80133c0:	f001 fa36 	bl	8014830 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80133c4:	f001 fca8 	bl	8014d18 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80133c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80133ca:	4618      	mov	r0, r3
 80133cc:	3738      	adds	r7, #56	@ 0x38
 80133ce:	46bd      	mov	sp, r7
 80133d0:	bd80      	pop	{r7, pc}
 80133d2:	bf00      	nop
 80133d4:	e000ed04 	.word	0xe000ed04

080133d8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80133d8:	b580      	push	{r7, lr}
 80133da:	b08e      	sub	sp, #56	@ 0x38
 80133dc:	af00      	add	r7, sp, #0
 80133de:	60f8      	str	r0, [r7, #12]
 80133e0:	60b9      	str	r1, [r7, #8]
 80133e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80133e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d10d      	bne.n	801340a <xQueueReceiveFromISR+0x32>
	__asm volatile
 80133ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133f2:	b672      	cpsid	i
 80133f4:	f383 8811 	msr	BASEPRI, r3
 80133f8:	f3bf 8f6f 	isb	sy
 80133fc:	f3bf 8f4f 	dsb	sy
 8013400:	b662      	cpsie	i
 8013402:	623b      	str	r3, [r7, #32]
}
 8013404:	bf00      	nop
 8013406:	bf00      	nop
 8013408:	e7fd      	b.n	8013406 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801340a:	68bb      	ldr	r3, [r7, #8]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d103      	bne.n	8013418 <xQueueReceiveFromISR+0x40>
 8013410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013414:	2b00      	cmp	r3, #0
 8013416:	d101      	bne.n	801341c <xQueueReceiveFromISR+0x44>
 8013418:	2301      	movs	r3, #1
 801341a:	e000      	b.n	801341e <xQueueReceiveFromISR+0x46>
 801341c:	2300      	movs	r3, #0
 801341e:	2b00      	cmp	r3, #0
 8013420:	d10d      	bne.n	801343e <xQueueReceiveFromISR+0x66>
	__asm volatile
 8013422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013426:	b672      	cpsid	i
 8013428:	f383 8811 	msr	BASEPRI, r3
 801342c:	f3bf 8f6f 	isb	sy
 8013430:	f3bf 8f4f 	dsb	sy
 8013434:	b662      	cpsie	i
 8013436:	61fb      	str	r3, [r7, #28]
}
 8013438:	bf00      	nop
 801343a:	bf00      	nop
 801343c:	e7fd      	b.n	801343a <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801343e:	f001 fd1d 	bl	8014e7c <vPortValidateInterruptPriority>
	__asm volatile
 8013442:	f3ef 8211 	mrs	r2, BASEPRI
 8013446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801344a:	b672      	cpsid	i
 801344c:	f383 8811 	msr	BASEPRI, r3
 8013450:	f3bf 8f6f 	isb	sy
 8013454:	f3bf 8f4f 	dsb	sy
 8013458:	b662      	cpsie	i
 801345a:	61ba      	str	r2, [r7, #24]
 801345c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801345e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013460:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013466:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801346a:	2b00      	cmp	r3, #0
 801346c:	d02f      	beq.n	80134ce <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801346e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013470:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013474:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013478:	68b9      	ldr	r1, [r7, #8]
 801347a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801347c:	f000 f8dc 	bl	8013638 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013482:	1e5a      	subs	r2, r3, #1
 8013484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013486:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013488:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801348c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013490:	d112      	bne.n	80134b8 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013494:	691b      	ldr	r3, [r3, #16]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d016      	beq.n	80134c8 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801349a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801349c:	3310      	adds	r3, #16
 801349e:	4618      	mov	r0, r3
 80134a0:	f000 fe6c 	bl	801417c <xTaskRemoveFromEventList>
 80134a4:	4603      	mov	r3, r0
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d00e      	beq.n	80134c8 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d00b      	beq.n	80134c8 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	2201      	movs	r2, #1
 80134b4:	601a      	str	r2, [r3, #0]
 80134b6:	e007      	b.n	80134c8 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80134b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80134bc:	3301      	adds	r3, #1
 80134be:	b2db      	uxtb	r3, r3
 80134c0:	b25a      	sxtb	r2, r3
 80134c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80134c8:	2301      	movs	r3, #1
 80134ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80134cc:	e001      	b.n	80134d2 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 80134ce:	2300      	movs	r3, #0
 80134d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80134d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80134d6:	693b      	ldr	r3, [r7, #16]
 80134d8:	f383 8811 	msr	BASEPRI, r3
}
 80134dc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80134de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80134e0:	4618      	mov	r0, r3
 80134e2:	3738      	adds	r7, #56	@ 0x38
 80134e4:	46bd      	mov	sp, r7
 80134e6:	bd80      	pop	{r7, pc}

080134e8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b084      	sub	sp, #16
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d10d      	bne.n	8013516 <vQueueDelete+0x2e>
	__asm volatile
 80134fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134fe:	b672      	cpsid	i
 8013500:	f383 8811 	msr	BASEPRI, r3
 8013504:	f3bf 8f6f 	isb	sy
 8013508:	f3bf 8f4f 	dsb	sy
 801350c:	b662      	cpsie	i
 801350e:	60bb      	str	r3, [r7, #8]
}
 8013510:	bf00      	nop
 8013512:	bf00      	nop
 8013514:	e7fd      	b.n	8013512 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8013516:	68f8      	ldr	r0, [r7, #12]
 8013518:	f000 f934 	bl	8013784 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8013522:	2b00      	cmp	r3, #0
 8013524:	d102      	bne.n	801352c <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8013526:	68f8      	ldr	r0, [r7, #12]
 8013528:	f001 fdbc 	bl	80150a4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801352c:	bf00      	nop
 801352e:	3710      	adds	r7, #16
 8013530:	46bd      	mov	sp, r7
 8013532:	bd80      	pop	{r7, pc}

08013534 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013534:	b480      	push	{r7}
 8013536:	b085      	sub	sp, #20
 8013538:	af00      	add	r7, sp, #0
 801353a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013540:	2b00      	cmp	r3, #0
 8013542:	d006      	beq.n	8013552 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	f1c3 030c 	rsb	r3, r3, #12
 801354e:	60fb      	str	r3, [r7, #12]
 8013550:	e001      	b.n	8013556 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013552:	2300      	movs	r3, #0
 8013554:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013556:	68fb      	ldr	r3, [r7, #12]
	}
 8013558:	4618      	mov	r0, r3
 801355a:	3714      	adds	r7, #20
 801355c:	46bd      	mov	sp, r7
 801355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013562:	4770      	bx	lr

08013564 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013564:	b580      	push	{r7, lr}
 8013566:	b086      	sub	sp, #24
 8013568:	af00      	add	r7, sp, #0
 801356a:	60f8      	str	r0, [r7, #12]
 801356c:	60b9      	str	r1, [r7, #8]
 801356e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013570:	2300      	movs	r3, #0
 8013572:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013578:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801357e:	2b00      	cmp	r3, #0
 8013580:	d10d      	bne.n	801359e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d14d      	bne.n	8013626 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	689b      	ldr	r3, [r3, #8]
 801358e:	4618      	mov	r0, r3
 8013590:	f001 f8c2 	bl	8014718 <xTaskPriorityDisinherit>
 8013594:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	2200      	movs	r2, #0
 801359a:	609a      	str	r2, [r3, #8]
 801359c:	e043      	b.n	8013626 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d119      	bne.n	80135d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	6858      	ldr	r0, [r3, #4]
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80135ac:	461a      	mov	r2, r3
 80135ae:	68b9      	ldr	r1, [r7, #8]
 80135b0:	f002 fed5 	bl	801635e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	685a      	ldr	r2, [r3, #4]
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80135bc:	441a      	add	r2, r3
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	685a      	ldr	r2, [r3, #4]
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	689b      	ldr	r3, [r3, #8]
 80135ca:	429a      	cmp	r2, r3
 80135cc:	d32b      	bcc.n	8013626 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	681a      	ldr	r2, [r3, #0]
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	605a      	str	r2, [r3, #4]
 80135d6:	e026      	b.n	8013626 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	68d8      	ldr	r0, [r3, #12]
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80135e0:	461a      	mov	r2, r3
 80135e2:	68b9      	ldr	r1, [r7, #8]
 80135e4:	f002 febb 	bl	801635e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	68da      	ldr	r2, [r3, #12]
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80135f0:	425b      	negs	r3, r3
 80135f2:	441a      	add	r2, r3
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	68da      	ldr	r2, [r3, #12]
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	429a      	cmp	r2, r3
 8013602:	d207      	bcs.n	8013614 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	689a      	ldr	r2, [r3, #8]
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801360c:	425b      	negs	r3, r3
 801360e:	441a      	add	r2, r3
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	2b02      	cmp	r3, #2
 8013618:	d105      	bne.n	8013626 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801361a:	693b      	ldr	r3, [r7, #16]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d002      	beq.n	8013626 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013620:	693b      	ldr	r3, [r7, #16]
 8013622:	3b01      	subs	r3, #1
 8013624:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013626:	693b      	ldr	r3, [r7, #16]
 8013628:	1c5a      	adds	r2, r3, #1
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801362e:	697b      	ldr	r3, [r7, #20]
}
 8013630:	4618      	mov	r0, r3
 8013632:	3718      	adds	r7, #24
 8013634:	46bd      	mov	sp, r7
 8013636:	bd80      	pop	{r7, pc}

08013638 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013638:	b580      	push	{r7, lr}
 801363a:	b082      	sub	sp, #8
 801363c:	af00      	add	r7, sp, #0
 801363e:	6078      	str	r0, [r7, #4]
 8013640:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013646:	2b00      	cmp	r3, #0
 8013648:	d018      	beq.n	801367c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	68da      	ldr	r2, [r3, #12]
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013652:	441a      	add	r2, r3
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	68da      	ldr	r2, [r3, #12]
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	689b      	ldr	r3, [r3, #8]
 8013660:	429a      	cmp	r2, r3
 8013662:	d303      	bcc.n	801366c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	681a      	ldr	r2, [r3, #0]
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	68d9      	ldr	r1, [r3, #12]
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013674:	461a      	mov	r2, r3
 8013676:	6838      	ldr	r0, [r7, #0]
 8013678:	f002 fe71 	bl	801635e <memcpy>
	}
}
 801367c:	bf00      	nop
 801367e:	3708      	adds	r7, #8
 8013680:	46bd      	mov	sp, r7
 8013682:	bd80      	pop	{r7, pc}

08013684 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013684:	b580      	push	{r7, lr}
 8013686:	b084      	sub	sp, #16
 8013688:	af00      	add	r7, sp, #0
 801368a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801368c:	f001 fb0e 	bl	8014cac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013696:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013698:	e011      	b.n	80136be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d012      	beq.n	80136c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	3324      	adds	r3, #36	@ 0x24
 80136a6:	4618      	mov	r0, r3
 80136a8:	f000 fd68 	bl	801417c <xTaskRemoveFromEventList>
 80136ac:	4603      	mov	r3, r0
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d001      	beq.n	80136b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80136b2:	f000 feaf 	bl	8014414 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80136b6:	7bfb      	ldrb	r3, [r7, #15]
 80136b8:	3b01      	subs	r3, #1
 80136ba:	b2db      	uxtb	r3, r3
 80136bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80136be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	dce9      	bgt.n	801369a <prvUnlockQueue+0x16>
 80136c6:	e000      	b.n	80136ca <prvUnlockQueue+0x46>
					break;
 80136c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	22ff      	movs	r2, #255	@ 0xff
 80136ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80136d2:	f001 fb21 	bl	8014d18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80136d6:	f001 fae9 	bl	8014cac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80136e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80136e2:	e011      	b.n	8013708 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	691b      	ldr	r3, [r3, #16]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d012      	beq.n	8013712 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	3310      	adds	r3, #16
 80136f0:	4618      	mov	r0, r3
 80136f2:	f000 fd43 	bl	801417c <xTaskRemoveFromEventList>
 80136f6:	4603      	mov	r3, r0
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d001      	beq.n	8013700 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80136fc:	f000 fe8a 	bl	8014414 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013700:	7bbb      	ldrb	r3, [r7, #14]
 8013702:	3b01      	subs	r3, #1
 8013704:	b2db      	uxtb	r3, r3
 8013706:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013708:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801370c:	2b00      	cmp	r3, #0
 801370e:	dce9      	bgt.n	80136e4 <prvUnlockQueue+0x60>
 8013710:	e000      	b.n	8013714 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013712:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	22ff      	movs	r2, #255	@ 0xff
 8013718:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 801371c:	f001 fafc 	bl	8014d18 <vPortExitCritical>
}
 8013720:	bf00      	nop
 8013722:	3710      	adds	r7, #16
 8013724:	46bd      	mov	sp, r7
 8013726:	bd80      	pop	{r7, pc}

08013728 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013728:	b580      	push	{r7, lr}
 801372a:	b084      	sub	sp, #16
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013730:	f001 fabc 	bl	8014cac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013738:	2b00      	cmp	r3, #0
 801373a:	d102      	bne.n	8013742 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801373c:	2301      	movs	r3, #1
 801373e:	60fb      	str	r3, [r7, #12]
 8013740:	e001      	b.n	8013746 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013742:	2300      	movs	r3, #0
 8013744:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013746:	f001 fae7 	bl	8014d18 <vPortExitCritical>

	return xReturn;
 801374a:	68fb      	ldr	r3, [r7, #12]
}
 801374c:	4618      	mov	r0, r3
 801374e:	3710      	adds	r7, #16
 8013750:	46bd      	mov	sp, r7
 8013752:	bd80      	pop	{r7, pc}

08013754 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013754:	b580      	push	{r7, lr}
 8013756:	b084      	sub	sp, #16
 8013758:	af00      	add	r7, sp, #0
 801375a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801375c:	f001 faa6 	bl	8014cac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013768:	429a      	cmp	r2, r3
 801376a:	d102      	bne.n	8013772 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801376c:	2301      	movs	r3, #1
 801376e:	60fb      	str	r3, [r7, #12]
 8013770:	e001      	b.n	8013776 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013772:	2300      	movs	r3, #0
 8013774:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013776:	f001 facf 	bl	8014d18 <vPortExitCritical>

	return xReturn;
 801377a:	68fb      	ldr	r3, [r7, #12]
}
 801377c:	4618      	mov	r0, r3
 801377e:	3710      	adds	r7, #16
 8013780:	46bd      	mov	sp, r7
 8013782:	bd80      	pop	{r7, pc}

08013784 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8013784:	b480      	push	{r7}
 8013786:	b085      	sub	sp, #20
 8013788:	af00      	add	r7, sp, #0
 801378a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801378c:	2300      	movs	r3, #0
 801378e:	60fb      	str	r3, [r7, #12]
 8013790:	e016      	b.n	80137c0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013792:	4a10      	ldr	r2, [pc, #64]	@ (80137d4 <vQueueUnregisterQueue+0x50>)
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	00db      	lsls	r3, r3, #3
 8013798:	4413      	add	r3, r2
 801379a:	685b      	ldr	r3, [r3, #4]
 801379c:	687a      	ldr	r2, [r7, #4]
 801379e:	429a      	cmp	r2, r3
 80137a0:	d10b      	bne.n	80137ba <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80137a2:	4a0c      	ldr	r2, [pc, #48]	@ (80137d4 <vQueueUnregisterQueue+0x50>)
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	2100      	movs	r1, #0
 80137a8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80137ac:	4a09      	ldr	r2, [pc, #36]	@ (80137d4 <vQueueUnregisterQueue+0x50>)
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	00db      	lsls	r3, r3, #3
 80137b2:	4413      	add	r3, r2
 80137b4:	2200      	movs	r2, #0
 80137b6:	605a      	str	r2, [r3, #4]
				break;
 80137b8:	e006      	b.n	80137c8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	3301      	adds	r3, #1
 80137be:	60fb      	str	r3, [r7, #12]
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	2bfe      	cmp	r3, #254	@ 0xfe
 80137c4:	d9e5      	bls.n	8013792 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80137c6:	bf00      	nop
 80137c8:	bf00      	nop
 80137ca:	3714      	adds	r7, #20
 80137cc:	46bd      	mov	sp, r7
 80137ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d2:	4770      	bx	lr
 80137d4:	20005bc8 	.word	0x20005bc8

080137d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80137d8:	b580      	push	{r7, lr}
 80137da:	b08e      	sub	sp, #56	@ 0x38
 80137dc:	af04      	add	r7, sp, #16
 80137de:	60f8      	str	r0, [r7, #12]
 80137e0:	60b9      	str	r1, [r7, #8]
 80137e2:	607a      	str	r2, [r7, #4]
 80137e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80137e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d10d      	bne.n	8013808 <xTaskCreateStatic+0x30>
	__asm volatile
 80137ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137f0:	b672      	cpsid	i
 80137f2:	f383 8811 	msr	BASEPRI, r3
 80137f6:	f3bf 8f6f 	isb	sy
 80137fa:	f3bf 8f4f 	dsb	sy
 80137fe:	b662      	cpsie	i
 8013800:	623b      	str	r3, [r7, #32]
}
 8013802:	bf00      	nop
 8013804:	bf00      	nop
 8013806:	e7fd      	b.n	8013804 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8013808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801380a:	2b00      	cmp	r3, #0
 801380c:	d10d      	bne.n	801382a <xTaskCreateStatic+0x52>
	__asm volatile
 801380e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013812:	b672      	cpsid	i
 8013814:	f383 8811 	msr	BASEPRI, r3
 8013818:	f3bf 8f6f 	isb	sy
 801381c:	f3bf 8f4f 	dsb	sy
 8013820:	b662      	cpsie	i
 8013822:	61fb      	str	r3, [r7, #28]
}
 8013824:	bf00      	nop
 8013826:	bf00      	nop
 8013828:	e7fd      	b.n	8013826 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801382a:	2360      	movs	r3, #96	@ 0x60
 801382c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801382e:	693b      	ldr	r3, [r7, #16]
 8013830:	2b60      	cmp	r3, #96	@ 0x60
 8013832:	d00d      	beq.n	8013850 <xTaskCreateStatic+0x78>
	__asm volatile
 8013834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013838:	b672      	cpsid	i
 801383a:	f383 8811 	msr	BASEPRI, r3
 801383e:	f3bf 8f6f 	isb	sy
 8013842:	f3bf 8f4f 	dsb	sy
 8013846:	b662      	cpsie	i
 8013848:	61bb      	str	r3, [r7, #24]
}
 801384a:	bf00      	nop
 801384c:	bf00      	nop
 801384e:	e7fd      	b.n	801384c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013850:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013854:	2b00      	cmp	r3, #0
 8013856:	d01e      	beq.n	8013896 <xTaskCreateStatic+0xbe>
 8013858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801385a:	2b00      	cmp	r3, #0
 801385c:	d01b      	beq.n	8013896 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801385e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013860:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013864:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013866:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801386a:	2202      	movs	r2, #2
 801386c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013870:	2300      	movs	r3, #0
 8013872:	9303      	str	r3, [sp, #12]
 8013874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013876:	9302      	str	r3, [sp, #8]
 8013878:	f107 0314 	add.w	r3, r7, #20
 801387c:	9301      	str	r3, [sp, #4]
 801387e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013880:	9300      	str	r3, [sp, #0]
 8013882:	683b      	ldr	r3, [r7, #0]
 8013884:	687a      	ldr	r2, [r7, #4]
 8013886:	68b9      	ldr	r1, [r7, #8]
 8013888:	68f8      	ldr	r0, [r7, #12]
 801388a:	f000 f850 	bl	801392e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801388e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013890:	f000 f8e2 	bl	8013a58 <prvAddNewTaskToReadyList>
 8013894:	e001      	b.n	801389a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8013896:	2300      	movs	r3, #0
 8013898:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801389a:	697b      	ldr	r3, [r7, #20]
	}
 801389c:	4618      	mov	r0, r3
 801389e:	3728      	adds	r7, #40	@ 0x28
 80138a0:	46bd      	mov	sp, r7
 80138a2:	bd80      	pop	{r7, pc}

080138a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b08c      	sub	sp, #48	@ 0x30
 80138a8:	af04      	add	r7, sp, #16
 80138aa:	60f8      	str	r0, [r7, #12]
 80138ac:	60b9      	str	r1, [r7, #8]
 80138ae:	603b      	str	r3, [r7, #0]
 80138b0:	4613      	mov	r3, r2
 80138b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80138b4:	88fb      	ldrh	r3, [r7, #6]
 80138b6:	009b      	lsls	r3, r3, #2
 80138b8:	4618      	mov	r0, r3
 80138ba:	f001 fb25 	bl	8014f08 <pvPortMalloc>
 80138be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80138c0:	697b      	ldr	r3, [r7, #20]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d00e      	beq.n	80138e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80138c6:	2060      	movs	r0, #96	@ 0x60
 80138c8:	f001 fb1e 	bl	8014f08 <pvPortMalloc>
 80138cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80138ce:	69fb      	ldr	r3, [r7, #28]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d003      	beq.n	80138dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80138d4:	69fb      	ldr	r3, [r7, #28]
 80138d6:	697a      	ldr	r2, [r7, #20]
 80138d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80138da:	e005      	b.n	80138e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80138dc:	6978      	ldr	r0, [r7, #20]
 80138de:	f001 fbe1 	bl	80150a4 <vPortFree>
 80138e2:	e001      	b.n	80138e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80138e4:	2300      	movs	r3, #0
 80138e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80138e8:	69fb      	ldr	r3, [r7, #28]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d017      	beq.n	801391e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80138ee:	69fb      	ldr	r3, [r7, #28]
 80138f0:	2200      	movs	r2, #0
 80138f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80138f6:	88fa      	ldrh	r2, [r7, #6]
 80138f8:	2300      	movs	r3, #0
 80138fa:	9303      	str	r3, [sp, #12]
 80138fc:	69fb      	ldr	r3, [r7, #28]
 80138fe:	9302      	str	r3, [sp, #8]
 8013900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013902:	9301      	str	r3, [sp, #4]
 8013904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013906:	9300      	str	r3, [sp, #0]
 8013908:	683b      	ldr	r3, [r7, #0]
 801390a:	68b9      	ldr	r1, [r7, #8]
 801390c:	68f8      	ldr	r0, [r7, #12]
 801390e:	f000 f80e 	bl	801392e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013912:	69f8      	ldr	r0, [r7, #28]
 8013914:	f000 f8a0 	bl	8013a58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013918:	2301      	movs	r3, #1
 801391a:	61bb      	str	r3, [r7, #24]
 801391c:	e002      	b.n	8013924 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801391e:	f04f 33ff 	mov.w	r3, #4294967295
 8013922:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013924:	69bb      	ldr	r3, [r7, #24]
	}
 8013926:	4618      	mov	r0, r3
 8013928:	3720      	adds	r7, #32
 801392a:	46bd      	mov	sp, r7
 801392c:	bd80      	pop	{r7, pc}

0801392e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801392e:	b580      	push	{r7, lr}
 8013930:	b088      	sub	sp, #32
 8013932:	af00      	add	r7, sp, #0
 8013934:	60f8      	str	r0, [r7, #12]
 8013936:	60b9      	str	r1, [r7, #8]
 8013938:	607a      	str	r2, [r7, #4]
 801393a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801393c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801393e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	009b      	lsls	r3, r3, #2
 8013944:	461a      	mov	r2, r3
 8013946:	21a5      	movs	r1, #165	@ 0xa5
 8013948:	f002 fc2d 	bl	80161a6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801394c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801394e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013950:	6879      	ldr	r1, [r7, #4]
 8013952:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8013956:	440b      	add	r3, r1
 8013958:	009b      	lsls	r3, r3, #2
 801395a:	4413      	add	r3, r2
 801395c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801395e:	69bb      	ldr	r3, [r7, #24]
 8013960:	f023 0307 	bic.w	r3, r3, #7
 8013964:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013966:	69bb      	ldr	r3, [r7, #24]
 8013968:	f003 0307 	and.w	r3, r3, #7
 801396c:	2b00      	cmp	r3, #0
 801396e:	d00d      	beq.n	801398c <prvInitialiseNewTask+0x5e>
	__asm volatile
 8013970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013974:	b672      	cpsid	i
 8013976:	f383 8811 	msr	BASEPRI, r3
 801397a:	f3bf 8f6f 	isb	sy
 801397e:	f3bf 8f4f 	dsb	sy
 8013982:	b662      	cpsie	i
 8013984:	617b      	str	r3, [r7, #20]
}
 8013986:	bf00      	nop
 8013988:	bf00      	nop
 801398a:	e7fd      	b.n	8013988 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801398c:	68bb      	ldr	r3, [r7, #8]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d01f      	beq.n	80139d2 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013992:	2300      	movs	r3, #0
 8013994:	61fb      	str	r3, [r7, #28]
 8013996:	e012      	b.n	80139be <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013998:	68ba      	ldr	r2, [r7, #8]
 801399a:	69fb      	ldr	r3, [r7, #28]
 801399c:	4413      	add	r3, r2
 801399e:	7819      	ldrb	r1, [r3, #0]
 80139a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80139a2:	69fb      	ldr	r3, [r7, #28]
 80139a4:	4413      	add	r3, r2
 80139a6:	3334      	adds	r3, #52	@ 0x34
 80139a8:	460a      	mov	r2, r1
 80139aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80139ac:	68ba      	ldr	r2, [r7, #8]
 80139ae:	69fb      	ldr	r3, [r7, #28]
 80139b0:	4413      	add	r3, r2
 80139b2:	781b      	ldrb	r3, [r3, #0]
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d006      	beq.n	80139c6 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80139b8:	69fb      	ldr	r3, [r7, #28]
 80139ba:	3301      	adds	r3, #1
 80139bc:	61fb      	str	r3, [r7, #28]
 80139be:	69fb      	ldr	r3, [r7, #28]
 80139c0:	2b0f      	cmp	r3, #15
 80139c2:	d9e9      	bls.n	8013998 <prvInitialiseNewTask+0x6a>
 80139c4:	e000      	b.n	80139c8 <prvInitialiseNewTask+0x9a>
			{
				break;
 80139c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80139c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139ca:	2200      	movs	r2, #0
 80139cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80139d0:	e003      	b.n	80139da <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80139d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139d4:	2200      	movs	r2, #0
 80139d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80139da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139dc:	2b0b      	cmp	r3, #11
 80139de:	d901      	bls.n	80139e4 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80139e0:	230b      	movs	r3, #11
 80139e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80139e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80139e8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80139ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80139ee:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80139f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139f2:	2200      	movs	r2, #0
 80139f4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80139f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139f8:	3304      	adds	r3, #4
 80139fa:	4618      	mov	r0, r3
 80139fc:	f7fe ff2a 	bl	8012854 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a02:	3318      	adds	r3, #24
 8013a04:	4618      	mov	r0, r3
 8013a06:	f7fe ff25 	bl	8012854 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013a0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a12:	f1c3 020c 	rsb	r2, r3, #12
 8013a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013a1e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8013a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a22:	2200      	movs	r2, #0
 8013a24:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a28:	2200      	movs	r2, #0
 8013a2a:	659a      	str	r2, [r3, #88]	@ 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a2e:	2200      	movs	r2, #0
 8013a30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013a34:	683a      	ldr	r2, [r7, #0]
 8013a36:	68f9      	ldr	r1, [r7, #12]
 8013a38:	69b8      	ldr	r0, [r7, #24]
 8013a3a:	f001 f82b 	bl	8014a94 <pxPortInitialiseStack>
 8013a3e:	4602      	mov	r2, r0
 8013a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a42:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d002      	beq.n	8013a50 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013a4e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013a50:	bf00      	nop
 8013a52:	3720      	adds	r7, #32
 8013a54:	46bd      	mov	sp, r7
 8013a56:	bd80      	pop	{r7, pc}

08013a58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	b082      	sub	sp, #8
 8013a5c:	af00      	add	r7, sp, #0
 8013a5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013a60:	f001 f924 	bl	8014cac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013a64:	4b2c      	ldr	r3, [pc, #176]	@ (8013b18 <prvAddNewTaskToReadyList+0xc0>)
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	3301      	adds	r3, #1
 8013a6a:	4a2b      	ldr	r2, [pc, #172]	@ (8013b18 <prvAddNewTaskToReadyList+0xc0>)
 8013a6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013a6e:	4b2b      	ldr	r3, [pc, #172]	@ (8013b1c <prvAddNewTaskToReadyList+0xc4>)
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d109      	bne.n	8013a8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013a76:	4a29      	ldr	r2, [pc, #164]	@ (8013b1c <prvAddNewTaskToReadyList+0xc4>)
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013a7c:	4b26      	ldr	r3, [pc, #152]	@ (8013b18 <prvAddNewTaskToReadyList+0xc0>)
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	2b01      	cmp	r3, #1
 8013a82:	d110      	bne.n	8013aa6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013a84:	f000 fcea 	bl	801445c <prvInitialiseTaskLists>
 8013a88:	e00d      	b.n	8013aa6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013a8a:	4b25      	ldr	r3, [pc, #148]	@ (8013b20 <prvAddNewTaskToReadyList+0xc8>)
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d109      	bne.n	8013aa6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013a92:	4b22      	ldr	r3, [pc, #136]	@ (8013b1c <prvAddNewTaskToReadyList+0xc4>)
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a9c:	429a      	cmp	r2, r3
 8013a9e:	d802      	bhi.n	8013aa6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013aa0:	4a1e      	ldr	r2, [pc, #120]	@ (8013b1c <prvAddNewTaskToReadyList+0xc4>)
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013aa6:	4b1f      	ldr	r3, [pc, #124]	@ (8013b24 <prvAddNewTaskToReadyList+0xcc>)
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	3301      	adds	r3, #1
 8013aac:	4a1d      	ldr	r2, [pc, #116]	@ (8013b24 <prvAddNewTaskToReadyList+0xcc>)
 8013aae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8013b24 <prvAddNewTaskToReadyList+0xcc>)
 8013ab2:	681a      	ldr	r2, [r3, #0]
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013abc:	2201      	movs	r2, #1
 8013abe:	409a      	lsls	r2, r3
 8013ac0:	4b19      	ldr	r3, [pc, #100]	@ (8013b28 <prvAddNewTaskToReadyList+0xd0>)
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	4313      	orrs	r3, r2
 8013ac6:	4a18      	ldr	r2, [pc, #96]	@ (8013b28 <prvAddNewTaskToReadyList+0xd0>)
 8013ac8:	6013      	str	r3, [r2, #0]
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013ace:	4613      	mov	r3, r2
 8013ad0:	009b      	lsls	r3, r3, #2
 8013ad2:	4413      	add	r3, r2
 8013ad4:	009b      	lsls	r3, r3, #2
 8013ad6:	4a15      	ldr	r2, [pc, #84]	@ (8013b2c <prvAddNewTaskToReadyList+0xd4>)
 8013ad8:	441a      	add	r2, r3
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	3304      	adds	r3, #4
 8013ade:	4619      	mov	r1, r3
 8013ae0:	4610      	mov	r0, r2
 8013ae2:	f7fe fec4 	bl	801286e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013ae6:	f001 f917 	bl	8014d18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013aea:	4b0d      	ldr	r3, [pc, #52]	@ (8013b20 <prvAddNewTaskToReadyList+0xc8>)
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d00e      	beq.n	8013b10 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013af2:	4b0a      	ldr	r3, [pc, #40]	@ (8013b1c <prvAddNewTaskToReadyList+0xc4>)
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013afc:	429a      	cmp	r2, r3
 8013afe:	d207      	bcs.n	8013b10 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013b00:	4b0b      	ldr	r3, [pc, #44]	@ (8013b30 <prvAddNewTaskToReadyList+0xd8>)
 8013b02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013b06:	601a      	str	r2, [r3, #0]
 8013b08:	f3bf 8f4f 	dsb	sy
 8013b0c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013b10:	bf00      	nop
 8013b12:	3708      	adds	r7, #8
 8013b14:	46bd      	mov	sp, r7
 8013b16:	bd80      	pop	{r7, pc}
 8013b18:	20006524 	.word	0x20006524
 8013b1c:	200063c0 	.word	0x200063c0
 8013b20:	20006530 	.word	0x20006530
 8013b24:	20006540 	.word	0x20006540
 8013b28:	2000652c 	.word	0x2000652c
 8013b2c:	200063c4 	.word	0x200063c4
 8013b30:	e000ed04 	.word	0xe000ed04

08013b34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013b34:	b580      	push	{r7, lr}
 8013b36:	b084      	sub	sp, #16
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d01a      	beq.n	8013b7c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013b46:	4b15      	ldr	r3, [pc, #84]	@ (8013b9c <vTaskDelay+0x68>)
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d00d      	beq.n	8013b6a <vTaskDelay+0x36>
	__asm volatile
 8013b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b52:	b672      	cpsid	i
 8013b54:	f383 8811 	msr	BASEPRI, r3
 8013b58:	f3bf 8f6f 	isb	sy
 8013b5c:	f3bf 8f4f 	dsb	sy
 8013b60:	b662      	cpsie	i
 8013b62:	60bb      	str	r3, [r7, #8]
}
 8013b64:	bf00      	nop
 8013b66:	bf00      	nop
 8013b68:	e7fd      	b.n	8013b66 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8013b6a:	f000 f883 	bl	8013c74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013b6e:	2100      	movs	r1, #0
 8013b70:	6878      	ldr	r0, [r7, #4]
 8013b72:	f000 ff29 	bl	80149c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013b76:	f000 f88b 	bl	8013c90 <xTaskResumeAll>
 8013b7a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d107      	bne.n	8013b92 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8013b82:	4b07      	ldr	r3, [pc, #28]	@ (8013ba0 <vTaskDelay+0x6c>)
 8013b84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013b88:	601a      	str	r2, [r3, #0]
 8013b8a:	f3bf 8f4f 	dsb	sy
 8013b8e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013b92:	bf00      	nop
 8013b94:	3710      	adds	r7, #16
 8013b96:	46bd      	mov	sp, r7
 8013b98:	bd80      	pop	{r7, pc}
 8013b9a:	bf00      	nop
 8013b9c:	2000654c 	.word	0x2000654c
 8013ba0:	e000ed04 	.word	0xe000ed04

08013ba4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b08a      	sub	sp, #40	@ 0x28
 8013ba8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013baa:	2300      	movs	r3, #0
 8013bac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013bae:	2300      	movs	r3, #0
 8013bb0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013bb2:	463a      	mov	r2, r7
 8013bb4:	1d39      	adds	r1, r7, #4
 8013bb6:	f107 0308 	add.w	r3, r7, #8
 8013bba:	4618      	mov	r0, r3
 8013bbc:	f7f1 f892 	bl	8004ce4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013bc0:	6839      	ldr	r1, [r7, #0]
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	68ba      	ldr	r2, [r7, #8]
 8013bc6:	9202      	str	r2, [sp, #8]
 8013bc8:	9301      	str	r3, [sp, #4]
 8013bca:	2300      	movs	r3, #0
 8013bcc:	9300      	str	r3, [sp, #0]
 8013bce:	2300      	movs	r3, #0
 8013bd0:	460a      	mov	r2, r1
 8013bd2:	4922      	ldr	r1, [pc, #136]	@ (8013c5c <vTaskStartScheduler+0xb8>)
 8013bd4:	4822      	ldr	r0, [pc, #136]	@ (8013c60 <vTaskStartScheduler+0xbc>)
 8013bd6:	f7ff fdff 	bl	80137d8 <xTaskCreateStatic>
 8013bda:	4603      	mov	r3, r0
 8013bdc:	4a21      	ldr	r2, [pc, #132]	@ (8013c64 <vTaskStartScheduler+0xc0>)
 8013bde:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013be0:	4b20      	ldr	r3, [pc, #128]	@ (8013c64 <vTaskStartScheduler+0xc0>)
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d002      	beq.n	8013bee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013be8:	2301      	movs	r3, #1
 8013bea:	617b      	str	r3, [r7, #20]
 8013bec:	e001      	b.n	8013bf2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013bee:	2300      	movs	r3, #0
 8013bf0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013bf2:	697b      	ldr	r3, [r7, #20]
 8013bf4:	2b01      	cmp	r3, #1
 8013bf6:	d11a      	bne.n	8013c2e <vTaskStartScheduler+0x8a>
	__asm volatile
 8013bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bfc:	b672      	cpsid	i
 8013bfe:	f383 8811 	msr	BASEPRI, r3
 8013c02:	f3bf 8f6f 	isb	sy
 8013c06:	f3bf 8f4f 	dsb	sy
 8013c0a:	b662      	cpsie	i
 8013c0c:	613b      	str	r3, [r7, #16]
}
 8013c0e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013c10:	4b15      	ldr	r3, [pc, #84]	@ (8013c68 <vTaskStartScheduler+0xc4>)
 8013c12:	f04f 32ff 	mov.w	r2, #4294967295
 8013c16:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013c18:	4b14      	ldr	r3, [pc, #80]	@ (8013c6c <vTaskStartScheduler+0xc8>)
 8013c1a:	2201      	movs	r2, #1
 8013c1c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013c1e:	4b14      	ldr	r3, [pc, #80]	@ (8013c70 <vTaskStartScheduler+0xcc>)
 8013c20:	2200      	movs	r2, #0
 8013c22:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8013c24:	f7f1 f844 	bl	8004cb0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013c28:	f000 ffc2 	bl	8014bb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013c2c:	e011      	b.n	8013c52 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013c2e:	697b      	ldr	r3, [r7, #20]
 8013c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c34:	d10d      	bne.n	8013c52 <vTaskStartScheduler+0xae>
	__asm volatile
 8013c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c3a:	b672      	cpsid	i
 8013c3c:	f383 8811 	msr	BASEPRI, r3
 8013c40:	f3bf 8f6f 	isb	sy
 8013c44:	f3bf 8f4f 	dsb	sy
 8013c48:	b662      	cpsie	i
 8013c4a:	60fb      	str	r3, [r7, #12]
}
 8013c4c:	bf00      	nop
 8013c4e:	bf00      	nop
 8013c50:	e7fd      	b.n	8013c4e <vTaskStartScheduler+0xaa>
}
 8013c52:	bf00      	nop
 8013c54:	3718      	adds	r7, #24
 8013c56:	46bd      	mov	sp, r7
 8013c58:	bd80      	pop	{r7, pc}
 8013c5a:	bf00      	nop
 8013c5c:	080188b0 	.word	0x080188b0
 8013c60:	0801442d 	.word	0x0801442d
 8013c64:	20006548 	.word	0x20006548
 8013c68:	20006544 	.word	0x20006544
 8013c6c:	20006530 	.word	0x20006530
 8013c70:	20006528 	.word	0x20006528

08013c74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013c74:	b480      	push	{r7}
 8013c76:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013c78:	4b04      	ldr	r3, [pc, #16]	@ (8013c8c <vTaskSuspendAll+0x18>)
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	3301      	adds	r3, #1
 8013c7e:	4a03      	ldr	r2, [pc, #12]	@ (8013c8c <vTaskSuspendAll+0x18>)
 8013c80:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013c82:	bf00      	nop
 8013c84:	46bd      	mov	sp, r7
 8013c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c8a:	4770      	bx	lr
 8013c8c:	2000654c 	.word	0x2000654c

08013c90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013c90:	b580      	push	{r7, lr}
 8013c92:	b084      	sub	sp, #16
 8013c94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013c96:	2300      	movs	r3, #0
 8013c98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013c9a:	2300      	movs	r3, #0
 8013c9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013c9e:	4b43      	ldr	r3, [pc, #268]	@ (8013dac <xTaskResumeAll+0x11c>)
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d10d      	bne.n	8013cc2 <xTaskResumeAll+0x32>
	__asm volatile
 8013ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013caa:	b672      	cpsid	i
 8013cac:	f383 8811 	msr	BASEPRI, r3
 8013cb0:	f3bf 8f6f 	isb	sy
 8013cb4:	f3bf 8f4f 	dsb	sy
 8013cb8:	b662      	cpsie	i
 8013cba:	603b      	str	r3, [r7, #0]
}
 8013cbc:	bf00      	nop
 8013cbe:	bf00      	nop
 8013cc0:	e7fd      	b.n	8013cbe <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013cc2:	f000 fff3 	bl	8014cac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013cc6:	4b39      	ldr	r3, [pc, #228]	@ (8013dac <xTaskResumeAll+0x11c>)
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	3b01      	subs	r3, #1
 8013ccc:	4a37      	ldr	r2, [pc, #220]	@ (8013dac <xTaskResumeAll+0x11c>)
 8013cce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013cd0:	4b36      	ldr	r3, [pc, #216]	@ (8013dac <xTaskResumeAll+0x11c>)
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d161      	bne.n	8013d9c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013cd8:	4b35      	ldr	r3, [pc, #212]	@ (8013db0 <xTaskResumeAll+0x120>)
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d05d      	beq.n	8013d9c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013ce0:	e02e      	b.n	8013d40 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013ce2:	4b34      	ldr	r3, [pc, #208]	@ (8013db4 <xTaskResumeAll+0x124>)
 8013ce4:	68db      	ldr	r3, [r3, #12]
 8013ce6:	68db      	ldr	r3, [r3, #12]
 8013ce8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	3318      	adds	r3, #24
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f7fe fe1a 	bl	8012928 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	3304      	adds	r3, #4
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f7fe fe15 	bl	8012928 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d02:	2201      	movs	r2, #1
 8013d04:	409a      	lsls	r2, r3
 8013d06:	4b2c      	ldr	r3, [pc, #176]	@ (8013db8 <xTaskResumeAll+0x128>)
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	4313      	orrs	r3, r2
 8013d0c:	4a2a      	ldr	r2, [pc, #168]	@ (8013db8 <xTaskResumeAll+0x128>)
 8013d0e:	6013      	str	r3, [r2, #0]
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013d14:	4613      	mov	r3, r2
 8013d16:	009b      	lsls	r3, r3, #2
 8013d18:	4413      	add	r3, r2
 8013d1a:	009b      	lsls	r3, r3, #2
 8013d1c:	4a27      	ldr	r2, [pc, #156]	@ (8013dbc <xTaskResumeAll+0x12c>)
 8013d1e:	441a      	add	r2, r3
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	3304      	adds	r3, #4
 8013d24:	4619      	mov	r1, r3
 8013d26:	4610      	mov	r0, r2
 8013d28:	f7fe fda1 	bl	801286e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013d30:	4b23      	ldr	r3, [pc, #140]	@ (8013dc0 <xTaskResumeAll+0x130>)
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d36:	429a      	cmp	r2, r3
 8013d38:	d302      	bcc.n	8013d40 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8013d3a:	4b22      	ldr	r3, [pc, #136]	@ (8013dc4 <xTaskResumeAll+0x134>)
 8013d3c:	2201      	movs	r2, #1
 8013d3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013d40:	4b1c      	ldr	r3, [pc, #112]	@ (8013db4 <xTaskResumeAll+0x124>)
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d1cc      	bne.n	8013ce2 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d001      	beq.n	8013d52 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013d4e:	f000 fc25 	bl	801459c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013d52:	4b1d      	ldr	r3, [pc, #116]	@ (8013dc8 <xTaskResumeAll+0x138>)
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d010      	beq.n	8013d80 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013d5e:	f000 f847 	bl	8013df0 <xTaskIncrementTick>
 8013d62:	4603      	mov	r3, r0
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d002      	beq.n	8013d6e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8013d68:	4b16      	ldr	r3, [pc, #88]	@ (8013dc4 <xTaskResumeAll+0x134>)
 8013d6a:	2201      	movs	r2, #1
 8013d6c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	3b01      	subs	r3, #1
 8013d72:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d1f1      	bne.n	8013d5e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8013d7a:	4b13      	ldr	r3, [pc, #76]	@ (8013dc8 <xTaskResumeAll+0x138>)
 8013d7c:	2200      	movs	r2, #0
 8013d7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013d80:	4b10      	ldr	r3, [pc, #64]	@ (8013dc4 <xTaskResumeAll+0x134>)
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d009      	beq.n	8013d9c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013d88:	2301      	movs	r3, #1
 8013d8a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8013dcc <xTaskResumeAll+0x13c>)
 8013d8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013d92:	601a      	str	r2, [r3, #0]
 8013d94:	f3bf 8f4f 	dsb	sy
 8013d98:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013d9c:	f000 ffbc 	bl	8014d18 <vPortExitCritical>

	return xAlreadyYielded;
 8013da0:	68bb      	ldr	r3, [r7, #8]
}
 8013da2:	4618      	mov	r0, r3
 8013da4:	3710      	adds	r7, #16
 8013da6:	46bd      	mov	sp, r7
 8013da8:	bd80      	pop	{r7, pc}
 8013daa:	bf00      	nop
 8013dac:	2000654c 	.word	0x2000654c
 8013db0:	20006524 	.word	0x20006524
 8013db4:	200064e4 	.word	0x200064e4
 8013db8:	2000652c 	.word	0x2000652c
 8013dbc:	200063c4 	.word	0x200063c4
 8013dc0:	200063c0 	.word	0x200063c0
 8013dc4:	20006538 	.word	0x20006538
 8013dc8:	20006534 	.word	0x20006534
 8013dcc:	e000ed04 	.word	0xe000ed04

08013dd0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013dd0:	b480      	push	{r7}
 8013dd2:	b083      	sub	sp, #12
 8013dd4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013dd6:	4b05      	ldr	r3, [pc, #20]	@ (8013dec <xTaskGetTickCount+0x1c>)
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013ddc:	687b      	ldr	r3, [r7, #4]
}
 8013dde:	4618      	mov	r0, r3
 8013de0:	370c      	adds	r7, #12
 8013de2:	46bd      	mov	sp, r7
 8013de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de8:	4770      	bx	lr
 8013dea:	bf00      	nop
 8013dec:	20006528 	.word	0x20006528

08013df0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013df0:	b580      	push	{r7, lr}
 8013df2:	b086      	sub	sp, #24
 8013df4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013df6:	2300      	movs	r3, #0
 8013df8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013dfa:	4b50      	ldr	r3, [pc, #320]	@ (8013f3c <xTaskIncrementTick+0x14c>)
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	f040 808b 	bne.w	8013f1a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013e04:	4b4e      	ldr	r3, [pc, #312]	@ (8013f40 <xTaskIncrementTick+0x150>)
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	3301      	adds	r3, #1
 8013e0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013e0c:	4a4c      	ldr	r2, [pc, #304]	@ (8013f40 <xTaskIncrementTick+0x150>)
 8013e0e:	693b      	ldr	r3, [r7, #16]
 8013e10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013e12:	693b      	ldr	r3, [r7, #16]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d123      	bne.n	8013e60 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8013e18:	4b4a      	ldr	r3, [pc, #296]	@ (8013f44 <xTaskIncrementTick+0x154>)
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d00d      	beq.n	8013e3e <xTaskIncrementTick+0x4e>
	__asm volatile
 8013e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e26:	b672      	cpsid	i
 8013e28:	f383 8811 	msr	BASEPRI, r3
 8013e2c:	f3bf 8f6f 	isb	sy
 8013e30:	f3bf 8f4f 	dsb	sy
 8013e34:	b662      	cpsie	i
 8013e36:	603b      	str	r3, [r7, #0]
}
 8013e38:	bf00      	nop
 8013e3a:	bf00      	nop
 8013e3c:	e7fd      	b.n	8013e3a <xTaskIncrementTick+0x4a>
 8013e3e:	4b41      	ldr	r3, [pc, #260]	@ (8013f44 <xTaskIncrementTick+0x154>)
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	60fb      	str	r3, [r7, #12]
 8013e44:	4b40      	ldr	r3, [pc, #256]	@ (8013f48 <xTaskIncrementTick+0x158>)
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	4a3e      	ldr	r2, [pc, #248]	@ (8013f44 <xTaskIncrementTick+0x154>)
 8013e4a:	6013      	str	r3, [r2, #0]
 8013e4c:	4a3e      	ldr	r2, [pc, #248]	@ (8013f48 <xTaskIncrementTick+0x158>)
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	6013      	str	r3, [r2, #0]
 8013e52:	4b3e      	ldr	r3, [pc, #248]	@ (8013f4c <xTaskIncrementTick+0x15c>)
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	3301      	adds	r3, #1
 8013e58:	4a3c      	ldr	r2, [pc, #240]	@ (8013f4c <xTaskIncrementTick+0x15c>)
 8013e5a:	6013      	str	r3, [r2, #0]
 8013e5c:	f000 fb9e 	bl	801459c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013e60:	4b3b      	ldr	r3, [pc, #236]	@ (8013f50 <xTaskIncrementTick+0x160>)
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	693a      	ldr	r2, [r7, #16]
 8013e66:	429a      	cmp	r2, r3
 8013e68:	d348      	bcc.n	8013efc <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013e6a:	4b36      	ldr	r3, [pc, #216]	@ (8013f44 <xTaskIncrementTick+0x154>)
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d104      	bne.n	8013e7e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013e74:	4b36      	ldr	r3, [pc, #216]	@ (8013f50 <xTaskIncrementTick+0x160>)
 8013e76:	f04f 32ff 	mov.w	r2, #4294967295
 8013e7a:	601a      	str	r2, [r3, #0]
					break;
 8013e7c:	e03e      	b.n	8013efc <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e7e:	4b31      	ldr	r3, [pc, #196]	@ (8013f44 <xTaskIncrementTick+0x154>)
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	68db      	ldr	r3, [r3, #12]
 8013e84:	68db      	ldr	r3, [r3, #12]
 8013e86:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013e88:	68bb      	ldr	r3, [r7, #8]
 8013e8a:	685b      	ldr	r3, [r3, #4]
 8013e8c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013e8e:	693a      	ldr	r2, [r7, #16]
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	429a      	cmp	r2, r3
 8013e94:	d203      	bcs.n	8013e9e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013e96:	4a2e      	ldr	r2, [pc, #184]	@ (8013f50 <xTaskIncrementTick+0x160>)
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013e9c:	e02e      	b.n	8013efc <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013e9e:	68bb      	ldr	r3, [r7, #8]
 8013ea0:	3304      	adds	r3, #4
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	f7fe fd40 	bl	8012928 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013ea8:	68bb      	ldr	r3, [r7, #8]
 8013eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d004      	beq.n	8013eba <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013eb0:	68bb      	ldr	r3, [r7, #8]
 8013eb2:	3318      	adds	r3, #24
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	f7fe fd37 	bl	8012928 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013eba:	68bb      	ldr	r3, [r7, #8]
 8013ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ebe:	2201      	movs	r2, #1
 8013ec0:	409a      	lsls	r2, r3
 8013ec2:	4b24      	ldr	r3, [pc, #144]	@ (8013f54 <xTaskIncrementTick+0x164>)
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	4313      	orrs	r3, r2
 8013ec8:	4a22      	ldr	r2, [pc, #136]	@ (8013f54 <xTaskIncrementTick+0x164>)
 8013eca:	6013      	str	r3, [r2, #0]
 8013ecc:	68bb      	ldr	r3, [r7, #8]
 8013ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013ed0:	4613      	mov	r3, r2
 8013ed2:	009b      	lsls	r3, r3, #2
 8013ed4:	4413      	add	r3, r2
 8013ed6:	009b      	lsls	r3, r3, #2
 8013ed8:	4a1f      	ldr	r2, [pc, #124]	@ (8013f58 <xTaskIncrementTick+0x168>)
 8013eda:	441a      	add	r2, r3
 8013edc:	68bb      	ldr	r3, [r7, #8]
 8013ede:	3304      	adds	r3, #4
 8013ee0:	4619      	mov	r1, r3
 8013ee2:	4610      	mov	r0, r2
 8013ee4:	f7fe fcc3 	bl	801286e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013ee8:	68bb      	ldr	r3, [r7, #8]
 8013eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013eec:	4b1b      	ldr	r3, [pc, #108]	@ (8013f5c <xTaskIncrementTick+0x16c>)
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ef2:	429a      	cmp	r2, r3
 8013ef4:	d3b9      	bcc.n	8013e6a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8013ef6:	2301      	movs	r3, #1
 8013ef8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013efa:	e7b6      	b.n	8013e6a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013efc:	4b17      	ldr	r3, [pc, #92]	@ (8013f5c <xTaskIncrementTick+0x16c>)
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013f02:	4915      	ldr	r1, [pc, #84]	@ (8013f58 <xTaskIncrementTick+0x168>)
 8013f04:	4613      	mov	r3, r2
 8013f06:	009b      	lsls	r3, r3, #2
 8013f08:	4413      	add	r3, r2
 8013f0a:	009b      	lsls	r3, r3, #2
 8013f0c:	440b      	add	r3, r1
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	2b01      	cmp	r3, #1
 8013f12:	d907      	bls.n	8013f24 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8013f14:	2301      	movs	r3, #1
 8013f16:	617b      	str	r3, [r7, #20]
 8013f18:	e004      	b.n	8013f24 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013f1a:	4b11      	ldr	r3, [pc, #68]	@ (8013f60 <xTaskIncrementTick+0x170>)
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	3301      	adds	r3, #1
 8013f20:	4a0f      	ldr	r2, [pc, #60]	@ (8013f60 <xTaskIncrementTick+0x170>)
 8013f22:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013f24:	4b0f      	ldr	r3, [pc, #60]	@ (8013f64 <xTaskIncrementTick+0x174>)
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d001      	beq.n	8013f30 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8013f2c:	2301      	movs	r3, #1
 8013f2e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013f30:	697b      	ldr	r3, [r7, #20]
}
 8013f32:	4618      	mov	r0, r3
 8013f34:	3718      	adds	r7, #24
 8013f36:	46bd      	mov	sp, r7
 8013f38:	bd80      	pop	{r7, pc}
 8013f3a:	bf00      	nop
 8013f3c:	2000654c 	.word	0x2000654c
 8013f40:	20006528 	.word	0x20006528
 8013f44:	200064dc 	.word	0x200064dc
 8013f48:	200064e0 	.word	0x200064e0
 8013f4c:	2000653c 	.word	0x2000653c
 8013f50:	20006544 	.word	0x20006544
 8013f54:	2000652c 	.word	0x2000652c
 8013f58:	200063c4 	.word	0x200063c4
 8013f5c:	200063c0 	.word	0x200063c0
 8013f60:	20006534 	.word	0x20006534
 8013f64:	20006538 	.word	0x20006538

08013f68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b088      	sub	sp, #32
 8013f6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013f6e:	4b47      	ldr	r3, [pc, #284]	@ (801408c <vTaskSwitchContext+0x124>)
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d003      	beq.n	8013f7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013f76:	4b46      	ldr	r3, [pc, #280]	@ (8014090 <vTaskSwitchContext+0x128>)
 8013f78:	2201      	movs	r2, #1
 8013f7a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013f7c:	e082      	b.n	8014084 <vTaskSwitchContext+0x11c>
		xYieldPending = pdFALSE;
 8013f7e:	4b44      	ldr	r3, [pc, #272]	@ (8014090 <vTaskSwitchContext+0x128>)
 8013f80:	2200      	movs	r2, #0
 8013f82:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8013f84:	f7f0 fe9b 	bl	8004cbe <getRunTimeCounterValue>
 8013f88:	4603      	mov	r3, r0
 8013f8a:	4a42      	ldr	r2, [pc, #264]	@ (8014094 <vTaskSwitchContext+0x12c>)
 8013f8c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8013f8e:	4b41      	ldr	r3, [pc, #260]	@ (8014094 <vTaskSwitchContext+0x12c>)
 8013f90:	681a      	ldr	r2, [r3, #0]
 8013f92:	4b41      	ldr	r3, [pc, #260]	@ (8014098 <vTaskSwitchContext+0x130>)
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	429a      	cmp	r2, r3
 8013f98:	d909      	bls.n	8013fae <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8013f9a:	4b40      	ldr	r3, [pc, #256]	@ (801409c <vTaskSwitchContext+0x134>)
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8013fa0:	4a3c      	ldr	r2, [pc, #240]	@ (8014094 <vTaskSwitchContext+0x12c>)
 8013fa2:	6810      	ldr	r0, [r2, #0]
 8013fa4:	4a3c      	ldr	r2, [pc, #240]	@ (8014098 <vTaskSwitchContext+0x130>)
 8013fa6:	6812      	ldr	r2, [r2, #0]
 8013fa8:	1a82      	subs	r2, r0, r2
 8013faa:	440a      	add	r2, r1
 8013fac:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8013fae:	4b39      	ldr	r3, [pc, #228]	@ (8014094 <vTaskSwitchContext+0x12c>)
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	4a39      	ldr	r2, [pc, #228]	@ (8014098 <vTaskSwitchContext+0x130>)
 8013fb4:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8013fb6:	4b39      	ldr	r3, [pc, #228]	@ (801409c <vTaskSwitchContext+0x134>)
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013fbc:	61fb      	str	r3, [r7, #28]
 8013fbe:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8013fc2:	61bb      	str	r3, [r7, #24]
 8013fc4:	69fb      	ldr	r3, [r7, #28]
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	69ba      	ldr	r2, [r7, #24]
 8013fca:	429a      	cmp	r2, r3
 8013fcc:	d111      	bne.n	8013ff2 <vTaskSwitchContext+0x8a>
 8013fce:	69fb      	ldr	r3, [r7, #28]
 8013fd0:	3304      	adds	r3, #4
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	69ba      	ldr	r2, [r7, #24]
 8013fd6:	429a      	cmp	r2, r3
 8013fd8:	d10b      	bne.n	8013ff2 <vTaskSwitchContext+0x8a>
 8013fda:	69fb      	ldr	r3, [r7, #28]
 8013fdc:	3308      	adds	r3, #8
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	69ba      	ldr	r2, [r7, #24]
 8013fe2:	429a      	cmp	r2, r3
 8013fe4:	d105      	bne.n	8013ff2 <vTaskSwitchContext+0x8a>
 8013fe6:	69fb      	ldr	r3, [r7, #28]
 8013fe8:	330c      	adds	r3, #12
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	69ba      	ldr	r2, [r7, #24]
 8013fee:	429a      	cmp	r2, r3
 8013ff0:	d008      	beq.n	8014004 <vTaskSwitchContext+0x9c>
 8013ff2:	4b2a      	ldr	r3, [pc, #168]	@ (801409c <vTaskSwitchContext+0x134>)
 8013ff4:	681a      	ldr	r2, [r3, #0]
 8013ff6:	4b29      	ldr	r3, [pc, #164]	@ (801409c <vTaskSwitchContext+0x134>)
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	3334      	adds	r3, #52	@ 0x34
 8013ffc:	4619      	mov	r1, r3
 8013ffe:	4610      	mov	r0, r2
 8014000:	f7f0 fe65 	bl	8004cce <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014004:	4b26      	ldr	r3, [pc, #152]	@ (80140a0 <vTaskSwitchContext+0x138>)
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	fab3 f383 	clz	r3, r3
 8014010:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8014012:	7afb      	ldrb	r3, [r7, #11]
 8014014:	f1c3 031f 	rsb	r3, r3, #31
 8014018:	617b      	str	r3, [r7, #20]
 801401a:	4922      	ldr	r1, [pc, #136]	@ (80140a4 <vTaskSwitchContext+0x13c>)
 801401c:	697a      	ldr	r2, [r7, #20]
 801401e:	4613      	mov	r3, r2
 8014020:	009b      	lsls	r3, r3, #2
 8014022:	4413      	add	r3, r2
 8014024:	009b      	lsls	r3, r3, #2
 8014026:	440b      	add	r3, r1
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	2b00      	cmp	r3, #0
 801402c:	d10d      	bne.n	801404a <vTaskSwitchContext+0xe2>
	__asm volatile
 801402e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014032:	b672      	cpsid	i
 8014034:	f383 8811 	msr	BASEPRI, r3
 8014038:	f3bf 8f6f 	isb	sy
 801403c:	f3bf 8f4f 	dsb	sy
 8014040:	b662      	cpsie	i
 8014042:	607b      	str	r3, [r7, #4]
}
 8014044:	bf00      	nop
 8014046:	bf00      	nop
 8014048:	e7fd      	b.n	8014046 <vTaskSwitchContext+0xde>
 801404a:	697a      	ldr	r2, [r7, #20]
 801404c:	4613      	mov	r3, r2
 801404e:	009b      	lsls	r3, r3, #2
 8014050:	4413      	add	r3, r2
 8014052:	009b      	lsls	r3, r3, #2
 8014054:	4a13      	ldr	r2, [pc, #76]	@ (80140a4 <vTaskSwitchContext+0x13c>)
 8014056:	4413      	add	r3, r2
 8014058:	613b      	str	r3, [r7, #16]
 801405a:	693b      	ldr	r3, [r7, #16]
 801405c:	685b      	ldr	r3, [r3, #4]
 801405e:	685a      	ldr	r2, [r3, #4]
 8014060:	693b      	ldr	r3, [r7, #16]
 8014062:	605a      	str	r2, [r3, #4]
 8014064:	693b      	ldr	r3, [r7, #16]
 8014066:	685a      	ldr	r2, [r3, #4]
 8014068:	693b      	ldr	r3, [r7, #16]
 801406a:	3308      	adds	r3, #8
 801406c:	429a      	cmp	r2, r3
 801406e:	d104      	bne.n	801407a <vTaskSwitchContext+0x112>
 8014070:	693b      	ldr	r3, [r7, #16]
 8014072:	685b      	ldr	r3, [r3, #4]
 8014074:	685a      	ldr	r2, [r3, #4]
 8014076:	693b      	ldr	r3, [r7, #16]
 8014078:	605a      	str	r2, [r3, #4]
 801407a:	693b      	ldr	r3, [r7, #16]
 801407c:	685b      	ldr	r3, [r3, #4]
 801407e:	68db      	ldr	r3, [r3, #12]
 8014080:	4a06      	ldr	r2, [pc, #24]	@ (801409c <vTaskSwitchContext+0x134>)
 8014082:	6013      	str	r3, [r2, #0]
}
 8014084:	bf00      	nop
 8014086:	3720      	adds	r7, #32
 8014088:	46bd      	mov	sp, r7
 801408a:	bd80      	pop	{r7, pc}
 801408c:	2000654c 	.word	0x2000654c
 8014090:	20006538 	.word	0x20006538
 8014094:	20006554 	.word	0x20006554
 8014098:	20006550 	.word	0x20006550
 801409c:	200063c0 	.word	0x200063c0
 80140a0:	2000652c 	.word	0x2000652c
 80140a4:	200063c4 	.word	0x200063c4

080140a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80140a8:	b580      	push	{r7, lr}
 80140aa:	b084      	sub	sp, #16
 80140ac:	af00      	add	r7, sp, #0
 80140ae:	6078      	str	r0, [r7, #4]
 80140b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d10d      	bne.n	80140d4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80140b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80140bc:	b672      	cpsid	i
 80140be:	f383 8811 	msr	BASEPRI, r3
 80140c2:	f3bf 8f6f 	isb	sy
 80140c6:	f3bf 8f4f 	dsb	sy
 80140ca:	b662      	cpsie	i
 80140cc:	60fb      	str	r3, [r7, #12]
}
 80140ce:	bf00      	nop
 80140d0:	bf00      	nop
 80140d2:	e7fd      	b.n	80140d0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80140d4:	4b07      	ldr	r3, [pc, #28]	@ (80140f4 <vTaskPlaceOnEventList+0x4c>)
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	3318      	adds	r3, #24
 80140da:	4619      	mov	r1, r3
 80140dc:	6878      	ldr	r0, [r7, #4]
 80140de:	f7fe fbea 	bl	80128b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80140e2:	2101      	movs	r1, #1
 80140e4:	6838      	ldr	r0, [r7, #0]
 80140e6:	f000 fc6f 	bl	80149c8 <prvAddCurrentTaskToDelayedList>
}
 80140ea:	bf00      	nop
 80140ec:	3710      	adds	r7, #16
 80140ee:	46bd      	mov	sp, r7
 80140f0:	bd80      	pop	{r7, pc}
 80140f2:	bf00      	nop
 80140f4:	200063c0 	.word	0x200063c0

080140f8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b086      	sub	sp, #24
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	60f8      	str	r0, [r7, #12]
 8014100:	60b9      	str	r1, [r7, #8]
 8014102:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d10d      	bne.n	8014126 <vTaskPlaceOnUnorderedEventList+0x2e>
	__asm volatile
 801410a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801410e:	b672      	cpsid	i
 8014110:	f383 8811 	msr	BASEPRI, r3
 8014114:	f3bf 8f6f 	isb	sy
 8014118:	f3bf 8f4f 	dsb	sy
 801411c:	b662      	cpsie	i
 801411e:	617b      	str	r3, [r7, #20]
}
 8014120:	bf00      	nop
 8014122:	bf00      	nop
 8014124:	e7fd      	b.n	8014122 <vTaskPlaceOnUnorderedEventList+0x2a>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8014126:	4b13      	ldr	r3, [pc, #76]	@ (8014174 <vTaskPlaceOnUnorderedEventList+0x7c>)
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d10d      	bne.n	801414a <vTaskPlaceOnUnorderedEventList+0x52>
	__asm volatile
 801412e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014132:	b672      	cpsid	i
 8014134:	f383 8811 	msr	BASEPRI, r3
 8014138:	f3bf 8f6f 	isb	sy
 801413c:	f3bf 8f4f 	dsb	sy
 8014140:	b662      	cpsie	i
 8014142:	613b      	str	r3, [r7, #16]
}
 8014144:	bf00      	nop
 8014146:	bf00      	nop
 8014148:	e7fd      	b.n	8014146 <vTaskPlaceOnUnorderedEventList+0x4e>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801414a:	4b0b      	ldr	r3, [pc, #44]	@ (8014178 <vTaskPlaceOnUnorderedEventList+0x80>)
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	68ba      	ldr	r2, [r7, #8]
 8014150:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8014154:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014156:	4b08      	ldr	r3, [pc, #32]	@ (8014178 <vTaskPlaceOnUnorderedEventList+0x80>)
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	3318      	adds	r3, #24
 801415c:	4619      	mov	r1, r3
 801415e:	68f8      	ldr	r0, [r7, #12]
 8014160:	f7fe fb85 	bl	801286e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014164:	2101      	movs	r1, #1
 8014166:	6878      	ldr	r0, [r7, #4]
 8014168:	f000 fc2e 	bl	80149c8 <prvAddCurrentTaskToDelayedList>
}
 801416c:	bf00      	nop
 801416e:	3718      	adds	r7, #24
 8014170:	46bd      	mov	sp, r7
 8014172:	bd80      	pop	{r7, pc}
 8014174:	2000654c 	.word	0x2000654c
 8014178:	200063c0 	.word	0x200063c0

0801417c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801417c:	b580      	push	{r7, lr}
 801417e:	b086      	sub	sp, #24
 8014180:	af00      	add	r7, sp, #0
 8014182:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	68db      	ldr	r3, [r3, #12]
 8014188:	68db      	ldr	r3, [r3, #12]
 801418a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801418c:	693b      	ldr	r3, [r7, #16]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d10d      	bne.n	80141ae <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8014192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014196:	b672      	cpsid	i
 8014198:	f383 8811 	msr	BASEPRI, r3
 801419c:	f3bf 8f6f 	isb	sy
 80141a0:	f3bf 8f4f 	dsb	sy
 80141a4:	b662      	cpsie	i
 80141a6:	60fb      	str	r3, [r7, #12]
}
 80141a8:	bf00      	nop
 80141aa:	bf00      	nop
 80141ac:	e7fd      	b.n	80141aa <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80141ae:	693b      	ldr	r3, [r7, #16]
 80141b0:	3318      	adds	r3, #24
 80141b2:	4618      	mov	r0, r3
 80141b4:	f7fe fbb8 	bl	8012928 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80141b8:	4b1d      	ldr	r3, [pc, #116]	@ (8014230 <xTaskRemoveFromEventList+0xb4>)
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d11c      	bne.n	80141fa <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80141c0:	693b      	ldr	r3, [r7, #16]
 80141c2:	3304      	adds	r3, #4
 80141c4:	4618      	mov	r0, r3
 80141c6:	f7fe fbaf 	bl	8012928 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80141ca:	693b      	ldr	r3, [r7, #16]
 80141cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141ce:	2201      	movs	r2, #1
 80141d0:	409a      	lsls	r2, r3
 80141d2:	4b18      	ldr	r3, [pc, #96]	@ (8014234 <xTaskRemoveFromEventList+0xb8>)
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	4313      	orrs	r3, r2
 80141d8:	4a16      	ldr	r2, [pc, #88]	@ (8014234 <xTaskRemoveFromEventList+0xb8>)
 80141da:	6013      	str	r3, [r2, #0]
 80141dc:	693b      	ldr	r3, [r7, #16]
 80141de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80141e0:	4613      	mov	r3, r2
 80141e2:	009b      	lsls	r3, r3, #2
 80141e4:	4413      	add	r3, r2
 80141e6:	009b      	lsls	r3, r3, #2
 80141e8:	4a13      	ldr	r2, [pc, #76]	@ (8014238 <xTaskRemoveFromEventList+0xbc>)
 80141ea:	441a      	add	r2, r3
 80141ec:	693b      	ldr	r3, [r7, #16]
 80141ee:	3304      	adds	r3, #4
 80141f0:	4619      	mov	r1, r3
 80141f2:	4610      	mov	r0, r2
 80141f4:	f7fe fb3b 	bl	801286e <vListInsertEnd>
 80141f8:	e005      	b.n	8014206 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80141fa:	693b      	ldr	r3, [r7, #16]
 80141fc:	3318      	adds	r3, #24
 80141fe:	4619      	mov	r1, r3
 8014200:	480e      	ldr	r0, [pc, #56]	@ (801423c <xTaskRemoveFromEventList+0xc0>)
 8014202:	f7fe fb34 	bl	801286e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014206:	693b      	ldr	r3, [r7, #16]
 8014208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801420a:	4b0d      	ldr	r3, [pc, #52]	@ (8014240 <xTaskRemoveFromEventList+0xc4>)
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014210:	429a      	cmp	r2, r3
 8014212:	d905      	bls.n	8014220 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014214:	2301      	movs	r3, #1
 8014216:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014218:	4b0a      	ldr	r3, [pc, #40]	@ (8014244 <xTaskRemoveFromEventList+0xc8>)
 801421a:	2201      	movs	r2, #1
 801421c:	601a      	str	r2, [r3, #0]
 801421e:	e001      	b.n	8014224 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8014220:	2300      	movs	r3, #0
 8014222:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014224:	697b      	ldr	r3, [r7, #20]
}
 8014226:	4618      	mov	r0, r3
 8014228:	3718      	adds	r7, #24
 801422a:	46bd      	mov	sp, r7
 801422c:	bd80      	pop	{r7, pc}
 801422e:	bf00      	nop
 8014230:	2000654c 	.word	0x2000654c
 8014234:	2000652c 	.word	0x2000652c
 8014238:	200063c4 	.word	0x200063c4
 801423c:	200064e4 	.word	0x200064e4
 8014240:	200063c0 	.word	0x200063c0
 8014244:	20006538 	.word	0x20006538

08014248 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8014248:	b580      	push	{r7, lr}
 801424a:	b086      	sub	sp, #24
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]
 8014250:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8014252:	4b2c      	ldr	r3, [pc, #176]	@ (8014304 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d10d      	bne.n	8014276 <vTaskRemoveFromUnorderedEventList+0x2e>
	__asm volatile
 801425a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801425e:	b672      	cpsid	i
 8014260:	f383 8811 	msr	BASEPRI, r3
 8014264:	f3bf 8f6f 	isb	sy
 8014268:	f3bf 8f4f 	dsb	sy
 801426c:	b662      	cpsie	i
 801426e:	613b      	str	r3, [r7, #16]
}
 8014270:	bf00      	nop
 8014272:	bf00      	nop
 8014274:	e7fd      	b.n	8014272 <vTaskRemoveFromUnorderedEventList+0x2a>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014276:	683b      	ldr	r3, [r7, #0]
 8014278:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	68db      	ldr	r3, [r3, #12]
 8014284:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8014286:	697b      	ldr	r3, [r7, #20]
 8014288:	2b00      	cmp	r3, #0
 801428a:	d10d      	bne.n	80142a8 <vTaskRemoveFromUnorderedEventList+0x60>
	__asm volatile
 801428c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014290:	b672      	cpsid	i
 8014292:	f383 8811 	msr	BASEPRI, r3
 8014296:	f3bf 8f6f 	isb	sy
 801429a:	f3bf 8f4f 	dsb	sy
 801429e:	b662      	cpsie	i
 80142a0:	60fb      	str	r3, [r7, #12]
}
 80142a2:	bf00      	nop
 80142a4:	bf00      	nop
 80142a6:	e7fd      	b.n	80142a4 <vTaskRemoveFromUnorderedEventList+0x5c>
	( void ) uxListRemove( pxEventListItem );
 80142a8:	6878      	ldr	r0, [r7, #4]
 80142aa:	f7fe fb3d 	bl	8012928 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80142ae:	697b      	ldr	r3, [r7, #20]
 80142b0:	3304      	adds	r3, #4
 80142b2:	4618      	mov	r0, r3
 80142b4:	f7fe fb38 	bl	8012928 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80142b8:	697b      	ldr	r3, [r7, #20]
 80142ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80142bc:	2201      	movs	r2, #1
 80142be:	409a      	lsls	r2, r3
 80142c0:	4b11      	ldr	r3, [pc, #68]	@ (8014308 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	4313      	orrs	r3, r2
 80142c6:	4a10      	ldr	r2, [pc, #64]	@ (8014308 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80142c8:	6013      	str	r3, [r2, #0]
 80142ca:	697b      	ldr	r3, [r7, #20]
 80142cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80142ce:	4613      	mov	r3, r2
 80142d0:	009b      	lsls	r3, r3, #2
 80142d2:	4413      	add	r3, r2
 80142d4:	009b      	lsls	r3, r3, #2
 80142d6:	4a0d      	ldr	r2, [pc, #52]	@ (801430c <vTaskRemoveFromUnorderedEventList+0xc4>)
 80142d8:	441a      	add	r2, r3
 80142da:	697b      	ldr	r3, [r7, #20]
 80142dc:	3304      	adds	r3, #4
 80142de:	4619      	mov	r1, r3
 80142e0:	4610      	mov	r0, r2
 80142e2:	f7fe fac4 	bl	801286e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80142e6:	697b      	ldr	r3, [r7, #20]
 80142e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80142ea:	4b09      	ldr	r3, [pc, #36]	@ (8014310 <vTaskRemoveFromUnorderedEventList+0xc8>)
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80142f0:	429a      	cmp	r2, r3
 80142f2:	d902      	bls.n	80142fa <vTaskRemoveFromUnorderedEventList+0xb2>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80142f4:	4b07      	ldr	r3, [pc, #28]	@ (8014314 <vTaskRemoveFromUnorderedEventList+0xcc>)
 80142f6:	2201      	movs	r2, #1
 80142f8:	601a      	str	r2, [r3, #0]
	}
}
 80142fa:	bf00      	nop
 80142fc:	3718      	adds	r7, #24
 80142fe:	46bd      	mov	sp, r7
 8014300:	bd80      	pop	{r7, pc}
 8014302:	bf00      	nop
 8014304:	2000654c 	.word	0x2000654c
 8014308:	2000652c 	.word	0x2000652c
 801430c:	200063c4 	.word	0x200063c4
 8014310:	200063c0 	.word	0x200063c0
 8014314:	20006538 	.word	0x20006538

08014318 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014318:	b480      	push	{r7}
 801431a:	b083      	sub	sp, #12
 801431c:	af00      	add	r7, sp, #0
 801431e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014320:	4b06      	ldr	r3, [pc, #24]	@ (801433c <vTaskInternalSetTimeOutState+0x24>)
 8014322:	681a      	ldr	r2, [r3, #0]
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014328:	4b05      	ldr	r3, [pc, #20]	@ (8014340 <vTaskInternalSetTimeOutState+0x28>)
 801432a:	681a      	ldr	r2, [r3, #0]
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	605a      	str	r2, [r3, #4]
}
 8014330:	bf00      	nop
 8014332:	370c      	adds	r7, #12
 8014334:	46bd      	mov	sp, r7
 8014336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801433a:	4770      	bx	lr
 801433c:	2000653c 	.word	0x2000653c
 8014340:	20006528 	.word	0x20006528

08014344 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014344:	b580      	push	{r7, lr}
 8014346:	b088      	sub	sp, #32
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]
 801434c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d10d      	bne.n	8014370 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8014354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014358:	b672      	cpsid	i
 801435a:	f383 8811 	msr	BASEPRI, r3
 801435e:	f3bf 8f6f 	isb	sy
 8014362:	f3bf 8f4f 	dsb	sy
 8014366:	b662      	cpsie	i
 8014368:	613b      	str	r3, [r7, #16]
}
 801436a:	bf00      	nop
 801436c:	bf00      	nop
 801436e:	e7fd      	b.n	801436c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8014370:	683b      	ldr	r3, [r7, #0]
 8014372:	2b00      	cmp	r3, #0
 8014374:	d10d      	bne.n	8014392 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8014376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801437a:	b672      	cpsid	i
 801437c:	f383 8811 	msr	BASEPRI, r3
 8014380:	f3bf 8f6f 	isb	sy
 8014384:	f3bf 8f4f 	dsb	sy
 8014388:	b662      	cpsie	i
 801438a:	60fb      	str	r3, [r7, #12]
}
 801438c:	bf00      	nop
 801438e:	bf00      	nop
 8014390:	e7fd      	b.n	801438e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8014392:	f000 fc8b 	bl	8014cac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014396:	4b1d      	ldr	r3, [pc, #116]	@ (801440c <xTaskCheckForTimeOut+0xc8>)
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	685b      	ldr	r3, [r3, #4]
 80143a0:	69ba      	ldr	r2, [r7, #24]
 80143a2:	1ad3      	subs	r3, r2, r3
 80143a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80143a6:	683b      	ldr	r3, [r7, #0]
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143ae:	d102      	bne.n	80143b6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80143b0:	2300      	movs	r3, #0
 80143b2:	61fb      	str	r3, [r7, #28]
 80143b4:	e023      	b.n	80143fe <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	681a      	ldr	r2, [r3, #0]
 80143ba:	4b15      	ldr	r3, [pc, #84]	@ (8014410 <xTaskCheckForTimeOut+0xcc>)
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	429a      	cmp	r2, r3
 80143c0:	d007      	beq.n	80143d2 <xTaskCheckForTimeOut+0x8e>
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	685b      	ldr	r3, [r3, #4]
 80143c6:	69ba      	ldr	r2, [r7, #24]
 80143c8:	429a      	cmp	r2, r3
 80143ca:	d302      	bcc.n	80143d2 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80143cc:	2301      	movs	r3, #1
 80143ce:	61fb      	str	r3, [r7, #28]
 80143d0:	e015      	b.n	80143fe <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80143d2:	683b      	ldr	r3, [r7, #0]
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	697a      	ldr	r2, [r7, #20]
 80143d8:	429a      	cmp	r2, r3
 80143da:	d20b      	bcs.n	80143f4 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80143dc:	683b      	ldr	r3, [r7, #0]
 80143de:	681a      	ldr	r2, [r3, #0]
 80143e0:	697b      	ldr	r3, [r7, #20]
 80143e2:	1ad2      	subs	r2, r2, r3
 80143e4:	683b      	ldr	r3, [r7, #0]
 80143e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80143e8:	6878      	ldr	r0, [r7, #4]
 80143ea:	f7ff ff95 	bl	8014318 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80143ee:	2300      	movs	r3, #0
 80143f0:	61fb      	str	r3, [r7, #28]
 80143f2:	e004      	b.n	80143fe <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80143f4:	683b      	ldr	r3, [r7, #0]
 80143f6:	2200      	movs	r2, #0
 80143f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80143fa:	2301      	movs	r3, #1
 80143fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80143fe:	f000 fc8b 	bl	8014d18 <vPortExitCritical>

	return xReturn;
 8014402:	69fb      	ldr	r3, [r7, #28]
}
 8014404:	4618      	mov	r0, r3
 8014406:	3720      	adds	r7, #32
 8014408:	46bd      	mov	sp, r7
 801440a:	bd80      	pop	{r7, pc}
 801440c:	20006528 	.word	0x20006528
 8014410:	2000653c 	.word	0x2000653c

08014414 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014414:	b480      	push	{r7}
 8014416:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014418:	4b03      	ldr	r3, [pc, #12]	@ (8014428 <vTaskMissedYield+0x14>)
 801441a:	2201      	movs	r2, #1
 801441c:	601a      	str	r2, [r3, #0]
}
 801441e:	bf00      	nop
 8014420:	46bd      	mov	sp, r7
 8014422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014426:	4770      	bx	lr
 8014428:	20006538 	.word	0x20006538

0801442c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801442c:	b580      	push	{r7, lr}
 801442e:	b082      	sub	sp, #8
 8014430:	af00      	add	r7, sp, #0
 8014432:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014434:	f000 f852 	bl	80144dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014438:	4b06      	ldr	r3, [pc, #24]	@ (8014454 <prvIdleTask+0x28>)
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	2b01      	cmp	r3, #1
 801443e:	d9f9      	bls.n	8014434 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014440:	4b05      	ldr	r3, [pc, #20]	@ (8014458 <prvIdleTask+0x2c>)
 8014442:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014446:	601a      	str	r2, [r3, #0]
 8014448:	f3bf 8f4f 	dsb	sy
 801444c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014450:	e7f0      	b.n	8014434 <prvIdleTask+0x8>
 8014452:	bf00      	nop
 8014454:	200063c4 	.word	0x200063c4
 8014458:	e000ed04 	.word	0xe000ed04

0801445c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801445c:	b580      	push	{r7, lr}
 801445e:	b082      	sub	sp, #8
 8014460:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014462:	2300      	movs	r3, #0
 8014464:	607b      	str	r3, [r7, #4]
 8014466:	e00c      	b.n	8014482 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014468:	687a      	ldr	r2, [r7, #4]
 801446a:	4613      	mov	r3, r2
 801446c:	009b      	lsls	r3, r3, #2
 801446e:	4413      	add	r3, r2
 8014470:	009b      	lsls	r3, r3, #2
 8014472:	4a12      	ldr	r2, [pc, #72]	@ (80144bc <prvInitialiseTaskLists+0x60>)
 8014474:	4413      	add	r3, r2
 8014476:	4618      	mov	r0, r3
 8014478:	f7fe f9cc 	bl	8012814 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	3301      	adds	r3, #1
 8014480:	607b      	str	r3, [r7, #4]
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	2b0b      	cmp	r3, #11
 8014486:	d9ef      	bls.n	8014468 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014488:	480d      	ldr	r0, [pc, #52]	@ (80144c0 <prvInitialiseTaskLists+0x64>)
 801448a:	f7fe f9c3 	bl	8012814 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801448e:	480d      	ldr	r0, [pc, #52]	@ (80144c4 <prvInitialiseTaskLists+0x68>)
 8014490:	f7fe f9c0 	bl	8012814 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014494:	480c      	ldr	r0, [pc, #48]	@ (80144c8 <prvInitialiseTaskLists+0x6c>)
 8014496:	f7fe f9bd 	bl	8012814 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801449a:	480c      	ldr	r0, [pc, #48]	@ (80144cc <prvInitialiseTaskLists+0x70>)
 801449c:	f7fe f9ba 	bl	8012814 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80144a0:	480b      	ldr	r0, [pc, #44]	@ (80144d0 <prvInitialiseTaskLists+0x74>)
 80144a2:	f7fe f9b7 	bl	8012814 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80144a6:	4b0b      	ldr	r3, [pc, #44]	@ (80144d4 <prvInitialiseTaskLists+0x78>)
 80144a8:	4a05      	ldr	r2, [pc, #20]	@ (80144c0 <prvInitialiseTaskLists+0x64>)
 80144aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80144ac:	4b0a      	ldr	r3, [pc, #40]	@ (80144d8 <prvInitialiseTaskLists+0x7c>)
 80144ae:	4a05      	ldr	r2, [pc, #20]	@ (80144c4 <prvInitialiseTaskLists+0x68>)
 80144b0:	601a      	str	r2, [r3, #0]
}
 80144b2:	bf00      	nop
 80144b4:	3708      	adds	r7, #8
 80144b6:	46bd      	mov	sp, r7
 80144b8:	bd80      	pop	{r7, pc}
 80144ba:	bf00      	nop
 80144bc:	200063c4 	.word	0x200063c4
 80144c0:	200064b4 	.word	0x200064b4
 80144c4:	200064c8 	.word	0x200064c8
 80144c8:	200064e4 	.word	0x200064e4
 80144cc:	200064f8 	.word	0x200064f8
 80144d0:	20006510 	.word	0x20006510
 80144d4:	200064dc 	.word	0x200064dc
 80144d8:	200064e0 	.word	0x200064e0

080144dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80144dc:	b580      	push	{r7, lr}
 80144de:	b082      	sub	sp, #8
 80144e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80144e2:	e019      	b.n	8014518 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80144e4:	f000 fbe2 	bl	8014cac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80144e8:	4b10      	ldr	r3, [pc, #64]	@ (801452c <prvCheckTasksWaitingTermination+0x50>)
 80144ea:	68db      	ldr	r3, [r3, #12]
 80144ec:	68db      	ldr	r3, [r3, #12]
 80144ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	3304      	adds	r3, #4
 80144f4:	4618      	mov	r0, r3
 80144f6:	f7fe fa17 	bl	8012928 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80144fa:	4b0d      	ldr	r3, [pc, #52]	@ (8014530 <prvCheckTasksWaitingTermination+0x54>)
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	3b01      	subs	r3, #1
 8014500:	4a0b      	ldr	r2, [pc, #44]	@ (8014530 <prvCheckTasksWaitingTermination+0x54>)
 8014502:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014504:	4b0b      	ldr	r3, [pc, #44]	@ (8014534 <prvCheckTasksWaitingTermination+0x58>)
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	3b01      	subs	r3, #1
 801450a:	4a0a      	ldr	r2, [pc, #40]	@ (8014534 <prvCheckTasksWaitingTermination+0x58>)
 801450c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801450e:	f000 fc03 	bl	8014d18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014512:	6878      	ldr	r0, [r7, #4]
 8014514:	f000 f810 	bl	8014538 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014518:	4b06      	ldr	r3, [pc, #24]	@ (8014534 <prvCheckTasksWaitingTermination+0x58>)
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	2b00      	cmp	r3, #0
 801451e:	d1e1      	bne.n	80144e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014520:	bf00      	nop
 8014522:	bf00      	nop
 8014524:	3708      	adds	r7, #8
 8014526:	46bd      	mov	sp, r7
 8014528:	bd80      	pop	{r7, pc}
 801452a:	bf00      	nop
 801452c:	200064f8 	.word	0x200064f8
 8014530:	20006524 	.word	0x20006524
 8014534:	2000650c 	.word	0x2000650c

08014538 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014538:	b580      	push	{r7, lr}
 801453a:	b084      	sub	sp, #16
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8014546:	2b00      	cmp	r3, #0
 8014548:	d108      	bne.n	801455c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801454e:	4618      	mov	r0, r3
 8014550:	f000 fda8 	bl	80150a4 <vPortFree>
				vPortFree( pxTCB );
 8014554:	6878      	ldr	r0, [r7, #4]
 8014556:	f000 fda5 	bl	80150a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801455a:	e01b      	b.n	8014594 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8014562:	2b01      	cmp	r3, #1
 8014564:	d103      	bne.n	801456e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014566:	6878      	ldr	r0, [r7, #4]
 8014568:	f000 fd9c 	bl	80150a4 <vPortFree>
	}
 801456c:	e012      	b.n	8014594 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8014574:	2b02      	cmp	r3, #2
 8014576:	d00d      	beq.n	8014594 <prvDeleteTCB+0x5c>
	__asm volatile
 8014578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801457c:	b672      	cpsid	i
 801457e:	f383 8811 	msr	BASEPRI, r3
 8014582:	f3bf 8f6f 	isb	sy
 8014586:	f3bf 8f4f 	dsb	sy
 801458a:	b662      	cpsie	i
 801458c:	60fb      	str	r3, [r7, #12]
}
 801458e:	bf00      	nop
 8014590:	bf00      	nop
 8014592:	e7fd      	b.n	8014590 <prvDeleteTCB+0x58>
	}
 8014594:	bf00      	nop
 8014596:	3710      	adds	r7, #16
 8014598:	46bd      	mov	sp, r7
 801459a:	bd80      	pop	{r7, pc}

0801459c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801459c:	b480      	push	{r7}
 801459e:	b083      	sub	sp, #12
 80145a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80145a2:	4b0c      	ldr	r3, [pc, #48]	@ (80145d4 <prvResetNextTaskUnblockTime+0x38>)
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d104      	bne.n	80145b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80145ac:	4b0a      	ldr	r3, [pc, #40]	@ (80145d8 <prvResetNextTaskUnblockTime+0x3c>)
 80145ae:	f04f 32ff 	mov.w	r2, #4294967295
 80145b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80145b4:	e008      	b.n	80145c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80145b6:	4b07      	ldr	r3, [pc, #28]	@ (80145d4 <prvResetNextTaskUnblockTime+0x38>)
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	68db      	ldr	r3, [r3, #12]
 80145bc:	68db      	ldr	r3, [r3, #12]
 80145be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	685b      	ldr	r3, [r3, #4]
 80145c4:	4a04      	ldr	r2, [pc, #16]	@ (80145d8 <prvResetNextTaskUnblockTime+0x3c>)
 80145c6:	6013      	str	r3, [r2, #0]
}
 80145c8:	bf00      	nop
 80145ca:	370c      	adds	r7, #12
 80145cc:	46bd      	mov	sp, r7
 80145ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d2:	4770      	bx	lr
 80145d4:	200064dc 	.word	0x200064dc
 80145d8:	20006544 	.word	0x20006544

080145dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80145dc:	b480      	push	{r7}
 80145de:	b083      	sub	sp, #12
 80145e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80145e2:	4b0b      	ldr	r3, [pc, #44]	@ (8014610 <xTaskGetSchedulerState+0x34>)
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d102      	bne.n	80145f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80145ea:	2301      	movs	r3, #1
 80145ec:	607b      	str	r3, [r7, #4]
 80145ee:	e008      	b.n	8014602 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80145f0:	4b08      	ldr	r3, [pc, #32]	@ (8014614 <xTaskGetSchedulerState+0x38>)
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d102      	bne.n	80145fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80145f8:	2302      	movs	r3, #2
 80145fa:	607b      	str	r3, [r7, #4]
 80145fc:	e001      	b.n	8014602 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80145fe:	2300      	movs	r3, #0
 8014600:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014602:	687b      	ldr	r3, [r7, #4]
	}
 8014604:	4618      	mov	r0, r3
 8014606:	370c      	adds	r7, #12
 8014608:	46bd      	mov	sp, r7
 801460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801460e:	4770      	bx	lr
 8014610:	20006530 	.word	0x20006530
 8014614:	2000654c 	.word	0x2000654c

08014618 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014618:	b580      	push	{r7, lr}
 801461a:	b084      	sub	sp, #16
 801461c:	af00      	add	r7, sp, #0
 801461e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014624:	2300      	movs	r3, #0
 8014626:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d069      	beq.n	8014702 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801462e:	68bb      	ldr	r3, [r7, #8]
 8014630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014632:	4b36      	ldr	r3, [pc, #216]	@ (801470c <xTaskPriorityInherit+0xf4>)
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014638:	429a      	cmp	r2, r3
 801463a:	d259      	bcs.n	80146f0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801463c:	68bb      	ldr	r3, [r7, #8]
 801463e:	699b      	ldr	r3, [r3, #24]
 8014640:	2b00      	cmp	r3, #0
 8014642:	db06      	blt.n	8014652 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014644:	4b31      	ldr	r3, [pc, #196]	@ (801470c <xTaskPriorityInherit+0xf4>)
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801464a:	f1c3 020c 	rsb	r2, r3, #12
 801464e:	68bb      	ldr	r3, [r7, #8]
 8014650:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014652:	68bb      	ldr	r3, [r7, #8]
 8014654:	6959      	ldr	r1, [r3, #20]
 8014656:	68bb      	ldr	r3, [r7, #8]
 8014658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801465a:	4613      	mov	r3, r2
 801465c:	009b      	lsls	r3, r3, #2
 801465e:	4413      	add	r3, r2
 8014660:	009b      	lsls	r3, r3, #2
 8014662:	4a2b      	ldr	r2, [pc, #172]	@ (8014710 <xTaskPriorityInherit+0xf8>)
 8014664:	4413      	add	r3, r2
 8014666:	4299      	cmp	r1, r3
 8014668:	d13a      	bne.n	80146e0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801466a:	68bb      	ldr	r3, [r7, #8]
 801466c:	3304      	adds	r3, #4
 801466e:	4618      	mov	r0, r3
 8014670:	f7fe f95a 	bl	8012928 <uxListRemove>
 8014674:	4603      	mov	r3, r0
 8014676:	2b00      	cmp	r3, #0
 8014678:	d115      	bne.n	80146a6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801467a:	68bb      	ldr	r3, [r7, #8]
 801467c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801467e:	4924      	ldr	r1, [pc, #144]	@ (8014710 <xTaskPriorityInherit+0xf8>)
 8014680:	4613      	mov	r3, r2
 8014682:	009b      	lsls	r3, r3, #2
 8014684:	4413      	add	r3, r2
 8014686:	009b      	lsls	r3, r3, #2
 8014688:	440b      	add	r3, r1
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	2b00      	cmp	r3, #0
 801468e:	d10a      	bne.n	80146a6 <xTaskPriorityInherit+0x8e>
 8014690:	68bb      	ldr	r3, [r7, #8]
 8014692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014694:	2201      	movs	r2, #1
 8014696:	fa02 f303 	lsl.w	r3, r2, r3
 801469a:	43da      	mvns	r2, r3
 801469c:	4b1d      	ldr	r3, [pc, #116]	@ (8014714 <xTaskPriorityInherit+0xfc>)
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	4013      	ands	r3, r2
 80146a2:	4a1c      	ldr	r2, [pc, #112]	@ (8014714 <xTaskPriorityInherit+0xfc>)
 80146a4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80146a6:	4b19      	ldr	r3, [pc, #100]	@ (801470c <xTaskPriorityInherit+0xf4>)
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80146ac:	68bb      	ldr	r3, [r7, #8]
 80146ae:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80146b0:	68bb      	ldr	r3, [r7, #8]
 80146b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146b4:	2201      	movs	r2, #1
 80146b6:	409a      	lsls	r2, r3
 80146b8:	4b16      	ldr	r3, [pc, #88]	@ (8014714 <xTaskPriorityInherit+0xfc>)
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	4313      	orrs	r3, r2
 80146be:	4a15      	ldr	r2, [pc, #84]	@ (8014714 <xTaskPriorityInherit+0xfc>)
 80146c0:	6013      	str	r3, [r2, #0]
 80146c2:	68bb      	ldr	r3, [r7, #8]
 80146c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80146c6:	4613      	mov	r3, r2
 80146c8:	009b      	lsls	r3, r3, #2
 80146ca:	4413      	add	r3, r2
 80146cc:	009b      	lsls	r3, r3, #2
 80146ce:	4a10      	ldr	r2, [pc, #64]	@ (8014710 <xTaskPriorityInherit+0xf8>)
 80146d0:	441a      	add	r2, r3
 80146d2:	68bb      	ldr	r3, [r7, #8]
 80146d4:	3304      	adds	r3, #4
 80146d6:	4619      	mov	r1, r3
 80146d8:	4610      	mov	r0, r2
 80146da:	f7fe f8c8 	bl	801286e <vListInsertEnd>
 80146de:	e004      	b.n	80146ea <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80146e0:	4b0a      	ldr	r3, [pc, #40]	@ (801470c <xTaskPriorityInherit+0xf4>)
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80146e6:	68bb      	ldr	r3, [r7, #8]
 80146e8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80146ea:	2301      	movs	r3, #1
 80146ec:	60fb      	str	r3, [r7, #12]
 80146ee:	e008      	b.n	8014702 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80146f0:	68bb      	ldr	r3, [r7, #8]
 80146f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80146f4:	4b05      	ldr	r3, [pc, #20]	@ (801470c <xTaskPriorityInherit+0xf4>)
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146fa:	429a      	cmp	r2, r3
 80146fc:	d201      	bcs.n	8014702 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80146fe:	2301      	movs	r3, #1
 8014700:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014702:	68fb      	ldr	r3, [r7, #12]
	}
 8014704:	4618      	mov	r0, r3
 8014706:	3710      	adds	r7, #16
 8014708:	46bd      	mov	sp, r7
 801470a:	bd80      	pop	{r7, pc}
 801470c:	200063c0 	.word	0x200063c0
 8014710:	200063c4 	.word	0x200063c4
 8014714:	2000652c 	.word	0x2000652c

08014718 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014718:	b580      	push	{r7, lr}
 801471a:	b086      	sub	sp, #24
 801471c:	af00      	add	r7, sp, #0
 801471e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014724:	2300      	movs	r3, #0
 8014726:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d074      	beq.n	8014818 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801472e:	4b3d      	ldr	r3, [pc, #244]	@ (8014824 <xTaskPriorityDisinherit+0x10c>)
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	693a      	ldr	r2, [r7, #16]
 8014734:	429a      	cmp	r2, r3
 8014736:	d00d      	beq.n	8014754 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8014738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801473c:	b672      	cpsid	i
 801473e:	f383 8811 	msr	BASEPRI, r3
 8014742:	f3bf 8f6f 	isb	sy
 8014746:	f3bf 8f4f 	dsb	sy
 801474a:	b662      	cpsie	i
 801474c:	60fb      	str	r3, [r7, #12]
}
 801474e:	bf00      	nop
 8014750:	bf00      	nop
 8014752:	e7fd      	b.n	8014750 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8014754:	693b      	ldr	r3, [r7, #16]
 8014756:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014758:	2b00      	cmp	r3, #0
 801475a:	d10d      	bne.n	8014778 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 801475c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014760:	b672      	cpsid	i
 8014762:	f383 8811 	msr	BASEPRI, r3
 8014766:	f3bf 8f6f 	isb	sy
 801476a:	f3bf 8f4f 	dsb	sy
 801476e:	b662      	cpsie	i
 8014770:	60bb      	str	r3, [r7, #8]
}
 8014772:	bf00      	nop
 8014774:	bf00      	nop
 8014776:	e7fd      	b.n	8014774 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8014778:	693b      	ldr	r3, [r7, #16]
 801477a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801477c:	1e5a      	subs	r2, r3, #1
 801477e:	693b      	ldr	r3, [r7, #16]
 8014780:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014782:	693b      	ldr	r3, [r7, #16]
 8014784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014786:	693b      	ldr	r3, [r7, #16]
 8014788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801478a:	429a      	cmp	r2, r3
 801478c:	d044      	beq.n	8014818 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801478e:	693b      	ldr	r3, [r7, #16]
 8014790:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014792:	2b00      	cmp	r3, #0
 8014794:	d140      	bne.n	8014818 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014796:	693b      	ldr	r3, [r7, #16]
 8014798:	3304      	adds	r3, #4
 801479a:	4618      	mov	r0, r3
 801479c:	f7fe f8c4 	bl	8012928 <uxListRemove>
 80147a0:	4603      	mov	r3, r0
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d115      	bne.n	80147d2 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80147a6:	693b      	ldr	r3, [r7, #16]
 80147a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80147aa:	491f      	ldr	r1, [pc, #124]	@ (8014828 <xTaskPriorityDisinherit+0x110>)
 80147ac:	4613      	mov	r3, r2
 80147ae:	009b      	lsls	r3, r3, #2
 80147b0:	4413      	add	r3, r2
 80147b2:	009b      	lsls	r3, r3, #2
 80147b4:	440b      	add	r3, r1
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d10a      	bne.n	80147d2 <xTaskPriorityDisinherit+0xba>
 80147bc:	693b      	ldr	r3, [r7, #16]
 80147be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147c0:	2201      	movs	r2, #1
 80147c2:	fa02 f303 	lsl.w	r3, r2, r3
 80147c6:	43da      	mvns	r2, r3
 80147c8:	4b18      	ldr	r3, [pc, #96]	@ (801482c <xTaskPriorityDisinherit+0x114>)
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	4013      	ands	r3, r2
 80147ce:	4a17      	ldr	r2, [pc, #92]	@ (801482c <xTaskPriorityDisinherit+0x114>)
 80147d0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80147d2:	693b      	ldr	r3, [r7, #16]
 80147d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80147d6:	693b      	ldr	r3, [r7, #16]
 80147d8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80147da:	693b      	ldr	r3, [r7, #16]
 80147dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147de:	f1c3 020c 	rsb	r2, r3, #12
 80147e2:	693b      	ldr	r3, [r7, #16]
 80147e4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80147e6:	693b      	ldr	r3, [r7, #16]
 80147e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147ea:	2201      	movs	r2, #1
 80147ec:	409a      	lsls	r2, r3
 80147ee:	4b0f      	ldr	r3, [pc, #60]	@ (801482c <xTaskPriorityDisinherit+0x114>)
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	4313      	orrs	r3, r2
 80147f4:	4a0d      	ldr	r2, [pc, #52]	@ (801482c <xTaskPriorityDisinherit+0x114>)
 80147f6:	6013      	str	r3, [r2, #0]
 80147f8:	693b      	ldr	r3, [r7, #16]
 80147fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80147fc:	4613      	mov	r3, r2
 80147fe:	009b      	lsls	r3, r3, #2
 8014800:	4413      	add	r3, r2
 8014802:	009b      	lsls	r3, r3, #2
 8014804:	4a08      	ldr	r2, [pc, #32]	@ (8014828 <xTaskPriorityDisinherit+0x110>)
 8014806:	441a      	add	r2, r3
 8014808:	693b      	ldr	r3, [r7, #16]
 801480a:	3304      	adds	r3, #4
 801480c:	4619      	mov	r1, r3
 801480e:	4610      	mov	r0, r2
 8014810:	f7fe f82d 	bl	801286e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014814:	2301      	movs	r3, #1
 8014816:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014818:	697b      	ldr	r3, [r7, #20]
	}
 801481a:	4618      	mov	r0, r3
 801481c:	3718      	adds	r7, #24
 801481e:	46bd      	mov	sp, r7
 8014820:	bd80      	pop	{r7, pc}
 8014822:	bf00      	nop
 8014824:	200063c0 	.word	0x200063c0
 8014828:	200063c4 	.word	0x200063c4
 801482c:	2000652c 	.word	0x2000652c

08014830 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014830:	b580      	push	{r7, lr}
 8014832:	b088      	sub	sp, #32
 8014834:	af00      	add	r7, sp, #0
 8014836:	6078      	str	r0, [r7, #4]
 8014838:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801483e:	2301      	movs	r3, #1
 8014840:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	2b00      	cmp	r3, #0
 8014846:	f000 8089 	beq.w	801495c <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801484a:	69bb      	ldr	r3, [r7, #24]
 801484c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801484e:	2b00      	cmp	r3, #0
 8014850:	d10d      	bne.n	801486e <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8014852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014856:	b672      	cpsid	i
 8014858:	f383 8811 	msr	BASEPRI, r3
 801485c:	f3bf 8f6f 	isb	sy
 8014860:	f3bf 8f4f 	dsb	sy
 8014864:	b662      	cpsie	i
 8014866:	60fb      	str	r3, [r7, #12]
}
 8014868:	bf00      	nop
 801486a:	bf00      	nop
 801486c:	e7fd      	b.n	801486a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801486e:	69bb      	ldr	r3, [r7, #24]
 8014870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014872:	683a      	ldr	r2, [r7, #0]
 8014874:	429a      	cmp	r2, r3
 8014876:	d902      	bls.n	801487e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014878:	683b      	ldr	r3, [r7, #0]
 801487a:	61fb      	str	r3, [r7, #28]
 801487c:	e002      	b.n	8014884 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801487e:	69bb      	ldr	r3, [r7, #24]
 8014880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014882:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014884:	69bb      	ldr	r3, [r7, #24]
 8014886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014888:	69fa      	ldr	r2, [r7, #28]
 801488a:	429a      	cmp	r2, r3
 801488c:	d066      	beq.n	801495c <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801488e:	69bb      	ldr	r3, [r7, #24]
 8014890:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014892:	697a      	ldr	r2, [r7, #20]
 8014894:	429a      	cmp	r2, r3
 8014896:	d161      	bne.n	801495c <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014898:	4b32      	ldr	r3, [pc, #200]	@ (8014964 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	69ba      	ldr	r2, [r7, #24]
 801489e:	429a      	cmp	r2, r3
 80148a0:	d10d      	bne.n	80148be <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 80148a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148a6:	b672      	cpsid	i
 80148a8:	f383 8811 	msr	BASEPRI, r3
 80148ac:	f3bf 8f6f 	isb	sy
 80148b0:	f3bf 8f4f 	dsb	sy
 80148b4:	b662      	cpsie	i
 80148b6:	60bb      	str	r3, [r7, #8]
}
 80148b8:	bf00      	nop
 80148ba:	bf00      	nop
 80148bc:	e7fd      	b.n	80148ba <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80148be:	69bb      	ldr	r3, [r7, #24]
 80148c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148c2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80148c4:	69bb      	ldr	r3, [r7, #24]
 80148c6:	69fa      	ldr	r2, [r7, #28]
 80148c8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80148ca:	69bb      	ldr	r3, [r7, #24]
 80148cc:	699b      	ldr	r3, [r3, #24]
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	db04      	blt.n	80148dc <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80148d2:	69fb      	ldr	r3, [r7, #28]
 80148d4:	f1c3 020c 	rsb	r2, r3, #12
 80148d8:	69bb      	ldr	r3, [r7, #24]
 80148da:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80148dc:	69bb      	ldr	r3, [r7, #24]
 80148de:	6959      	ldr	r1, [r3, #20]
 80148e0:	693a      	ldr	r2, [r7, #16]
 80148e2:	4613      	mov	r3, r2
 80148e4:	009b      	lsls	r3, r3, #2
 80148e6:	4413      	add	r3, r2
 80148e8:	009b      	lsls	r3, r3, #2
 80148ea:	4a1f      	ldr	r2, [pc, #124]	@ (8014968 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80148ec:	4413      	add	r3, r2
 80148ee:	4299      	cmp	r1, r3
 80148f0:	d134      	bne.n	801495c <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80148f2:	69bb      	ldr	r3, [r7, #24]
 80148f4:	3304      	adds	r3, #4
 80148f6:	4618      	mov	r0, r3
 80148f8:	f7fe f816 	bl	8012928 <uxListRemove>
 80148fc:	4603      	mov	r3, r0
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d115      	bne.n	801492e <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014902:	69bb      	ldr	r3, [r7, #24]
 8014904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014906:	4918      	ldr	r1, [pc, #96]	@ (8014968 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014908:	4613      	mov	r3, r2
 801490a:	009b      	lsls	r3, r3, #2
 801490c:	4413      	add	r3, r2
 801490e:	009b      	lsls	r3, r3, #2
 8014910:	440b      	add	r3, r1
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d10a      	bne.n	801492e <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8014918:	69bb      	ldr	r3, [r7, #24]
 801491a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801491c:	2201      	movs	r2, #1
 801491e:	fa02 f303 	lsl.w	r3, r2, r3
 8014922:	43da      	mvns	r2, r3
 8014924:	4b11      	ldr	r3, [pc, #68]	@ (801496c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	4013      	ands	r3, r2
 801492a:	4a10      	ldr	r2, [pc, #64]	@ (801496c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801492c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801492e:	69bb      	ldr	r3, [r7, #24]
 8014930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014932:	2201      	movs	r2, #1
 8014934:	409a      	lsls	r2, r3
 8014936:	4b0d      	ldr	r3, [pc, #52]	@ (801496c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	4313      	orrs	r3, r2
 801493c:	4a0b      	ldr	r2, [pc, #44]	@ (801496c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801493e:	6013      	str	r3, [r2, #0]
 8014940:	69bb      	ldr	r3, [r7, #24]
 8014942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014944:	4613      	mov	r3, r2
 8014946:	009b      	lsls	r3, r3, #2
 8014948:	4413      	add	r3, r2
 801494a:	009b      	lsls	r3, r3, #2
 801494c:	4a06      	ldr	r2, [pc, #24]	@ (8014968 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801494e:	441a      	add	r2, r3
 8014950:	69bb      	ldr	r3, [r7, #24]
 8014952:	3304      	adds	r3, #4
 8014954:	4619      	mov	r1, r3
 8014956:	4610      	mov	r0, r2
 8014958:	f7fd ff89 	bl	801286e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801495c:	bf00      	nop
 801495e:	3720      	adds	r7, #32
 8014960:	46bd      	mov	sp, r7
 8014962:	bd80      	pop	{r7, pc}
 8014964:	200063c0 	.word	0x200063c0
 8014968:	200063c4 	.word	0x200063c4
 801496c:	2000652c 	.word	0x2000652c

08014970 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8014970:	b480      	push	{r7}
 8014972:	b083      	sub	sp, #12
 8014974:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8014976:	4b09      	ldr	r3, [pc, #36]	@ (801499c <uxTaskResetEventItemValue+0x2c>)
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	699b      	ldr	r3, [r3, #24]
 801497c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801497e:	4b07      	ldr	r3, [pc, #28]	@ (801499c <uxTaskResetEventItemValue+0x2c>)
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014984:	4b05      	ldr	r3, [pc, #20]	@ (801499c <uxTaskResetEventItemValue+0x2c>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	f1c2 020c 	rsb	r2, r2, #12
 801498c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801498e:	687b      	ldr	r3, [r7, #4]
}
 8014990:	4618      	mov	r0, r3
 8014992:	370c      	adds	r7, #12
 8014994:	46bd      	mov	sp, r7
 8014996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801499a:	4770      	bx	lr
 801499c:	200063c0 	.word	0x200063c0

080149a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80149a0:	b480      	push	{r7}
 80149a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80149a4:	4b07      	ldr	r3, [pc, #28]	@ (80149c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d004      	beq.n	80149b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80149ac:	4b05      	ldr	r3, [pc, #20]	@ (80149c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80149b2:	3201      	adds	r2, #1
 80149b4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80149b6:	4b03      	ldr	r3, [pc, #12]	@ (80149c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80149b8:	681b      	ldr	r3, [r3, #0]
	}
 80149ba:	4618      	mov	r0, r3
 80149bc:	46bd      	mov	sp, r7
 80149be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149c2:	4770      	bx	lr
 80149c4:	200063c0 	.word	0x200063c0

080149c8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80149c8:	b580      	push	{r7, lr}
 80149ca:	b084      	sub	sp, #16
 80149cc:	af00      	add	r7, sp, #0
 80149ce:	6078      	str	r0, [r7, #4]
 80149d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80149d2:	4b29      	ldr	r3, [pc, #164]	@ (8014a78 <prvAddCurrentTaskToDelayedList+0xb0>)
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80149d8:	4b28      	ldr	r3, [pc, #160]	@ (8014a7c <prvAddCurrentTaskToDelayedList+0xb4>)
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	3304      	adds	r3, #4
 80149de:	4618      	mov	r0, r3
 80149e0:	f7fd ffa2 	bl	8012928 <uxListRemove>
 80149e4:	4603      	mov	r3, r0
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d10b      	bne.n	8014a02 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80149ea:	4b24      	ldr	r3, [pc, #144]	@ (8014a7c <prvAddCurrentTaskToDelayedList+0xb4>)
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149f0:	2201      	movs	r2, #1
 80149f2:	fa02 f303 	lsl.w	r3, r2, r3
 80149f6:	43da      	mvns	r2, r3
 80149f8:	4b21      	ldr	r3, [pc, #132]	@ (8014a80 <prvAddCurrentTaskToDelayedList+0xb8>)
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	4013      	ands	r3, r2
 80149fe:	4a20      	ldr	r2, [pc, #128]	@ (8014a80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014a00:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a08:	d10a      	bne.n	8014a20 <prvAddCurrentTaskToDelayedList+0x58>
 8014a0a:	683b      	ldr	r3, [r7, #0]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d007      	beq.n	8014a20 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014a10:	4b1a      	ldr	r3, [pc, #104]	@ (8014a7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	3304      	adds	r3, #4
 8014a16:	4619      	mov	r1, r3
 8014a18:	481a      	ldr	r0, [pc, #104]	@ (8014a84 <prvAddCurrentTaskToDelayedList+0xbc>)
 8014a1a:	f7fd ff28 	bl	801286e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014a1e:	e026      	b.n	8014a6e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014a20:	68fa      	ldr	r2, [r7, #12]
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	4413      	add	r3, r2
 8014a26:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014a28:	4b14      	ldr	r3, [pc, #80]	@ (8014a7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	68ba      	ldr	r2, [r7, #8]
 8014a2e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014a30:	68ba      	ldr	r2, [r7, #8]
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	429a      	cmp	r2, r3
 8014a36:	d209      	bcs.n	8014a4c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014a38:	4b13      	ldr	r3, [pc, #76]	@ (8014a88 <prvAddCurrentTaskToDelayedList+0xc0>)
 8014a3a:	681a      	ldr	r2, [r3, #0]
 8014a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8014a7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	3304      	adds	r3, #4
 8014a42:	4619      	mov	r1, r3
 8014a44:	4610      	mov	r0, r2
 8014a46:	f7fd ff36 	bl	80128b6 <vListInsert>
}
 8014a4a:	e010      	b.n	8014a6e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8014a8c <prvAddCurrentTaskToDelayedList+0xc4>)
 8014a4e:	681a      	ldr	r2, [r3, #0]
 8014a50:	4b0a      	ldr	r3, [pc, #40]	@ (8014a7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	3304      	adds	r3, #4
 8014a56:	4619      	mov	r1, r3
 8014a58:	4610      	mov	r0, r2
 8014a5a:	f7fd ff2c 	bl	80128b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8014a90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	68ba      	ldr	r2, [r7, #8]
 8014a64:	429a      	cmp	r2, r3
 8014a66:	d202      	bcs.n	8014a6e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014a68:	4a09      	ldr	r2, [pc, #36]	@ (8014a90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014a6a:	68bb      	ldr	r3, [r7, #8]
 8014a6c:	6013      	str	r3, [r2, #0]
}
 8014a6e:	bf00      	nop
 8014a70:	3710      	adds	r7, #16
 8014a72:	46bd      	mov	sp, r7
 8014a74:	bd80      	pop	{r7, pc}
 8014a76:	bf00      	nop
 8014a78:	20006528 	.word	0x20006528
 8014a7c:	200063c0 	.word	0x200063c0
 8014a80:	2000652c 	.word	0x2000652c
 8014a84:	20006510 	.word	0x20006510
 8014a88:	200064e0 	.word	0x200064e0
 8014a8c:	200064dc 	.word	0x200064dc
 8014a90:	20006544 	.word	0x20006544

08014a94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014a94:	b480      	push	{r7}
 8014a96:	b085      	sub	sp, #20
 8014a98:	af00      	add	r7, sp, #0
 8014a9a:	60f8      	str	r0, [r7, #12]
 8014a9c:	60b9      	str	r1, [r7, #8]
 8014a9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	3b04      	subs	r3, #4
 8014aa4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8014aac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	3b04      	subs	r3, #4
 8014ab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014ab4:	68bb      	ldr	r3, [r7, #8]
 8014ab6:	f023 0201 	bic.w	r2, r3, #1
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	3b04      	subs	r3, #4
 8014ac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014ac4:	4a0c      	ldr	r2, [pc, #48]	@ (8014af8 <pxPortInitialiseStack+0x64>)
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	3b14      	subs	r3, #20
 8014ace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014ad0:	687a      	ldr	r2, [r7, #4]
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	3b04      	subs	r3, #4
 8014ada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	f06f 0202 	mvn.w	r2, #2
 8014ae2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	3b20      	subs	r3, #32
 8014ae8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014aea:	68fb      	ldr	r3, [r7, #12]
}
 8014aec:	4618      	mov	r0, r3
 8014aee:	3714      	adds	r7, #20
 8014af0:	46bd      	mov	sp, r7
 8014af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af6:	4770      	bx	lr
 8014af8:	08014afd 	.word	0x08014afd

08014afc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014afc:	b480      	push	{r7}
 8014afe:	b085      	sub	sp, #20
 8014b00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014b02:	2300      	movs	r3, #0
 8014b04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014b06:	4b15      	ldr	r3, [pc, #84]	@ (8014b5c <prvTaskExitError+0x60>)
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b0e:	d00d      	beq.n	8014b2c <prvTaskExitError+0x30>
	__asm volatile
 8014b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b14:	b672      	cpsid	i
 8014b16:	f383 8811 	msr	BASEPRI, r3
 8014b1a:	f3bf 8f6f 	isb	sy
 8014b1e:	f3bf 8f4f 	dsb	sy
 8014b22:	b662      	cpsie	i
 8014b24:	60fb      	str	r3, [r7, #12]
}
 8014b26:	bf00      	nop
 8014b28:	bf00      	nop
 8014b2a:	e7fd      	b.n	8014b28 <prvTaskExitError+0x2c>
	__asm volatile
 8014b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b30:	b672      	cpsid	i
 8014b32:	f383 8811 	msr	BASEPRI, r3
 8014b36:	f3bf 8f6f 	isb	sy
 8014b3a:	f3bf 8f4f 	dsb	sy
 8014b3e:	b662      	cpsie	i
 8014b40:	60bb      	str	r3, [r7, #8]
}
 8014b42:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014b44:	bf00      	nop
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d0fc      	beq.n	8014b46 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014b4c:	bf00      	nop
 8014b4e:	bf00      	nop
 8014b50:	3714      	adds	r7, #20
 8014b52:	46bd      	mov	sp, r7
 8014b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b58:	4770      	bx	lr
 8014b5a:	bf00      	nop
 8014b5c:	20000078 	.word	0x20000078

08014b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014b60:	4b07      	ldr	r3, [pc, #28]	@ (8014b80 <pxCurrentTCBConst2>)
 8014b62:	6819      	ldr	r1, [r3, #0]
 8014b64:	6808      	ldr	r0, [r1, #0]
 8014b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b6a:	f380 8809 	msr	PSP, r0
 8014b6e:	f3bf 8f6f 	isb	sy
 8014b72:	f04f 0000 	mov.w	r0, #0
 8014b76:	f380 8811 	msr	BASEPRI, r0
 8014b7a:	4770      	bx	lr
 8014b7c:	f3af 8000 	nop.w

08014b80 <pxCurrentTCBConst2>:
 8014b80:	200063c0 	.word	0x200063c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014b84:	bf00      	nop
 8014b86:	bf00      	nop

08014b88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014b88:	4808      	ldr	r0, [pc, #32]	@ (8014bac <prvPortStartFirstTask+0x24>)
 8014b8a:	6800      	ldr	r0, [r0, #0]
 8014b8c:	6800      	ldr	r0, [r0, #0]
 8014b8e:	f380 8808 	msr	MSP, r0
 8014b92:	f04f 0000 	mov.w	r0, #0
 8014b96:	f380 8814 	msr	CONTROL, r0
 8014b9a:	b662      	cpsie	i
 8014b9c:	b661      	cpsie	f
 8014b9e:	f3bf 8f4f 	dsb	sy
 8014ba2:	f3bf 8f6f 	isb	sy
 8014ba6:	df00      	svc	0
 8014ba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014baa:	bf00      	nop
 8014bac:	e000ed08 	.word	0xe000ed08

08014bb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014bb0:	b580      	push	{r7, lr}
 8014bb2:	b084      	sub	sp, #16
 8014bb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014bb6:	4b37      	ldr	r3, [pc, #220]	@ (8014c94 <xPortStartScheduler+0xe4>)
 8014bb8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	781b      	ldrb	r3, [r3, #0]
 8014bbe:	b2db      	uxtb	r3, r3
 8014bc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	22ff      	movs	r2, #255	@ 0xff
 8014bc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	781b      	ldrb	r3, [r3, #0]
 8014bcc:	b2db      	uxtb	r3, r3
 8014bce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014bd0:	78fb      	ldrb	r3, [r7, #3]
 8014bd2:	b2db      	uxtb	r3, r3
 8014bd4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8014bd8:	b2da      	uxtb	r2, r3
 8014bda:	4b2f      	ldr	r3, [pc, #188]	@ (8014c98 <xPortStartScheduler+0xe8>)
 8014bdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014bde:	4b2f      	ldr	r3, [pc, #188]	@ (8014c9c <xPortStartScheduler+0xec>)
 8014be0:	2207      	movs	r2, #7
 8014be2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014be4:	e009      	b.n	8014bfa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8014be6:	4b2d      	ldr	r3, [pc, #180]	@ (8014c9c <xPortStartScheduler+0xec>)
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	3b01      	subs	r3, #1
 8014bec:	4a2b      	ldr	r2, [pc, #172]	@ (8014c9c <xPortStartScheduler+0xec>)
 8014bee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014bf0:	78fb      	ldrb	r3, [r7, #3]
 8014bf2:	b2db      	uxtb	r3, r3
 8014bf4:	005b      	lsls	r3, r3, #1
 8014bf6:	b2db      	uxtb	r3, r3
 8014bf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014bfa:	78fb      	ldrb	r3, [r7, #3]
 8014bfc:	b2db      	uxtb	r3, r3
 8014bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014c02:	2b80      	cmp	r3, #128	@ 0x80
 8014c04:	d0ef      	beq.n	8014be6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014c06:	4b25      	ldr	r3, [pc, #148]	@ (8014c9c <xPortStartScheduler+0xec>)
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	f1c3 0307 	rsb	r3, r3, #7
 8014c0e:	2b04      	cmp	r3, #4
 8014c10:	d00d      	beq.n	8014c2e <xPortStartScheduler+0x7e>
	__asm volatile
 8014c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c16:	b672      	cpsid	i
 8014c18:	f383 8811 	msr	BASEPRI, r3
 8014c1c:	f3bf 8f6f 	isb	sy
 8014c20:	f3bf 8f4f 	dsb	sy
 8014c24:	b662      	cpsie	i
 8014c26:	60bb      	str	r3, [r7, #8]
}
 8014c28:	bf00      	nop
 8014c2a:	bf00      	nop
 8014c2c:	e7fd      	b.n	8014c2a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014c2e:	4b1b      	ldr	r3, [pc, #108]	@ (8014c9c <xPortStartScheduler+0xec>)
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	021b      	lsls	r3, r3, #8
 8014c34:	4a19      	ldr	r2, [pc, #100]	@ (8014c9c <xPortStartScheduler+0xec>)
 8014c36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014c38:	4b18      	ldr	r3, [pc, #96]	@ (8014c9c <xPortStartScheduler+0xec>)
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8014c40:	4a16      	ldr	r2, [pc, #88]	@ (8014c9c <xPortStartScheduler+0xec>)
 8014c42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	b2da      	uxtb	r2, r3
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014c4c:	4b14      	ldr	r3, [pc, #80]	@ (8014ca0 <xPortStartScheduler+0xf0>)
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	4a13      	ldr	r2, [pc, #76]	@ (8014ca0 <xPortStartScheduler+0xf0>)
 8014c52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8014c56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014c58:	4b11      	ldr	r3, [pc, #68]	@ (8014ca0 <xPortStartScheduler+0xf0>)
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	4a10      	ldr	r2, [pc, #64]	@ (8014ca0 <xPortStartScheduler+0xf0>)
 8014c5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8014c62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014c64:	f000 f8dc 	bl	8014e20 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014c68:	4b0e      	ldr	r3, [pc, #56]	@ (8014ca4 <xPortStartScheduler+0xf4>)
 8014c6a:	2200      	movs	r2, #0
 8014c6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014c6e:	f000 f8fb 	bl	8014e68 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014c72:	4b0d      	ldr	r3, [pc, #52]	@ (8014ca8 <xPortStartScheduler+0xf8>)
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	4a0c      	ldr	r2, [pc, #48]	@ (8014ca8 <xPortStartScheduler+0xf8>)
 8014c78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8014c7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014c7e:	f7ff ff83 	bl	8014b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014c82:	f7ff f971 	bl	8013f68 <vTaskSwitchContext>
	prvTaskExitError();
 8014c86:	f7ff ff39 	bl	8014afc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014c8a:	2300      	movs	r3, #0
}
 8014c8c:	4618      	mov	r0, r3
 8014c8e:	3710      	adds	r7, #16
 8014c90:	46bd      	mov	sp, r7
 8014c92:	bd80      	pop	{r7, pc}
 8014c94:	e000e400 	.word	0xe000e400
 8014c98:	20006558 	.word	0x20006558
 8014c9c:	2000655c 	.word	0x2000655c
 8014ca0:	e000ed20 	.word	0xe000ed20
 8014ca4:	20000078 	.word	0x20000078
 8014ca8:	e000ef34 	.word	0xe000ef34

08014cac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014cac:	b480      	push	{r7}
 8014cae:	b083      	sub	sp, #12
 8014cb0:	af00      	add	r7, sp, #0
	__asm volatile
 8014cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014cb6:	b672      	cpsid	i
 8014cb8:	f383 8811 	msr	BASEPRI, r3
 8014cbc:	f3bf 8f6f 	isb	sy
 8014cc0:	f3bf 8f4f 	dsb	sy
 8014cc4:	b662      	cpsie	i
 8014cc6:	607b      	str	r3, [r7, #4]
}
 8014cc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014cca:	4b11      	ldr	r3, [pc, #68]	@ (8014d10 <vPortEnterCritical+0x64>)
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	3301      	adds	r3, #1
 8014cd0:	4a0f      	ldr	r2, [pc, #60]	@ (8014d10 <vPortEnterCritical+0x64>)
 8014cd2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8014d10 <vPortEnterCritical+0x64>)
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	2b01      	cmp	r3, #1
 8014cda:	d112      	bne.n	8014d02 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8014d14 <vPortEnterCritical+0x68>)
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	b2db      	uxtb	r3, r3
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d00d      	beq.n	8014d02 <vPortEnterCritical+0x56>
	__asm volatile
 8014ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014cea:	b672      	cpsid	i
 8014cec:	f383 8811 	msr	BASEPRI, r3
 8014cf0:	f3bf 8f6f 	isb	sy
 8014cf4:	f3bf 8f4f 	dsb	sy
 8014cf8:	b662      	cpsie	i
 8014cfa:	603b      	str	r3, [r7, #0]
}
 8014cfc:	bf00      	nop
 8014cfe:	bf00      	nop
 8014d00:	e7fd      	b.n	8014cfe <vPortEnterCritical+0x52>
	}
}
 8014d02:	bf00      	nop
 8014d04:	370c      	adds	r7, #12
 8014d06:	46bd      	mov	sp, r7
 8014d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d0c:	4770      	bx	lr
 8014d0e:	bf00      	nop
 8014d10:	20000078 	.word	0x20000078
 8014d14:	e000ed04 	.word	0xe000ed04

08014d18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014d18:	b480      	push	{r7}
 8014d1a:	b083      	sub	sp, #12
 8014d1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014d1e:	4b13      	ldr	r3, [pc, #76]	@ (8014d6c <vPortExitCritical+0x54>)
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d10d      	bne.n	8014d42 <vPortExitCritical+0x2a>
	__asm volatile
 8014d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d2a:	b672      	cpsid	i
 8014d2c:	f383 8811 	msr	BASEPRI, r3
 8014d30:	f3bf 8f6f 	isb	sy
 8014d34:	f3bf 8f4f 	dsb	sy
 8014d38:	b662      	cpsie	i
 8014d3a:	607b      	str	r3, [r7, #4]
}
 8014d3c:	bf00      	nop
 8014d3e:	bf00      	nop
 8014d40:	e7fd      	b.n	8014d3e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8014d42:	4b0a      	ldr	r3, [pc, #40]	@ (8014d6c <vPortExitCritical+0x54>)
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	3b01      	subs	r3, #1
 8014d48:	4a08      	ldr	r2, [pc, #32]	@ (8014d6c <vPortExitCritical+0x54>)
 8014d4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014d4c:	4b07      	ldr	r3, [pc, #28]	@ (8014d6c <vPortExitCritical+0x54>)
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d105      	bne.n	8014d60 <vPortExitCritical+0x48>
 8014d54:	2300      	movs	r3, #0
 8014d56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014d58:	683b      	ldr	r3, [r7, #0]
 8014d5a:	f383 8811 	msr	BASEPRI, r3
}
 8014d5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014d60:	bf00      	nop
 8014d62:	370c      	adds	r7, #12
 8014d64:	46bd      	mov	sp, r7
 8014d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d6a:	4770      	bx	lr
 8014d6c:	20000078 	.word	0x20000078

08014d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014d70:	f3ef 8009 	mrs	r0, PSP
 8014d74:	f3bf 8f6f 	isb	sy
 8014d78:	4b15      	ldr	r3, [pc, #84]	@ (8014dd0 <pxCurrentTCBConst>)
 8014d7a:	681a      	ldr	r2, [r3, #0]
 8014d7c:	f01e 0f10 	tst.w	lr, #16
 8014d80:	bf08      	it	eq
 8014d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d8a:	6010      	str	r0, [r2, #0]
 8014d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014d90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8014d94:	b672      	cpsid	i
 8014d96:	f380 8811 	msr	BASEPRI, r0
 8014d9a:	f3bf 8f4f 	dsb	sy
 8014d9e:	f3bf 8f6f 	isb	sy
 8014da2:	b662      	cpsie	i
 8014da4:	f7ff f8e0 	bl	8013f68 <vTaskSwitchContext>
 8014da8:	f04f 0000 	mov.w	r0, #0
 8014dac:	f380 8811 	msr	BASEPRI, r0
 8014db0:	bc09      	pop	{r0, r3}
 8014db2:	6819      	ldr	r1, [r3, #0]
 8014db4:	6808      	ldr	r0, [r1, #0]
 8014db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dba:	f01e 0f10 	tst.w	lr, #16
 8014dbe:	bf08      	it	eq
 8014dc0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014dc4:	f380 8809 	msr	PSP, r0
 8014dc8:	f3bf 8f6f 	isb	sy
 8014dcc:	4770      	bx	lr
 8014dce:	bf00      	nop

08014dd0 <pxCurrentTCBConst>:
 8014dd0:	200063c0 	.word	0x200063c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014dd4:	bf00      	nop
 8014dd6:	bf00      	nop

08014dd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b082      	sub	sp, #8
 8014ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8014dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014de2:	b672      	cpsid	i
 8014de4:	f383 8811 	msr	BASEPRI, r3
 8014de8:	f3bf 8f6f 	isb	sy
 8014dec:	f3bf 8f4f 	dsb	sy
 8014df0:	b662      	cpsie	i
 8014df2:	607b      	str	r3, [r7, #4]
}
 8014df4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014df6:	f7fe fffb 	bl	8013df0 <xTaskIncrementTick>
 8014dfa:	4603      	mov	r3, r0
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d003      	beq.n	8014e08 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014e00:	4b06      	ldr	r3, [pc, #24]	@ (8014e1c <SysTick_Handler+0x44>)
 8014e02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014e06:	601a      	str	r2, [r3, #0]
 8014e08:	2300      	movs	r3, #0
 8014e0a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014e0c:	683b      	ldr	r3, [r7, #0]
 8014e0e:	f383 8811 	msr	BASEPRI, r3
}
 8014e12:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014e14:	bf00      	nop
 8014e16:	3708      	adds	r7, #8
 8014e18:	46bd      	mov	sp, r7
 8014e1a:	bd80      	pop	{r7, pc}
 8014e1c:	e000ed04 	.word	0xe000ed04

08014e20 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014e20:	b480      	push	{r7}
 8014e22:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014e24:	4b0b      	ldr	r3, [pc, #44]	@ (8014e54 <vPortSetupTimerInterrupt+0x34>)
 8014e26:	2200      	movs	r2, #0
 8014e28:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8014e58 <vPortSetupTimerInterrupt+0x38>)
 8014e2c:	2200      	movs	r2, #0
 8014e2e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014e30:	4b0a      	ldr	r3, [pc, #40]	@ (8014e5c <vPortSetupTimerInterrupt+0x3c>)
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	4a0a      	ldr	r2, [pc, #40]	@ (8014e60 <vPortSetupTimerInterrupt+0x40>)
 8014e36:	fba2 2303 	umull	r2, r3, r2, r3
 8014e3a:	099b      	lsrs	r3, r3, #6
 8014e3c:	4a09      	ldr	r2, [pc, #36]	@ (8014e64 <vPortSetupTimerInterrupt+0x44>)
 8014e3e:	3b01      	subs	r3, #1
 8014e40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014e42:	4b04      	ldr	r3, [pc, #16]	@ (8014e54 <vPortSetupTimerInterrupt+0x34>)
 8014e44:	2207      	movs	r2, #7
 8014e46:	601a      	str	r2, [r3, #0]
}
 8014e48:	bf00      	nop
 8014e4a:	46bd      	mov	sp, r7
 8014e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e50:	4770      	bx	lr
 8014e52:	bf00      	nop
 8014e54:	e000e010 	.word	0xe000e010
 8014e58:	e000e018 	.word	0xe000e018
 8014e5c:	20000054 	.word	0x20000054
 8014e60:	10624dd3 	.word	0x10624dd3
 8014e64:	e000e014 	.word	0xe000e014

08014e68 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014e68:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8014e78 <vPortEnableVFP+0x10>
 8014e6c:	6801      	ldr	r1, [r0, #0]
 8014e6e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8014e72:	6001      	str	r1, [r0, #0]
 8014e74:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014e76:	bf00      	nop
 8014e78:	e000ed88 	.word	0xe000ed88

08014e7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014e7c:	b480      	push	{r7}
 8014e7e:	b085      	sub	sp, #20
 8014e80:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014e82:	f3ef 8305 	mrs	r3, IPSR
 8014e86:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	2b0f      	cmp	r3, #15
 8014e8c:	d917      	bls.n	8014ebe <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014e8e:	4a1a      	ldr	r2, [pc, #104]	@ (8014ef8 <vPortValidateInterruptPriority+0x7c>)
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	4413      	add	r3, r2
 8014e94:	781b      	ldrb	r3, [r3, #0]
 8014e96:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014e98:	4b18      	ldr	r3, [pc, #96]	@ (8014efc <vPortValidateInterruptPriority+0x80>)
 8014e9a:	781b      	ldrb	r3, [r3, #0]
 8014e9c:	7afa      	ldrb	r2, [r7, #11]
 8014e9e:	429a      	cmp	r2, r3
 8014ea0:	d20d      	bcs.n	8014ebe <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8014ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ea6:	b672      	cpsid	i
 8014ea8:	f383 8811 	msr	BASEPRI, r3
 8014eac:	f3bf 8f6f 	isb	sy
 8014eb0:	f3bf 8f4f 	dsb	sy
 8014eb4:	b662      	cpsie	i
 8014eb6:	607b      	str	r3, [r7, #4]
}
 8014eb8:	bf00      	nop
 8014eba:	bf00      	nop
 8014ebc:	e7fd      	b.n	8014eba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014ebe:	4b10      	ldr	r3, [pc, #64]	@ (8014f00 <vPortValidateInterruptPriority+0x84>)
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8014ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8014f04 <vPortValidateInterruptPriority+0x88>)
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	429a      	cmp	r2, r3
 8014ecc:	d90d      	bls.n	8014eea <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8014ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ed2:	b672      	cpsid	i
 8014ed4:	f383 8811 	msr	BASEPRI, r3
 8014ed8:	f3bf 8f6f 	isb	sy
 8014edc:	f3bf 8f4f 	dsb	sy
 8014ee0:	b662      	cpsie	i
 8014ee2:	603b      	str	r3, [r7, #0]
}
 8014ee4:	bf00      	nop
 8014ee6:	bf00      	nop
 8014ee8:	e7fd      	b.n	8014ee6 <vPortValidateInterruptPriority+0x6a>
	}
 8014eea:	bf00      	nop
 8014eec:	3714      	adds	r7, #20
 8014eee:	46bd      	mov	sp, r7
 8014ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef4:	4770      	bx	lr
 8014ef6:	bf00      	nop
 8014ef8:	e000e3f0 	.word	0xe000e3f0
 8014efc:	20006558 	.word	0x20006558
 8014f00:	e000ed0c 	.word	0xe000ed0c
 8014f04:	2000655c 	.word	0x2000655c

08014f08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b08a      	sub	sp, #40	@ 0x28
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014f10:	2300      	movs	r3, #0
 8014f12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014f14:	f7fe feae 	bl	8013c74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014f18:	4b5d      	ldr	r3, [pc, #372]	@ (8015090 <pvPortMalloc+0x188>)
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d101      	bne.n	8014f24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014f20:	f000 f920 	bl	8015164 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014f24:	4b5b      	ldr	r3, [pc, #364]	@ (8015094 <pvPortMalloc+0x18c>)
 8014f26:	681a      	ldr	r2, [r3, #0]
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	4013      	ands	r3, r2
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	f040 8094 	bne.w	801505a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d020      	beq.n	8014f7a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8014f38:	2208      	movs	r2, #8
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	4413      	add	r3, r2
 8014f3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	f003 0307 	and.w	r3, r3, #7
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d017      	beq.n	8014f7a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	f023 0307 	bic.w	r3, r3, #7
 8014f50:	3308      	adds	r3, #8
 8014f52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	f003 0307 	and.w	r3, r3, #7
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d00d      	beq.n	8014f7a <pvPortMalloc+0x72>
	__asm volatile
 8014f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f62:	b672      	cpsid	i
 8014f64:	f383 8811 	msr	BASEPRI, r3
 8014f68:	f3bf 8f6f 	isb	sy
 8014f6c:	f3bf 8f4f 	dsb	sy
 8014f70:	b662      	cpsie	i
 8014f72:	617b      	str	r3, [r7, #20]
}
 8014f74:	bf00      	nop
 8014f76:	bf00      	nop
 8014f78:	e7fd      	b.n	8014f76 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d06c      	beq.n	801505a <pvPortMalloc+0x152>
 8014f80:	4b45      	ldr	r3, [pc, #276]	@ (8015098 <pvPortMalloc+0x190>)
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	687a      	ldr	r2, [r7, #4]
 8014f86:	429a      	cmp	r2, r3
 8014f88:	d867      	bhi.n	801505a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014f8a:	4b44      	ldr	r3, [pc, #272]	@ (801509c <pvPortMalloc+0x194>)
 8014f8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014f8e:	4b43      	ldr	r3, [pc, #268]	@ (801509c <pvPortMalloc+0x194>)
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014f94:	e004      	b.n	8014fa0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8014f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fa2:	685b      	ldr	r3, [r3, #4]
 8014fa4:	687a      	ldr	r2, [r7, #4]
 8014fa6:	429a      	cmp	r2, r3
 8014fa8:	d903      	bls.n	8014fb2 <pvPortMalloc+0xaa>
 8014faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d1f1      	bne.n	8014f96 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014fb2:	4b37      	ldr	r3, [pc, #220]	@ (8015090 <pvPortMalloc+0x188>)
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014fb8:	429a      	cmp	r2, r3
 8014fba:	d04e      	beq.n	801505a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014fbc:	6a3b      	ldr	r3, [r7, #32]
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	2208      	movs	r2, #8
 8014fc2:	4413      	add	r3, r2
 8014fc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fc8:	681a      	ldr	r2, [r3, #0]
 8014fca:	6a3b      	ldr	r3, [r7, #32]
 8014fcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fd0:	685a      	ldr	r2, [r3, #4]
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	1ad2      	subs	r2, r2, r3
 8014fd6:	2308      	movs	r3, #8
 8014fd8:	005b      	lsls	r3, r3, #1
 8014fda:	429a      	cmp	r2, r3
 8014fdc:	d922      	bls.n	8015024 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	4413      	add	r3, r2
 8014fe4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014fe6:	69bb      	ldr	r3, [r7, #24]
 8014fe8:	f003 0307 	and.w	r3, r3, #7
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d00d      	beq.n	801500c <pvPortMalloc+0x104>
	__asm volatile
 8014ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ff4:	b672      	cpsid	i
 8014ff6:	f383 8811 	msr	BASEPRI, r3
 8014ffa:	f3bf 8f6f 	isb	sy
 8014ffe:	f3bf 8f4f 	dsb	sy
 8015002:	b662      	cpsie	i
 8015004:	613b      	str	r3, [r7, #16]
}
 8015006:	bf00      	nop
 8015008:	bf00      	nop
 801500a:	e7fd      	b.n	8015008 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801500c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801500e:	685a      	ldr	r2, [r3, #4]
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	1ad2      	subs	r2, r2, r3
 8015014:	69bb      	ldr	r3, [r7, #24]
 8015016:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801501a:	687a      	ldr	r2, [r7, #4]
 801501c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801501e:	69b8      	ldr	r0, [r7, #24]
 8015020:	f000 f902 	bl	8015228 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015024:	4b1c      	ldr	r3, [pc, #112]	@ (8015098 <pvPortMalloc+0x190>)
 8015026:	681a      	ldr	r2, [r3, #0]
 8015028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801502a:	685b      	ldr	r3, [r3, #4]
 801502c:	1ad3      	subs	r3, r2, r3
 801502e:	4a1a      	ldr	r2, [pc, #104]	@ (8015098 <pvPortMalloc+0x190>)
 8015030:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015032:	4b19      	ldr	r3, [pc, #100]	@ (8015098 <pvPortMalloc+0x190>)
 8015034:	681a      	ldr	r2, [r3, #0]
 8015036:	4b1a      	ldr	r3, [pc, #104]	@ (80150a0 <pvPortMalloc+0x198>)
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	429a      	cmp	r2, r3
 801503c:	d203      	bcs.n	8015046 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801503e:	4b16      	ldr	r3, [pc, #88]	@ (8015098 <pvPortMalloc+0x190>)
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	4a17      	ldr	r2, [pc, #92]	@ (80150a0 <pvPortMalloc+0x198>)
 8015044:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015048:	685a      	ldr	r2, [r3, #4]
 801504a:	4b12      	ldr	r3, [pc, #72]	@ (8015094 <pvPortMalloc+0x18c>)
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	431a      	orrs	r2, r3
 8015050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015052:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015056:	2200      	movs	r2, #0
 8015058:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801505a:	f7fe fe19 	bl	8013c90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801505e:	69fb      	ldr	r3, [r7, #28]
 8015060:	f003 0307 	and.w	r3, r3, #7
 8015064:	2b00      	cmp	r3, #0
 8015066:	d00d      	beq.n	8015084 <pvPortMalloc+0x17c>
	__asm volatile
 8015068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801506c:	b672      	cpsid	i
 801506e:	f383 8811 	msr	BASEPRI, r3
 8015072:	f3bf 8f6f 	isb	sy
 8015076:	f3bf 8f4f 	dsb	sy
 801507a:	b662      	cpsie	i
 801507c:	60fb      	str	r3, [r7, #12]
}
 801507e:	bf00      	nop
 8015080:	bf00      	nop
 8015082:	e7fd      	b.n	8015080 <pvPortMalloc+0x178>
	return pvReturn;
 8015084:	69fb      	ldr	r3, [r7, #28]
}
 8015086:	4618      	mov	r0, r3
 8015088:	3728      	adds	r7, #40	@ 0x28
 801508a:	46bd      	mov	sp, r7
 801508c:	bd80      	pop	{r7, pc}
 801508e:	bf00      	nop
 8015090:	2000e568 	.word	0x2000e568
 8015094:	2000e574 	.word	0x2000e574
 8015098:	2000e56c 	.word	0x2000e56c
 801509c:	2000e560 	.word	0x2000e560
 80150a0:	2000e570 	.word	0x2000e570

080150a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80150a4:	b580      	push	{r7, lr}
 80150a6:	b086      	sub	sp, #24
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d04e      	beq.n	8015154 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80150b6:	2308      	movs	r3, #8
 80150b8:	425b      	negs	r3, r3
 80150ba:	697a      	ldr	r2, [r7, #20]
 80150bc:	4413      	add	r3, r2
 80150be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80150c0:	697b      	ldr	r3, [r7, #20]
 80150c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80150c4:	693b      	ldr	r3, [r7, #16]
 80150c6:	685a      	ldr	r2, [r3, #4]
 80150c8:	4b24      	ldr	r3, [pc, #144]	@ (801515c <vPortFree+0xb8>)
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	4013      	ands	r3, r2
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d10d      	bne.n	80150ee <vPortFree+0x4a>
	__asm volatile
 80150d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150d6:	b672      	cpsid	i
 80150d8:	f383 8811 	msr	BASEPRI, r3
 80150dc:	f3bf 8f6f 	isb	sy
 80150e0:	f3bf 8f4f 	dsb	sy
 80150e4:	b662      	cpsie	i
 80150e6:	60fb      	str	r3, [r7, #12]
}
 80150e8:	bf00      	nop
 80150ea:	bf00      	nop
 80150ec:	e7fd      	b.n	80150ea <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80150ee:	693b      	ldr	r3, [r7, #16]
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d00d      	beq.n	8015112 <vPortFree+0x6e>
	__asm volatile
 80150f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150fa:	b672      	cpsid	i
 80150fc:	f383 8811 	msr	BASEPRI, r3
 8015100:	f3bf 8f6f 	isb	sy
 8015104:	f3bf 8f4f 	dsb	sy
 8015108:	b662      	cpsie	i
 801510a:	60bb      	str	r3, [r7, #8]
}
 801510c:	bf00      	nop
 801510e:	bf00      	nop
 8015110:	e7fd      	b.n	801510e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015112:	693b      	ldr	r3, [r7, #16]
 8015114:	685a      	ldr	r2, [r3, #4]
 8015116:	4b11      	ldr	r3, [pc, #68]	@ (801515c <vPortFree+0xb8>)
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	4013      	ands	r3, r2
 801511c:	2b00      	cmp	r3, #0
 801511e:	d019      	beq.n	8015154 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015120:	693b      	ldr	r3, [r7, #16]
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	2b00      	cmp	r3, #0
 8015126:	d115      	bne.n	8015154 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015128:	693b      	ldr	r3, [r7, #16]
 801512a:	685a      	ldr	r2, [r3, #4]
 801512c:	4b0b      	ldr	r3, [pc, #44]	@ (801515c <vPortFree+0xb8>)
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	43db      	mvns	r3, r3
 8015132:	401a      	ands	r2, r3
 8015134:	693b      	ldr	r3, [r7, #16]
 8015136:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015138:	f7fe fd9c 	bl	8013c74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801513c:	693b      	ldr	r3, [r7, #16]
 801513e:	685a      	ldr	r2, [r3, #4]
 8015140:	4b07      	ldr	r3, [pc, #28]	@ (8015160 <vPortFree+0xbc>)
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	4413      	add	r3, r2
 8015146:	4a06      	ldr	r2, [pc, #24]	@ (8015160 <vPortFree+0xbc>)
 8015148:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801514a:	6938      	ldr	r0, [r7, #16]
 801514c:	f000 f86c 	bl	8015228 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8015150:	f7fe fd9e 	bl	8013c90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015154:	bf00      	nop
 8015156:	3718      	adds	r7, #24
 8015158:	46bd      	mov	sp, r7
 801515a:	bd80      	pop	{r7, pc}
 801515c:	2000e574 	.word	0x2000e574
 8015160:	2000e56c 	.word	0x2000e56c

08015164 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015164:	b480      	push	{r7}
 8015166:	b085      	sub	sp, #20
 8015168:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801516a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801516e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015170:	4b27      	ldr	r3, [pc, #156]	@ (8015210 <prvHeapInit+0xac>)
 8015172:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	f003 0307 	and.w	r3, r3, #7
 801517a:	2b00      	cmp	r3, #0
 801517c:	d00c      	beq.n	8015198 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	3307      	adds	r3, #7
 8015182:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	f023 0307 	bic.w	r3, r3, #7
 801518a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801518c:	68ba      	ldr	r2, [r7, #8]
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	1ad3      	subs	r3, r2, r3
 8015192:	4a1f      	ldr	r2, [pc, #124]	@ (8015210 <prvHeapInit+0xac>)
 8015194:	4413      	add	r3, r2
 8015196:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801519c:	4a1d      	ldr	r2, [pc, #116]	@ (8015214 <prvHeapInit+0xb0>)
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80151a2:	4b1c      	ldr	r3, [pc, #112]	@ (8015214 <prvHeapInit+0xb0>)
 80151a4:	2200      	movs	r2, #0
 80151a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	68ba      	ldr	r2, [r7, #8]
 80151ac:	4413      	add	r3, r2
 80151ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80151b0:	2208      	movs	r2, #8
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	1a9b      	subs	r3, r3, r2
 80151b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	f023 0307 	bic.w	r3, r3, #7
 80151be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	4a15      	ldr	r2, [pc, #84]	@ (8015218 <prvHeapInit+0xb4>)
 80151c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80151c6:	4b14      	ldr	r3, [pc, #80]	@ (8015218 <prvHeapInit+0xb4>)
 80151c8:	681b      	ldr	r3, [r3, #0]
 80151ca:	2200      	movs	r2, #0
 80151cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80151ce:	4b12      	ldr	r3, [pc, #72]	@ (8015218 <prvHeapInit+0xb4>)
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	2200      	movs	r2, #0
 80151d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80151da:	683b      	ldr	r3, [r7, #0]
 80151dc:	68fa      	ldr	r2, [r7, #12]
 80151de:	1ad2      	subs	r2, r2, r3
 80151e0:	683b      	ldr	r3, [r7, #0]
 80151e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80151e4:	4b0c      	ldr	r3, [pc, #48]	@ (8015218 <prvHeapInit+0xb4>)
 80151e6:	681a      	ldr	r2, [r3, #0]
 80151e8:	683b      	ldr	r3, [r7, #0]
 80151ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80151ec:	683b      	ldr	r3, [r7, #0]
 80151ee:	685b      	ldr	r3, [r3, #4]
 80151f0:	4a0a      	ldr	r2, [pc, #40]	@ (801521c <prvHeapInit+0xb8>)
 80151f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80151f4:	683b      	ldr	r3, [r7, #0]
 80151f6:	685b      	ldr	r3, [r3, #4]
 80151f8:	4a09      	ldr	r2, [pc, #36]	@ (8015220 <prvHeapInit+0xbc>)
 80151fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80151fc:	4b09      	ldr	r3, [pc, #36]	@ (8015224 <prvHeapInit+0xc0>)
 80151fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8015202:	601a      	str	r2, [r3, #0]
}
 8015204:	bf00      	nop
 8015206:	3714      	adds	r7, #20
 8015208:	46bd      	mov	sp, r7
 801520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801520e:	4770      	bx	lr
 8015210:	20006560 	.word	0x20006560
 8015214:	2000e560 	.word	0x2000e560
 8015218:	2000e568 	.word	0x2000e568
 801521c:	2000e570 	.word	0x2000e570
 8015220:	2000e56c 	.word	0x2000e56c
 8015224:	2000e574 	.word	0x2000e574

08015228 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015228:	b480      	push	{r7}
 801522a:	b085      	sub	sp, #20
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015230:	4b28      	ldr	r3, [pc, #160]	@ (80152d4 <prvInsertBlockIntoFreeList+0xac>)
 8015232:	60fb      	str	r3, [r7, #12]
 8015234:	e002      	b.n	801523c <prvInsertBlockIntoFreeList+0x14>
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	60fb      	str	r3, [r7, #12]
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	687a      	ldr	r2, [r7, #4]
 8015242:	429a      	cmp	r2, r3
 8015244:	d8f7      	bhi.n	8015236 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	685b      	ldr	r3, [r3, #4]
 801524e:	68ba      	ldr	r2, [r7, #8]
 8015250:	4413      	add	r3, r2
 8015252:	687a      	ldr	r2, [r7, #4]
 8015254:	429a      	cmp	r2, r3
 8015256:	d108      	bne.n	801526a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	685a      	ldr	r2, [r3, #4]
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	685b      	ldr	r3, [r3, #4]
 8015260:	441a      	add	r2, r3
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	685b      	ldr	r3, [r3, #4]
 8015272:	68ba      	ldr	r2, [r7, #8]
 8015274:	441a      	add	r2, r3
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	429a      	cmp	r2, r3
 801527c:	d118      	bne.n	80152b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	681a      	ldr	r2, [r3, #0]
 8015282:	4b15      	ldr	r3, [pc, #84]	@ (80152d8 <prvInsertBlockIntoFreeList+0xb0>)
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	429a      	cmp	r2, r3
 8015288:	d00d      	beq.n	80152a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	685a      	ldr	r2, [r3, #4]
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	685b      	ldr	r3, [r3, #4]
 8015294:	441a      	add	r2, r3
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	681a      	ldr	r2, [r3, #0]
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	601a      	str	r2, [r3, #0]
 80152a4:	e008      	b.n	80152b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80152a6:	4b0c      	ldr	r3, [pc, #48]	@ (80152d8 <prvInsertBlockIntoFreeList+0xb0>)
 80152a8:	681a      	ldr	r2, [r3, #0]
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	601a      	str	r2, [r3, #0]
 80152ae:	e003      	b.n	80152b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	681a      	ldr	r2, [r3, #0]
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80152b8:	68fa      	ldr	r2, [r7, #12]
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	429a      	cmp	r2, r3
 80152be:	d002      	beq.n	80152c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	687a      	ldr	r2, [r7, #4]
 80152c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80152c6:	bf00      	nop
 80152c8:	3714      	adds	r7, #20
 80152ca:	46bd      	mov	sp, r7
 80152cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d0:	4770      	bx	lr
 80152d2:	bf00      	nop
 80152d4:	2000e560 	.word	0x2000e560
 80152d8:	2000e568 	.word	0x2000e568

080152dc <atof>:
 80152dc:	2100      	movs	r1, #0
 80152de:	f000 be03 	b.w	8015ee8 <strtod>

080152e2 <sulp>:
 80152e2:	b570      	push	{r4, r5, r6, lr}
 80152e4:	4604      	mov	r4, r0
 80152e6:	460d      	mov	r5, r1
 80152e8:	ec45 4b10 	vmov	d0, r4, r5
 80152ec:	4616      	mov	r6, r2
 80152ee:	f002 f807 	bl	8017300 <__ulp>
 80152f2:	ec51 0b10 	vmov	r0, r1, d0
 80152f6:	b17e      	cbz	r6, 8015318 <sulp+0x36>
 80152f8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80152fc:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8015300:	2b00      	cmp	r3, #0
 8015302:	dd09      	ble.n	8015318 <sulp+0x36>
 8015304:	051b      	lsls	r3, r3, #20
 8015306:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801530a:	2400      	movs	r4, #0
 801530c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8015310:	4622      	mov	r2, r4
 8015312:	462b      	mov	r3, r5
 8015314:	f7eb f990 	bl	8000638 <__aeabi_dmul>
 8015318:	ec41 0b10 	vmov	d0, r0, r1
 801531c:	bd70      	pop	{r4, r5, r6, pc}
	...

08015320 <_strtod_l>:
 8015320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015324:	b09f      	sub	sp, #124	@ 0x7c
 8015326:	460c      	mov	r4, r1
 8015328:	9217      	str	r2, [sp, #92]	@ 0x5c
 801532a:	2200      	movs	r2, #0
 801532c:	921a      	str	r2, [sp, #104]	@ 0x68
 801532e:	9005      	str	r0, [sp, #20]
 8015330:	f04f 0a00 	mov.w	sl, #0
 8015334:	f04f 0b00 	mov.w	fp, #0
 8015338:	460a      	mov	r2, r1
 801533a:	9219      	str	r2, [sp, #100]	@ 0x64
 801533c:	7811      	ldrb	r1, [r2, #0]
 801533e:	292b      	cmp	r1, #43	@ 0x2b
 8015340:	d04a      	beq.n	80153d8 <_strtod_l+0xb8>
 8015342:	d838      	bhi.n	80153b6 <_strtod_l+0x96>
 8015344:	290d      	cmp	r1, #13
 8015346:	d832      	bhi.n	80153ae <_strtod_l+0x8e>
 8015348:	2908      	cmp	r1, #8
 801534a:	d832      	bhi.n	80153b2 <_strtod_l+0x92>
 801534c:	2900      	cmp	r1, #0
 801534e:	d03b      	beq.n	80153c8 <_strtod_l+0xa8>
 8015350:	2200      	movs	r2, #0
 8015352:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015354:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8015356:	782a      	ldrb	r2, [r5, #0]
 8015358:	2a30      	cmp	r2, #48	@ 0x30
 801535a:	f040 80b3 	bne.w	80154c4 <_strtod_l+0x1a4>
 801535e:	786a      	ldrb	r2, [r5, #1]
 8015360:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8015364:	2a58      	cmp	r2, #88	@ 0x58
 8015366:	d16e      	bne.n	8015446 <_strtod_l+0x126>
 8015368:	9302      	str	r3, [sp, #8]
 801536a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801536c:	9301      	str	r3, [sp, #4]
 801536e:	ab1a      	add	r3, sp, #104	@ 0x68
 8015370:	9300      	str	r3, [sp, #0]
 8015372:	4a8e      	ldr	r2, [pc, #568]	@ (80155ac <_strtod_l+0x28c>)
 8015374:	9805      	ldr	r0, [sp, #20]
 8015376:	ab1b      	add	r3, sp, #108	@ 0x6c
 8015378:	a919      	add	r1, sp, #100	@ 0x64
 801537a:	f001 f8bb 	bl	80164f4 <__gethex>
 801537e:	f010 060f 	ands.w	r6, r0, #15
 8015382:	4604      	mov	r4, r0
 8015384:	d005      	beq.n	8015392 <_strtod_l+0x72>
 8015386:	2e06      	cmp	r6, #6
 8015388:	d128      	bne.n	80153dc <_strtod_l+0xbc>
 801538a:	3501      	adds	r5, #1
 801538c:	2300      	movs	r3, #0
 801538e:	9519      	str	r5, [sp, #100]	@ 0x64
 8015390:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015392:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015394:	2b00      	cmp	r3, #0
 8015396:	f040 858e 	bne.w	8015eb6 <_strtod_l+0xb96>
 801539a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801539c:	b1cb      	cbz	r3, 80153d2 <_strtod_l+0xb2>
 801539e:	4652      	mov	r2, sl
 80153a0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80153a4:	ec43 2b10 	vmov	d0, r2, r3
 80153a8:	b01f      	add	sp, #124	@ 0x7c
 80153aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153ae:	2920      	cmp	r1, #32
 80153b0:	d1ce      	bne.n	8015350 <_strtod_l+0x30>
 80153b2:	3201      	adds	r2, #1
 80153b4:	e7c1      	b.n	801533a <_strtod_l+0x1a>
 80153b6:	292d      	cmp	r1, #45	@ 0x2d
 80153b8:	d1ca      	bne.n	8015350 <_strtod_l+0x30>
 80153ba:	2101      	movs	r1, #1
 80153bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80153be:	1c51      	adds	r1, r2, #1
 80153c0:	9119      	str	r1, [sp, #100]	@ 0x64
 80153c2:	7852      	ldrb	r2, [r2, #1]
 80153c4:	2a00      	cmp	r2, #0
 80153c6:	d1c5      	bne.n	8015354 <_strtod_l+0x34>
 80153c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80153ca:	9419      	str	r4, [sp, #100]	@ 0x64
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	f040 8570 	bne.w	8015eb2 <_strtod_l+0xb92>
 80153d2:	4652      	mov	r2, sl
 80153d4:	465b      	mov	r3, fp
 80153d6:	e7e5      	b.n	80153a4 <_strtod_l+0x84>
 80153d8:	2100      	movs	r1, #0
 80153da:	e7ef      	b.n	80153bc <_strtod_l+0x9c>
 80153dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80153de:	b13a      	cbz	r2, 80153f0 <_strtod_l+0xd0>
 80153e0:	2135      	movs	r1, #53	@ 0x35
 80153e2:	a81c      	add	r0, sp, #112	@ 0x70
 80153e4:	f002 f886 	bl	80174f4 <__copybits>
 80153e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80153ea:	9805      	ldr	r0, [sp, #20]
 80153ec:	f001 fc54 	bl	8016c98 <_Bfree>
 80153f0:	3e01      	subs	r6, #1
 80153f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80153f4:	2e04      	cmp	r6, #4
 80153f6:	d806      	bhi.n	8015406 <_strtod_l+0xe6>
 80153f8:	e8df f006 	tbb	[pc, r6]
 80153fc:	201d0314 	.word	0x201d0314
 8015400:	14          	.byte	0x14
 8015401:	00          	.byte	0x00
 8015402:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8015406:	05e1      	lsls	r1, r4, #23
 8015408:	bf48      	it	mi
 801540a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801540e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015412:	0d1b      	lsrs	r3, r3, #20
 8015414:	051b      	lsls	r3, r3, #20
 8015416:	2b00      	cmp	r3, #0
 8015418:	d1bb      	bne.n	8015392 <_strtod_l+0x72>
 801541a:	f000 ff6b 	bl	80162f4 <__errno>
 801541e:	2322      	movs	r3, #34	@ 0x22
 8015420:	6003      	str	r3, [r0, #0]
 8015422:	e7b6      	b.n	8015392 <_strtod_l+0x72>
 8015424:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8015428:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801542c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8015430:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015434:	e7e7      	b.n	8015406 <_strtod_l+0xe6>
 8015436:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80155b4 <_strtod_l+0x294>
 801543a:	e7e4      	b.n	8015406 <_strtod_l+0xe6>
 801543c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8015440:	f04f 3aff 	mov.w	sl, #4294967295
 8015444:	e7df      	b.n	8015406 <_strtod_l+0xe6>
 8015446:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015448:	1c5a      	adds	r2, r3, #1
 801544a:	9219      	str	r2, [sp, #100]	@ 0x64
 801544c:	785b      	ldrb	r3, [r3, #1]
 801544e:	2b30      	cmp	r3, #48	@ 0x30
 8015450:	d0f9      	beq.n	8015446 <_strtod_l+0x126>
 8015452:	2b00      	cmp	r3, #0
 8015454:	d09d      	beq.n	8015392 <_strtod_l+0x72>
 8015456:	2301      	movs	r3, #1
 8015458:	9309      	str	r3, [sp, #36]	@ 0x24
 801545a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801545c:	930c      	str	r3, [sp, #48]	@ 0x30
 801545e:	2300      	movs	r3, #0
 8015460:	9308      	str	r3, [sp, #32]
 8015462:	930a      	str	r3, [sp, #40]	@ 0x28
 8015464:	461f      	mov	r7, r3
 8015466:	220a      	movs	r2, #10
 8015468:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801546a:	7805      	ldrb	r5, [r0, #0]
 801546c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8015470:	b2d9      	uxtb	r1, r3
 8015472:	2909      	cmp	r1, #9
 8015474:	d928      	bls.n	80154c8 <_strtod_l+0x1a8>
 8015476:	494e      	ldr	r1, [pc, #312]	@ (80155b0 <_strtod_l+0x290>)
 8015478:	2201      	movs	r2, #1
 801547a:	f000 feba 	bl	80161f2 <strncmp>
 801547e:	2800      	cmp	r0, #0
 8015480:	d032      	beq.n	80154e8 <_strtod_l+0x1c8>
 8015482:	2000      	movs	r0, #0
 8015484:	462a      	mov	r2, r5
 8015486:	4681      	mov	r9, r0
 8015488:	463d      	mov	r5, r7
 801548a:	4603      	mov	r3, r0
 801548c:	2a65      	cmp	r2, #101	@ 0x65
 801548e:	d001      	beq.n	8015494 <_strtod_l+0x174>
 8015490:	2a45      	cmp	r2, #69	@ 0x45
 8015492:	d114      	bne.n	80154be <_strtod_l+0x19e>
 8015494:	b91d      	cbnz	r5, 801549e <_strtod_l+0x17e>
 8015496:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015498:	4302      	orrs	r2, r0
 801549a:	d095      	beq.n	80153c8 <_strtod_l+0xa8>
 801549c:	2500      	movs	r5, #0
 801549e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80154a0:	1c62      	adds	r2, r4, #1
 80154a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80154a4:	7862      	ldrb	r2, [r4, #1]
 80154a6:	2a2b      	cmp	r2, #43	@ 0x2b
 80154a8:	d077      	beq.n	801559a <_strtod_l+0x27a>
 80154aa:	2a2d      	cmp	r2, #45	@ 0x2d
 80154ac:	d07b      	beq.n	80155a6 <_strtod_l+0x286>
 80154ae:	f04f 0c00 	mov.w	ip, #0
 80154b2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80154b6:	2909      	cmp	r1, #9
 80154b8:	f240 8082 	bls.w	80155c0 <_strtod_l+0x2a0>
 80154bc:	9419      	str	r4, [sp, #100]	@ 0x64
 80154be:	f04f 0800 	mov.w	r8, #0
 80154c2:	e0a2      	b.n	801560a <_strtod_l+0x2ea>
 80154c4:	2300      	movs	r3, #0
 80154c6:	e7c7      	b.n	8015458 <_strtod_l+0x138>
 80154c8:	2f08      	cmp	r7, #8
 80154ca:	bfd5      	itete	le
 80154cc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80154ce:	9908      	ldrgt	r1, [sp, #32]
 80154d0:	fb02 3301 	mlale	r3, r2, r1, r3
 80154d4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80154d8:	f100 0001 	add.w	r0, r0, #1
 80154dc:	bfd4      	ite	le
 80154de:	930a      	strle	r3, [sp, #40]	@ 0x28
 80154e0:	9308      	strgt	r3, [sp, #32]
 80154e2:	3701      	adds	r7, #1
 80154e4:	9019      	str	r0, [sp, #100]	@ 0x64
 80154e6:	e7bf      	b.n	8015468 <_strtod_l+0x148>
 80154e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80154ea:	1c5a      	adds	r2, r3, #1
 80154ec:	9219      	str	r2, [sp, #100]	@ 0x64
 80154ee:	785a      	ldrb	r2, [r3, #1]
 80154f0:	b37f      	cbz	r7, 8015552 <_strtod_l+0x232>
 80154f2:	4681      	mov	r9, r0
 80154f4:	463d      	mov	r5, r7
 80154f6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80154fa:	2b09      	cmp	r3, #9
 80154fc:	d912      	bls.n	8015524 <_strtod_l+0x204>
 80154fe:	2301      	movs	r3, #1
 8015500:	e7c4      	b.n	801548c <_strtod_l+0x16c>
 8015502:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015504:	1c5a      	adds	r2, r3, #1
 8015506:	9219      	str	r2, [sp, #100]	@ 0x64
 8015508:	785a      	ldrb	r2, [r3, #1]
 801550a:	3001      	adds	r0, #1
 801550c:	2a30      	cmp	r2, #48	@ 0x30
 801550e:	d0f8      	beq.n	8015502 <_strtod_l+0x1e2>
 8015510:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8015514:	2b08      	cmp	r3, #8
 8015516:	f200 84d3 	bhi.w	8015ec0 <_strtod_l+0xba0>
 801551a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801551c:	930c      	str	r3, [sp, #48]	@ 0x30
 801551e:	4681      	mov	r9, r0
 8015520:	2000      	movs	r0, #0
 8015522:	4605      	mov	r5, r0
 8015524:	3a30      	subs	r2, #48	@ 0x30
 8015526:	f100 0301 	add.w	r3, r0, #1
 801552a:	d02a      	beq.n	8015582 <_strtod_l+0x262>
 801552c:	4499      	add	r9, r3
 801552e:	eb00 0c05 	add.w	ip, r0, r5
 8015532:	462b      	mov	r3, r5
 8015534:	210a      	movs	r1, #10
 8015536:	4563      	cmp	r3, ip
 8015538:	d10d      	bne.n	8015556 <_strtod_l+0x236>
 801553a:	1c69      	adds	r1, r5, #1
 801553c:	4401      	add	r1, r0
 801553e:	4428      	add	r0, r5
 8015540:	2808      	cmp	r0, #8
 8015542:	dc16      	bgt.n	8015572 <_strtod_l+0x252>
 8015544:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8015546:	230a      	movs	r3, #10
 8015548:	fb03 2300 	mla	r3, r3, r0, r2
 801554c:	930a      	str	r3, [sp, #40]	@ 0x28
 801554e:	2300      	movs	r3, #0
 8015550:	e018      	b.n	8015584 <_strtod_l+0x264>
 8015552:	4638      	mov	r0, r7
 8015554:	e7da      	b.n	801550c <_strtod_l+0x1ec>
 8015556:	2b08      	cmp	r3, #8
 8015558:	f103 0301 	add.w	r3, r3, #1
 801555c:	dc03      	bgt.n	8015566 <_strtod_l+0x246>
 801555e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8015560:	434e      	muls	r6, r1
 8015562:	960a      	str	r6, [sp, #40]	@ 0x28
 8015564:	e7e7      	b.n	8015536 <_strtod_l+0x216>
 8015566:	2b10      	cmp	r3, #16
 8015568:	bfde      	ittt	le
 801556a:	9e08      	ldrle	r6, [sp, #32]
 801556c:	434e      	mulle	r6, r1
 801556e:	9608      	strle	r6, [sp, #32]
 8015570:	e7e1      	b.n	8015536 <_strtod_l+0x216>
 8015572:	280f      	cmp	r0, #15
 8015574:	dceb      	bgt.n	801554e <_strtod_l+0x22e>
 8015576:	9808      	ldr	r0, [sp, #32]
 8015578:	230a      	movs	r3, #10
 801557a:	fb03 2300 	mla	r3, r3, r0, r2
 801557e:	9308      	str	r3, [sp, #32]
 8015580:	e7e5      	b.n	801554e <_strtod_l+0x22e>
 8015582:	4629      	mov	r1, r5
 8015584:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015586:	1c50      	adds	r0, r2, #1
 8015588:	9019      	str	r0, [sp, #100]	@ 0x64
 801558a:	7852      	ldrb	r2, [r2, #1]
 801558c:	4618      	mov	r0, r3
 801558e:	460d      	mov	r5, r1
 8015590:	e7b1      	b.n	80154f6 <_strtod_l+0x1d6>
 8015592:	f04f 0900 	mov.w	r9, #0
 8015596:	2301      	movs	r3, #1
 8015598:	e77d      	b.n	8015496 <_strtod_l+0x176>
 801559a:	f04f 0c00 	mov.w	ip, #0
 801559e:	1ca2      	adds	r2, r4, #2
 80155a0:	9219      	str	r2, [sp, #100]	@ 0x64
 80155a2:	78a2      	ldrb	r2, [r4, #2]
 80155a4:	e785      	b.n	80154b2 <_strtod_l+0x192>
 80155a6:	f04f 0c01 	mov.w	ip, #1
 80155aa:	e7f8      	b.n	801559e <_strtod_l+0x27e>
 80155ac:	08018d40 	.word	0x08018d40
 80155b0:	08018d1c 	.word	0x08018d1c
 80155b4:	7ff00000 	.word	0x7ff00000
 80155b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80155ba:	1c51      	adds	r1, r2, #1
 80155bc:	9119      	str	r1, [sp, #100]	@ 0x64
 80155be:	7852      	ldrb	r2, [r2, #1]
 80155c0:	2a30      	cmp	r2, #48	@ 0x30
 80155c2:	d0f9      	beq.n	80155b8 <_strtod_l+0x298>
 80155c4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80155c8:	2908      	cmp	r1, #8
 80155ca:	f63f af78 	bhi.w	80154be <_strtod_l+0x19e>
 80155ce:	3a30      	subs	r2, #48	@ 0x30
 80155d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80155d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80155d4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80155d6:	f04f 080a 	mov.w	r8, #10
 80155da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80155dc:	1c56      	adds	r6, r2, #1
 80155de:	9619      	str	r6, [sp, #100]	@ 0x64
 80155e0:	7852      	ldrb	r2, [r2, #1]
 80155e2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80155e6:	f1be 0f09 	cmp.w	lr, #9
 80155ea:	d939      	bls.n	8015660 <_strtod_l+0x340>
 80155ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80155ee:	1a76      	subs	r6, r6, r1
 80155f0:	2e08      	cmp	r6, #8
 80155f2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80155f6:	dc03      	bgt.n	8015600 <_strtod_l+0x2e0>
 80155f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80155fa:	4588      	cmp	r8, r1
 80155fc:	bfa8      	it	ge
 80155fe:	4688      	movge	r8, r1
 8015600:	f1bc 0f00 	cmp.w	ip, #0
 8015604:	d001      	beq.n	801560a <_strtod_l+0x2ea>
 8015606:	f1c8 0800 	rsb	r8, r8, #0
 801560a:	2d00      	cmp	r5, #0
 801560c:	d14e      	bne.n	80156ac <_strtod_l+0x38c>
 801560e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015610:	4308      	orrs	r0, r1
 8015612:	f47f aebe 	bne.w	8015392 <_strtod_l+0x72>
 8015616:	2b00      	cmp	r3, #0
 8015618:	f47f aed6 	bne.w	80153c8 <_strtod_l+0xa8>
 801561c:	2a69      	cmp	r2, #105	@ 0x69
 801561e:	d028      	beq.n	8015672 <_strtod_l+0x352>
 8015620:	dc25      	bgt.n	801566e <_strtod_l+0x34e>
 8015622:	2a49      	cmp	r2, #73	@ 0x49
 8015624:	d025      	beq.n	8015672 <_strtod_l+0x352>
 8015626:	2a4e      	cmp	r2, #78	@ 0x4e
 8015628:	f47f aece 	bne.w	80153c8 <_strtod_l+0xa8>
 801562c:	499b      	ldr	r1, [pc, #620]	@ (801589c <_strtod_l+0x57c>)
 801562e:	a819      	add	r0, sp, #100	@ 0x64
 8015630:	f001 f982 	bl	8016938 <__match>
 8015634:	2800      	cmp	r0, #0
 8015636:	f43f aec7 	beq.w	80153c8 <_strtod_l+0xa8>
 801563a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801563c:	781b      	ldrb	r3, [r3, #0]
 801563e:	2b28      	cmp	r3, #40	@ 0x28
 8015640:	d12e      	bne.n	80156a0 <_strtod_l+0x380>
 8015642:	4997      	ldr	r1, [pc, #604]	@ (80158a0 <_strtod_l+0x580>)
 8015644:	aa1c      	add	r2, sp, #112	@ 0x70
 8015646:	a819      	add	r0, sp, #100	@ 0x64
 8015648:	f001 f98a 	bl	8016960 <__hexnan>
 801564c:	2805      	cmp	r0, #5
 801564e:	d127      	bne.n	80156a0 <_strtod_l+0x380>
 8015650:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015652:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8015656:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801565a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801565e:	e698      	b.n	8015392 <_strtod_l+0x72>
 8015660:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8015662:	fb08 2101 	mla	r1, r8, r1, r2
 8015666:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801566a:	920e      	str	r2, [sp, #56]	@ 0x38
 801566c:	e7b5      	b.n	80155da <_strtod_l+0x2ba>
 801566e:	2a6e      	cmp	r2, #110	@ 0x6e
 8015670:	e7da      	b.n	8015628 <_strtod_l+0x308>
 8015672:	498c      	ldr	r1, [pc, #560]	@ (80158a4 <_strtod_l+0x584>)
 8015674:	a819      	add	r0, sp, #100	@ 0x64
 8015676:	f001 f95f 	bl	8016938 <__match>
 801567a:	2800      	cmp	r0, #0
 801567c:	f43f aea4 	beq.w	80153c8 <_strtod_l+0xa8>
 8015680:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015682:	4989      	ldr	r1, [pc, #548]	@ (80158a8 <_strtod_l+0x588>)
 8015684:	3b01      	subs	r3, #1
 8015686:	a819      	add	r0, sp, #100	@ 0x64
 8015688:	9319      	str	r3, [sp, #100]	@ 0x64
 801568a:	f001 f955 	bl	8016938 <__match>
 801568e:	b910      	cbnz	r0, 8015696 <_strtod_l+0x376>
 8015690:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015692:	3301      	adds	r3, #1
 8015694:	9319      	str	r3, [sp, #100]	@ 0x64
 8015696:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80158b8 <_strtod_l+0x598>
 801569a:	f04f 0a00 	mov.w	sl, #0
 801569e:	e678      	b.n	8015392 <_strtod_l+0x72>
 80156a0:	4882      	ldr	r0, [pc, #520]	@ (80158ac <_strtod_l+0x58c>)
 80156a2:	f000 fe6d 	bl	8016380 <nan>
 80156a6:	ec5b ab10 	vmov	sl, fp, d0
 80156aa:	e672      	b.n	8015392 <_strtod_l+0x72>
 80156ac:	eba8 0309 	sub.w	r3, r8, r9
 80156b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80156b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80156b4:	2f00      	cmp	r7, #0
 80156b6:	bf08      	it	eq
 80156b8:	462f      	moveq	r7, r5
 80156ba:	2d10      	cmp	r5, #16
 80156bc:	462c      	mov	r4, r5
 80156be:	bfa8      	it	ge
 80156c0:	2410      	movge	r4, #16
 80156c2:	f7ea ff3f 	bl	8000544 <__aeabi_ui2d>
 80156c6:	2d09      	cmp	r5, #9
 80156c8:	4682      	mov	sl, r0
 80156ca:	468b      	mov	fp, r1
 80156cc:	dc13      	bgt.n	80156f6 <_strtod_l+0x3d6>
 80156ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	f43f ae5e 	beq.w	8015392 <_strtod_l+0x72>
 80156d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80156d8:	dd78      	ble.n	80157cc <_strtod_l+0x4ac>
 80156da:	2b16      	cmp	r3, #22
 80156dc:	dc5f      	bgt.n	801579e <_strtod_l+0x47e>
 80156de:	4974      	ldr	r1, [pc, #464]	@ (80158b0 <_strtod_l+0x590>)
 80156e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80156e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80156e8:	4652      	mov	r2, sl
 80156ea:	465b      	mov	r3, fp
 80156ec:	f7ea ffa4 	bl	8000638 <__aeabi_dmul>
 80156f0:	4682      	mov	sl, r0
 80156f2:	468b      	mov	fp, r1
 80156f4:	e64d      	b.n	8015392 <_strtod_l+0x72>
 80156f6:	4b6e      	ldr	r3, [pc, #440]	@ (80158b0 <_strtod_l+0x590>)
 80156f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80156fc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8015700:	f7ea ff9a 	bl	8000638 <__aeabi_dmul>
 8015704:	4682      	mov	sl, r0
 8015706:	9808      	ldr	r0, [sp, #32]
 8015708:	468b      	mov	fp, r1
 801570a:	f7ea ff1b 	bl	8000544 <__aeabi_ui2d>
 801570e:	4602      	mov	r2, r0
 8015710:	460b      	mov	r3, r1
 8015712:	4650      	mov	r0, sl
 8015714:	4659      	mov	r1, fp
 8015716:	f7ea fdd9 	bl	80002cc <__adddf3>
 801571a:	2d0f      	cmp	r5, #15
 801571c:	4682      	mov	sl, r0
 801571e:	468b      	mov	fp, r1
 8015720:	ddd5      	ble.n	80156ce <_strtod_l+0x3ae>
 8015722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015724:	1b2c      	subs	r4, r5, r4
 8015726:	441c      	add	r4, r3
 8015728:	2c00      	cmp	r4, #0
 801572a:	f340 8096 	ble.w	801585a <_strtod_l+0x53a>
 801572e:	f014 030f 	ands.w	r3, r4, #15
 8015732:	d00a      	beq.n	801574a <_strtod_l+0x42a>
 8015734:	495e      	ldr	r1, [pc, #376]	@ (80158b0 <_strtod_l+0x590>)
 8015736:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801573a:	4652      	mov	r2, sl
 801573c:	465b      	mov	r3, fp
 801573e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015742:	f7ea ff79 	bl	8000638 <__aeabi_dmul>
 8015746:	4682      	mov	sl, r0
 8015748:	468b      	mov	fp, r1
 801574a:	f034 040f 	bics.w	r4, r4, #15
 801574e:	d073      	beq.n	8015838 <_strtod_l+0x518>
 8015750:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8015754:	dd48      	ble.n	80157e8 <_strtod_l+0x4c8>
 8015756:	2400      	movs	r4, #0
 8015758:	46a0      	mov	r8, r4
 801575a:	940a      	str	r4, [sp, #40]	@ 0x28
 801575c:	46a1      	mov	r9, r4
 801575e:	9a05      	ldr	r2, [sp, #20]
 8015760:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80158b8 <_strtod_l+0x598>
 8015764:	2322      	movs	r3, #34	@ 0x22
 8015766:	6013      	str	r3, [r2, #0]
 8015768:	f04f 0a00 	mov.w	sl, #0
 801576c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801576e:	2b00      	cmp	r3, #0
 8015770:	f43f ae0f 	beq.w	8015392 <_strtod_l+0x72>
 8015774:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015776:	9805      	ldr	r0, [sp, #20]
 8015778:	f001 fa8e 	bl	8016c98 <_Bfree>
 801577c:	9805      	ldr	r0, [sp, #20]
 801577e:	4649      	mov	r1, r9
 8015780:	f001 fa8a 	bl	8016c98 <_Bfree>
 8015784:	9805      	ldr	r0, [sp, #20]
 8015786:	4641      	mov	r1, r8
 8015788:	f001 fa86 	bl	8016c98 <_Bfree>
 801578c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801578e:	9805      	ldr	r0, [sp, #20]
 8015790:	f001 fa82 	bl	8016c98 <_Bfree>
 8015794:	9805      	ldr	r0, [sp, #20]
 8015796:	4621      	mov	r1, r4
 8015798:	f001 fa7e 	bl	8016c98 <_Bfree>
 801579c:	e5f9      	b.n	8015392 <_strtod_l+0x72>
 801579e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80157a0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80157a4:	4293      	cmp	r3, r2
 80157a6:	dbbc      	blt.n	8015722 <_strtod_l+0x402>
 80157a8:	4c41      	ldr	r4, [pc, #260]	@ (80158b0 <_strtod_l+0x590>)
 80157aa:	f1c5 050f 	rsb	r5, r5, #15
 80157ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80157b2:	4652      	mov	r2, sl
 80157b4:	465b      	mov	r3, fp
 80157b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80157ba:	f7ea ff3d 	bl	8000638 <__aeabi_dmul>
 80157be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80157c0:	1b5d      	subs	r5, r3, r5
 80157c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80157c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80157ca:	e78f      	b.n	80156ec <_strtod_l+0x3cc>
 80157cc:	3316      	adds	r3, #22
 80157ce:	dba8      	blt.n	8015722 <_strtod_l+0x402>
 80157d0:	4b37      	ldr	r3, [pc, #220]	@ (80158b0 <_strtod_l+0x590>)
 80157d2:	eba9 0808 	sub.w	r8, r9, r8
 80157d6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80157da:	e9d8 2300 	ldrd	r2, r3, [r8]
 80157de:	4650      	mov	r0, sl
 80157e0:	4659      	mov	r1, fp
 80157e2:	f7eb f853 	bl	800088c <__aeabi_ddiv>
 80157e6:	e783      	b.n	80156f0 <_strtod_l+0x3d0>
 80157e8:	4b32      	ldr	r3, [pc, #200]	@ (80158b4 <_strtod_l+0x594>)
 80157ea:	9308      	str	r3, [sp, #32]
 80157ec:	2300      	movs	r3, #0
 80157ee:	1124      	asrs	r4, r4, #4
 80157f0:	4650      	mov	r0, sl
 80157f2:	4659      	mov	r1, fp
 80157f4:	461e      	mov	r6, r3
 80157f6:	2c01      	cmp	r4, #1
 80157f8:	dc21      	bgt.n	801583e <_strtod_l+0x51e>
 80157fa:	b10b      	cbz	r3, 8015800 <_strtod_l+0x4e0>
 80157fc:	4682      	mov	sl, r0
 80157fe:	468b      	mov	fp, r1
 8015800:	492c      	ldr	r1, [pc, #176]	@ (80158b4 <_strtod_l+0x594>)
 8015802:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8015806:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801580a:	4652      	mov	r2, sl
 801580c:	465b      	mov	r3, fp
 801580e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015812:	f7ea ff11 	bl	8000638 <__aeabi_dmul>
 8015816:	4b28      	ldr	r3, [pc, #160]	@ (80158b8 <_strtod_l+0x598>)
 8015818:	460a      	mov	r2, r1
 801581a:	400b      	ands	r3, r1
 801581c:	4927      	ldr	r1, [pc, #156]	@ (80158bc <_strtod_l+0x59c>)
 801581e:	428b      	cmp	r3, r1
 8015820:	4682      	mov	sl, r0
 8015822:	d898      	bhi.n	8015756 <_strtod_l+0x436>
 8015824:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8015828:	428b      	cmp	r3, r1
 801582a:	bf86      	itte	hi
 801582c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80158c0 <_strtod_l+0x5a0>
 8015830:	f04f 3aff 	movhi.w	sl, #4294967295
 8015834:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8015838:	2300      	movs	r3, #0
 801583a:	9308      	str	r3, [sp, #32]
 801583c:	e07a      	b.n	8015934 <_strtod_l+0x614>
 801583e:	07e2      	lsls	r2, r4, #31
 8015840:	d505      	bpl.n	801584e <_strtod_l+0x52e>
 8015842:	9b08      	ldr	r3, [sp, #32]
 8015844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015848:	f7ea fef6 	bl	8000638 <__aeabi_dmul>
 801584c:	2301      	movs	r3, #1
 801584e:	9a08      	ldr	r2, [sp, #32]
 8015850:	3208      	adds	r2, #8
 8015852:	3601      	adds	r6, #1
 8015854:	1064      	asrs	r4, r4, #1
 8015856:	9208      	str	r2, [sp, #32]
 8015858:	e7cd      	b.n	80157f6 <_strtod_l+0x4d6>
 801585a:	d0ed      	beq.n	8015838 <_strtod_l+0x518>
 801585c:	4264      	negs	r4, r4
 801585e:	f014 020f 	ands.w	r2, r4, #15
 8015862:	d00a      	beq.n	801587a <_strtod_l+0x55a>
 8015864:	4b12      	ldr	r3, [pc, #72]	@ (80158b0 <_strtod_l+0x590>)
 8015866:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801586a:	4650      	mov	r0, sl
 801586c:	4659      	mov	r1, fp
 801586e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015872:	f7eb f80b 	bl	800088c <__aeabi_ddiv>
 8015876:	4682      	mov	sl, r0
 8015878:	468b      	mov	fp, r1
 801587a:	1124      	asrs	r4, r4, #4
 801587c:	d0dc      	beq.n	8015838 <_strtod_l+0x518>
 801587e:	2c1f      	cmp	r4, #31
 8015880:	dd20      	ble.n	80158c4 <_strtod_l+0x5a4>
 8015882:	2400      	movs	r4, #0
 8015884:	46a0      	mov	r8, r4
 8015886:	940a      	str	r4, [sp, #40]	@ 0x28
 8015888:	46a1      	mov	r9, r4
 801588a:	9a05      	ldr	r2, [sp, #20]
 801588c:	2322      	movs	r3, #34	@ 0x22
 801588e:	f04f 0a00 	mov.w	sl, #0
 8015892:	f04f 0b00 	mov.w	fp, #0
 8015896:	6013      	str	r3, [r2, #0]
 8015898:	e768      	b.n	801576c <_strtod_l+0x44c>
 801589a:	bf00      	nop
 801589c:	08018d27 	.word	0x08018d27
 80158a0:	08018d2c 	.word	0x08018d2c
 80158a4:	08018d1e 	.word	0x08018d1e
 80158a8:	08018d21 	.word	0x08018d21
 80158ac:	080190d6 	.word	0x080190d6
 80158b0:	08018fa0 	.word	0x08018fa0
 80158b4:	08018f78 	.word	0x08018f78
 80158b8:	7ff00000 	.word	0x7ff00000
 80158bc:	7ca00000 	.word	0x7ca00000
 80158c0:	7fefffff 	.word	0x7fefffff
 80158c4:	f014 0310 	ands.w	r3, r4, #16
 80158c8:	bf18      	it	ne
 80158ca:	236a      	movne	r3, #106	@ 0x6a
 80158cc:	4ea9      	ldr	r6, [pc, #676]	@ (8015b74 <_strtod_l+0x854>)
 80158ce:	9308      	str	r3, [sp, #32]
 80158d0:	4650      	mov	r0, sl
 80158d2:	4659      	mov	r1, fp
 80158d4:	2300      	movs	r3, #0
 80158d6:	07e2      	lsls	r2, r4, #31
 80158d8:	d504      	bpl.n	80158e4 <_strtod_l+0x5c4>
 80158da:	e9d6 2300 	ldrd	r2, r3, [r6]
 80158de:	f7ea feab 	bl	8000638 <__aeabi_dmul>
 80158e2:	2301      	movs	r3, #1
 80158e4:	1064      	asrs	r4, r4, #1
 80158e6:	f106 0608 	add.w	r6, r6, #8
 80158ea:	d1f4      	bne.n	80158d6 <_strtod_l+0x5b6>
 80158ec:	b10b      	cbz	r3, 80158f2 <_strtod_l+0x5d2>
 80158ee:	4682      	mov	sl, r0
 80158f0:	468b      	mov	fp, r1
 80158f2:	9b08      	ldr	r3, [sp, #32]
 80158f4:	b1b3      	cbz	r3, 8015924 <_strtod_l+0x604>
 80158f6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80158fa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80158fe:	2b00      	cmp	r3, #0
 8015900:	4659      	mov	r1, fp
 8015902:	dd0f      	ble.n	8015924 <_strtod_l+0x604>
 8015904:	2b1f      	cmp	r3, #31
 8015906:	dd55      	ble.n	80159b4 <_strtod_l+0x694>
 8015908:	2b34      	cmp	r3, #52	@ 0x34
 801590a:	bfde      	ittt	le
 801590c:	f04f 33ff 	movle.w	r3, #4294967295
 8015910:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8015914:	4093      	lslle	r3, r2
 8015916:	f04f 0a00 	mov.w	sl, #0
 801591a:	bfcc      	ite	gt
 801591c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8015920:	ea03 0b01 	andle.w	fp, r3, r1
 8015924:	2200      	movs	r2, #0
 8015926:	2300      	movs	r3, #0
 8015928:	4650      	mov	r0, sl
 801592a:	4659      	mov	r1, fp
 801592c:	f7eb f8ec 	bl	8000b08 <__aeabi_dcmpeq>
 8015930:	2800      	cmp	r0, #0
 8015932:	d1a6      	bne.n	8015882 <_strtod_l+0x562>
 8015934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015936:	9300      	str	r3, [sp, #0]
 8015938:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801593a:	9805      	ldr	r0, [sp, #20]
 801593c:	462b      	mov	r3, r5
 801593e:	463a      	mov	r2, r7
 8015940:	f001 fa12 	bl	8016d68 <__s2b>
 8015944:	900a      	str	r0, [sp, #40]	@ 0x28
 8015946:	2800      	cmp	r0, #0
 8015948:	f43f af05 	beq.w	8015756 <_strtod_l+0x436>
 801594c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801594e:	2a00      	cmp	r2, #0
 8015950:	eba9 0308 	sub.w	r3, r9, r8
 8015954:	bfa8      	it	ge
 8015956:	2300      	movge	r3, #0
 8015958:	9312      	str	r3, [sp, #72]	@ 0x48
 801595a:	2400      	movs	r4, #0
 801595c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015960:	9316      	str	r3, [sp, #88]	@ 0x58
 8015962:	46a0      	mov	r8, r4
 8015964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015966:	9805      	ldr	r0, [sp, #20]
 8015968:	6859      	ldr	r1, [r3, #4]
 801596a:	f001 f955 	bl	8016c18 <_Balloc>
 801596e:	4681      	mov	r9, r0
 8015970:	2800      	cmp	r0, #0
 8015972:	f43f aef4 	beq.w	801575e <_strtod_l+0x43e>
 8015976:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015978:	691a      	ldr	r2, [r3, #16]
 801597a:	3202      	adds	r2, #2
 801597c:	f103 010c 	add.w	r1, r3, #12
 8015980:	0092      	lsls	r2, r2, #2
 8015982:	300c      	adds	r0, #12
 8015984:	f000 fceb 	bl	801635e <memcpy>
 8015988:	ec4b ab10 	vmov	d0, sl, fp
 801598c:	9805      	ldr	r0, [sp, #20]
 801598e:	aa1c      	add	r2, sp, #112	@ 0x70
 8015990:	a91b      	add	r1, sp, #108	@ 0x6c
 8015992:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8015996:	f001 fd23 	bl	80173e0 <__d2b>
 801599a:	901a      	str	r0, [sp, #104]	@ 0x68
 801599c:	2800      	cmp	r0, #0
 801599e:	f43f aede 	beq.w	801575e <_strtod_l+0x43e>
 80159a2:	9805      	ldr	r0, [sp, #20]
 80159a4:	2101      	movs	r1, #1
 80159a6:	f001 fa75 	bl	8016e94 <__i2b>
 80159aa:	4680      	mov	r8, r0
 80159ac:	b948      	cbnz	r0, 80159c2 <_strtod_l+0x6a2>
 80159ae:	f04f 0800 	mov.w	r8, #0
 80159b2:	e6d4      	b.n	801575e <_strtod_l+0x43e>
 80159b4:	f04f 32ff 	mov.w	r2, #4294967295
 80159b8:	fa02 f303 	lsl.w	r3, r2, r3
 80159bc:	ea03 0a0a 	and.w	sl, r3, sl
 80159c0:	e7b0      	b.n	8015924 <_strtod_l+0x604>
 80159c2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80159c4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80159c6:	2d00      	cmp	r5, #0
 80159c8:	bfab      	itete	ge
 80159ca:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80159cc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80159ce:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80159d0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80159d2:	bfac      	ite	ge
 80159d4:	18ef      	addge	r7, r5, r3
 80159d6:	1b5e      	sublt	r6, r3, r5
 80159d8:	9b08      	ldr	r3, [sp, #32]
 80159da:	1aed      	subs	r5, r5, r3
 80159dc:	4415      	add	r5, r2
 80159de:	4b66      	ldr	r3, [pc, #408]	@ (8015b78 <_strtod_l+0x858>)
 80159e0:	3d01      	subs	r5, #1
 80159e2:	429d      	cmp	r5, r3
 80159e4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80159e8:	da50      	bge.n	8015a8c <_strtod_l+0x76c>
 80159ea:	1b5b      	subs	r3, r3, r5
 80159ec:	2b1f      	cmp	r3, #31
 80159ee:	eba2 0203 	sub.w	r2, r2, r3
 80159f2:	f04f 0101 	mov.w	r1, #1
 80159f6:	dc3d      	bgt.n	8015a74 <_strtod_l+0x754>
 80159f8:	fa01 f303 	lsl.w	r3, r1, r3
 80159fc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80159fe:	2300      	movs	r3, #0
 8015a00:	9310      	str	r3, [sp, #64]	@ 0x40
 8015a02:	18bd      	adds	r5, r7, r2
 8015a04:	9b08      	ldr	r3, [sp, #32]
 8015a06:	42af      	cmp	r7, r5
 8015a08:	4416      	add	r6, r2
 8015a0a:	441e      	add	r6, r3
 8015a0c:	463b      	mov	r3, r7
 8015a0e:	bfa8      	it	ge
 8015a10:	462b      	movge	r3, r5
 8015a12:	42b3      	cmp	r3, r6
 8015a14:	bfa8      	it	ge
 8015a16:	4633      	movge	r3, r6
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	bfc2      	ittt	gt
 8015a1c:	1aed      	subgt	r5, r5, r3
 8015a1e:	1af6      	subgt	r6, r6, r3
 8015a20:	1aff      	subgt	r7, r7, r3
 8015a22:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	dd16      	ble.n	8015a56 <_strtod_l+0x736>
 8015a28:	4641      	mov	r1, r8
 8015a2a:	9805      	ldr	r0, [sp, #20]
 8015a2c:	461a      	mov	r2, r3
 8015a2e:	f001 faf1 	bl	8017014 <__pow5mult>
 8015a32:	4680      	mov	r8, r0
 8015a34:	2800      	cmp	r0, #0
 8015a36:	d0ba      	beq.n	80159ae <_strtod_l+0x68e>
 8015a38:	4601      	mov	r1, r0
 8015a3a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8015a3c:	9805      	ldr	r0, [sp, #20]
 8015a3e:	f001 fa3f 	bl	8016ec0 <__multiply>
 8015a42:	900e      	str	r0, [sp, #56]	@ 0x38
 8015a44:	2800      	cmp	r0, #0
 8015a46:	f43f ae8a 	beq.w	801575e <_strtod_l+0x43e>
 8015a4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015a4c:	9805      	ldr	r0, [sp, #20]
 8015a4e:	f001 f923 	bl	8016c98 <_Bfree>
 8015a52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015a54:	931a      	str	r3, [sp, #104]	@ 0x68
 8015a56:	2d00      	cmp	r5, #0
 8015a58:	dc1d      	bgt.n	8015a96 <_strtod_l+0x776>
 8015a5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	dd23      	ble.n	8015aa8 <_strtod_l+0x788>
 8015a60:	4649      	mov	r1, r9
 8015a62:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8015a64:	9805      	ldr	r0, [sp, #20]
 8015a66:	f001 fad5 	bl	8017014 <__pow5mult>
 8015a6a:	4681      	mov	r9, r0
 8015a6c:	b9e0      	cbnz	r0, 8015aa8 <_strtod_l+0x788>
 8015a6e:	f04f 0900 	mov.w	r9, #0
 8015a72:	e674      	b.n	801575e <_strtod_l+0x43e>
 8015a74:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8015a78:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8015a7c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8015a80:	35e2      	adds	r5, #226	@ 0xe2
 8015a82:	fa01 f305 	lsl.w	r3, r1, r5
 8015a86:	9310      	str	r3, [sp, #64]	@ 0x40
 8015a88:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015a8a:	e7ba      	b.n	8015a02 <_strtod_l+0x6e2>
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	9310      	str	r3, [sp, #64]	@ 0x40
 8015a90:	2301      	movs	r3, #1
 8015a92:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015a94:	e7b5      	b.n	8015a02 <_strtod_l+0x6e2>
 8015a96:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015a98:	9805      	ldr	r0, [sp, #20]
 8015a9a:	462a      	mov	r2, r5
 8015a9c:	f001 fb14 	bl	80170c8 <__lshift>
 8015aa0:	901a      	str	r0, [sp, #104]	@ 0x68
 8015aa2:	2800      	cmp	r0, #0
 8015aa4:	d1d9      	bne.n	8015a5a <_strtod_l+0x73a>
 8015aa6:	e65a      	b.n	801575e <_strtod_l+0x43e>
 8015aa8:	2e00      	cmp	r6, #0
 8015aaa:	dd07      	ble.n	8015abc <_strtod_l+0x79c>
 8015aac:	4649      	mov	r1, r9
 8015aae:	9805      	ldr	r0, [sp, #20]
 8015ab0:	4632      	mov	r2, r6
 8015ab2:	f001 fb09 	bl	80170c8 <__lshift>
 8015ab6:	4681      	mov	r9, r0
 8015ab8:	2800      	cmp	r0, #0
 8015aba:	d0d8      	beq.n	8015a6e <_strtod_l+0x74e>
 8015abc:	2f00      	cmp	r7, #0
 8015abe:	dd08      	ble.n	8015ad2 <_strtod_l+0x7b2>
 8015ac0:	4641      	mov	r1, r8
 8015ac2:	9805      	ldr	r0, [sp, #20]
 8015ac4:	463a      	mov	r2, r7
 8015ac6:	f001 faff 	bl	80170c8 <__lshift>
 8015aca:	4680      	mov	r8, r0
 8015acc:	2800      	cmp	r0, #0
 8015ace:	f43f ae46 	beq.w	801575e <_strtod_l+0x43e>
 8015ad2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015ad4:	9805      	ldr	r0, [sp, #20]
 8015ad6:	464a      	mov	r2, r9
 8015ad8:	f001 fb7e 	bl	80171d8 <__mdiff>
 8015adc:	4604      	mov	r4, r0
 8015ade:	2800      	cmp	r0, #0
 8015ae0:	f43f ae3d 	beq.w	801575e <_strtod_l+0x43e>
 8015ae4:	68c3      	ldr	r3, [r0, #12]
 8015ae6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015ae8:	2300      	movs	r3, #0
 8015aea:	60c3      	str	r3, [r0, #12]
 8015aec:	4641      	mov	r1, r8
 8015aee:	f001 fb57 	bl	80171a0 <__mcmp>
 8015af2:	2800      	cmp	r0, #0
 8015af4:	da46      	bge.n	8015b84 <_strtod_l+0x864>
 8015af6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015af8:	ea53 030a 	orrs.w	r3, r3, sl
 8015afc:	d16c      	bne.n	8015bd8 <_strtod_l+0x8b8>
 8015afe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d168      	bne.n	8015bd8 <_strtod_l+0x8b8>
 8015b06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015b0a:	0d1b      	lsrs	r3, r3, #20
 8015b0c:	051b      	lsls	r3, r3, #20
 8015b0e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8015b12:	d961      	bls.n	8015bd8 <_strtod_l+0x8b8>
 8015b14:	6963      	ldr	r3, [r4, #20]
 8015b16:	b913      	cbnz	r3, 8015b1e <_strtod_l+0x7fe>
 8015b18:	6923      	ldr	r3, [r4, #16]
 8015b1a:	2b01      	cmp	r3, #1
 8015b1c:	dd5c      	ble.n	8015bd8 <_strtod_l+0x8b8>
 8015b1e:	4621      	mov	r1, r4
 8015b20:	2201      	movs	r2, #1
 8015b22:	9805      	ldr	r0, [sp, #20]
 8015b24:	f001 fad0 	bl	80170c8 <__lshift>
 8015b28:	4641      	mov	r1, r8
 8015b2a:	4604      	mov	r4, r0
 8015b2c:	f001 fb38 	bl	80171a0 <__mcmp>
 8015b30:	2800      	cmp	r0, #0
 8015b32:	dd51      	ble.n	8015bd8 <_strtod_l+0x8b8>
 8015b34:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015b38:	9a08      	ldr	r2, [sp, #32]
 8015b3a:	0d1b      	lsrs	r3, r3, #20
 8015b3c:	051b      	lsls	r3, r3, #20
 8015b3e:	2a00      	cmp	r2, #0
 8015b40:	d06b      	beq.n	8015c1a <_strtod_l+0x8fa>
 8015b42:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8015b46:	d868      	bhi.n	8015c1a <_strtod_l+0x8fa>
 8015b48:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8015b4c:	f67f ae9d 	bls.w	801588a <_strtod_l+0x56a>
 8015b50:	4b0a      	ldr	r3, [pc, #40]	@ (8015b7c <_strtod_l+0x85c>)
 8015b52:	4650      	mov	r0, sl
 8015b54:	4659      	mov	r1, fp
 8015b56:	2200      	movs	r2, #0
 8015b58:	f7ea fd6e 	bl	8000638 <__aeabi_dmul>
 8015b5c:	4b08      	ldr	r3, [pc, #32]	@ (8015b80 <_strtod_l+0x860>)
 8015b5e:	400b      	ands	r3, r1
 8015b60:	4682      	mov	sl, r0
 8015b62:	468b      	mov	fp, r1
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	f47f ae05 	bne.w	8015774 <_strtod_l+0x454>
 8015b6a:	9a05      	ldr	r2, [sp, #20]
 8015b6c:	2322      	movs	r3, #34	@ 0x22
 8015b6e:	6013      	str	r3, [r2, #0]
 8015b70:	e600      	b.n	8015774 <_strtod_l+0x454>
 8015b72:	bf00      	nop
 8015b74:	08018d58 	.word	0x08018d58
 8015b78:	fffffc02 	.word	0xfffffc02
 8015b7c:	39500000 	.word	0x39500000
 8015b80:	7ff00000 	.word	0x7ff00000
 8015b84:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8015b88:	d165      	bne.n	8015c56 <_strtod_l+0x936>
 8015b8a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015b8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015b90:	b35a      	cbz	r2, 8015bea <_strtod_l+0x8ca>
 8015b92:	4a9f      	ldr	r2, [pc, #636]	@ (8015e10 <_strtod_l+0xaf0>)
 8015b94:	4293      	cmp	r3, r2
 8015b96:	d12b      	bne.n	8015bf0 <_strtod_l+0x8d0>
 8015b98:	9b08      	ldr	r3, [sp, #32]
 8015b9a:	4651      	mov	r1, sl
 8015b9c:	b303      	cbz	r3, 8015be0 <_strtod_l+0x8c0>
 8015b9e:	4b9d      	ldr	r3, [pc, #628]	@ (8015e14 <_strtod_l+0xaf4>)
 8015ba0:	465a      	mov	r2, fp
 8015ba2:	4013      	ands	r3, r2
 8015ba4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8015ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8015bac:	d81b      	bhi.n	8015be6 <_strtod_l+0x8c6>
 8015bae:	0d1b      	lsrs	r3, r3, #20
 8015bb0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8015bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8015bb8:	4299      	cmp	r1, r3
 8015bba:	d119      	bne.n	8015bf0 <_strtod_l+0x8d0>
 8015bbc:	4b96      	ldr	r3, [pc, #600]	@ (8015e18 <_strtod_l+0xaf8>)
 8015bbe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015bc0:	429a      	cmp	r2, r3
 8015bc2:	d102      	bne.n	8015bca <_strtod_l+0x8aa>
 8015bc4:	3101      	adds	r1, #1
 8015bc6:	f43f adca 	beq.w	801575e <_strtod_l+0x43e>
 8015bca:	4b92      	ldr	r3, [pc, #584]	@ (8015e14 <_strtod_l+0xaf4>)
 8015bcc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015bce:	401a      	ands	r2, r3
 8015bd0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8015bd4:	f04f 0a00 	mov.w	sl, #0
 8015bd8:	9b08      	ldr	r3, [sp, #32]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d1b8      	bne.n	8015b50 <_strtod_l+0x830>
 8015bde:	e5c9      	b.n	8015774 <_strtod_l+0x454>
 8015be0:	f04f 33ff 	mov.w	r3, #4294967295
 8015be4:	e7e8      	b.n	8015bb8 <_strtod_l+0x898>
 8015be6:	4613      	mov	r3, r2
 8015be8:	e7e6      	b.n	8015bb8 <_strtod_l+0x898>
 8015bea:	ea53 030a 	orrs.w	r3, r3, sl
 8015bee:	d0a1      	beq.n	8015b34 <_strtod_l+0x814>
 8015bf0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015bf2:	b1db      	cbz	r3, 8015c2c <_strtod_l+0x90c>
 8015bf4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015bf6:	4213      	tst	r3, r2
 8015bf8:	d0ee      	beq.n	8015bd8 <_strtod_l+0x8b8>
 8015bfa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015bfc:	9a08      	ldr	r2, [sp, #32]
 8015bfe:	4650      	mov	r0, sl
 8015c00:	4659      	mov	r1, fp
 8015c02:	b1bb      	cbz	r3, 8015c34 <_strtod_l+0x914>
 8015c04:	f7ff fb6d 	bl	80152e2 <sulp>
 8015c08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015c0c:	ec53 2b10 	vmov	r2, r3, d0
 8015c10:	f7ea fb5c 	bl	80002cc <__adddf3>
 8015c14:	4682      	mov	sl, r0
 8015c16:	468b      	mov	fp, r1
 8015c18:	e7de      	b.n	8015bd8 <_strtod_l+0x8b8>
 8015c1a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8015c1e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015c22:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8015c26:	f04f 3aff 	mov.w	sl, #4294967295
 8015c2a:	e7d5      	b.n	8015bd8 <_strtod_l+0x8b8>
 8015c2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015c2e:	ea13 0f0a 	tst.w	r3, sl
 8015c32:	e7e1      	b.n	8015bf8 <_strtod_l+0x8d8>
 8015c34:	f7ff fb55 	bl	80152e2 <sulp>
 8015c38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015c3c:	ec53 2b10 	vmov	r2, r3, d0
 8015c40:	f7ea fb42 	bl	80002c8 <__aeabi_dsub>
 8015c44:	2200      	movs	r2, #0
 8015c46:	2300      	movs	r3, #0
 8015c48:	4682      	mov	sl, r0
 8015c4a:	468b      	mov	fp, r1
 8015c4c:	f7ea ff5c 	bl	8000b08 <__aeabi_dcmpeq>
 8015c50:	2800      	cmp	r0, #0
 8015c52:	d0c1      	beq.n	8015bd8 <_strtod_l+0x8b8>
 8015c54:	e619      	b.n	801588a <_strtod_l+0x56a>
 8015c56:	4641      	mov	r1, r8
 8015c58:	4620      	mov	r0, r4
 8015c5a:	f001 fc19 	bl	8017490 <__ratio>
 8015c5e:	ec57 6b10 	vmov	r6, r7, d0
 8015c62:	2200      	movs	r2, #0
 8015c64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8015c68:	4630      	mov	r0, r6
 8015c6a:	4639      	mov	r1, r7
 8015c6c:	f7ea ff60 	bl	8000b30 <__aeabi_dcmple>
 8015c70:	2800      	cmp	r0, #0
 8015c72:	d06f      	beq.n	8015d54 <_strtod_l+0xa34>
 8015c74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d17a      	bne.n	8015d70 <_strtod_l+0xa50>
 8015c7a:	f1ba 0f00 	cmp.w	sl, #0
 8015c7e:	d158      	bne.n	8015d32 <_strtod_l+0xa12>
 8015c80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015c82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d15a      	bne.n	8015d40 <_strtod_l+0xa20>
 8015c8a:	4b64      	ldr	r3, [pc, #400]	@ (8015e1c <_strtod_l+0xafc>)
 8015c8c:	2200      	movs	r2, #0
 8015c8e:	4630      	mov	r0, r6
 8015c90:	4639      	mov	r1, r7
 8015c92:	f7ea ff43 	bl	8000b1c <__aeabi_dcmplt>
 8015c96:	2800      	cmp	r0, #0
 8015c98:	d159      	bne.n	8015d4e <_strtod_l+0xa2e>
 8015c9a:	4630      	mov	r0, r6
 8015c9c:	4639      	mov	r1, r7
 8015c9e:	4b60      	ldr	r3, [pc, #384]	@ (8015e20 <_strtod_l+0xb00>)
 8015ca0:	2200      	movs	r2, #0
 8015ca2:	f7ea fcc9 	bl	8000638 <__aeabi_dmul>
 8015ca6:	4606      	mov	r6, r0
 8015ca8:	460f      	mov	r7, r1
 8015caa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8015cae:	9606      	str	r6, [sp, #24]
 8015cb0:	9307      	str	r3, [sp, #28]
 8015cb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015cb6:	4d57      	ldr	r5, [pc, #348]	@ (8015e14 <_strtod_l+0xaf4>)
 8015cb8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8015cbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015cbe:	401d      	ands	r5, r3
 8015cc0:	4b58      	ldr	r3, [pc, #352]	@ (8015e24 <_strtod_l+0xb04>)
 8015cc2:	429d      	cmp	r5, r3
 8015cc4:	f040 80b2 	bne.w	8015e2c <_strtod_l+0xb0c>
 8015cc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015cca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8015cce:	ec4b ab10 	vmov	d0, sl, fp
 8015cd2:	f001 fb15 	bl	8017300 <__ulp>
 8015cd6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015cda:	ec51 0b10 	vmov	r0, r1, d0
 8015cde:	f7ea fcab 	bl	8000638 <__aeabi_dmul>
 8015ce2:	4652      	mov	r2, sl
 8015ce4:	465b      	mov	r3, fp
 8015ce6:	f7ea faf1 	bl	80002cc <__adddf3>
 8015cea:	460b      	mov	r3, r1
 8015cec:	4949      	ldr	r1, [pc, #292]	@ (8015e14 <_strtod_l+0xaf4>)
 8015cee:	4a4e      	ldr	r2, [pc, #312]	@ (8015e28 <_strtod_l+0xb08>)
 8015cf0:	4019      	ands	r1, r3
 8015cf2:	4291      	cmp	r1, r2
 8015cf4:	4682      	mov	sl, r0
 8015cf6:	d942      	bls.n	8015d7e <_strtod_l+0xa5e>
 8015cf8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015cfa:	4b47      	ldr	r3, [pc, #284]	@ (8015e18 <_strtod_l+0xaf8>)
 8015cfc:	429a      	cmp	r2, r3
 8015cfe:	d103      	bne.n	8015d08 <_strtod_l+0x9e8>
 8015d00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015d02:	3301      	adds	r3, #1
 8015d04:	f43f ad2b 	beq.w	801575e <_strtod_l+0x43e>
 8015d08:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8015e18 <_strtod_l+0xaf8>
 8015d0c:	f04f 3aff 	mov.w	sl, #4294967295
 8015d10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015d12:	9805      	ldr	r0, [sp, #20]
 8015d14:	f000 ffc0 	bl	8016c98 <_Bfree>
 8015d18:	9805      	ldr	r0, [sp, #20]
 8015d1a:	4649      	mov	r1, r9
 8015d1c:	f000 ffbc 	bl	8016c98 <_Bfree>
 8015d20:	9805      	ldr	r0, [sp, #20]
 8015d22:	4641      	mov	r1, r8
 8015d24:	f000 ffb8 	bl	8016c98 <_Bfree>
 8015d28:	9805      	ldr	r0, [sp, #20]
 8015d2a:	4621      	mov	r1, r4
 8015d2c:	f000 ffb4 	bl	8016c98 <_Bfree>
 8015d30:	e618      	b.n	8015964 <_strtod_l+0x644>
 8015d32:	f1ba 0f01 	cmp.w	sl, #1
 8015d36:	d103      	bne.n	8015d40 <_strtod_l+0xa20>
 8015d38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	f43f ada5 	beq.w	801588a <_strtod_l+0x56a>
 8015d40:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8015df0 <_strtod_l+0xad0>
 8015d44:	4f35      	ldr	r7, [pc, #212]	@ (8015e1c <_strtod_l+0xafc>)
 8015d46:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015d4a:	2600      	movs	r6, #0
 8015d4c:	e7b1      	b.n	8015cb2 <_strtod_l+0x992>
 8015d4e:	4f34      	ldr	r7, [pc, #208]	@ (8015e20 <_strtod_l+0xb00>)
 8015d50:	2600      	movs	r6, #0
 8015d52:	e7aa      	b.n	8015caa <_strtod_l+0x98a>
 8015d54:	4b32      	ldr	r3, [pc, #200]	@ (8015e20 <_strtod_l+0xb00>)
 8015d56:	4630      	mov	r0, r6
 8015d58:	4639      	mov	r1, r7
 8015d5a:	2200      	movs	r2, #0
 8015d5c:	f7ea fc6c 	bl	8000638 <__aeabi_dmul>
 8015d60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015d62:	4606      	mov	r6, r0
 8015d64:	460f      	mov	r7, r1
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d09f      	beq.n	8015caa <_strtod_l+0x98a>
 8015d6a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8015d6e:	e7a0      	b.n	8015cb2 <_strtod_l+0x992>
 8015d70:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8015df8 <_strtod_l+0xad8>
 8015d74:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015d78:	ec57 6b17 	vmov	r6, r7, d7
 8015d7c:	e799      	b.n	8015cb2 <_strtod_l+0x992>
 8015d7e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8015d82:	9b08      	ldr	r3, [sp, #32]
 8015d84:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d1c1      	bne.n	8015d10 <_strtod_l+0x9f0>
 8015d8c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015d90:	0d1b      	lsrs	r3, r3, #20
 8015d92:	051b      	lsls	r3, r3, #20
 8015d94:	429d      	cmp	r5, r3
 8015d96:	d1bb      	bne.n	8015d10 <_strtod_l+0x9f0>
 8015d98:	4630      	mov	r0, r6
 8015d9a:	4639      	mov	r1, r7
 8015d9c:	f7ea ff6e 	bl	8000c7c <__aeabi_d2lz>
 8015da0:	f7ea fc1c 	bl	80005dc <__aeabi_l2d>
 8015da4:	4602      	mov	r2, r0
 8015da6:	460b      	mov	r3, r1
 8015da8:	4630      	mov	r0, r6
 8015daa:	4639      	mov	r1, r7
 8015dac:	f7ea fa8c 	bl	80002c8 <__aeabi_dsub>
 8015db0:	460b      	mov	r3, r1
 8015db2:	4602      	mov	r2, r0
 8015db4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8015db8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8015dbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015dbe:	ea46 060a 	orr.w	r6, r6, sl
 8015dc2:	431e      	orrs	r6, r3
 8015dc4:	d06f      	beq.n	8015ea6 <_strtod_l+0xb86>
 8015dc6:	a30e      	add	r3, pc, #56	@ (adr r3, 8015e00 <_strtod_l+0xae0>)
 8015dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dcc:	f7ea fea6 	bl	8000b1c <__aeabi_dcmplt>
 8015dd0:	2800      	cmp	r0, #0
 8015dd2:	f47f accf 	bne.w	8015774 <_strtod_l+0x454>
 8015dd6:	a30c      	add	r3, pc, #48	@ (adr r3, 8015e08 <_strtod_l+0xae8>)
 8015dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ddc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015de0:	f7ea feba 	bl	8000b58 <__aeabi_dcmpgt>
 8015de4:	2800      	cmp	r0, #0
 8015de6:	d093      	beq.n	8015d10 <_strtod_l+0x9f0>
 8015de8:	e4c4      	b.n	8015774 <_strtod_l+0x454>
 8015dea:	bf00      	nop
 8015dec:	f3af 8000 	nop.w
 8015df0:	00000000 	.word	0x00000000
 8015df4:	bff00000 	.word	0xbff00000
 8015df8:	00000000 	.word	0x00000000
 8015dfc:	3ff00000 	.word	0x3ff00000
 8015e00:	94a03595 	.word	0x94a03595
 8015e04:	3fdfffff 	.word	0x3fdfffff
 8015e08:	35afe535 	.word	0x35afe535
 8015e0c:	3fe00000 	.word	0x3fe00000
 8015e10:	000fffff 	.word	0x000fffff
 8015e14:	7ff00000 	.word	0x7ff00000
 8015e18:	7fefffff 	.word	0x7fefffff
 8015e1c:	3ff00000 	.word	0x3ff00000
 8015e20:	3fe00000 	.word	0x3fe00000
 8015e24:	7fe00000 	.word	0x7fe00000
 8015e28:	7c9fffff 	.word	0x7c9fffff
 8015e2c:	9b08      	ldr	r3, [sp, #32]
 8015e2e:	b323      	cbz	r3, 8015e7a <_strtod_l+0xb5a>
 8015e30:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8015e34:	d821      	bhi.n	8015e7a <_strtod_l+0xb5a>
 8015e36:	a328      	add	r3, pc, #160	@ (adr r3, 8015ed8 <_strtod_l+0xbb8>)
 8015e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e3c:	4630      	mov	r0, r6
 8015e3e:	4639      	mov	r1, r7
 8015e40:	f7ea fe76 	bl	8000b30 <__aeabi_dcmple>
 8015e44:	b1a0      	cbz	r0, 8015e70 <_strtod_l+0xb50>
 8015e46:	4639      	mov	r1, r7
 8015e48:	4630      	mov	r0, r6
 8015e4a:	f7ea fe8f 	bl	8000b6c <__aeabi_d2uiz>
 8015e4e:	2801      	cmp	r0, #1
 8015e50:	bf38      	it	cc
 8015e52:	2001      	movcc	r0, #1
 8015e54:	f7ea fb76 	bl	8000544 <__aeabi_ui2d>
 8015e58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015e5a:	4606      	mov	r6, r0
 8015e5c:	460f      	mov	r7, r1
 8015e5e:	b9fb      	cbnz	r3, 8015ea0 <_strtod_l+0xb80>
 8015e60:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015e64:	9014      	str	r0, [sp, #80]	@ 0x50
 8015e66:	9315      	str	r3, [sp, #84]	@ 0x54
 8015e68:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8015e6c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8015e70:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015e72:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8015e76:	1b5b      	subs	r3, r3, r5
 8015e78:	9311      	str	r3, [sp, #68]	@ 0x44
 8015e7a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8015e7e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8015e82:	f001 fa3d 	bl	8017300 <__ulp>
 8015e86:	4650      	mov	r0, sl
 8015e88:	ec53 2b10 	vmov	r2, r3, d0
 8015e8c:	4659      	mov	r1, fp
 8015e8e:	f7ea fbd3 	bl	8000638 <__aeabi_dmul>
 8015e92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8015e96:	f7ea fa19 	bl	80002cc <__adddf3>
 8015e9a:	4682      	mov	sl, r0
 8015e9c:	468b      	mov	fp, r1
 8015e9e:	e770      	b.n	8015d82 <_strtod_l+0xa62>
 8015ea0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8015ea4:	e7e0      	b.n	8015e68 <_strtod_l+0xb48>
 8015ea6:	a30e      	add	r3, pc, #56	@ (adr r3, 8015ee0 <_strtod_l+0xbc0>)
 8015ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015eac:	f7ea fe36 	bl	8000b1c <__aeabi_dcmplt>
 8015eb0:	e798      	b.n	8015de4 <_strtod_l+0xac4>
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015eb6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8015eb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015eba:	6013      	str	r3, [r2, #0]
 8015ebc:	f7ff ba6d 	b.w	801539a <_strtod_l+0x7a>
 8015ec0:	2a65      	cmp	r2, #101	@ 0x65
 8015ec2:	f43f ab66 	beq.w	8015592 <_strtod_l+0x272>
 8015ec6:	2a45      	cmp	r2, #69	@ 0x45
 8015ec8:	f43f ab63 	beq.w	8015592 <_strtod_l+0x272>
 8015ecc:	2301      	movs	r3, #1
 8015ece:	f7ff bb9e 	b.w	801560e <_strtod_l+0x2ee>
 8015ed2:	bf00      	nop
 8015ed4:	f3af 8000 	nop.w
 8015ed8:	ffc00000 	.word	0xffc00000
 8015edc:	41dfffff 	.word	0x41dfffff
 8015ee0:	94a03595 	.word	0x94a03595
 8015ee4:	3fcfffff 	.word	0x3fcfffff

08015ee8 <strtod>:
 8015ee8:	460a      	mov	r2, r1
 8015eea:	4601      	mov	r1, r0
 8015eec:	4802      	ldr	r0, [pc, #8]	@ (8015ef8 <strtod+0x10>)
 8015eee:	4b03      	ldr	r3, [pc, #12]	@ (8015efc <strtod+0x14>)
 8015ef0:	6800      	ldr	r0, [r0, #0]
 8015ef2:	f7ff ba15 	b.w	8015320 <_strtod_l>
 8015ef6:	bf00      	nop
 8015ef8:	200001f4 	.word	0x200001f4
 8015efc:	20000088 	.word	0x20000088

08015f00 <std>:
 8015f00:	2300      	movs	r3, #0
 8015f02:	b510      	push	{r4, lr}
 8015f04:	4604      	mov	r4, r0
 8015f06:	e9c0 3300 	strd	r3, r3, [r0]
 8015f0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015f0e:	6083      	str	r3, [r0, #8]
 8015f10:	8181      	strh	r1, [r0, #12]
 8015f12:	6643      	str	r3, [r0, #100]	@ 0x64
 8015f14:	81c2      	strh	r2, [r0, #14]
 8015f16:	6183      	str	r3, [r0, #24]
 8015f18:	4619      	mov	r1, r3
 8015f1a:	2208      	movs	r2, #8
 8015f1c:	305c      	adds	r0, #92	@ 0x5c
 8015f1e:	f000 f942 	bl	80161a6 <memset>
 8015f22:	4b0d      	ldr	r3, [pc, #52]	@ (8015f58 <std+0x58>)
 8015f24:	6263      	str	r3, [r4, #36]	@ 0x24
 8015f26:	4b0d      	ldr	r3, [pc, #52]	@ (8015f5c <std+0x5c>)
 8015f28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8015f60 <std+0x60>)
 8015f2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8015f64 <std+0x64>)
 8015f30:	6323      	str	r3, [r4, #48]	@ 0x30
 8015f32:	4b0d      	ldr	r3, [pc, #52]	@ (8015f68 <std+0x68>)
 8015f34:	6224      	str	r4, [r4, #32]
 8015f36:	429c      	cmp	r4, r3
 8015f38:	d006      	beq.n	8015f48 <std+0x48>
 8015f3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015f3e:	4294      	cmp	r4, r2
 8015f40:	d002      	beq.n	8015f48 <std+0x48>
 8015f42:	33d0      	adds	r3, #208	@ 0xd0
 8015f44:	429c      	cmp	r4, r3
 8015f46:	d105      	bne.n	8015f54 <std+0x54>
 8015f48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f50:	f000 b9fa 	b.w	8016348 <__retarget_lock_init_recursive>
 8015f54:	bd10      	pop	{r4, pc}
 8015f56:	bf00      	nop
 8015f58:	080160ed 	.word	0x080160ed
 8015f5c:	0801610f 	.word	0x0801610f
 8015f60:	08016147 	.word	0x08016147
 8015f64:	0801616b 	.word	0x0801616b
 8015f68:	2000e578 	.word	0x2000e578

08015f6c <stdio_exit_handler>:
 8015f6c:	4a02      	ldr	r2, [pc, #8]	@ (8015f78 <stdio_exit_handler+0xc>)
 8015f6e:	4903      	ldr	r1, [pc, #12]	@ (8015f7c <stdio_exit_handler+0x10>)
 8015f70:	4803      	ldr	r0, [pc, #12]	@ (8015f80 <stdio_exit_handler+0x14>)
 8015f72:	f000 b869 	b.w	8016048 <_fwalk_sglue>
 8015f76:	bf00      	nop
 8015f78:	2000007c 	.word	0x2000007c
 8015f7c:	08017c69 	.word	0x08017c69
 8015f80:	200001f8 	.word	0x200001f8

08015f84 <cleanup_stdio>:
 8015f84:	6841      	ldr	r1, [r0, #4]
 8015f86:	4b0c      	ldr	r3, [pc, #48]	@ (8015fb8 <cleanup_stdio+0x34>)
 8015f88:	4299      	cmp	r1, r3
 8015f8a:	b510      	push	{r4, lr}
 8015f8c:	4604      	mov	r4, r0
 8015f8e:	d001      	beq.n	8015f94 <cleanup_stdio+0x10>
 8015f90:	f001 fe6a 	bl	8017c68 <_fflush_r>
 8015f94:	68a1      	ldr	r1, [r4, #8]
 8015f96:	4b09      	ldr	r3, [pc, #36]	@ (8015fbc <cleanup_stdio+0x38>)
 8015f98:	4299      	cmp	r1, r3
 8015f9a:	d002      	beq.n	8015fa2 <cleanup_stdio+0x1e>
 8015f9c:	4620      	mov	r0, r4
 8015f9e:	f001 fe63 	bl	8017c68 <_fflush_r>
 8015fa2:	68e1      	ldr	r1, [r4, #12]
 8015fa4:	4b06      	ldr	r3, [pc, #24]	@ (8015fc0 <cleanup_stdio+0x3c>)
 8015fa6:	4299      	cmp	r1, r3
 8015fa8:	d004      	beq.n	8015fb4 <cleanup_stdio+0x30>
 8015faa:	4620      	mov	r0, r4
 8015fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015fb0:	f001 be5a 	b.w	8017c68 <_fflush_r>
 8015fb4:	bd10      	pop	{r4, pc}
 8015fb6:	bf00      	nop
 8015fb8:	2000e578 	.word	0x2000e578
 8015fbc:	2000e5e0 	.word	0x2000e5e0
 8015fc0:	2000e648 	.word	0x2000e648

08015fc4 <global_stdio_init.part.0>:
 8015fc4:	b510      	push	{r4, lr}
 8015fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8015ff4 <global_stdio_init.part.0+0x30>)
 8015fc8:	4c0b      	ldr	r4, [pc, #44]	@ (8015ff8 <global_stdio_init.part.0+0x34>)
 8015fca:	4a0c      	ldr	r2, [pc, #48]	@ (8015ffc <global_stdio_init.part.0+0x38>)
 8015fcc:	601a      	str	r2, [r3, #0]
 8015fce:	4620      	mov	r0, r4
 8015fd0:	2200      	movs	r2, #0
 8015fd2:	2104      	movs	r1, #4
 8015fd4:	f7ff ff94 	bl	8015f00 <std>
 8015fd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015fdc:	2201      	movs	r2, #1
 8015fde:	2109      	movs	r1, #9
 8015fe0:	f7ff ff8e 	bl	8015f00 <std>
 8015fe4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015fe8:	2202      	movs	r2, #2
 8015fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015fee:	2112      	movs	r1, #18
 8015ff0:	f7ff bf86 	b.w	8015f00 <std>
 8015ff4:	2000e6b0 	.word	0x2000e6b0
 8015ff8:	2000e578 	.word	0x2000e578
 8015ffc:	08015f6d 	.word	0x08015f6d

08016000 <__sfp_lock_acquire>:
 8016000:	4801      	ldr	r0, [pc, #4]	@ (8016008 <__sfp_lock_acquire+0x8>)
 8016002:	f000 b9a2 	b.w	801634a <__retarget_lock_acquire_recursive>
 8016006:	bf00      	nop
 8016008:	2000e6b9 	.word	0x2000e6b9

0801600c <__sfp_lock_release>:
 801600c:	4801      	ldr	r0, [pc, #4]	@ (8016014 <__sfp_lock_release+0x8>)
 801600e:	f000 b99d 	b.w	801634c <__retarget_lock_release_recursive>
 8016012:	bf00      	nop
 8016014:	2000e6b9 	.word	0x2000e6b9

08016018 <__sinit>:
 8016018:	b510      	push	{r4, lr}
 801601a:	4604      	mov	r4, r0
 801601c:	f7ff fff0 	bl	8016000 <__sfp_lock_acquire>
 8016020:	6a23      	ldr	r3, [r4, #32]
 8016022:	b11b      	cbz	r3, 801602c <__sinit+0x14>
 8016024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016028:	f7ff bff0 	b.w	801600c <__sfp_lock_release>
 801602c:	4b04      	ldr	r3, [pc, #16]	@ (8016040 <__sinit+0x28>)
 801602e:	6223      	str	r3, [r4, #32]
 8016030:	4b04      	ldr	r3, [pc, #16]	@ (8016044 <__sinit+0x2c>)
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	2b00      	cmp	r3, #0
 8016036:	d1f5      	bne.n	8016024 <__sinit+0xc>
 8016038:	f7ff ffc4 	bl	8015fc4 <global_stdio_init.part.0>
 801603c:	e7f2      	b.n	8016024 <__sinit+0xc>
 801603e:	bf00      	nop
 8016040:	08015f85 	.word	0x08015f85
 8016044:	2000e6b0 	.word	0x2000e6b0

08016048 <_fwalk_sglue>:
 8016048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801604c:	4607      	mov	r7, r0
 801604e:	4688      	mov	r8, r1
 8016050:	4614      	mov	r4, r2
 8016052:	2600      	movs	r6, #0
 8016054:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016058:	f1b9 0901 	subs.w	r9, r9, #1
 801605c:	d505      	bpl.n	801606a <_fwalk_sglue+0x22>
 801605e:	6824      	ldr	r4, [r4, #0]
 8016060:	2c00      	cmp	r4, #0
 8016062:	d1f7      	bne.n	8016054 <_fwalk_sglue+0xc>
 8016064:	4630      	mov	r0, r6
 8016066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801606a:	89ab      	ldrh	r3, [r5, #12]
 801606c:	2b01      	cmp	r3, #1
 801606e:	d907      	bls.n	8016080 <_fwalk_sglue+0x38>
 8016070:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016074:	3301      	adds	r3, #1
 8016076:	d003      	beq.n	8016080 <_fwalk_sglue+0x38>
 8016078:	4629      	mov	r1, r5
 801607a:	4638      	mov	r0, r7
 801607c:	47c0      	blx	r8
 801607e:	4306      	orrs	r6, r0
 8016080:	3568      	adds	r5, #104	@ 0x68
 8016082:	e7e9      	b.n	8016058 <_fwalk_sglue+0x10>

08016084 <sniprintf>:
 8016084:	b40c      	push	{r2, r3}
 8016086:	b530      	push	{r4, r5, lr}
 8016088:	4b17      	ldr	r3, [pc, #92]	@ (80160e8 <sniprintf+0x64>)
 801608a:	1e0c      	subs	r4, r1, #0
 801608c:	681d      	ldr	r5, [r3, #0]
 801608e:	b09d      	sub	sp, #116	@ 0x74
 8016090:	da08      	bge.n	80160a4 <sniprintf+0x20>
 8016092:	238b      	movs	r3, #139	@ 0x8b
 8016094:	602b      	str	r3, [r5, #0]
 8016096:	f04f 30ff 	mov.w	r0, #4294967295
 801609a:	b01d      	add	sp, #116	@ 0x74
 801609c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80160a0:	b002      	add	sp, #8
 80160a2:	4770      	bx	lr
 80160a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80160a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80160ac:	bf14      	ite	ne
 80160ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 80160b2:	4623      	moveq	r3, r4
 80160b4:	9304      	str	r3, [sp, #16]
 80160b6:	9307      	str	r3, [sp, #28]
 80160b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80160bc:	9002      	str	r0, [sp, #8]
 80160be:	9006      	str	r0, [sp, #24]
 80160c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80160c4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80160c6:	ab21      	add	r3, sp, #132	@ 0x84
 80160c8:	a902      	add	r1, sp, #8
 80160ca:	4628      	mov	r0, r5
 80160cc:	9301      	str	r3, [sp, #4]
 80160ce:	f001 fabd 	bl	801764c <_svfiprintf_r>
 80160d2:	1c43      	adds	r3, r0, #1
 80160d4:	bfbc      	itt	lt
 80160d6:	238b      	movlt	r3, #139	@ 0x8b
 80160d8:	602b      	strlt	r3, [r5, #0]
 80160da:	2c00      	cmp	r4, #0
 80160dc:	d0dd      	beq.n	801609a <sniprintf+0x16>
 80160de:	9b02      	ldr	r3, [sp, #8]
 80160e0:	2200      	movs	r2, #0
 80160e2:	701a      	strb	r2, [r3, #0]
 80160e4:	e7d9      	b.n	801609a <sniprintf+0x16>
 80160e6:	bf00      	nop
 80160e8:	200001f4 	.word	0x200001f4

080160ec <__sread>:
 80160ec:	b510      	push	{r4, lr}
 80160ee:	460c      	mov	r4, r1
 80160f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160f4:	f000 f8da 	bl	80162ac <_read_r>
 80160f8:	2800      	cmp	r0, #0
 80160fa:	bfab      	itete	ge
 80160fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80160fe:	89a3      	ldrhlt	r3, [r4, #12]
 8016100:	181b      	addge	r3, r3, r0
 8016102:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016106:	bfac      	ite	ge
 8016108:	6563      	strge	r3, [r4, #84]	@ 0x54
 801610a:	81a3      	strhlt	r3, [r4, #12]
 801610c:	bd10      	pop	{r4, pc}

0801610e <__swrite>:
 801610e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016112:	461f      	mov	r7, r3
 8016114:	898b      	ldrh	r3, [r1, #12]
 8016116:	05db      	lsls	r3, r3, #23
 8016118:	4605      	mov	r5, r0
 801611a:	460c      	mov	r4, r1
 801611c:	4616      	mov	r6, r2
 801611e:	d505      	bpl.n	801612c <__swrite+0x1e>
 8016120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016124:	2302      	movs	r3, #2
 8016126:	2200      	movs	r2, #0
 8016128:	f000 f8ae 	bl	8016288 <_lseek_r>
 801612c:	89a3      	ldrh	r3, [r4, #12]
 801612e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016132:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016136:	81a3      	strh	r3, [r4, #12]
 8016138:	4632      	mov	r2, r6
 801613a:	463b      	mov	r3, r7
 801613c:	4628      	mov	r0, r5
 801613e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016142:	f000 b8c5 	b.w	80162d0 <_write_r>

08016146 <__sseek>:
 8016146:	b510      	push	{r4, lr}
 8016148:	460c      	mov	r4, r1
 801614a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801614e:	f000 f89b 	bl	8016288 <_lseek_r>
 8016152:	1c43      	adds	r3, r0, #1
 8016154:	89a3      	ldrh	r3, [r4, #12]
 8016156:	bf15      	itete	ne
 8016158:	6560      	strne	r0, [r4, #84]	@ 0x54
 801615a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801615e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016162:	81a3      	strheq	r3, [r4, #12]
 8016164:	bf18      	it	ne
 8016166:	81a3      	strhne	r3, [r4, #12]
 8016168:	bd10      	pop	{r4, pc}

0801616a <__sclose>:
 801616a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801616e:	f000 b87b 	b.w	8016268 <_close_r>

08016172 <memmove>:
 8016172:	4288      	cmp	r0, r1
 8016174:	b510      	push	{r4, lr}
 8016176:	eb01 0402 	add.w	r4, r1, r2
 801617a:	d902      	bls.n	8016182 <memmove+0x10>
 801617c:	4284      	cmp	r4, r0
 801617e:	4623      	mov	r3, r4
 8016180:	d807      	bhi.n	8016192 <memmove+0x20>
 8016182:	1e43      	subs	r3, r0, #1
 8016184:	42a1      	cmp	r1, r4
 8016186:	d008      	beq.n	801619a <memmove+0x28>
 8016188:	f811 2b01 	ldrb.w	r2, [r1], #1
 801618c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016190:	e7f8      	b.n	8016184 <memmove+0x12>
 8016192:	4402      	add	r2, r0
 8016194:	4601      	mov	r1, r0
 8016196:	428a      	cmp	r2, r1
 8016198:	d100      	bne.n	801619c <memmove+0x2a>
 801619a:	bd10      	pop	{r4, pc}
 801619c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80161a0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80161a4:	e7f7      	b.n	8016196 <memmove+0x24>

080161a6 <memset>:
 80161a6:	4402      	add	r2, r0
 80161a8:	4603      	mov	r3, r0
 80161aa:	4293      	cmp	r3, r2
 80161ac:	d100      	bne.n	80161b0 <memset+0xa>
 80161ae:	4770      	bx	lr
 80161b0:	f803 1b01 	strb.w	r1, [r3], #1
 80161b4:	e7f9      	b.n	80161aa <memset+0x4>

080161b6 <strchr>:
 80161b6:	b2c9      	uxtb	r1, r1
 80161b8:	4603      	mov	r3, r0
 80161ba:	4618      	mov	r0, r3
 80161bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80161c0:	b112      	cbz	r2, 80161c8 <strchr+0x12>
 80161c2:	428a      	cmp	r2, r1
 80161c4:	d1f9      	bne.n	80161ba <strchr+0x4>
 80161c6:	4770      	bx	lr
 80161c8:	2900      	cmp	r1, #0
 80161ca:	bf18      	it	ne
 80161cc:	2000      	movne	r0, #0
 80161ce:	4770      	bx	lr

080161d0 <strcspn>:
 80161d0:	b570      	push	{r4, r5, r6, lr}
 80161d2:	4603      	mov	r3, r0
 80161d4:	461e      	mov	r6, r3
 80161d6:	f813 4b01 	ldrb.w	r4, [r3], #1
 80161da:	b144      	cbz	r4, 80161ee <strcspn+0x1e>
 80161dc:	1e4a      	subs	r2, r1, #1
 80161de:	e001      	b.n	80161e4 <strcspn+0x14>
 80161e0:	42a5      	cmp	r5, r4
 80161e2:	d004      	beq.n	80161ee <strcspn+0x1e>
 80161e4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80161e8:	2d00      	cmp	r5, #0
 80161ea:	d1f9      	bne.n	80161e0 <strcspn+0x10>
 80161ec:	e7f2      	b.n	80161d4 <strcspn+0x4>
 80161ee:	1a30      	subs	r0, r6, r0
 80161f0:	bd70      	pop	{r4, r5, r6, pc}

080161f2 <strncmp>:
 80161f2:	b510      	push	{r4, lr}
 80161f4:	b16a      	cbz	r2, 8016212 <strncmp+0x20>
 80161f6:	3901      	subs	r1, #1
 80161f8:	1884      	adds	r4, r0, r2
 80161fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80161fe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016202:	429a      	cmp	r2, r3
 8016204:	d103      	bne.n	801620e <strncmp+0x1c>
 8016206:	42a0      	cmp	r0, r4
 8016208:	d001      	beq.n	801620e <strncmp+0x1c>
 801620a:	2a00      	cmp	r2, #0
 801620c:	d1f5      	bne.n	80161fa <strncmp+0x8>
 801620e:	1ad0      	subs	r0, r2, r3
 8016210:	bd10      	pop	{r4, pc}
 8016212:	4610      	mov	r0, r2
 8016214:	e7fc      	b.n	8016210 <strncmp+0x1e>

08016216 <strncpy>:
 8016216:	b510      	push	{r4, lr}
 8016218:	3901      	subs	r1, #1
 801621a:	4603      	mov	r3, r0
 801621c:	b132      	cbz	r2, 801622c <strncpy+0x16>
 801621e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016222:	f803 4b01 	strb.w	r4, [r3], #1
 8016226:	3a01      	subs	r2, #1
 8016228:	2c00      	cmp	r4, #0
 801622a:	d1f7      	bne.n	801621c <strncpy+0x6>
 801622c:	441a      	add	r2, r3
 801622e:	2100      	movs	r1, #0
 8016230:	4293      	cmp	r3, r2
 8016232:	d100      	bne.n	8016236 <strncpy+0x20>
 8016234:	bd10      	pop	{r4, pc}
 8016236:	f803 1b01 	strb.w	r1, [r3], #1
 801623a:	e7f9      	b.n	8016230 <strncpy+0x1a>

0801623c <strstr>:
 801623c:	780a      	ldrb	r2, [r1, #0]
 801623e:	b570      	push	{r4, r5, r6, lr}
 8016240:	b96a      	cbnz	r2, 801625e <strstr+0x22>
 8016242:	bd70      	pop	{r4, r5, r6, pc}
 8016244:	429a      	cmp	r2, r3
 8016246:	d109      	bne.n	801625c <strstr+0x20>
 8016248:	460c      	mov	r4, r1
 801624a:	4605      	mov	r5, r0
 801624c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8016250:	2b00      	cmp	r3, #0
 8016252:	d0f6      	beq.n	8016242 <strstr+0x6>
 8016254:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8016258:	429e      	cmp	r6, r3
 801625a:	d0f7      	beq.n	801624c <strstr+0x10>
 801625c:	3001      	adds	r0, #1
 801625e:	7803      	ldrb	r3, [r0, #0]
 8016260:	2b00      	cmp	r3, #0
 8016262:	d1ef      	bne.n	8016244 <strstr+0x8>
 8016264:	4618      	mov	r0, r3
 8016266:	e7ec      	b.n	8016242 <strstr+0x6>

08016268 <_close_r>:
 8016268:	b538      	push	{r3, r4, r5, lr}
 801626a:	4d06      	ldr	r5, [pc, #24]	@ (8016284 <_close_r+0x1c>)
 801626c:	2300      	movs	r3, #0
 801626e:	4604      	mov	r4, r0
 8016270:	4608      	mov	r0, r1
 8016272:	602b      	str	r3, [r5, #0]
 8016274:	f7f0 fd06 	bl	8006c84 <_close>
 8016278:	1c43      	adds	r3, r0, #1
 801627a:	d102      	bne.n	8016282 <_close_r+0x1a>
 801627c:	682b      	ldr	r3, [r5, #0]
 801627e:	b103      	cbz	r3, 8016282 <_close_r+0x1a>
 8016280:	6023      	str	r3, [r4, #0]
 8016282:	bd38      	pop	{r3, r4, r5, pc}
 8016284:	2000e6b4 	.word	0x2000e6b4

08016288 <_lseek_r>:
 8016288:	b538      	push	{r3, r4, r5, lr}
 801628a:	4d07      	ldr	r5, [pc, #28]	@ (80162a8 <_lseek_r+0x20>)
 801628c:	4604      	mov	r4, r0
 801628e:	4608      	mov	r0, r1
 8016290:	4611      	mov	r1, r2
 8016292:	2200      	movs	r2, #0
 8016294:	602a      	str	r2, [r5, #0]
 8016296:	461a      	mov	r2, r3
 8016298:	f7f0 fd1b 	bl	8006cd2 <_lseek>
 801629c:	1c43      	adds	r3, r0, #1
 801629e:	d102      	bne.n	80162a6 <_lseek_r+0x1e>
 80162a0:	682b      	ldr	r3, [r5, #0]
 80162a2:	b103      	cbz	r3, 80162a6 <_lseek_r+0x1e>
 80162a4:	6023      	str	r3, [r4, #0]
 80162a6:	bd38      	pop	{r3, r4, r5, pc}
 80162a8:	2000e6b4 	.word	0x2000e6b4

080162ac <_read_r>:
 80162ac:	b538      	push	{r3, r4, r5, lr}
 80162ae:	4d07      	ldr	r5, [pc, #28]	@ (80162cc <_read_r+0x20>)
 80162b0:	4604      	mov	r4, r0
 80162b2:	4608      	mov	r0, r1
 80162b4:	4611      	mov	r1, r2
 80162b6:	2200      	movs	r2, #0
 80162b8:	602a      	str	r2, [r5, #0]
 80162ba:	461a      	mov	r2, r3
 80162bc:	f7f0 fca9 	bl	8006c12 <_read>
 80162c0:	1c43      	adds	r3, r0, #1
 80162c2:	d102      	bne.n	80162ca <_read_r+0x1e>
 80162c4:	682b      	ldr	r3, [r5, #0]
 80162c6:	b103      	cbz	r3, 80162ca <_read_r+0x1e>
 80162c8:	6023      	str	r3, [r4, #0]
 80162ca:	bd38      	pop	{r3, r4, r5, pc}
 80162cc:	2000e6b4 	.word	0x2000e6b4

080162d0 <_write_r>:
 80162d0:	b538      	push	{r3, r4, r5, lr}
 80162d2:	4d07      	ldr	r5, [pc, #28]	@ (80162f0 <_write_r+0x20>)
 80162d4:	4604      	mov	r4, r0
 80162d6:	4608      	mov	r0, r1
 80162d8:	4611      	mov	r1, r2
 80162da:	2200      	movs	r2, #0
 80162dc:	602a      	str	r2, [r5, #0]
 80162de:	461a      	mov	r2, r3
 80162e0:	f7f0 fcb4 	bl	8006c4c <_write>
 80162e4:	1c43      	adds	r3, r0, #1
 80162e6:	d102      	bne.n	80162ee <_write_r+0x1e>
 80162e8:	682b      	ldr	r3, [r5, #0]
 80162ea:	b103      	cbz	r3, 80162ee <_write_r+0x1e>
 80162ec:	6023      	str	r3, [r4, #0]
 80162ee:	bd38      	pop	{r3, r4, r5, pc}
 80162f0:	2000e6b4 	.word	0x2000e6b4

080162f4 <__errno>:
 80162f4:	4b01      	ldr	r3, [pc, #4]	@ (80162fc <__errno+0x8>)
 80162f6:	6818      	ldr	r0, [r3, #0]
 80162f8:	4770      	bx	lr
 80162fa:	bf00      	nop
 80162fc:	200001f4 	.word	0x200001f4

08016300 <__libc_init_array>:
 8016300:	b570      	push	{r4, r5, r6, lr}
 8016302:	4d0d      	ldr	r5, [pc, #52]	@ (8016338 <__libc_init_array+0x38>)
 8016304:	4c0d      	ldr	r4, [pc, #52]	@ (801633c <__libc_init_array+0x3c>)
 8016306:	1b64      	subs	r4, r4, r5
 8016308:	10a4      	asrs	r4, r4, #2
 801630a:	2600      	movs	r6, #0
 801630c:	42a6      	cmp	r6, r4
 801630e:	d109      	bne.n	8016324 <__libc_init_array+0x24>
 8016310:	4d0b      	ldr	r5, [pc, #44]	@ (8016340 <__libc_init_array+0x40>)
 8016312:	4c0c      	ldr	r4, [pc, #48]	@ (8016344 <__libc_init_array+0x44>)
 8016314:	f002 f85c 	bl	80183d0 <_init>
 8016318:	1b64      	subs	r4, r4, r5
 801631a:	10a4      	asrs	r4, r4, #2
 801631c:	2600      	movs	r6, #0
 801631e:	42a6      	cmp	r6, r4
 8016320:	d105      	bne.n	801632e <__libc_init_array+0x2e>
 8016322:	bd70      	pop	{r4, r5, r6, pc}
 8016324:	f855 3b04 	ldr.w	r3, [r5], #4
 8016328:	4798      	blx	r3
 801632a:	3601      	adds	r6, #1
 801632c:	e7ee      	b.n	801630c <__libc_init_array+0xc>
 801632e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016332:	4798      	blx	r3
 8016334:	3601      	adds	r6, #1
 8016336:	e7f2      	b.n	801631e <__libc_init_array+0x1e>
 8016338:	080190e0 	.word	0x080190e0
 801633c:	080190e0 	.word	0x080190e0
 8016340:	080190e0 	.word	0x080190e0
 8016344:	080190e4 	.word	0x080190e4

08016348 <__retarget_lock_init_recursive>:
 8016348:	4770      	bx	lr

0801634a <__retarget_lock_acquire_recursive>:
 801634a:	4770      	bx	lr

0801634c <__retarget_lock_release_recursive>:
 801634c:	4770      	bx	lr

0801634e <strcpy>:
 801634e:	4603      	mov	r3, r0
 8016350:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016354:	f803 2b01 	strb.w	r2, [r3], #1
 8016358:	2a00      	cmp	r2, #0
 801635a:	d1f9      	bne.n	8016350 <strcpy+0x2>
 801635c:	4770      	bx	lr

0801635e <memcpy>:
 801635e:	440a      	add	r2, r1
 8016360:	4291      	cmp	r1, r2
 8016362:	f100 33ff 	add.w	r3, r0, #4294967295
 8016366:	d100      	bne.n	801636a <memcpy+0xc>
 8016368:	4770      	bx	lr
 801636a:	b510      	push	{r4, lr}
 801636c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016370:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016374:	4291      	cmp	r1, r2
 8016376:	d1f9      	bne.n	801636c <memcpy+0xe>
 8016378:	bd10      	pop	{r4, pc}
 801637a:	0000      	movs	r0, r0
 801637c:	0000      	movs	r0, r0
	...

08016380 <nan>:
 8016380:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016388 <nan+0x8>
 8016384:	4770      	bx	lr
 8016386:	bf00      	nop
 8016388:	00000000 	.word	0x00000000
 801638c:	7ff80000 	.word	0x7ff80000

08016390 <_free_r>:
 8016390:	b538      	push	{r3, r4, r5, lr}
 8016392:	4605      	mov	r5, r0
 8016394:	2900      	cmp	r1, #0
 8016396:	d041      	beq.n	801641c <_free_r+0x8c>
 8016398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801639c:	1f0c      	subs	r4, r1, #4
 801639e:	2b00      	cmp	r3, #0
 80163a0:	bfb8      	it	lt
 80163a2:	18e4      	addlt	r4, r4, r3
 80163a4:	f000 fc2c 	bl	8016c00 <__malloc_lock>
 80163a8:	4a1d      	ldr	r2, [pc, #116]	@ (8016420 <_free_r+0x90>)
 80163aa:	6813      	ldr	r3, [r2, #0]
 80163ac:	b933      	cbnz	r3, 80163bc <_free_r+0x2c>
 80163ae:	6063      	str	r3, [r4, #4]
 80163b0:	6014      	str	r4, [r2, #0]
 80163b2:	4628      	mov	r0, r5
 80163b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80163b8:	f000 bc28 	b.w	8016c0c <__malloc_unlock>
 80163bc:	42a3      	cmp	r3, r4
 80163be:	d908      	bls.n	80163d2 <_free_r+0x42>
 80163c0:	6820      	ldr	r0, [r4, #0]
 80163c2:	1821      	adds	r1, r4, r0
 80163c4:	428b      	cmp	r3, r1
 80163c6:	bf01      	itttt	eq
 80163c8:	6819      	ldreq	r1, [r3, #0]
 80163ca:	685b      	ldreq	r3, [r3, #4]
 80163cc:	1809      	addeq	r1, r1, r0
 80163ce:	6021      	streq	r1, [r4, #0]
 80163d0:	e7ed      	b.n	80163ae <_free_r+0x1e>
 80163d2:	461a      	mov	r2, r3
 80163d4:	685b      	ldr	r3, [r3, #4]
 80163d6:	b10b      	cbz	r3, 80163dc <_free_r+0x4c>
 80163d8:	42a3      	cmp	r3, r4
 80163da:	d9fa      	bls.n	80163d2 <_free_r+0x42>
 80163dc:	6811      	ldr	r1, [r2, #0]
 80163de:	1850      	adds	r0, r2, r1
 80163e0:	42a0      	cmp	r0, r4
 80163e2:	d10b      	bne.n	80163fc <_free_r+0x6c>
 80163e4:	6820      	ldr	r0, [r4, #0]
 80163e6:	4401      	add	r1, r0
 80163e8:	1850      	adds	r0, r2, r1
 80163ea:	4283      	cmp	r3, r0
 80163ec:	6011      	str	r1, [r2, #0]
 80163ee:	d1e0      	bne.n	80163b2 <_free_r+0x22>
 80163f0:	6818      	ldr	r0, [r3, #0]
 80163f2:	685b      	ldr	r3, [r3, #4]
 80163f4:	6053      	str	r3, [r2, #4]
 80163f6:	4408      	add	r0, r1
 80163f8:	6010      	str	r0, [r2, #0]
 80163fa:	e7da      	b.n	80163b2 <_free_r+0x22>
 80163fc:	d902      	bls.n	8016404 <_free_r+0x74>
 80163fe:	230c      	movs	r3, #12
 8016400:	602b      	str	r3, [r5, #0]
 8016402:	e7d6      	b.n	80163b2 <_free_r+0x22>
 8016404:	6820      	ldr	r0, [r4, #0]
 8016406:	1821      	adds	r1, r4, r0
 8016408:	428b      	cmp	r3, r1
 801640a:	bf04      	itt	eq
 801640c:	6819      	ldreq	r1, [r3, #0]
 801640e:	685b      	ldreq	r3, [r3, #4]
 8016410:	6063      	str	r3, [r4, #4]
 8016412:	bf04      	itt	eq
 8016414:	1809      	addeq	r1, r1, r0
 8016416:	6021      	streq	r1, [r4, #0]
 8016418:	6054      	str	r4, [r2, #4]
 801641a:	e7ca      	b.n	80163b2 <_free_r+0x22>
 801641c:	bd38      	pop	{r3, r4, r5, pc}
 801641e:	bf00      	nop
 8016420:	2000e6c0 	.word	0x2000e6c0

08016424 <rshift>:
 8016424:	6903      	ldr	r3, [r0, #16]
 8016426:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801642a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801642e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016432:	f100 0414 	add.w	r4, r0, #20
 8016436:	dd45      	ble.n	80164c4 <rshift+0xa0>
 8016438:	f011 011f 	ands.w	r1, r1, #31
 801643c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016440:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016444:	d10c      	bne.n	8016460 <rshift+0x3c>
 8016446:	f100 0710 	add.w	r7, r0, #16
 801644a:	4629      	mov	r1, r5
 801644c:	42b1      	cmp	r1, r6
 801644e:	d334      	bcc.n	80164ba <rshift+0x96>
 8016450:	1a9b      	subs	r3, r3, r2
 8016452:	009b      	lsls	r3, r3, #2
 8016454:	1eea      	subs	r2, r5, #3
 8016456:	4296      	cmp	r6, r2
 8016458:	bf38      	it	cc
 801645a:	2300      	movcc	r3, #0
 801645c:	4423      	add	r3, r4
 801645e:	e015      	b.n	801648c <rshift+0x68>
 8016460:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016464:	f1c1 0820 	rsb	r8, r1, #32
 8016468:	40cf      	lsrs	r7, r1
 801646a:	f105 0e04 	add.w	lr, r5, #4
 801646e:	46a1      	mov	r9, r4
 8016470:	4576      	cmp	r6, lr
 8016472:	46f4      	mov	ip, lr
 8016474:	d815      	bhi.n	80164a2 <rshift+0x7e>
 8016476:	1a9a      	subs	r2, r3, r2
 8016478:	0092      	lsls	r2, r2, #2
 801647a:	3a04      	subs	r2, #4
 801647c:	3501      	adds	r5, #1
 801647e:	42ae      	cmp	r6, r5
 8016480:	bf38      	it	cc
 8016482:	2200      	movcc	r2, #0
 8016484:	18a3      	adds	r3, r4, r2
 8016486:	50a7      	str	r7, [r4, r2]
 8016488:	b107      	cbz	r7, 801648c <rshift+0x68>
 801648a:	3304      	adds	r3, #4
 801648c:	1b1a      	subs	r2, r3, r4
 801648e:	42a3      	cmp	r3, r4
 8016490:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016494:	bf08      	it	eq
 8016496:	2300      	moveq	r3, #0
 8016498:	6102      	str	r2, [r0, #16]
 801649a:	bf08      	it	eq
 801649c:	6143      	streq	r3, [r0, #20]
 801649e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80164a2:	f8dc c000 	ldr.w	ip, [ip]
 80164a6:	fa0c fc08 	lsl.w	ip, ip, r8
 80164aa:	ea4c 0707 	orr.w	r7, ip, r7
 80164ae:	f849 7b04 	str.w	r7, [r9], #4
 80164b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80164b6:	40cf      	lsrs	r7, r1
 80164b8:	e7da      	b.n	8016470 <rshift+0x4c>
 80164ba:	f851 cb04 	ldr.w	ip, [r1], #4
 80164be:	f847 cf04 	str.w	ip, [r7, #4]!
 80164c2:	e7c3      	b.n	801644c <rshift+0x28>
 80164c4:	4623      	mov	r3, r4
 80164c6:	e7e1      	b.n	801648c <rshift+0x68>

080164c8 <__hexdig_fun>:
 80164c8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80164cc:	2b09      	cmp	r3, #9
 80164ce:	d802      	bhi.n	80164d6 <__hexdig_fun+0xe>
 80164d0:	3820      	subs	r0, #32
 80164d2:	b2c0      	uxtb	r0, r0
 80164d4:	4770      	bx	lr
 80164d6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80164da:	2b05      	cmp	r3, #5
 80164dc:	d801      	bhi.n	80164e2 <__hexdig_fun+0x1a>
 80164de:	3847      	subs	r0, #71	@ 0x47
 80164e0:	e7f7      	b.n	80164d2 <__hexdig_fun+0xa>
 80164e2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80164e6:	2b05      	cmp	r3, #5
 80164e8:	d801      	bhi.n	80164ee <__hexdig_fun+0x26>
 80164ea:	3827      	subs	r0, #39	@ 0x27
 80164ec:	e7f1      	b.n	80164d2 <__hexdig_fun+0xa>
 80164ee:	2000      	movs	r0, #0
 80164f0:	4770      	bx	lr
	...

080164f4 <__gethex>:
 80164f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164f8:	b085      	sub	sp, #20
 80164fa:	468a      	mov	sl, r1
 80164fc:	9302      	str	r3, [sp, #8]
 80164fe:	680b      	ldr	r3, [r1, #0]
 8016500:	9001      	str	r0, [sp, #4]
 8016502:	4690      	mov	r8, r2
 8016504:	1c9c      	adds	r4, r3, #2
 8016506:	46a1      	mov	r9, r4
 8016508:	f814 0b01 	ldrb.w	r0, [r4], #1
 801650c:	2830      	cmp	r0, #48	@ 0x30
 801650e:	d0fa      	beq.n	8016506 <__gethex+0x12>
 8016510:	eba9 0303 	sub.w	r3, r9, r3
 8016514:	f1a3 0b02 	sub.w	fp, r3, #2
 8016518:	f7ff ffd6 	bl	80164c8 <__hexdig_fun>
 801651c:	4605      	mov	r5, r0
 801651e:	2800      	cmp	r0, #0
 8016520:	d168      	bne.n	80165f4 <__gethex+0x100>
 8016522:	49a0      	ldr	r1, [pc, #640]	@ (80167a4 <__gethex+0x2b0>)
 8016524:	2201      	movs	r2, #1
 8016526:	4648      	mov	r0, r9
 8016528:	f7ff fe63 	bl	80161f2 <strncmp>
 801652c:	4607      	mov	r7, r0
 801652e:	2800      	cmp	r0, #0
 8016530:	d167      	bne.n	8016602 <__gethex+0x10e>
 8016532:	f899 0001 	ldrb.w	r0, [r9, #1]
 8016536:	4626      	mov	r6, r4
 8016538:	f7ff ffc6 	bl	80164c8 <__hexdig_fun>
 801653c:	2800      	cmp	r0, #0
 801653e:	d062      	beq.n	8016606 <__gethex+0x112>
 8016540:	4623      	mov	r3, r4
 8016542:	7818      	ldrb	r0, [r3, #0]
 8016544:	2830      	cmp	r0, #48	@ 0x30
 8016546:	4699      	mov	r9, r3
 8016548:	f103 0301 	add.w	r3, r3, #1
 801654c:	d0f9      	beq.n	8016542 <__gethex+0x4e>
 801654e:	f7ff ffbb 	bl	80164c8 <__hexdig_fun>
 8016552:	fab0 f580 	clz	r5, r0
 8016556:	096d      	lsrs	r5, r5, #5
 8016558:	f04f 0b01 	mov.w	fp, #1
 801655c:	464a      	mov	r2, r9
 801655e:	4616      	mov	r6, r2
 8016560:	3201      	adds	r2, #1
 8016562:	7830      	ldrb	r0, [r6, #0]
 8016564:	f7ff ffb0 	bl	80164c8 <__hexdig_fun>
 8016568:	2800      	cmp	r0, #0
 801656a:	d1f8      	bne.n	801655e <__gethex+0x6a>
 801656c:	498d      	ldr	r1, [pc, #564]	@ (80167a4 <__gethex+0x2b0>)
 801656e:	2201      	movs	r2, #1
 8016570:	4630      	mov	r0, r6
 8016572:	f7ff fe3e 	bl	80161f2 <strncmp>
 8016576:	2800      	cmp	r0, #0
 8016578:	d13f      	bne.n	80165fa <__gethex+0x106>
 801657a:	b944      	cbnz	r4, 801658e <__gethex+0x9a>
 801657c:	1c74      	adds	r4, r6, #1
 801657e:	4622      	mov	r2, r4
 8016580:	4616      	mov	r6, r2
 8016582:	3201      	adds	r2, #1
 8016584:	7830      	ldrb	r0, [r6, #0]
 8016586:	f7ff ff9f 	bl	80164c8 <__hexdig_fun>
 801658a:	2800      	cmp	r0, #0
 801658c:	d1f8      	bne.n	8016580 <__gethex+0x8c>
 801658e:	1ba4      	subs	r4, r4, r6
 8016590:	00a7      	lsls	r7, r4, #2
 8016592:	7833      	ldrb	r3, [r6, #0]
 8016594:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8016598:	2b50      	cmp	r3, #80	@ 0x50
 801659a:	d13e      	bne.n	801661a <__gethex+0x126>
 801659c:	7873      	ldrb	r3, [r6, #1]
 801659e:	2b2b      	cmp	r3, #43	@ 0x2b
 80165a0:	d033      	beq.n	801660a <__gethex+0x116>
 80165a2:	2b2d      	cmp	r3, #45	@ 0x2d
 80165a4:	d034      	beq.n	8016610 <__gethex+0x11c>
 80165a6:	1c71      	adds	r1, r6, #1
 80165a8:	2400      	movs	r4, #0
 80165aa:	7808      	ldrb	r0, [r1, #0]
 80165ac:	f7ff ff8c 	bl	80164c8 <__hexdig_fun>
 80165b0:	1e43      	subs	r3, r0, #1
 80165b2:	b2db      	uxtb	r3, r3
 80165b4:	2b18      	cmp	r3, #24
 80165b6:	d830      	bhi.n	801661a <__gethex+0x126>
 80165b8:	f1a0 0210 	sub.w	r2, r0, #16
 80165bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80165c0:	f7ff ff82 	bl	80164c8 <__hexdig_fun>
 80165c4:	f100 3cff 	add.w	ip, r0, #4294967295
 80165c8:	fa5f fc8c 	uxtb.w	ip, ip
 80165cc:	f1bc 0f18 	cmp.w	ip, #24
 80165d0:	f04f 030a 	mov.w	r3, #10
 80165d4:	d91e      	bls.n	8016614 <__gethex+0x120>
 80165d6:	b104      	cbz	r4, 80165da <__gethex+0xe6>
 80165d8:	4252      	negs	r2, r2
 80165da:	4417      	add	r7, r2
 80165dc:	f8ca 1000 	str.w	r1, [sl]
 80165e0:	b1ed      	cbz	r5, 801661e <__gethex+0x12a>
 80165e2:	f1bb 0f00 	cmp.w	fp, #0
 80165e6:	bf0c      	ite	eq
 80165e8:	2506      	moveq	r5, #6
 80165ea:	2500      	movne	r5, #0
 80165ec:	4628      	mov	r0, r5
 80165ee:	b005      	add	sp, #20
 80165f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165f4:	2500      	movs	r5, #0
 80165f6:	462c      	mov	r4, r5
 80165f8:	e7b0      	b.n	801655c <__gethex+0x68>
 80165fa:	2c00      	cmp	r4, #0
 80165fc:	d1c7      	bne.n	801658e <__gethex+0x9a>
 80165fe:	4627      	mov	r7, r4
 8016600:	e7c7      	b.n	8016592 <__gethex+0x9e>
 8016602:	464e      	mov	r6, r9
 8016604:	462f      	mov	r7, r5
 8016606:	2501      	movs	r5, #1
 8016608:	e7c3      	b.n	8016592 <__gethex+0x9e>
 801660a:	2400      	movs	r4, #0
 801660c:	1cb1      	adds	r1, r6, #2
 801660e:	e7cc      	b.n	80165aa <__gethex+0xb6>
 8016610:	2401      	movs	r4, #1
 8016612:	e7fb      	b.n	801660c <__gethex+0x118>
 8016614:	fb03 0002 	mla	r0, r3, r2, r0
 8016618:	e7ce      	b.n	80165b8 <__gethex+0xc4>
 801661a:	4631      	mov	r1, r6
 801661c:	e7de      	b.n	80165dc <__gethex+0xe8>
 801661e:	eba6 0309 	sub.w	r3, r6, r9
 8016622:	3b01      	subs	r3, #1
 8016624:	4629      	mov	r1, r5
 8016626:	2b07      	cmp	r3, #7
 8016628:	dc0a      	bgt.n	8016640 <__gethex+0x14c>
 801662a:	9801      	ldr	r0, [sp, #4]
 801662c:	f000 faf4 	bl	8016c18 <_Balloc>
 8016630:	4604      	mov	r4, r0
 8016632:	b940      	cbnz	r0, 8016646 <__gethex+0x152>
 8016634:	4b5c      	ldr	r3, [pc, #368]	@ (80167a8 <__gethex+0x2b4>)
 8016636:	4602      	mov	r2, r0
 8016638:	21e4      	movs	r1, #228	@ 0xe4
 801663a:	485c      	ldr	r0, [pc, #368]	@ (80167ac <__gethex+0x2b8>)
 801663c:	f001 fb4c 	bl	8017cd8 <__assert_func>
 8016640:	3101      	adds	r1, #1
 8016642:	105b      	asrs	r3, r3, #1
 8016644:	e7ef      	b.n	8016626 <__gethex+0x132>
 8016646:	f100 0a14 	add.w	sl, r0, #20
 801664a:	2300      	movs	r3, #0
 801664c:	4655      	mov	r5, sl
 801664e:	469b      	mov	fp, r3
 8016650:	45b1      	cmp	r9, r6
 8016652:	d337      	bcc.n	80166c4 <__gethex+0x1d0>
 8016654:	f845 bb04 	str.w	fp, [r5], #4
 8016658:	eba5 050a 	sub.w	r5, r5, sl
 801665c:	10ad      	asrs	r5, r5, #2
 801665e:	6125      	str	r5, [r4, #16]
 8016660:	4658      	mov	r0, fp
 8016662:	f000 fbcb 	bl	8016dfc <__hi0bits>
 8016666:	016d      	lsls	r5, r5, #5
 8016668:	f8d8 6000 	ldr.w	r6, [r8]
 801666c:	1a2d      	subs	r5, r5, r0
 801666e:	42b5      	cmp	r5, r6
 8016670:	dd54      	ble.n	801671c <__gethex+0x228>
 8016672:	1bad      	subs	r5, r5, r6
 8016674:	4629      	mov	r1, r5
 8016676:	4620      	mov	r0, r4
 8016678:	f000 ff5f 	bl	801753a <__any_on>
 801667c:	4681      	mov	r9, r0
 801667e:	b178      	cbz	r0, 80166a0 <__gethex+0x1ac>
 8016680:	1e6b      	subs	r3, r5, #1
 8016682:	1159      	asrs	r1, r3, #5
 8016684:	f003 021f 	and.w	r2, r3, #31
 8016688:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801668c:	f04f 0901 	mov.w	r9, #1
 8016690:	fa09 f202 	lsl.w	r2, r9, r2
 8016694:	420a      	tst	r2, r1
 8016696:	d003      	beq.n	80166a0 <__gethex+0x1ac>
 8016698:	454b      	cmp	r3, r9
 801669a:	dc36      	bgt.n	801670a <__gethex+0x216>
 801669c:	f04f 0902 	mov.w	r9, #2
 80166a0:	4629      	mov	r1, r5
 80166a2:	4620      	mov	r0, r4
 80166a4:	f7ff febe 	bl	8016424 <rshift>
 80166a8:	442f      	add	r7, r5
 80166aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80166ae:	42bb      	cmp	r3, r7
 80166b0:	da42      	bge.n	8016738 <__gethex+0x244>
 80166b2:	9801      	ldr	r0, [sp, #4]
 80166b4:	4621      	mov	r1, r4
 80166b6:	f000 faef 	bl	8016c98 <_Bfree>
 80166ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80166bc:	2300      	movs	r3, #0
 80166be:	6013      	str	r3, [r2, #0]
 80166c0:	25a3      	movs	r5, #163	@ 0xa3
 80166c2:	e793      	b.n	80165ec <__gethex+0xf8>
 80166c4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80166c8:	2a2e      	cmp	r2, #46	@ 0x2e
 80166ca:	d012      	beq.n	80166f2 <__gethex+0x1fe>
 80166cc:	2b20      	cmp	r3, #32
 80166ce:	d104      	bne.n	80166da <__gethex+0x1e6>
 80166d0:	f845 bb04 	str.w	fp, [r5], #4
 80166d4:	f04f 0b00 	mov.w	fp, #0
 80166d8:	465b      	mov	r3, fp
 80166da:	7830      	ldrb	r0, [r6, #0]
 80166dc:	9303      	str	r3, [sp, #12]
 80166de:	f7ff fef3 	bl	80164c8 <__hexdig_fun>
 80166e2:	9b03      	ldr	r3, [sp, #12]
 80166e4:	f000 000f 	and.w	r0, r0, #15
 80166e8:	4098      	lsls	r0, r3
 80166ea:	ea4b 0b00 	orr.w	fp, fp, r0
 80166ee:	3304      	adds	r3, #4
 80166f0:	e7ae      	b.n	8016650 <__gethex+0x15c>
 80166f2:	45b1      	cmp	r9, r6
 80166f4:	d8ea      	bhi.n	80166cc <__gethex+0x1d8>
 80166f6:	492b      	ldr	r1, [pc, #172]	@ (80167a4 <__gethex+0x2b0>)
 80166f8:	9303      	str	r3, [sp, #12]
 80166fa:	2201      	movs	r2, #1
 80166fc:	4630      	mov	r0, r6
 80166fe:	f7ff fd78 	bl	80161f2 <strncmp>
 8016702:	9b03      	ldr	r3, [sp, #12]
 8016704:	2800      	cmp	r0, #0
 8016706:	d1e1      	bne.n	80166cc <__gethex+0x1d8>
 8016708:	e7a2      	b.n	8016650 <__gethex+0x15c>
 801670a:	1ea9      	subs	r1, r5, #2
 801670c:	4620      	mov	r0, r4
 801670e:	f000 ff14 	bl	801753a <__any_on>
 8016712:	2800      	cmp	r0, #0
 8016714:	d0c2      	beq.n	801669c <__gethex+0x1a8>
 8016716:	f04f 0903 	mov.w	r9, #3
 801671a:	e7c1      	b.n	80166a0 <__gethex+0x1ac>
 801671c:	da09      	bge.n	8016732 <__gethex+0x23e>
 801671e:	1b75      	subs	r5, r6, r5
 8016720:	4621      	mov	r1, r4
 8016722:	9801      	ldr	r0, [sp, #4]
 8016724:	462a      	mov	r2, r5
 8016726:	f000 fccf 	bl	80170c8 <__lshift>
 801672a:	1b7f      	subs	r7, r7, r5
 801672c:	4604      	mov	r4, r0
 801672e:	f100 0a14 	add.w	sl, r0, #20
 8016732:	f04f 0900 	mov.w	r9, #0
 8016736:	e7b8      	b.n	80166aa <__gethex+0x1b6>
 8016738:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801673c:	42bd      	cmp	r5, r7
 801673e:	dd6f      	ble.n	8016820 <__gethex+0x32c>
 8016740:	1bed      	subs	r5, r5, r7
 8016742:	42ae      	cmp	r6, r5
 8016744:	dc34      	bgt.n	80167b0 <__gethex+0x2bc>
 8016746:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801674a:	2b02      	cmp	r3, #2
 801674c:	d022      	beq.n	8016794 <__gethex+0x2a0>
 801674e:	2b03      	cmp	r3, #3
 8016750:	d024      	beq.n	801679c <__gethex+0x2a8>
 8016752:	2b01      	cmp	r3, #1
 8016754:	d115      	bne.n	8016782 <__gethex+0x28e>
 8016756:	42ae      	cmp	r6, r5
 8016758:	d113      	bne.n	8016782 <__gethex+0x28e>
 801675a:	2e01      	cmp	r6, #1
 801675c:	d10b      	bne.n	8016776 <__gethex+0x282>
 801675e:	9a02      	ldr	r2, [sp, #8]
 8016760:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016764:	6013      	str	r3, [r2, #0]
 8016766:	2301      	movs	r3, #1
 8016768:	6123      	str	r3, [r4, #16]
 801676a:	f8ca 3000 	str.w	r3, [sl]
 801676e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016770:	2562      	movs	r5, #98	@ 0x62
 8016772:	601c      	str	r4, [r3, #0]
 8016774:	e73a      	b.n	80165ec <__gethex+0xf8>
 8016776:	1e71      	subs	r1, r6, #1
 8016778:	4620      	mov	r0, r4
 801677a:	f000 fede 	bl	801753a <__any_on>
 801677e:	2800      	cmp	r0, #0
 8016780:	d1ed      	bne.n	801675e <__gethex+0x26a>
 8016782:	9801      	ldr	r0, [sp, #4]
 8016784:	4621      	mov	r1, r4
 8016786:	f000 fa87 	bl	8016c98 <_Bfree>
 801678a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801678c:	2300      	movs	r3, #0
 801678e:	6013      	str	r3, [r2, #0]
 8016790:	2550      	movs	r5, #80	@ 0x50
 8016792:	e72b      	b.n	80165ec <__gethex+0xf8>
 8016794:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016796:	2b00      	cmp	r3, #0
 8016798:	d1f3      	bne.n	8016782 <__gethex+0x28e>
 801679a:	e7e0      	b.n	801675e <__gethex+0x26a>
 801679c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d1dd      	bne.n	801675e <__gethex+0x26a>
 80167a2:	e7ee      	b.n	8016782 <__gethex+0x28e>
 80167a4:	08018d1c 	.word	0x08018d1c
 80167a8:	08018e89 	.word	0x08018e89
 80167ac:	08018e9a 	.word	0x08018e9a
 80167b0:	1e6f      	subs	r7, r5, #1
 80167b2:	f1b9 0f00 	cmp.w	r9, #0
 80167b6:	d130      	bne.n	801681a <__gethex+0x326>
 80167b8:	b127      	cbz	r7, 80167c4 <__gethex+0x2d0>
 80167ba:	4639      	mov	r1, r7
 80167bc:	4620      	mov	r0, r4
 80167be:	f000 febc 	bl	801753a <__any_on>
 80167c2:	4681      	mov	r9, r0
 80167c4:	117a      	asrs	r2, r7, #5
 80167c6:	2301      	movs	r3, #1
 80167c8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80167cc:	f007 071f 	and.w	r7, r7, #31
 80167d0:	40bb      	lsls	r3, r7
 80167d2:	4213      	tst	r3, r2
 80167d4:	4629      	mov	r1, r5
 80167d6:	4620      	mov	r0, r4
 80167d8:	bf18      	it	ne
 80167da:	f049 0902 	orrne.w	r9, r9, #2
 80167de:	f7ff fe21 	bl	8016424 <rshift>
 80167e2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80167e6:	1b76      	subs	r6, r6, r5
 80167e8:	2502      	movs	r5, #2
 80167ea:	f1b9 0f00 	cmp.w	r9, #0
 80167ee:	d047      	beq.n	8016880 <__gethex+0x38c>
 80167f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80167f4:	2b02      	cmp	r3, #2
 80167f6:	d015      	beq.n	8016824 <__gethex+0x330>
 80167f8:	2b03      	cmp	r3, #3
 80167fa:	d017      	beq.n	801682c <__gethex+0x338>
 80167fc:	2b01      	cmp	r3, #1
 80167fe:	d109      	bne.n	8016814 <__gethex+0x320>
 8016800:	f019 0f02 	tst.w	r9, #2
 8016804:	d006      	beq.n	8016814 <__gethex+0x320>
 8016806:	f8da 3000 	ldr.w	r3, [sl]
 801680a:	ea49 0903 	orr.w	r9, r9, r3
 801680e:	f019 0f01 	tst.w	r9, #1
 8016812:	d10e      	bne.n	8016832 <__gethex+0x33e>
 8016814:	f045 0510 	orr.w	r5, r5, #16
 8016818:	e032      	b.n	8016880 <__gethex+0x38c>
 801681a:	f04f 0901 	mov.w	r9, #1
 801681e:	e7d1      	b.n	80167c4 <__gethex+0x2d0>
 8016820:	2501      	movs	r5, #1
 8016822:	e7e2      	b.n	80167ea <__gethex+0x2f6>
 8016824:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016826:	f1c3 0301 	rsb	r3, r3, #1
 801682a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801682c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801682e:	2b00      	cmp	r3, #0
 8016830:	d0f0      	beq.n	8016814 <__gethex+0x320>
 8016832:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016836:	f104 0314 	add.w	r3, r4, #20
 801683a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801683e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8016842:	f04f 0c00 	mov.w	ip, #0
 8016846:	4618      	mov	r0, r3
 8016848:	f853 2b04 	ldr.w	r2, [r3], #4
 801684c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016850:	d01b      	beq.n	801688a <__gethex+0x396>
 8016852:	3201      	adds	r2, #1
 8016854:	6002      	str	r2, [r0, #0]
 8016856:	2d02      	cmp	r5, #2
 8016858:	f104 0314 	add.w	r3, r4, #20
 801685c:	d13c      	bne.n	80168d8 <__gethex+0x3e4>
 801685e:	f8d8 2000 	ldr.w	r2, [r8]
 8016862:	3a01      	subs	r2, #1
 8016864:	42b2      	cmp	r2, r6
 8016866:	d109      	bne.n	801687c <__gethex+0x388>
 8016868:	1171      	asrs	r1, r6, #5
 801686a:	2201      	movs	r2, #1
 801686c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016870:	f006 061f 	and.w	r6, r6, #31
 8016874:	fa02 f606 	lsl.w	r6, r2, r6
 8016878:	421e      	tst	r6, r3
 801687a:	d13a      	bne.n	80168f2 <__gethex+0x3fe>
 801687c:	f045 0520 	orr.w	r5, r5, #32
 8016880:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016882:	601c      	str	r4, [r3, #0]
 8016884:	9b02      	ldr	r3, [sp, #8]
 8016886:	601f      	str	r7, [r3, #0]
 8016888:	e6b0      	b.n	80165ec <__gethex+0xf8>
 801688a:	4299      	cmp	r1, r3
 801688c:	f843 cc04 	str.w	ip, [r3, #-4]
 8016890:	d8d9      	bhi.n	8016846 <__gethex+0x352>
 8016892:	68a3      	ldr	r3, [r4, #8]
 8016894:	459b      	cmp	fp, r3
 8016896:	db17      	blt.n	80168c8 <__gethex+0x3d4>
 8016898:	6861      	ldr	r1, [r4, #4]
 801689a:	9801      	ldr	r0, [sp, #4]
 801689c:	3101      	adds	r1, #1
 801689e:	f000 f9bb 	bl	8016c18 <_Balloc>
 80168a2:	4681      	mov	r9, r0
 80168a4:	b918      	cbnz	r0, 80168ae <__gethex+0x3ba>
 80168a6:	4b1a      	ldr	r3, [pc, #104]	@ (8016910 <__gethex+0x41c>)
 80168a8:	4602      	mov	r2, r0
 80168aa:	2184      	movs	r1, #132	@ 0x84
 80168ac:	e6c5      	b.n	801663a <__gethex+0x146>
 80168ae:	6922      	ldr	r2, [r4, #16]
 80168b0:	3202      	adds	r2, #2
 80168b2:	f104 010c 	add.w	r1, r4, #12
 80168b6:	0092      	lsls	r2, r2, #2
 80168b8:	300c      	adds	r0, #12
 80168ba:	f7ff fd50 	bl	801635e <memcpy>
 80168be:	4621      	mov	r1, r4
 80168c0:	9801      	ldr	r0, [sp, #4]
 80168c2:	f000 f9e9 	bl	8016c98 <_Bfree>
 80168c6:	464c      	mov	r4, r9
 80168c8:	6923      	ldr	r3, [r4, #16]
 80168ca:	1c5a      	adds	r2, r3, #1
 80168cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80168d0:	6122      	str	r2, [r4, #16]
 80168d2:	2201      	movs	r2, #1
 80168d4:	615a      	str	r2, [r3, #20]
 80168d6:	e7be      	b.n	8016856 <__gethex+0x362>
 80168d8:	6922      	ldr	r2, [r4, #16]
 80168da:	455a      	cmp	r2, fp
 80168dc:	dd0b      	ble.n	80168f6 <__gethex+0x402>
 80168de:	2101      	movs	r1, #1
 80168e0:	4620      	mov	r0, r4
 80168e2:	f7ff fd9f 	bl	8016424 <rshift>
 80168e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80168ea:	3701      	adds	r7, #1
 80168ec:	42bb      	cmp	r3, r7
 80168ee:	f6ff aee0 	blt.w	80166b2 <__gethex+0x1be>
 80168f2:	2501      	movs	r5, #1
 80168f4:	e7c2      	b.n	801687c <__gethex+0x388>
 80168f6:	f016 061f 	ands.w	r6, r6, #31
 80168fa:	d0fa      	beq.n	80168f2 <__gethex+0x3fe>
 80168fc:	4453      	add	r3, sl
 80168fe:	f1c6 0620 	rsb	r6, r6, #32
 8016902:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8016906:	f000 fa79 	bl	8016dfc <__hi0bits>
 801690a:	42b0      	cmp	r0, r6
 801690c:	dbe7      	blt.n	80168de <__gethex+0x3ea>
 801690e:	e7f0      	b.n	80168f2 <__gethex+0x3fe>
 8016910:	08018e89 	.word	0x08018e89

08016914 <L_shift>:
 8016914:	f1c2 0208 	rsb	r2, r2, #8
 8016918:	0092      	lsls	r2, r2, #2
 801691a:	b570      	push	{r4, r5, r6, lr}
 801691c:	f1c2 0620 	rsb	r6, r2, #32
 8016920:	6843      	ldr	r3, [r0, #4]
 8016922:	6804      	ldr	r4, [r0, #0]
 8016924:	fa03 f506 	lsl.w	r5, r3, r6
 8016928:	432c      	orrs	r4, r5
 801692a:	40d3      	lsrs	r3, r2
 801692c:	6004      	str	r4, [r0, #0]
 801692e:	f840 3f04 	str.w	r3, [r0, #4]!
 8016932:	4288      	cmp	r0, r1
 8016934:	d3f4      	bcc.n	8016920 <L_shift+0xc>
 8016936:	bd70      	pop	{r4, r5, r6, pc}

08016938 <__match>:
 8016938:	b530      	push	{r4, r5, lr}
 801693a:	6803      	ldr	r3, [r0, #0]
 801693c:	3301      	adds	r3, #1
 801693e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016942:	b914      	cbnz	r4, 801694a <__match+0x12>
 8016944:	6003      	str	r3, [r0, #0]
 8016946:	2001      	movs	r0, #1
 8016948:	bd30      	pop	{r4, r5, pc}
 801694a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801694e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8016952:	2d19      	cmp	r5, #25
 8016954:	bf98      	it	ls
 8016956:	3220      	addls	r2, #32
 8016958:	42a2      	cmp	r2, r4
 801695a:	d0f0      	beq.n	801693e <__match+0x6>
 801695c:	2000      	movs	r0, #0
 801695e:	e7f3      	b.n	8016948 <__match+0x10>

08016960 <__hexnan>:
 8016960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016964:	680b      	ldr	r3, [r1, #0]
 8016966:	6801      	ldr	r1, [r0, #0]
 8016968:	115e      	asrs	r6, r3, #5
 801696a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801696e:	f013 031f 	ands.w	r3, r3, #31
 8016972:	b087      	sub	sp, #28
 8016974:	bf18      	it	ne
 8016976:	3604      	addne	r6, #4
 8016978:	2500      	movs	r5, #0
 801697a:	1f37      	subs	r7, r6, #4
 801697c:	4682      	mov	sl, r0
 801697e:	4690      	mov	r8, r2
 8016980:	9301      	str	r3, [sp, #4]
 8016982:	f846 5c04 	str.w	r5, [r6, #-4]
 8016986:	46b9      	mov	r9, r7
 8016988:	463c      	mov	r4, r7
 801698a:	9502      	str	r5, [sp, #8]
 801698c:	46ab      	mov	fp, r5
 801698e:	784a      	ldrb	r2, [r1, #1]
 8016990:	1c4b      	adds	r3, r1, #1
 8016992:	9303      	str	r3, [sp, #12]
 8016994:	b342      	cbz	r2, 80169e8 <__hexnan+0x88>
 8016996:	4610      	mov	r0, r2
 8016998:	9105      	str	r1, [sp, #20]
 801699a:	9204      	str	r2, [sp, #16]
 801699c:	f7ff fd94 	bl	80164c8 <__hexdig_fun>
 80169a0:	2800      	cmp	r0, #0
 80169a2:	d151      	bne.n	8016a48 <__hexnan+0xe8>
 80169a4:	9a04      	ldr	r2, [sp, #16]
 80169a6:	9905      	ldr	r1, [sp, #20]
 80169a8:	2a20      	cmp	r2, #32
 80169aa:	d818      	bhi.n	80169de <__hexnan+0x7e>
 80169ac:	9b02      	ldr	r3, [sp, #8]
 80169ae:	459b      	cmp	fp, r3
 80169b0:	dd13      	ble.n	80169da <__hexnan+0x7a>
 80169b2:	454c      	cmp	r4, r9
 80169b4:	d206      	bcs.n	80169c4 <__hexnan+0x64>
 80169b6:	2d07      	cmp	r5, #7
 80169b8:	dc04      	bgt.n	80169c4 <__hexnan+0x64>
 80169ba:	462a      	mov	r2, r5
 80169bc:	4649      	mov	r1, r9
 80169be:	4620      	mov	r0, r4
 80169c0:	f7ff ffa8 	bl	8016914 <L_shift>
 80169c4:	4544      	cmp	r4, r8
 80169c6:	d952      	bls.n	8016a6e <__hexnan+0x10e>
 80169c8:	2300      	movs	r3, #0
 80169ca:	f1a4 0904 	sub.w	r9, r4, #4
 80169ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80169d2:	f8cd b008 	str.w	fp, [sp, #8]
 80169d6:	464c      	mov	r4, r9
 80169d8:	461d      	mov	r5, r3
 80169da:	9903      	ldr	r1, [sp, #12]
 80169dc:	e7d7      	b.n	801698e <__hexnan+0x2e>
 80169de:	2a29      	cmp	r2, #41	@ 0x29
 80169e0:	d157      	bne.n	8016a92 <__hexnan+0x132>
 80169e2:	3102      	adds	r1, #2
 80169e4:	f8ca 1000 	str.w	r1, [sl]
 80169e8:	f1bb 0f00 	cmp.w	fp, #0
 80169ec:	d051      	beq.n	8016a92 <__hexnan+0x132>
 80169ee:	454c      	cmp	r4, r9
 80169f0:	d206      	bcs.n	8016a00 <__hexnan+0xa0>
 80169f2:	2d07      	cmp	r5, #7
 80169f4:	dc04      	bgt.n	8016a00 <__hexnan+0xa0>
 80169f6:	462a      	mov	r2, r5
 80169f8:	4649      	mov	r1, r9
 80169fa:	4620      	mov	r0, r4
 80169fc:	f7ff ff8a 	bl	8016914 <L_shift>
 8016a00:	4544      	cmp	r4, r8
 8016a02:	d936      	bls.n	8016a72 <__hexnan+0x112>
 8016a04:	f1a8 0204 	sub.w	r2, r8, #4
 8016a08:	4623      	mov	r3, r4
 8016a0a:	f853 1b04 	ldr.w	r1, [r3], #4
 8016a0e:	f842 1f04 	str.w	r1, [r2, #4]!
 8016a12:	429f      	cmp	r7, r3
 8016a14:	d2f9      	bcs.n	8016a0a <__hexnan+0xaa>
 8016a16:	1b3b      	subs	r3, r7, r4
 8016a18:	f023 0303 	bic.w	r3, r3, #3
 8016a1c:	3304      	adds	r3, #4
 8016a1e:	3401      	adds	r4, #1
 8016a20:	3e03      	subs	r6, #3
 8016a22:	42b4      	cmp	r4, r6
 8016a24:	bf88      	it	hi
 8016a26:	2304      	movhi	r3, #4
 8016a28:	4443      	add	r3, r8
 8016a2a:	2200      	movs	r2, #0
 8016a2c:	f843 2b04 	str.w	r2, [r3], #4
 8016a30:	429f      	cmp	r7, r3
 8016a32:	d2fb      	bcs.n	8016a2c <__hexnan+0xcc>
 8016a34:	683b      	ldr	r3, [r7, #0]
 8016a36:	b91b      	cbnz	r3, 8016a40 <__hexnan+0xe0>
 8016a38:	4547      	cmp	r7, r8
 8016a3a:	d128      	bne.n	8016a8e <__hexnan+0x12e>
 8016a3c:	2301      	movs	r3, #1
 8016a3e:	603b      	str	r3, [r7, #0]
 8016a40:	2005      	movs	r0, #5
 8016a42:	b007      	add	sp, #28
 8016a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a48:	3501      	adds	r5, #1
 8016a4a:	2d08      	cmp	r5, #8
 8016a4c:	f10b 0b01 	add.w	fp, fp, #1
 8016a50:	dd06      	ble.n	8016a60 <__hexnan+0x100>
 8016a52:	4544      	cmp	r4, r8
 8016a54:	d9c1      	bls.n	80169da <__hexnan+0x7a>
 8016a56:	2300      	movs	r3, #0
 8016a58:	f844 3c04 	str.w	r3, [r4, #-4]
 8016a5c:	2501      	movs	r5, #1
 8016a5e:	3c04      	subs	r4, #4
 8016a60:	6822      	ldr	r2, [r4, #0]
 8016a62:	f000 000f 	and.w	r0, r0, #15
 8016a66:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016a6a:	6020      	str	r0, [r4, #0]
 8016a6c:	e7b5      	b.n	80169da <__hexnan+0x7a>
 8016a6e:	2508      	movs	r5, #8
 8016a70:	e7b3      	b.n	80169da <__hexnan+0x7a>
 8016a72:	9b01      	ldr	r3, [sp, #4]
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d0dd      	beq.n	8016a34 <__hexnan+0xd4>
 8016a78:	f1c3 0320 	rsb	r3, r3, #32
 8016a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8016a80:	40da      	lsrs	r2, r3
 8016a82:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8016a86:	4013      	ands	r3, r2
 8016a88:	f846 3c04 	str.w	r3, [r6, #-4]
 8016a8c:	e7d2      	b.n	8016a34 <__hexnan+0xd4>
 8016a8e:	3f04      	subs	r7, #4
 8016a90:	e7d0      	b.n	8016a34 <__hexnan+0xd4>
 8016a92:	2004      	movs	r0, #4
 8016a94:	e7d5      	b.n	8016a42 <__hexnan+0xe2>
	...

08016a98 <sbrk_aligned>:
 8016a98:	b570      	push	{r4, r5, r6, lr}
 8016a9a:	4e0f      	ldr	r6, [pc, #60]	@ (8016ad8 <sbrk_aligned+0x40>)
 8016a9c:	460c      	mov	r4, r1
 8016a9e:	6831      	ldr	r1, [r6, #0]
 8016aa0:	4605      	mov	r5, r0
 8016aa2:	b911      	cbnz	r1, 8016aaa <sbrk_aligned+0x12>
 8016aa4:	f001 f908 	bl	8017cb8 <_sbrk_r>
 8016aa8:	6030      	str	r0, [r6, #0]
 8016aaa:	4621      	mov	r1, r4
 8016aac:	4628      	mov	r0, r5
 8016aae:	f001 f903 	bl	8017cb8 <_sbrk_r>
 8016ab2:	1c43      	adds	r3, r0, #1
 8016ab4:	d103      	bne.n	8016abe <sbrk_aligned+0x26>
 8016ab6:	f04f 34ff 	mov.w	r4, #4294967295
 8016aba:	4620      	mov	r0, r4
 8016abc:	bd70      	pop	{r4, r5, r6, pc}
 8016abe:	1cc4      	adds	r4, r0, #3
 8016ac0:	f024 0403 	bic.w	r4, r4, #3
 8016ac4:	42a0      	cmp	r0, r4
 8016ac6:	d0f8      	beq.n	8016aba <sbrk_aligned+0x22>
 8016ac8:	1a21      	subs	r1, r4, r0
 8016aca:	4628      	mov	r0, r5
 8016acc:	f001 f8f4 	bl	8017cb8 <_sbrk_r>
 8016ad0:	3001      	adds	r0, #1
 8016ad2:	d1f2      	bne.n	8016aba <sbrk_aligned+0x22>
 8016ad4:	e7ef      	b.n	8016ab6 <sbrk_aligned+0x1e>
 8016ad6:	bf00      	nop
 8016ad8:	2000e6bc 	.word	0x2000e6bc

08016adc <_malloc_r>:
 8016adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ae0:	1ccd      	adds	r5, r1, #3
 8016ae2:	f025 0503 	bic.w	r5, r5, #3
 8016ae6:	3508      	adds	r5, #8
 8016ae8:	2d0c      	cmp	r5, #12
 8016aea:	bf38      	it	cc
 8016aec:	250c      	movcc	r5, #12
 8016aee:	2d00      	cmp	r5, #0
 8016af0:	4606      	mov	r6, r0
 8016af2:	db01      	blt.n	8016af8 <_malloc_r+0x1c>
 8016af4:	42a9      	cmp	r1, r5
 8016af6:	d904      	bls.n	8016b02 <_malloc_r+0x26>
 8016af8:	230c      	movs	r3, #12
 8016afa:	6033      	str	r3, [r6, #0]
 8016afc:	2000      	movs	r0, #0
 8016afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016bd8 <_malloc_r+0xfc>
 8016b06:	f000 f87b 	bl	8016c00 <__malloc_lock>
 8016b0a:	f8d8 3000 	ldr.w	r3, [r8]
 8016b0e:	461c      	mov	r4, r3
 8016b10:	bb44      	cbnz	r4, 8016b64 <_malloc_r+0x88>
 8016b12:	4629      	mov	r1, r5
 8016b14:	4630      	mov	r0, r6
 8016b16:	f7ff ffbf 	bl	8016a98 <sbrk_aligned>
 8016b1a:	1c43      	adds	r3, r0, #1
 8016b1c:	4604      	mov	r4, r0
 8016b1e:	d158      	bne.n	8016bd2 <_malloc_r+0xf6>
 8016b20:	f8d8 4000 	ldr.w	r4, [r8]
 8016b24:	4627      	mov	r7, r4
 8016b26:	2f00      	cmp	r7, #0
 8016b28:	d143      	bne.n	8016bb2 <_malloc_r+0xd6>
 8016b2a:	2c00      	cmp	r4, #0
 8016b2c:	d04b      	beq.n	8016bc6 <_malloc_r+0xea>
 8016b2e:	6823      	ldr	r3, [r4, #0]
 8016b30:	4639      	mov	r1, r7
 8016b32:	4630      	mov	r0, r6
 8016b34:	eb04 0903 	add.w	r9, r4, r3
 8016b38:	f001 f8be 	bl	8017cb8 <_sbrk_r>
 8016b3c:	4581      	cmp	r9, r0
 8016b3e:	d142      	bne.n	8016bc6 <_malloc_r+0xea>
 8016b40:	6821      	ldr	r1, [r4, #0]
 8016b42:	1a6d      	subs	r5, r5, r1
 8016b44:	4629      	mov	r1, r5
 8016b46:	4630      	mov	r0, r6
 8016b48:	f7ff ffa6 	bl	8016a98 <sbrk_aligned>
 8016b4c:	3001      	adds	r0, #1
 8016b4e:	d03a      	beq.n	8016bc6 <_malloc_r+0xea>
 8016b50:	6823      	ldr	r3, [r4, #0]
 8016b52:	442b      	add	r3, r5
 8016b54:	6023      	str	r3, [r4, #0]
 8016b56:	f8d8 3000 	ldr.w	r3, [r8]
 8016b5a:	685a      	ldr	r2, [r3, #4]
 8016b5c:	bb62      	cbnz	r2, 8016bb8 <_malloc_r+0xdc>
 8016b5e:	f8c8 7000 	str.w	r7, [r8]
 8016b62:	e00f      	b.n	8016b84 <_malloc_r+0xa8>
 8016b64:	6822      	ldr	r2, [r4, #0]
 8016b66:	1b52      	subs	r2, r2, r5
 8016b68:	d420      	bmi.n	8016bac <_malloc_r+0xd0>
 8016b6a:	2a0b      	cmp	r2, #11
 8016b6c:	d917      	bls.n	8016b9e <_malloc_r+0xc2>
 8016b6e:	1961      	adds	r1, r4, r5
 8016b70:	42a3      	cmp	r3, r4
 8016b72:	6025      	str	r5, [r4, #0]
 8016b74:	bf18      	it	ne
 8016b76:	6059      	strne	r1, [r3, #4]
 8016b78:	6863      	ldr	r3, [r4, #4]
 8016b7a:	bf08      	it	eq
 8016b7c:	f8c8 1000 	streq.w	r1, [r8]
 8016b80:	5162      	str	r2, [r4, r5]
 8016b82:	604b      	str	r3, [r1, #4]
 8016b84:	4630      	mov	r0, r6
 8016b86:	f000 f841 	bl	8016c0c <__malloc_unlock>
 8016b8a:	f104 000b 	add.w	r0, r4, #11
 8016b8e:	1d23      	adds	r3, r4, #4
 8016b90:	f020 0007 	bic.w	r0, r0, #7
 8016b94:	1ac2      	subs	r2, r0, r3
 8016b96:	bf1c      	itt	ne
 8016b98:	1a1b      	subne	r3, r3, r0
 8016b9a:	50a3      	strne	r3, [r4, r2]
 8016b9c:	e7af      	b.n	8016afe <_malloc_r+0x22>
 8016b9e:	6862      	ldr	r2, [r4, #4]
 8016ba0:	42a3      	cmp	r3, r4
 8016ba2:	bf0c      	ite	eq
 8016ba4:	f8c8 2000 	streq.w	r2, [r8]
 8016ba8:	605a      	strne	r2, [r3, #4]
 8016baa:	e7eb      	b.n	8016b84 <_malloc_r+0xa8>
 8016bac:	4623      	mov	r3, r4
 8016bae:	6864      	ldr	r4, [r4, #4]
 8016bb0:	e7ae      	b.n	8016b10 <_malloc_r+0x34>
 8016bb2:	463c      	mov	r4, r7
 8016bb4:	687f      	ldr	r7, [r7, #4]
 8016bb6:	e7b6      	b.n	8016b26 <_malloc_r+0x4a>
 8016bb8:	461a      	mov	r2, r3
 8016bba:	685b      	ldr	r3, [r3, #4]
 8016bbc:	42a3      	cmp	r3, r4
 8016bbe:	d1fb      	bne.n	8016bb8 <_malloc_r+0xdc>
 8016bc0:	2300      	movs	r3, #0
 8016bc2:	6053      	str	r3, [r2, #4]
 8016bc4:	e7de      	b.n	8016b84 <_malloc_r+0xa8>
 8016bc6:	230c      	movs	r3, #12
 8016bc8:	6033      	str	r3, [r6, #0]
 8016bca:	4630      	mov	r0, r6
 8016bcc:	f000 f81e 	bl	8016c0c <__malloc_unlock>
 8016bd0:	e794      	b.n	8016afc <_malloc_r+0x20>
 8016bd2:	6005      	str	r5, [r0, #0]
 8016bd4:	e7d6      	b.n	8016b84 <_malloc_r+0xa8>
 8016bd6:	bf00      	nop
 8016bd8:	2000e6c0 	.word	0x2000e6c0

08016bdc <__ascii_mbtowc>:
 8016bdc:	b082      	sub	sp, #8
 8016bde:	b901      	cbnz	r1, 8016be2 <__ascii_mbtowc+0x6>
 8016be0:	a901      	add	r1, sp, #4
 8016be2:	b142      	cbz	r2, 8016bf6 <__ascii_mbtowc+0x1a>
 8016be4:	b14b      	cbz	r3, 8016bfa <__ascii_mbtowc+0x1e>
 8016be6:	7813      	ldrb	r3, [r2, #0]
 8016be8:	600b      	str	r3, [r1, #0]
 8016bea:	7812      	ldrb	r2, [r2, #0]
 8016bec:	1e10      	subs	r0, r2, #0
 8016bee:	bf18      	it	ne
 8016bf0:	2001      	movne	r0, #1
 8016bf2:	b002      	add	sp, #8
 8016bf4:	4770      	bx	lr
 8016bf6:	4610      	mov	r0, r2
 8016bf8:	e7fb      	b.n	8016bf2 <__ascii_mbtowc+0x16>
 8016bfa:	f06f 0001 	mvn.w	r0, #1
 8016bfe:	e7f8      	b.n	8016bf2 <__ascii_mbtowc+0x16>

08016c00 <__malloc_lock>:
 8016c00:	4801      	ldr	r0, [pc, #4]	@ (8016c08 <__malloc_lock+0x8>)
 8016c02:	f7ff bba2 	b.w	801634a <__retarget_lock_acquire_recursive>
 8016c06:	bf00      	nop
 8016c08:	2000e6b8 	.word	0x2000e6b8

08016c0c <__malloc_unlock>:
 8016c0c:	4801      	ldr	r0, [pc, #4]	@ (8016c14 <__malloc_unlock+0x8>)
 8016c0e:	f7ff bb9d 	b.w	801634c <__retarget_lock_release_recursive>
 8016c12:	bf00      	nop
 8016c14:	2000e6b8 	.word	0x2000e6b8

08016c18 <_Balloc>:
 8016c18:	b570      	push	{r4, r5, r6, lr}
 8016c1a:	69c6      	ldr	r6, [r0, #28]
 8016c1c:	4604      	mov	r4, r0
 8016c1e:	460d      	mov	r5, r1
 8016c20:	b976      	cbnz	r6, 8016c40 <_Balloc+0x28>
 8016c22:	2010      	movs	r0, #16
 8016c24:	f001 f88a 	bl	8017d3c <malloc>
 8016c28:	4602      	mov	r2, r0
 8016c2a:	61e0      	str	r0, [r4, #28]
 8016c2c:	b920      	cbnz	r0, 8016c38 <_Balloc+0x20>
 8016c2e:	4b18      	ldr	r3, [pc, #96]	@ (8016c90 <_Balloc+0x78>)
 8016c30:	4818      	ldr	r0, [pc, #96]	@ (8016c94 <_Balloc+0x7c>)
 8016c32:	216b      	movs	r1, #107	@ 0x6b
 8016c34:	f001 f850 	bl	8017cd8 <__assert_func>
 8016c38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016c3c:	6006      	str	r6, [r0, #0]
 8016c3e:	60c6      	str	r6, [r0, #12]
 8016c40:	69e6      	ldr	r6, [r4, #28]
 8016c42:	68f3      	ldr	r3, [r6, #12]
 8016c44:	b183      	cbz	r3, 8016c68 <_Balloc+0x50>
 8016c46:	69e3      	ldr	r3, [r4, #28]
 8016c48:	68db      	ldr	r3, [r3, #12]
 8016c4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016c4e:	b9b8      	cbnz	r0, 8016c80 <_Balloc+0x68>
 8016c50:	2101      	movs	r1, #1
 8016c52:	fa01 f605 	lsl.w	r6, r1, r5
 8016c56:	1d72      	adds	r2, r6, #5
 8016c58:	0092      	lsls	r2, r2, #2
 8016c5a:	4620      	mov	r0, r4
 8016c5c:	f001 f85a 	bl	8017d14 <_calloc_r>
 8016c60:	b160      	cbz	r0, 8016c7c <_Balloc+0x64>
 8016c62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016c66:	e00e      	b.n	8016c86 <_Balloc+0x6e>
 8016c68:	2221      	movs	r2, #33	@ 0x21
 8016c6a:	2104      	movs	r1, #4
 8016c6c:	4620      	mov	r0, r4
 8016c6e:	f001 f851 	bl	8017d14 <_calloc_r>
 8016c72:	69e3      	ldr	r3, [r4, #28]
 8016c74:	60f0      	str	r0, [r6, #12]
 8016c76:	68db      	ldr	r3, [r3, #12]
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d1e4      	bne.n	8016c46 <_Balloc+0x2e>
 8016c7c:	2000      	movs	r0, #0
 8016c7e:	bd70      	pop	{r4, r5, r6, pc}
 8016c80:	6802      	ldr	r2, [r0, #0]
 8016c82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016c86:	2300      	movs	r3, #0
 8016c88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016c8c:	e7f7      	b.n	8016c7e <_Balloc+0x66>
 8016c8e:	bf00      	nop
 8016c90:	08018efa 	.word	0x08018efa
 8016c94:	08018f11 	.word	0x08018f11

08016c98 <_Bfree>:
 8016c98:	b570      	push	{r4, r5, r6, lr}
 8016c9a:	69c6      	ldr	r6, [r0, #28]
 8016c9c:	4605      	mov	r5, r0
 8016c9e:	460c      	mov	r4, r1
 8016ca0:	b976      	cbnz	r6, 8016cc0 <_Bfree+0x28>
 8016ca2:	2010      	movs	r0, #16
 8016ca4:	f001 f84a 	bl	8017d3c <malloc>
 8016ca8:	4602      	mov	r2, r0
 8016caa:	61e8      	str	r0, [r5, #28]
 8016cac:	b920      	cbnz	r0, 8016cb8 <_Bfree+0x20>
 8016cae:	4b09      	ldr	r3, [pc, #36]	@ (8016cd4 <_Bfree+0x3c>)
 8016cb0:	4809      	ldr	r0, [pc, #36]	@ (8016cd8 <_Bfree+0x40>)
 8016cb2:	218f      	movs	r1, #143	@ 0x8f
 8016cb4:	f001 f810 	bl	8017cd8 <__assert_func>
 8016cb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016cbc:	6006      	str	r6, [r0, #0]
 8016cbe:	60c6      	str	r6, [r0, #12]
 8016cc0:	b13c      	cbz	r4, 8016cd2 <_Bfree+0x3a>
 8016cc2:	69eb      	ldr	r3, [r5, #28]
 8016cc4:	6862      	ldr	r2, [r4, #4]
 8016cc6:	68db      	ldr	r3, [r3, #12]
 8016cc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016ccc:	6021      	str	r1, [r4, #0]
 8016cce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016cd2:	bd70      	pop	{r4, r5, r6, pc}
 8016cd4:	08018efa 	.word	0x08018efa
 8016cd8:	08018f11 	.word	0x08018f11

08016cdc <__multadd>:
 8016cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ce0:	690d      	ldr	r5, [r1, #16]
 8016ce2:	4607      	mov	r7, r0
 8016ce4:	460c      	mov	r4, r1
 8016ce6:	461e      	mov	r6, r3
 8016ce8:	f101 0c14 	add.w	ip, r1, #20
 8016cec:	2000      	movs	r0, #0
 8016cee:	f8dc 3000 	ldr.w	r3, [ip]
 8016cf2:	b299      	uxth	r1, r3
 8016cf4:	fb02 6101 	mla	r1, r2, r1, r6
 8016cf8:	0c1e      	lsrs	r6, r3, #16
 8016cfa:	0c0b      	lsrs	r3, r1, #16
 8016cfc:	fb02 3306 	mla	r3, r2, r6, r3
 8016d00:	b289      	uxth	r1, r1
 8016d02:	3001      	adds	r0, #1
 8016d04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016d08:	4285      	cmp	r5, r0
 8016d0a:	f84c 1b04 	str.w	r1, [ip], #4
 8016d0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016d12:	dcec      	bgt.n	8016cee <__multadd+0x12>
 8016d14:	b30e      	cbz	r6, 8016d5a <__multadd+0x7e>
 8016d16:	68a3      	ldr	r3, [r4, #8]
 8016d18:	42ab      	cmp	r3, r5
 8016d1a:	dc19      	bgt.n	8016d50 <__multadd+0x74>
 8016d1c:	6861      	ldr	r1, [r4, #4]
 8016d1e:	4638      	mov	r0, r7
 8016d20:	3101      	adds	r1, #1
 8016d22:	f7ff ff79 	bl	8016c18 <_Balloc>
 8016d26:	4680      	mov	r8, r0
 8016d28:	b928      	cbnz	r0, 8016d36 <__multadd+0x5a>
 8016d2a:	4602      	mov	r2, r0
 8016d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8016d60 <__multadd+0x84>)
 8016d2e:	480d      	ldr	r0, [pc, #52]	@ (8016d64 <__multadd+0x88>)
 8016d30:	21ba      	movs	r1, #186	@ 0xba
 8016d32:	f000 ffd1 	bl	8017cd8 <__assert_func>
 8016d36:	6922      	ldr	r2, [r4, #16]
 8016d38:	3202      	adds	r2, #2
 8016d3a:	f104 010c 	add.w	r1, r4, #12
 8016d3e:	0092      	lsls	r2, r2, #2
 8016d40:	300c      	adds	r0, #12
 8016d42:	f7ff fb0c 	bl	801635e <memcpy>
 8016d46:	4621      	mov	r1, r4
 8016d48:	4638      	mov	r0, r7
 8016d4a:	f7ff ffa5 	bl	8016c98 <_Bfree>
 8016d4e:	4644      	mov	r4, r8
 8016d50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016d54:	3501      	adds	r5, #1
 8016d56:	615e      	str	r6, [r3, #20]
 8016d58:	6125      	str	r5, [r4, #16]
 8016d5a:	4620      	mov	r0, r4
 8016d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d60:	08018e89 	.word	0x08018e89
 8016d64:	08018f11 	.word	0x08018f11

08016d68 <__s2b>:
 8016d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d6c:	460c      	mov	r4, r1
 8016d6e:	4615      	mov	r5, r2
 8016d70:	461f      	mov	r7, r3
 8016d72:	2209      	movs	r2, #9
 8016d74:	3308      	adds	r3, #8
 8016d76:	4606      	mov	r6, r0
 8016d78:	fb93 f3f2 	sdiv	r3, r3, r2
 8016d7c:	2100      	movs	r1, #0
 8016d7e:	2201      	movs	r2, #1
 8016d80:	429a      	cmp	r2, r3
 8016d82:	db09      	blt.n	8016d98 <__s2b+0x30>
 8016d84:	4630      	mov	r0, r6
 8016d86:	f7ff ff47 	bl	8016c18 <_Balloc>
 8016d8a:	b940      	cbnz	r0, 8016d9e <__s2b+0x36>
 8016d8c:	4602      	mov	r2, r0
 8016d8e:	4b19      	ldr	r3, [pc, #100]	@ (8016df4 <__s2b+0x8c>)
 8016d90:	4819      	ldr	r0, [pc, #100]	@ (8016df8 <__s2b+0x90>)
 8016d92:	21d3      	movs	r1, #211	@ 0xd3
 8016d94:	f000 ffa0 	bl	8017cd8 <__assert_func>
 8016d98:	0052      	lsls	r2, r2, #1
 8016d9a:	3101      	adds	r1, #1
 8016d9c:	e7f0      	b.n	8016d80 <__s2b+0x18>
 8016d9e:	9b08      	ldr	r3, [sp, #32]
 8016da0:	6143      	str	r3, [r0, #20]
 8016da2:	2d09      	cmp	r5, #9
 8016da4:	f04f 0301 	mov.w	r3, #1
 8016da8:	6103      	str	r3, [r0, #16]
 8016daa:	dd16      	ble.n	8016dda <__s2b+0x72>
 8016dac:	f104 0909 	add.w	r9, r4, #9
 8016db0:	46c8      	mov	r8, r9
 8016db2:	442c      	add	r4, r5
 8016db4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016db8:	4601      	mov	r1, r0
 8016dba:	3b30      	subs	r3, #48	@ 0x30
 8016dbc:	220a      	movs	r2, #10
 8016dbe:	4630      	mov	r0, r6
 8016dc0:	f7ff ff8c 	bl	8016cdc <__multadd>
 8016dc4:	45a0      	cmp	r8, r4
 8016dc6:	d1f5      	bne.n	8016db4 <__s2b+0x4c>
 8016dc8:	f1a5 0408 	sub.w	r4, r5, #8
 8016dcc:	444c      	add	r4, r9
 8016dce:	1b2d      	subs	r5, r5, r4
 8016dd0:	1963      	adds	r3, r4, r5
 8016dd2:	42bb      	cmp	r3, r7
 8016dd4:	db04      	blt.n	8016de0 <__s2b+0x78>
 8016dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016dda:	340a      	adds	r4, #10
 8016ddc:	2509      	movs	r5, #9
 8016dde:	e7f6      	b.n	8016dce <__s2b+0x66>
 8016de0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016de4:	4601      	mov	r1, r0
 8016de6:	3b30      	subs	r3, #48	@ 0x30
 8016de8:	220a      	movs	r2, #10
 8016dea:	4630      	mov	r0, r6
 8016dec:	f7ff ff76 	bl	8016cdc <__multadd>
 8016df0:	e7ee      	b.n	8016dd0 <__s2b+0x68>
 8016df2:	bf00      	nop
 8016df4:	08018e89 	.word	0x08018e89
 8016df8:	08018f11 	.word	0x08018f11

08016dfc <__hi0bits>:
 8016dfc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016e00:	4603      	mov	r3, r0
 8016e02:	bf36      	itet	cc
 8016e04:	0403      	lslcc	r3, r0, #16
 8016e06:	2000      	movcs	r0, #0
 8016e08:	2010      	movcc	r0, #16
 8016e0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016e0e:	bf3c      	itt	cc
 8016e10:	021b      	lslcc	r3, r3, #8
 8016e12:	3008      	addcc	r0, #8
 8016e14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016e18:	bf3c      	itt	cc
 8016e1a:	011b      	lslcc	r3, r3, #4
 8016e1c:	3004      	addcc	r0, #4
 8016e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016e22:	bf3c      	itt	cc
 8016e24:	009b      	lslcc	r3, r3, #2
 8016e26:	3002      	addcc	r0, #2
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	db05      	blt.n	8016e38 <__hi0bits+0x3c>
 8016e2c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8016e30:	f100 0001 	add.w	r0, r0, #1
 8016e34:	bf08      	it	eq
 8016e36:	2020      	moveq	r0, #32
 8016e38:	4770      	bx	lr

08016e3a <__lo0bits>:
 8016e3a:	6803      	ldr	r3, [r0, #0]
 8016e3c:	4602      	mov	r2, r0
 8016e3e:	f013 0007 	ands.w	r0, r3, #7
 8016e42:	d00b      	beq.n	8016e5c <__lo0bits+0x22>
 8016e44:	07d9      	lsls	r1, r3, #31
 8016e46:	d421      	bmi.n	8016e8c <__lo0bits+0x52>
 8016e48:	0798      	lsls	r0, r3, #30
 8016e4a:	bf49      	itett	mi
 8016e4c:	085b      	lsrmi	r3, r3, #1
 8016e4e:	089b      	lsrpl	r3, r3, #2
 8016e50:	2001      	movmi	r0, #1
 8016e52:	6013      	strmi	r3, [r2, #0]
 8016e54:	bf5c      	itt	pl
 8016e56:	6013      	strpl	r3, [r2, #0]
 8016e58:	2002      	movpl	r0, #2
 8016e5a:	4770      	bx	lr
 8016e5c:	b299      	uxth	r1, r3
 8016e5e:	b909      	cbnz	r1, 8016e64 <__lo0bits+0x2a>
 8016e60:	0c1b      	lsrs	r3, r3, #16
 8016e62:	2010      	movs	r0, #16
 8016e64:	b2d9      	uxtb	r1, r3
 8016e66:	b909      	cbnz	r1, 8016e6c <__lo0bits+0x32>
 8016e68:	3008      	adds	r0, #8
 8016e6a:	0a1b      	lsrs	r3, r3, #8
 8016e6c:	0719      	lsls	r1, r3, #28
 8016e6e:	bf04      	itt	eq
 8016e70:	091b      	lsreq	r3, r3, #4
 8016e72:	3004      	addeq	r0, #4
 8016e74:	0799      	lsls	r1, r3, #30
 8016e76:	bf04      	itt	eq
 8016e78:	089b      	lsreq	r3, r3, #2
 8016e7a:	3002      	addeq	r0, #2
 8016e7c:	07d9      	lsls	r1, r3, #31
 8016e7e:	d403      	bmi.n	8016e88 <__lo0bits+0x4e>
 8016e80:	085b      	lsrs	r3, r3, #1
 8016e82:	f100 0001 	add.w	r0, r0, #1
 8016e86:	d003      	beq.n	8016e90 <__lo0bits+0x56>
 8016e88:	6013      	str	r3, [r2, #0]
 8016e8a:	4770      	bx	lr
 8016e8c:	2000      	movs	r0, #0
 8016e8e:	4770      	bx	lr
 8016e90:	2020      	movs	r0, #32
 8016e92:	4770      	bx	lr

08016e94 <__i2b>:
 8016e94:	b510      	push	{r4, lr}
 8016e96:	460c      	mov	r4, r1
 8016e98:	2101      	movs	r1, #1
 8016e9a:	f7ff febd 	bl	8016c18 <_Balloc>
 8016e9e:	4602      	mov	r2, r0
 8016ea0:	b928      	cbnz	r0, 8016eae <__i2b+0x1a>
 8016ea2:	4b05      	ldr	r3, [pc, #20]	@ (8016eb8 <__i2b+0x24>)
 8016ea4:	4805      	ldr	r0, [pc, #20]	@ (8016ebc <__i2b+0x28>)
 8016ea6:	f240 1145 	movw	r1, #325	@ 0x145
 8016eaa:	f000 ff15 	bl	8017cd8 <__assert_func>
 8016eae:	2301      	movs	r3, #1
 8016eb0:	6144      	str	r4, [r0, #20]
 8016eb2:	6103      	str	r3, [r0, #16]
 8016eb4:	bd10      	pop	{r4, pc}
 8016eb6:	bf00      	nop
 8016eb8:	08018e89 	.word	0x08018e89
 8016ebc:	08018f11 	.word	0x08018f11

08016ec0 <__multiply>:
 8016ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ec4:	4614      	mov	r4, r2
 8016ec6:	690a      	ldr	r2, [r1, #16]
 8016ec8:	6923      	ldr	r3, [r4, #16]
 8016eca:	429a      	cmp	r2, r3
 8016ecc:	bfa8      	it	ge
 8016ece:	4623      	movge	r3, r4
 8016ed0:	460f      	mov	r7, r1
 8016ed2:	bfa4      	itt	ge
 8016ed4:	460c      	movge	r4, r1
 8016ed6:	461f      	movge	r7, r3
 8016ed8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8016edc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8016ee0:	68a3      	ldr	r3, [r4, #8]
 8016ee2:	6861      	ldr	r1, [r4, #4]
 8016ee4:	eb0a 0609 	add.w	r6, sl, r9
 8016ee8:	42b3      	cmp	r3, r6
 8016eea:	b085      	sub	sp, #20
 8016eec:	bfb8      	it	lt
 8016eee:	3101      	addlt	r1, #1
 8016ef0:	f7ff fe92 	bl	8016c18 <_Balloc>
 8016ef4:	b930      	cbnz	r0, 8016f04 <__multiply+0x44>
 8016ef6:	4602      	mov	r2, r0
 8016ef8:	4b44      	ldr	r3, [pc, #272]	@ (801700c <__multiply+0x14c>)
 8016efa:	4845      	ldr	r0, [pc, #276]	@ (8017010 <__multiply+0x150>)
 8016efc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8016f00:	f000 feea 	bl	8017cd8 <__assert_func>
 8016f04:	f100 0514 	add.w	r5, r0, #20
 8016f08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016f0c:	462b      	mov	r3, r5
 8016f0e:	2200      	movs	r2, #0
 8016f10:	4543      	cmp	r3, r8
 8016f12:	d321      	bcc.n	8016f58 <__multiply+0x98>
 8016f14:	f107 0114 	add.w	r1, r7, #20
 8016f18:	f104 0214 	add.w	r2, r4, #20
 8016f1c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8016f20:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8016f24:	9302      	str	r3, [sp, #8]
 8016f26:	1b13      	subs	r3, r2, r4
 8016f28:	3b15      	subs	r3, #21
 8016f2a:	f023 0303 	bic.w	r3, r3, #3
 8016f2e:	3304      	adds	r3, #4
 8016f30:	f104 0715 	add.w	r7, r4, #21
 8016f34:	42ba      	cmp	r2, r7
 8016f36:	bf38      	it	cc
 8016f38:	2304      	movcc	r3, #4
 8016f3a:	9301      	str	r3, [sp, #4]
 8016f3c:	9b02      	ldr	r3, [sp, #8]
 8016f3e:	9103      	str	r1, [sp, #12]
 8016f40:	428b      	cmp	r3, r1
 8016f42:	d80c      	bhi.n	8016f5e <__multiply+0x9e>
 8016f44:	2e00      	cmp	r6, #0
 8016f46:	dd03      	ble.n	8016f50 <__multiply+0x90>
 8016f48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d05b      	beq.n	8017008 <__multiply+0x148>
 8016f50:	6106      	str	r6, [r0, #16]
 8016f52:	b005      	add	sp, #20
 8016f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f58:	f843 2b04 	str.w	r2, [r3], #4
 8016f5c:	e7d8      	b.n	8016f10 <__multiply+0x50>
 8016f5e:	f8b1 a000 	ldrh.w	sl, [r1]
 8016f62:	f1ba 0f00 	cmp.w	sl, #0
 8016f66:	d024      	beq.n	8016fb2 <__multiply+0xf2>
 8016f68:	f104 0e14 	add.w	lr, r4, #20
 8016f6c:	46a9      	mov	r9, r5
 8016f6e:	f04f 0c00 	mov.w	ip, #0
 8016f72:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016f76:	f8d9 3000 	ldr.w	r3, [r9]
 8016f7a:	fa1f fb87 	uxth.w	fp, r7
 8016f7e:	b29b      	uxth	r3, r3
 8016f80:	fb0a 330b 	mla	r3, sl, fp, r3
 8016f84:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8016f88:	f8d9 7000 	ldr.w	r7, [r9]
 8016f8c:	4463      	add	r3, ip
 8016f8e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8016f92:	fb0a c70b 	mla	r7, sl, fp, ip
 8016f96:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8016f9a:	b29b      	uxth	r3, r3
 8016f9c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8016fa0:	4572      	cmp	r2, lr
 8016fa2:	f849 3b04 	str.w	r3, [r9], #4
 8016fa6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8016faa:	d8e2      	bhi.n	8016f72 <__multiply+0xb2>
 8016fac:	9b01      	ldr	r3, [sp, #4]
 8016fae:	f845 c003 	str.w	ip, [r5, r3]
 8016fb2:	9b03      	ldr	r3, [sp, #12]
 8016fb4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8016fb8:	3104      	adds	r1, #4
 8016fba:	f1b9 0f00 	cmp.w	r9, #0
 8016fbe:	d021      	beq.n	8017004 <__multiply+0x144>
 8016fc0:	682b      	ldr	r3, [r5, #0]
 8016fc2:	f104 0c14 	add.w	ip, r4, #20
 8016fc6:	46ae      	mov	lr, r5
 8016fc8:	f04f 0a00 	mov.w	sl, #0
 8016fcc:	f8bc b000 	ldrh.w	fp, [ip]
 8016fd0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8016fd4:	fb09 770b 	mla	r7, r9, fp, r7
 8016fd8:	4457      	add	r7, sl
 8016fda:	b29b      	uxth	r3, r3
 8016fdc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8016fe0:	f84e 3b04 	str.w	r3, [lr], #4
 8016fe4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8016fe8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016fec:	f8be 3000 	ldrh.w	r3, [lr]
 8016ff0:	fb09 330a 	mla	r3, r9, sl, r3
 8016ff4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8016ff8:	4562      	cmp	r2, ip
 8016ffa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016ffe:	d8e5      	bhi.n	8016fcc <__multiply+0x10c>
 8017000:	9f01      	ldr	r7, [sp, #4]
 8017002:	51eb      	str	r3, [r5, r7]
 8017004:	3504      	adds	r5, #4
 8017006:	e799      	b.n	8016f3c <__multiply+0x7c>
 8017008:	3e01      	subs	r6, #1
 801700a:	e79b      	b.n	8016f44 <__multiply+0x84>
 801700c:	08018e89 	.word	0x08018e89
 8017010:	08018f11 	.word	0x08018f11

08017014 <__pow5mult>:
 8017014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017018:	4615      	mov	r5, r2
 801701a:	f012 0203 	ands.w	r2, r2, #3
 801701e:	4607      	mov	r7, r0
 8017020:	460e      	mov	r6, r1
 8017022:	d007      	beq.n	8017034 <__pow5mult+0x20>
 8017024:	4c25      	ldr	r4, [pc, #148]	@ (80170bc <__pow5mult+0xa8>)
 8017026:	3a01      	subs	r2, #1
 8017028:	2300      	movs	r3, #0
 801702a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801702e:	f7ff fe55 	bl	8016cdc <__multadd>
 8017032:	4606      	mov	r6, r0
 8017034:	10ad      	asrs	r5, r5, #2
 8017036:	d03d      	beq.n	80170b4 <__pow5mult+0xa0>
 8017038:	69fc      	ldr	r4, [r7, #28]
 801703a:	b97c      	cbnz	r4, 801705c <__pow5mult+0x48>
 801703c:	2010      	movs	r0, #16
 801703e:	f000 fe7d 	bl	8017d3c <malloc>
 8017042:	4602      	mov	r2, r0
 8017044:	61f8      	str	r0, [r7, #28]
 8017046:	b928      	cbnz	r0, 8017054 <__pow5mult+0x40>
 8017048:	4b1d      	ldr	r3, [pc, #116]	@ (80170c0 <__pow5mult+0xac>)
 801704a:	481e      	ldr	r0, [pc, #120]	@ (80170c4 <__pow5mult+0xb0>)
 801704c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8017050:	f000 fe42 	bl	8017cd8 <__assert_func>
 8017054:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017058:	6004      	str	r4, [r0, #0]
 801705a:	60c4      	str	r4, [r0, #12]
 801705c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8017060:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017064:	b94c      	cbnz	r4, 801707a <__pow5mult+0x66>
 8017066:	f240 2171 	movw	r1, #625	@ 0x271
 801706a:	4638      	mov	r0, r7
 801706c:	f7ff ff12 	bl	8016e94 <__i2b>
 8017070:	2300      	movs	r3, #0
 8017072:	f8c8 0008 	str.w	r0, [r8, #8]
 8017076:	4604      	mov	r4, r0
 8017078:	6003      	str	r3, [r0, #0]
 801707a:	f04f 0900 	mov.w	r9, #0
 801707e:	07eb      	lsls	r3, r5, #31
 8017080:	d50a      	bpl.n	8017098 <__pow5mult+0x84>
 8017082:	4631      	mov	r1, r6
 8017084:	4622      	mov	r2, r4
 8017086:	4638      	mov	r0, r7
 8017088:	f7ff ff1a 	bl	8016ec0 <__multiply>
 801708c:	4631      	mov	r1, r6
 801708e:	4680      	mov	r8, r0
 8017090:	4638      	mov	r0, r7
 8017092:	f7ff fe01 	bl	8016c98 <_Bfree>
 8017096:	4646      	mov	r6, r8
 8017098:	106d      	asrs	r5, r5, #1
 801709a:	d00b      	beq.n	80170b4 <__pow5mult+0xa0>
 801709c:	6820      	ldr	r0, [r4, #0]
 801709e:	b938      	cbnz	r0, 80170b0 <__pow5mult+0x9c>
 80170a0:	4622      	mov	r2, r4
 80170a2:	4621      	mov	r1, r4
 80170a4:	4638      	mov	r0, r7
 80170a6:	f7ff ff0b 	bl	8016ec0 <__multiply>
 80170aa:	6020      	str	r0, [r4, #0]
 80170ac:	f8c0 9000 	str.w	r9, [r0]
 80170b0:	4604      	mov	r4, r0
 80170b2:	e7e4      	b.n	801707e <__pow5mult+0x6a>
 80170b4:	4630      	mov	r0, r6
 80170b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80170ba:	bf00      	nop
 80170bc:	08018f6c 	.word	0x08018f6c
 80170c0:	08018efa 	.word	0x08018efa
 80170c4:	08018f11 	.word	0x08018f11

080170c8 <__lshift>:
 80170c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80170cc:	460c      	mov	r4, r1
 80170ce:	6849      	ldr	r1, [r1, #4]
 80170d0:	6923      	ldr	r3, [r4, #16]
 80170d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80170d6:	68a3      	ldr	r3, [r4, #8]
 80170d8:	4607      	mov	r7, r0
 80170da:	4691      	mov	r9, r2
 80170dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80170e0:	f108 0601 	add.w	r6, r8, #1
 80170e4:	42b3      	cmp	r3, r6
 80170e6:	db0b      	blt.n	8017100 <__lshift+0x38>
 80170e8:	4638      	mov	r0, r7
 80170ea:	f7ff fd95 	bl	8016c18 <_Balloc>
 80170ee:	4605      	mov	r5, r0
 80170f0:	b948      	cbnz	r0, 8017106 <__lshift+0x3e>
 80170f2:	4602      	mov	r2, r0
 80170f4:	4b28      	ldr	r3, [pc, #160]	@ (8017198 <__lshift+0xd0>)
 80170f6:	4829      	ldr	r0, [pc, #164]	@ (801719c <__lshift+0xd4>)
 80170f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80170fc:	f000 fdec 	bl	8017cd8 <__assert_func>
 8017100:	3101      	adds	r1, #1
 8017102:	005b      	lsls	r3, r3, #1
 8017104:	e7ee      	b.n	80170e4 <__lshift+0x1c>
 8017106:	2300      	movs	r3, #0
 8017108:	f100 0114 	add.w	r1, r0, #20
 801710c:	f100 0210 	add.w	r2, r0, #16
 8017110:	4618      	mov	r0, r3
 8017112:	4553      	cmp	r3, sl
 8017114:	db33      	blt.n	801717e <__lshift+0xb6>
 8017116:	6920      	ldr	r0, [r4, #16]
 8017118:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801711c:	f104 0314 	add.w	r3, r4, #20
 8017120:	f019 091f 	ands.w	r9, r9, #31
 8017124:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017128:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801712c:	d02b      	beq.n	8017186 <__lshift+0xbe>
 801712e:	f1c9 0e20 	rsb	lr, r9, #32
 8017132:	468a      	mov	sl, r1
 8017134:	2200      	movs	r2, #0
 8017136:	6818      	ldr	r0, [r3, #0]
 8017138:	fa00 f009 	lsl.w	r0, r0, r9
 801713c:	4310      	orrs	r0, r2
 801713e:	f84a 0b04 	str.w	r0, [sl], #4
 8017142:	f853 2b04 	ldr.w	r2, [r3], #4
 8017146:	459c      	cmp	ip, r3
 8017148:	fa22 f20e 	lsr.w	r2, r2, lr
 801714c:	d8f3      	bhi.n	8017136 <__lshift+0x6e>
 801714e:	ebac 0304 	sub.w	r3, ip, r4
 8017152:	3b15      	subs	r3, #21
 8017154:	f023 0303 	bic.w	r3, r3, #3
 8017158:	3304      	adds	r3, #4
 801715a:	f104 0015 	add.w	r0, r4, #21
 801715e:	4584      	cmp	ip, r0
 8017160:	bf38      	it	cc
 8017162:	2304      	movcc	r3, #4
 8017164:	50ca      	str	r2, [r1, r3]
 8017166:	b10a      	cbz	r2, 801716c <__lshift+0xa4>
 8017168:	f108 0602 	add.w	r6, r8, #2
 801716c:	3e01      	subs	r6, #1
 801716e:	4638      	mov	r0, r7
 8017170:	612e      	str	r6, [r5, #16]
 8017172:	4621      	mov	r1, r4
 8017174:	f7ff fd90 	bl	8016c98 <_Bfree>
 8017178:	4628      	mov	r0, r5
 801717a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801717e:	f842 0f04 	str.w	r0, [r2, #4]!
 8017182:	3301      	adds	r3, #1
 8017184:	e7c5      	b.n	8017112 <__lshift+0x4a>
 8017186:	3904      	subs	r1, #4
 8017188:	f853 2b04 	ldr.w	r2, [r3], #4
 801718c:	f841 2f04 	str.w	r2, [r1, #4]!
 8017190:	459c      	cmp	ip, r3
 8017192:	d8f9      	bhi.n	8017188 <__lshift+0xc0>
 8017194:	e7ea      	b.n	801716c <__lshift+0xa4>
 8017196:	bf00      	nop
 8017198:	08018e89 	.word	0x08018e89
 801719c:	08018f11 	.word	0x08018f11

080171a0 <__mcmp>:
 80171a0:	690a      	ldr	r2, [r1, #16]
 80171a2:	4603      	mov	r3, r0
 80171a4:	6900      	ldr	r0, [r0, #16]
 80171a6:	1a80      	subs	r0, r0, r2
 80171a8:	b530      	push	{r4, r5, lr}
 80171aa:	d10e      	bne.n	80171ca <__mcmp+0x2a>
 80171ac:	3314      	adds	r3, #20
 80171ae:	3114      	adds	r1, #20
 80171b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80171b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80171b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80171bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80171c0:	4295      	cmp	r5, r2
 80171c2:	d003      	beq.n	80171cc <__mcmp+0x2c>
 80171c4:	d205      	bcs.n	80171d2 <__mcmp+0x32>
 80171c6:	f04f 30ff 	mov.w	r0, #4294967295
 80171ca:	bd30      	pop	{r4, r5, pc}
 80171cc:	42a3      	cmp	r3, r4
 80171ce:	d3f3      	bcc.n	80171b8 <__mcmp+0x18>
 80171d0:	e7fb      	b.n	80171ca <__mcmp+0x2a>
 80171d2:	2001      	movs	r0, #1
 80171d4:	e7f9      	b.n	80171ca <__mcmp+0x2a>
	...

080171d8 <__mdiff>:
 80171d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171dc:	4689      	mov	r9, r1
 80171de:	4606      	mov	r6, r0
 80171e0:	4611      	mov	r1, r2
 80171e2:	4648      	mov	r0, r9
 80171e4:	4614      	mov	r4, r2
 80171e6:	f7ff ffdb 	bl	80171a0 <__mcmp>
 80171ea:	1e05      	subs	r5, r0, #0
 80171ec:	d112      	bne.n	8017214 <__mdiff+0x3c>
 80171ee:	4629      	mov	r1, r5
 80171f0:	4630      	mov	r0, r6
 80171f2:	f7ff fd11 	bl	8016c18 <_Balloc>
 80171f6:	4602      	mov	r2, r0
 80171f8:	b928      	cbnz	r0, 8017206 <__mdiff+0x2e>
 80171fa:	4b3f      	ldr	r3, [pc, #252]	@ (80172f8 <__mdiff+0x120>)
 80171fc:	f240 2137 	movw	r1, #567	@ 0x237
 8017200:	483e      	ldr	r0, [pc, #248]	@ (80172fc <__mdiff+0x124>)
 8017202:	f000 fd69 	bl	8017cd8 <__assert_func>
 8017206:	2301      	movs	r3, #1
 8017208:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801720c:	4610      	mov	r0, r2
 801720e:	b003      	add	sp, #12
 8017210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017214:	bfbc      	itt	lt
 8017216:	464b      	movlt	r3, r9
 8017218:	46a1      	movlt	r9, r4
 801721a:	4630      	mov	r0, r6
 801721c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8017220:	bfba      	itte	lt
 8017222:	461c      	movlt	r4, r3
 8017224:	2501      	movlt	r5, #1
 8017226:	2500      	movge	r5, #0
 8017228:	f7ff fcf6 	bl	8016c18 <_Balloc>
 801722c:	4602      	mov	r2, r0
 801722e:	b918      	cbnz	r0, 8017238 <__mdiff+0x60>
 8017230:	4b31      	ldr	r3, [pc, #196]	@ (80172f8 <__mdiff+0x120>)
 8017232:	f240 2145 	movw	r1, #581	@ 0x245
 8017236:	e7e3      	b.n	8017200 <__mdiff+0x28>
 8017238:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801723c:	6926      	ldr	r6, [r4, #16]
 801723e:	60c5      	str	r5, [r0, #12]
 8017240:	f109 0310 	add.w	r3, r9, #16
 8017244:	f109 0514 	add.w	r5, r9, #20
 8017248:	f104 0e14 	add.w	lr, r4, #20
 801724c:	f100 0b14 	add.w	fp, r0, #20
 8017250:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8017254:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8017258:	9301      	str	r3, [sp, #4]
 801725a:	46d9      	mov	r9, fp
 801725c:	f04f 0c00 	mov.w	ip, #0
 8017260:	9b01      	ldr	r3, [sp, #4]
 8017262:	f85e 0b04 	ldr.w	r0, [lr], #4
 8017266:	f853 af04 	ldr.w	sl, [r3, #4]!
 801726a:	9301      	str	r3, [sp, #4]
 801726c:	fa1f f38a 	uxth.w	r3, sl
 8017270:	4619      	mov	r1, r3
 8017272:	b283      	uxth	r3, r0
 8017274:	1acb      	subs	r3, r1, r3
 8017276:	0c00      	lsrs	r0, r0, #16
 8017278:	4463      	add	r3, ip
 801727a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801727e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8017282:	b29b      	uxth	r3, r3
 8017284:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8017288:	4576      	cmp	r6, lr
 801728a:	f849 3b04 	str.w	r3, [r9], #4
 801728e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017292:	d8e5      	bhi.n	8017260 <__mdiff+0x88>
 8017294:	1b33      	subs	r3, r6, r4
 8017296:	3b15      	subs	r3, #21
 8017298:	f023 0303 	bic.w	r3, r3, #3
 801729c:	3415      	adds	r4, #21
 801729e:	3304      	adds	r3, #4
 80172a0:	42a6      	cmp	r6, r4
 80172a2:	bf38      	it	cc
 80172a4:	2304      	movcc	r3, #4
 80172a6:	441d      	add	r5, r3
 80172a8:	445b      	add	r3, fp
 80172aa:	461e      	mov	r6, r3
 80172ac:	462c      	mov	r4, r5
 80172ae:	4544      	cmp	r4, r8
 80172b0:	d30e      	bcc.n	80172d0 <__mdiff+0xf8>
 80172b2:	f108 0103 	add.w	r1, r8, #3
 80172b6:	1b49      	subs	r1, r1, r5
 80172b8:	f021 0103 	bic.w	r1, r1, #3
 80172bc:	3d03      	subs	r5, #3
 80172be:	45a8      	cmp	r8, r5
 80172c0:	bf38      	it	cc
 80172c2:	2100      	movcc	r1, #0
 80172c4:	440b      	add	r3, r1
 80172c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80172ca:	b191      	cbz	r1, 80172f2 <__mdiff+0x11a>
 80172cc:	6117      	str	r7, [r2, #16]
 80172ce:	e79d      	b.n	801720c <__mdiff+0x34>
 80172d0:	f854 1b04 	ldr.w	r1, [r4], #4
 80172d4:	46e6      	mov	lr, ip
 80172d6:	0c08      	lsrs	r0, r1, #16
 80172d8:	fa1c fc81 	uxtah	ip, ip, r1
 80172dc:	4471      	add	r1, lr
 80172de:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80172e2:	b289      	uxth	r1, r1
 80172e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80172e8:	f846 1b04 	str.w	r1, [r6], #4
 80172ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80172f0:	e7dd      	b.n	80172ae <__mdiff+0xd6>
 80172f2:	3f01      	subs	r7, #1
 80172f4:	e7e7      	b.n	80172c6 <__mdiff+0xee>
 80172f6:	bf00      	nop
 80172f8:	08018e89 	.word	0x08018e89
 80172fc:	08018f11 	.word	0x08018f11

08017300 <__ulp>:
 8017300:	b082      	sub	sp, #8
 8017302:	ed8d 0b00 	vstr	d0, [sp]
 8017306:	9a01      	ldr	r2, [sp, #4]
 8017308:	4b0f      	ldr	r3, [pc, #60]	@ (8017348 <__ulp+0x48>)
 801730a:	4013      	ands	r3, r2
 801730c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8017310:	2b00      	cmp	r3, #0
 8017312:	dc08      	bgt.n	8017326 <__ulp+0x26>
 8017314:	425b      	negs	r3, r3
 8017316:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801731a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801731e:	da04      	bge.n	801732a <__ulp+0x2a>
 8017320:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8017324:	4113      	asrs	r3, r2
 8017326:	2200      	movs	r2, #0
 8017328:	e008      	b.n	801733c <__ulp+0x3c>
 801732a:	f1a2 0314 	sub.w	r3, r2, #20
 801732e:	2b1e      	cmp	r3, #30
 8017330:	bfda      	itte	le
 8017332:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8017336:	40da      	lsrle	r2, r3
 8017338:	2201      	movgt	r2, #1
 801733a:	2300      	movs	r3, #0
 801733c:	4619      	mov	r1, r3
 801733e:	4610      	mov	r0, r2
 8017340:	ec41 0b10 	vmov	d0, r0, r1
 8017344:	b002      	add	sp, #8
 8017346:	4770      	bx	lr
 8017348:	7ff00000 	.word	0x7ff00000

0801734c <__b2d>:
 801734c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017350:	6906      	ldr	r6, [r0, #16]
 8017352:	f100 0814 	add.w	r8, r0, #20
 8017356:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801735a:	1f37      	subs	r7, r6, #4
 801735c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8017360:	4610      	mov	r0, r2
 8017362:	f7ff fd4b 	bl	8016dfc <__hi0bits>
 8017366:	f1c0 0320 	rsb	r3, r0, #32
 801736a:	280a      	cmp	r0, #10
 801736c:	600b      	str	r3, [r1, #0]
 801736e:	491b      	ldr	r1, [pc, #108]	@ (80173dc <__b2d+0x90>)
 8017370:	dc15      	bgt.n	801739e <__b2d+0x52>
 8017372:	f1c0 0c0b 	rsb	ip, r0, #11
 8017376:	fa22 f30c 	lsr.w	r3, r2, ip
 801737a:	45b8      	cmp	r8, r7
 801737c:	ea43 0501 	orr.w	r5, r3, r1
 8017380:	bf34      	ite	cc
 8017382:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017386:	2300      	movcs	r3, #0
 8017388:	3015      	adds	r0, #21
 801738a:	fa02 f000 	lsl.w	r0, r2, r0
 801738e:	fa23 f30c 	lsr.w	r3, r3, ip
 8017392:	4303      	orrs	r3, r0
 8017394:	461c      	mov	r4, r3
 8017396:	ec45 4b10 	vmov	d0, r4, r5
 801739a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801739e:	45b8      	cmp	r8, r7
 80173a0:	bf3a      	itte	cc
 80173a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80173a6:	f1a6 0708 	subcc.w	r7, r6, #8
 80173aa:	2300      	movcs	r3, #0
 80173ac:	380b      	subs	r0, #11
 80173ae:	d012      	beq.n	80173d6 <__b2d+0x8a>
 80173b0:	f1c0 0120 	rsb	r1, r0, #32
 80173b4:	fa23 f401 	lsr.w	r4, r3, r1
 80173b8:	4082      	lsls	r2, r0
 80173ba:	4322      	orrs	r2, r4
 80173bc:	4547      	cmp	r7, r8
 80173be:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80173c2:	bf8c      	ite	hi
 80173c4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80173c8:	2200      	movls	r2, #0
 80173ca:	4083      	lsls	r3, r0
 80173cc:	40ca      	lsrs	r2, r1
 80173ce:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80173d2:	4313      	orrs	r3, r2
 80173d4:	e7de      	b.n	8017394 <__b2d+0x48>
 80173d6:	ea42 0501 	orr.w	r5, r2, r1
 80173da:	e7db      	b.n	8017394 <__b2d+0x48>
 80173dc:	3ff00000 	.word	0x3ff00000

080173e0 <__d2b>:
 80173e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80173e4:	460f      	mov	r7, r1
 80173e6:	2101      	movs	r1, #1
 80173e8:	ec59 8b10 	vmov	r8, r9, d0
 80173ec:	4616      	mov	r6, r2
 80173ee:	f7ff fc13 	bl	8016c18 <_Balloc>
 80173f2:	4604      	mov	r4, r0
 80173f4:	b930      	cbnz	r0, 8017404 <__d2b+0x24>
 80173f6:	4602      	mov	r2, r0
 80173f8:	4b23      	ldr	r3, [pc, #140]	@ (8017488 <__d2b+0xa8>)
 80173fa:	4824      	ldr	r0, [pc, #144]	@ (801748c <__d2b+0xac>)
 80173fc:	f240 310f 	movw	r1, #783	@ 0x30f
 8017400:	f000 fc6a 	bl	8017cd8 <__assert_func>
 8017404:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017408:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801740c:	b10d      	cbz	r5, 8017412 <__d2b+0x32>
 801740e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017412:	9301      	str	r3, [sp, #4]
 8017414:	f1b8 0300 	subs.w	r3, r8, #0
 8017418:	d023      	beq.n	8017462 <__d2b+0x82>
 801741a:	4668      	mov	r0, sp
 801741c:	9300      	str	r3, [sp, #0]
 801741e:	f7ff fd0c 	bl	8016e3a <__lo0bits>
 8017422:	e9dd 1200 	ldrd	r1, r2, [sp]
 8017426:	b1d0      	cbz	r0, 801745e <__d2b+0x7e>
 8017428:	f1c0 0320 	rsb	r3, r0, #32
 801742c:	fa02 f303 	lsl.w	r3, r2, r3
 8017430:	430b      	orrs	r3, r1
 8017432:	40c2      	lsrs	r2, r0
 8017434:	6163      	str	r3, [r4, #20]
 8017436:	9201      	str	r2, [sp, #4]
 8017438:	9b01      	ldr	r3, [sp, #4]
 801743a:	61a3      	str	r3, [r4, #24]
 801743c:	2b00      	cmp	r3, #0
 801743e:	bf0c      	ite	eq
 8017440:	2201      	moveq	r2, #1
 8017442:	2202      	movne	r2, #2
 8017444:	6122      	str	r2, [r4, #16]
 8017446:	b1a5      	cbz	r5, 8017472 <__d2b+0x92>
 8017448:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801744c:	4405      	add	r5, r0
 801744e:	603d      	str	r5, [r7, #0]
 8017450:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8017454:	6030      	str	r0, [r6, #0]
 8017456:	4620      	mov	r0, r4
 8017458:	b003      	add	sp, #12
 801745a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801745e:	6161      	str	r1, [r4, #20]
 8017460:	e7ea      	b.n	8017438 <__d2b+0x58>
 8017462:	a801      	add	r0, sp, #4
 8017464:	f7ff fce9 	bl	8016e3a <__lo0bits>
 8017468:	9b01      	ldr	r3, [sp, #4]
 801746a:	6163      	str	r3, [r4, #20]
 801746c:	3020      	adds	r0, #32
 801746e:	2201      	movs	r2, #1
 8017470:	e7e8      	b.n	8017444 <__d2b+0x64>
 8017472:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017476:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801747a:	6038      	str	r0, [r7, #0]
 801747c:	6918      	ldr	r0, [r3, #16]
 801747e:	f7ff fcbd 	bl	8016dfc <__hi0bits>
 8017482:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017486:	e7e5      	b.n	8017454 <__d2b+0x74>
 8017488:	08018e89 	.word	0x08018e89
 801748c:	08018f11 	.word	0x08018f11

08017490 <__ratio>:
 8017490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017494:	b085      	sub	sp, #20
 8017496:	e9cd 1000 	strd	r1, r0, [sp]
 801749a:	a902      	add	r1, sp, #8
 801749c:	f7ff ff56 	bl	801734c <__b2d>
 80174a0:	9800      	ldr	r0, [sp, #0]
 80174a2:	a903      	add	r1, sp, #12
 80174a4:	ec55 4b10 	vmov	r4, r5, d0
 80174a8:	f7ff ff50 	bl	801734c <__b2d>
 80174ac:	9b01      	ldr	r3, [sp, #4]
 80174ae:	6919      	ldr	r1, [r3, #16]
 80174b0:	9b00      	ldr	r3, [sp, #0]
 80174b2:	691b      	ldr	r3, [r3, #16]
 80174b4:	1ac9      	subs	r1, r1, r3
 80174b6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80174ba:	1a9b      	subs	r3, r3, r2
 80174bc:	ec5b ab10 	vmov	sl, fp, d0
 80174c0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	bfce      	itee	gt
 80174c8:	462a      	movgt	r2, r5
 80174ca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80174ce:	465a      	movle	r2, fp
 80174d0:	462f      	mov	r7, r5
 80174d2:	46d9      	mov	r9, fp
 80174d4:	bfcc      	ite	gt
 80174d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80174da:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80174de:	464b      	mov	r3, r9
 80174e0:	4652      	mov	r2, sl
 80174e2:	4620      	mov	r0, r4
 80174e4:	4639      	mov	r1, r7
 80174e6:	f7e9 f9d1 	bl	800088c <__aeabi_ddiv>
 80174ea:	ec41 0b10 	vmov	d0, r0, r1
 80174ee:	b005      	add	sp, #20
 80174f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080174f4 <__copybits>:
 80174f4:	3901      	subs	r1, #1
 80174f6:	b570      	push	{r4, r5, r6, lr}
 80174f8:	1149      	asrs	r1, r1, #5
 80174fa:	6914      	ldr	r4, [r2, #16]
 80174fc:	3101      	adds	r1, #1
 80174fe:	f102 0314 	add.w	r3, r2, #20
 8017502:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017506:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801750a:	1f05      	subs	r5, r0, #4
 801750c:	42a3      	cmp	r3, r4
 801750e:	d30c      	bcc.n	801752a <__copybits+0x36>
 8017510:	1aa3      	subs	r3, r4, r2
 8017512:	3b11      	subs	r3, #17
 8017514:	f023 0303 	bic.w	r3, r3, #3
 8017518:	3211      	adds	r2, #17
 801751a:	42a2      	cmp	r2, r4
 801751c:	bf88      	it	hi
 801751e:	2300      	movhi	r3, #0
 8017520:	4418      	add	r0, r3
 8017522:	2300      	movs	r3, #0
 8017524:	4288      	cmp	r0, r1
 8017526:	d305      	bcc.n	8017534 <__copybits+0x40>
 8017528:	bd70      	pop	{r4, r5, r6, pc}
 801752a:	f853 6b04 	ldr.w	r6, [r3], #4
 801752e:	f845 6f04 	str.w	r6, [r5, #4]!
 8017532:	e7eb      	b.n	801750c <__copybits+0x18>
 8017534:	f840 3b04 	str.w	r3, [r0], #4
 8017538:	e7f4      	b.n	8017524 <__copybits+0x30>

0801753a <__any_on>:
 801753a:	f100 0214 	add.w	r2, r0, #20
 801753e:	6900      	ldr	r0, [r0, #16]
 8017540:	114b      	asrs	r3, r1, #5
 8017542:	4298      	cmp	r0, r3
 8017544:	b510      	push	{r4, lr}
 8017546:	db11      	blt.n	801756c <__any_on+0x32>
 8017548:	dd0a      	ble.n	8017560 <__any_on+0x26>
 801754a:	f011 011f 	ands.w	r1, r1, #31
 801754e:	d007      	beq.n	8017560 <__any_on+0x26>
 8017550:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017554:	fa24 f001 	lsr.w	r0, r4, r1
 8017558:	fa00 f101 	lsl.w	r1, r0, r1
 801755c:	428c      	cmp	r4, r1
 801755e:	d10b      	bne.n	8017578 <__any_on+0x3e>
 8017560:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017564:	4293      	cmp	r3, r2
 8017566:	d803      	bhi.n	8017570 <__any_on+0x36>
 8017568:	2000      	movs	r0, #0
 801756a:	bd10      	pop	{r4, pc}
 801756c:	4603      	mov	r3, r0
 801756e:	e7f7      	b.n	8017560 <__any_on+0x26>
 8017570:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017574:	2900      	cmp	r1, #0
 8017576:	d0f5      	beq.n	8017564 <__any_on+0x2a>
 8017578:	2001      	movs	r0, #1
 801757a:	e7f6      	b.n	801756a <__any_on+0x30>

0801757c <__ascii_wctomb>:
 801757c:	4603      	mov	r3, r0
 801757e:	4608      	mov	r0, r1
 8017580:	b141      	cbz	r1, 8017594 <__ascii_wctomb+0x18>
 8017582:	2aff      	cmp	r2, #255	@ 0xff
 8017584:	d904      	bls.n	8017590 <__ascii_wctomb+0x14>
 8017586:	228a      	movs	r2, #138	@ 0x8a
 8017588:	601a      	str	r2, [r3, #0]
 801758a:	f04f 30ff 	mov.w	r0, #4294967295
 801758e:	4770      	bx	lr
 8017590:	700a      	strb	r2, [r1, #0]
 8017592:	2001      	movs	r0, #1
 8017594:	4770      	bx	lr

08017596 <__ssputs_r>:
 8017596:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801759a:	688e      	ldr	r6, [r1, #8]
 801759c:	461f      	mov	r7, r3
 801759e:	42be      	cmp	r6, r7
 80175a0:	680b      	ldr	r3, [r1, #0]
 80175a2:	4682      	mov	sl, r0
 80175a4:	460c      	mov	r4, r1
 80175a6:	4690      	mov	r8, r2
 80175a8:	d82d      	bhi.n	8017606 <__ssputs_r+0x70>
 80175aa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80175ae:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80175b2:	d026      	beq.n	8017602 <__ssputs_r+0x6c>
 80175b4:	6965      	ldr	r5, [r4, #20]
 80175b6:	6909      	ldr	r1, [r1, #16]
 80175b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80175bc:	eba3 0901 	sub.w	r9, r3, r1
 80175c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80175c4:	1c7b      	adds	r3, r7, #1
 80175c6:	444b      	add	r3, r9
 80175c8:	106d      	asrs	r5, r5, #1
 80175ca:	429d      	cmp	r5, r3
 80175cc:	bf38      	it	cc
 80175ce:	461d      	movcc	r5, r3
 80175d0:	0553      	lsls	r3, r2, #21
 80175d2:	d527      	bpl.n	8017624 <__ssputs_r+0x8e>
 80175d4:	4629      	mov	r1, r5
 80175d6:	f7ff fa81 	bl	8016adc <_malloc_r>
 80175da:	4606      	mov	r6, r0
 80175dc:	b360      	cbz	r0, 8017638 <__ssputs_r+0xa2>
 80175de:	6921      	ldr	r1, [r4, #16]
 80175e0:	464a      	mov	r2, r9
 80175e2:	f7fe febc 	bl	801635e <memcpy>
 80175e6:	89a3      	ldrh	r3, [r4, #12]
 80175e8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80175ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80175f0:	81a3      	strh	r3, [r4, #12]
 80175f2:	6126      	str	r6, [r4, #16]
 80175f4:	6165      	str	r5, [r4, #20]
 80175f6:	444e      	add	r6, r9
 80175f8:	eba5 0509 	sub.w	r5, r5, r9
 80175fc:	6026      	str	r6, [r4, #0]
 80175fe:	60a5      	str	r5, [r4, #8]
 8017600:	463e      	mov	r6, r7
 8017602:	42be      	cmp	r6, r7
 8017604:	d900      	bls.n	8017608 <__ssputs_r+0x72>
 8017606:	463e      	mov	r6, r7
 8017608:	6820      	ldr	r0, [r4, #0]
 801760a:	4632      	mov	r2, r6
 801760c:	4641      	mov	r1, r8
 801760e:	f7fe fdb0 	bl	8016172 <memmove>
 8017612:	68a3      	ldr	r3, [r4, #8]
 8017614:	1b9b      	subs	r3, r3, r6
 8017616:	60a3      	str	r3, [r4, #8]
 8017618:	6823      	ldr	r3, [r4, #0]
 801761a:	4433      	add	r3, r6
 801761c:	6023      	str	r3, [r4, #0]
 801761e:	2000      	movs	r0, #0
 8017620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017624:	462a      	mov	r2, r5
 8017626:	f000 fb91 	bl	8017d4c <_realloc_r>
 801762a:	4606      	mov	r6, r0
 801762c:	2800      	cmp	r0, #0
 801762e:	d1e0      	bne.n	80175f2 <__ssputs_r+0x5c>
 8017630:	6921      	ldr	r1, [r4, #16]
 8017632:	4650      	mov	r0, sl
 8017634:	f7fe feac 	bl	8016390 <_free_r>
 8017638:	230c      	movs	r3, #12
 801763a:	f8ca 3000 	str.w	r3, [sl]
 801763e:	89a3      	ldrh	r3, [r4, #12]
 8017640:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017644:	81a3      	strh	r3, [r4, #12]
 8017646:	f04f 30ff 	mov.w	r0, #4294967295
 801764a:	e7e9      	b.n	8017620 <__ssputs_r+0x8a>

0801764c <_svfiprintf_r>:
 801764c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017650:	4698      	mov	r8, r3
 8017652:	898b      	ldrh	r3, [r1, #12]
 8017654:	061b      	lsls	r3, r3, #24
 8017656:	b09d      	sub	sp, #116	@ 0x74
 8017658:	4607      	mov	r7, r0
 801765a:	460d      	mov	r5, r1
 801765c:	4614      	mov	r4, r2
 801765e:	d510      	bpl.n	8017682 <_svfiprintf_r+0x36>
 8017660:	690b      	ldr	r3, [r1, #16]
 8017662:	b973      	cbnz	r3, 8017682 <_svfiprintf_r+0x36>
 8017664:	2140      	movs	r1, #64	@ 0x40
 8017666:	f7ff fa39 	bl	8016adc <_malloc_r>
 801766a:	6028      	str	r0, [r5, #0]
 801766c:	6128      	str	r0, [r5, #16]
 801766e:	b930      	cbnz	r0, 801767e <_svfiprintf_r+0x32>
 8017670:	230c      	movs	r3, #12
 8017672:	603b      	str	r3, [r7, #0]
 8017674:	f04f 30ff 	mov.w	r0, #4294967295
 8017678:	b01d      	add	sp, #116	@ 0x74
 801767a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801767e:	2340      	movs	r3, #64	@ 0x40
 8017680:	616b      	str	r3, [r5, #20]
 8017682:	2300      	movs	r3, #0
 8017684:	9309      	str	r3, [sp, #36]	@ 0x24
 8017686:	2320      	movs	r3, #32
 8017688:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801768c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017690:	2330      	movs	r3, #48	@ 0x30
 8017692:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017830 <_svfiprintf_r+0x1e4>
 8017696:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801769a:	f04f 0901 	mov.w	r9, #1
 801769e:	4623      	mov	r3, r4
 80176a0:	469a      	mov	sl, r3
 80176a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80176a6:	b10a      	cbz	r2, 80176ac <_svfiprintf_r+0x60>
 80176a8:	2a25      	cmp	r2, #37	@ 0x25
 80176aa:	d1f9      	bne.n	80176a0 <_svfiprintf_r+0x54>
 80176ac:	ebba 0b04 	subs.w	fp, sl, r4
 80176b0:	d00b      	beq.n	80176ca <_svfiprintf_r+0x7e>
 80176b2:	465b      	mov	r3, fp
 80176b4:	4622      	mov	r2, r4
 80176b6:	4629      	mov	r1, r5
 80176b8:	4638      	mov	r0, r7
 80176ba:	f7ff ff6c 	bl	8017596 <__ssputs_r>
 80176be:	3001      	adds	r0, #1
 80176c0:	f000 80a7 	beq.w	8017812 <_svfiprintf_r+0x1c6>
 80176c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80176c6:	445a      	add	r2, fp
 80176c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80176ca:	f89a 3000 	ldrb.w	r3, [sl]
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	f000 809f 	beq.w	8017812 <_svfiprintf_r+0x1c6>
 80176d4:	2300      	movs	r3, #0
 80176d6:	f04f 32ff 	mov.w	r2, #4294967295
 80176da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80176de:	f10a 0a01 	add.w	sl, sl, #1
 80176e2:	9304      	str	r3, [sp, #16]
 80176e4:	9307      	str	r3, [sp, #28]
 80176e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80176ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80176ec:	4654      	mov	r4, sl
 80176ee:	2205      	movs	r2, #5
 80176f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80176f4:	484e      	ldr	r0, [pc, #312]	@ (8017830 <_svfiprintf_r+0x1e4>)
 80176f6:	f7e8 fd93 	bl	8000220 <memchr>
 80176fa:	9a04      	ldr	r2, [sp, #16]
 80176fc:	b9d8      	cbnz	r0, 8017736 <_svfiprintf_r+0xea>
 80176fe:	06d0      	lsls	r0, r2, #27
 8017700:	bf44      	itt	mi
 8017702:	2320      	movmi	r3, #32
 8017704:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017708:	0711      	lsls	r1, r2, #28
 801770a:	bf44      	itt	mi
 801770c:	232b      	movmi	r3, #43	@ 0x2b
 801770e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017712:	f89a 3000 	ldrb.w	r3, [sl]
 8017716:	2b2a      	cmp	r3, #42	@ 0x2a
 8017718:	d015      	beq.n	8017746 <_svfiprintf_r+0xfa>
 801771a:	9a07      	ldr	r2, [sp, #28]
 801771c:	4654      	mov	r4, sl
 801771e:	2000      	movs	r0, #0
 8017720:	f04f 0c0a 	mov.w	ip, #10
 8017724:	4621      	mov	r1, r4
 8017726:	f811 3b01 	ldrb.w	r3, [r1], #1
 801772a:	3b30      	subs	r3, #48	@ 0x30
 801772c:	2b09      	cmp	r3, #9
 801772e:	d94b      	bls.n	80177c8 <_svfiprintf_r+0x17c>
 8017730:	b1b0      	cbz	r0, 8017760 <_svfiprintf_r+0x114>
 8017732:	9207      	str	r2, [sp, #28]
 8017734:	e014      	b.n	8017760 <_svfiprintf_r+0x114>
 8017736:	eba0 0308 	sub.w	r3, r0, r8
 801773a:	fa09 f303 	lsl.w	r3, r9, r3
 801773e:	4313      	orrs	r3, r2
 8017740:	9304      	str	r3, [sp, #16]
 8017742:	46a2      	mov	sl, r4
 8017744:	e7d2      	b.n	80176ec <_svfiprintf_r+0xa0>
 8017746:	9b03      	ldr	r3, [sp, #12]
 8017748:	1d19      	adds	r1, r3, #4
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	9103      	str	r1, [sp, #12]
 801774e:	2b00      	cmp	r3, #0
 8017750:	bfbb      	ittet	lt
 8017752:	425b      	neglt	r3, r3
 8017754:	f042 0202 	orrlt.w	r2, r2, #2
 8017758:	9307      	strge	r3, [sp, #28]
 801775a:	9307      	strlt	r3, [sp, #28]
 801775c:	bfb8      	it	lt
 801775e:	9204      	strlt	r2, [sp, #16]
 8017760:	7823      	ldrb	r3, [r4, #0]
 8017762:	2b2e      	cmp	r3, #46	@ 0x2e
 8017764:	d10a      	bne.n	801777c <_svfiprintf_r+0x130>
 8017766:	7863      	ldrb	r3, [r4, #1]
 8017768:	2b2a      	cmp	r3, #42	@ 0x2a
 801776a:	d132      	bne.n	80177d2 <_svfiprintf_r+0x186>
 801776c:	9b03      	ldr	r3, [sp, #12]
 801776e:	1d1a      	adds	r2, r3, #4
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	9203      	str	r2, [sp, #12]
 8017774:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017778:	3402      	adds	r4, #2
 801777a:	9305      	str	r3, [sp, #20]
 801777c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017840 <_svfiprintf_r+0x1f4>
 8017780:	7821      	ldrb	r1, [r4, #0]
 8017782:	2203      	movs	r2, #3
 8017784:	4650      	mov	r0, sl
 8017786:	f7e8 fd4b 	bl	8000220 <memchr>
 801778a:	b138      	cbz	r0, 801779c <_svfiprintf_r+0x150>
 801778c:	9b04      	ldr	r3, [sp, #16]
 801778e:	eba0 000a 	sub.w	r0, r0, sl
 8017792:	2240      	movs	r2, #64	@ 0x40
 8017794:	4082      	lsls	r2, r0
 8017796:	4313      	orrs	r3, r2
 8017798:	3401      	adds	r4, #1
 801779a:	9304      	str	r3, [sp, #16]
 801779c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80177a0:	4824      	ldr	r0, [pc, #144]	@ (8017834 <_svfiprintf_r+0x1e8>)
 80177a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80177a6:	2206      	movs	r2, #6
 80177a8:	f7e8 fd3a 	bl	8000220 <memchr>
 80177ac:	2800      	cmp	r0, #0
 80177ae:	d036      	beq.n	801781e <_svfiprintf_r+0x1d2>
 80177b0:	4b21      	ldr	r3, [pc, #132]	@ (8017838 <_svfiprintf_r+0x1ec>)
 80177b2:	bb1b      	cbnz	r3, 80177fc <_svfiprintf_r+0x1b0>
 80177b4:	9b03      	ldr	r3, [sp, #12]
 80177b6:	3307      	adds	r3, #7
 80177b8:	f023 0307 	bic.w	r3, r3, #7
 80177bc:	3308      	adds	r3, #8
 80177be:	9303      	str	r3, [sp, #12]
 80177c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80177c2:	4433      	add	r3, r6
 80177c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80177c6:	e76a      	b.n	801769e <_svfiprintf_r+0x52>
 80177c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80177cc:	460c      	mov	r4, r1
 80177ce:	2001      	movs	r0, #1
 80177d0:	e7a8      	b.n	8017724 <_svfiprintf_r+0xd8>
 80177d2:	2300      	movs	r3, #0
 80177d4:	3401      	adds	r4, #1
 80177d6:	9305      	str	r3, [sp, #20]
 80177d8:	4619      	mov	r1, r3
 80177da:	f04f 0c0a 	mov.w	ip, #10
 80177de:	4620      	mov	r0, r4
 80177e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80177e4:	3a30      	subs	r2, #48	@ 0x30
 80177e6:	2a09      	cmp	r2, #9
 80177e8:	d903      	bls.n	80177f2 <_svfiprintf_r+0x1a6>
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d0c6      	beq.n	801777c <_svfiprintf_r+0x130>
 80177ee:	9105      	str	r1, [sp, #20]
 80177f0:	e7c4      	b.n	801777c <_svfiprintf_r+0x130>
 80177f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80177f6:	4604      	mov	r4, r0
 80177f8:	2301      	movs	r3, #1
 80177fa:	e7f0      	b.n	80177de <_svfiprintf_r+0x192>
 80177fc:	ab03      	add	r3, sp, #12
 80177fe:	9300      	str	r3, [sp, #0]
 8017800:	462a      	mov	r2, r5
 8017802:	4b0e      	ldr	r3, [pc, #56]	@ (801783c <_svfiprintf_r+0x1f0>)
 8017804:	a904      	add	r1, sp, #16
 8017806:	4638      	mov	r0, r7
 8017808:	f3af 8000 	nop.w
 801780c:	1c42      	adds	r2, r0, #1
 801780e:	4606      	mov	r6, r0
 8017810:	d1d6      	bne.n	80177c0 <_svfiprintf_r+0x174>
 8017812:	89ab      	ldrh	r3, [r5, #12]
 8017814:	065b      	lsls	r3, r3, #25
 8017816:	f53f af2d 	bmi.w	8017674 <_svfiprintf_r+0x28>
 801781a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801781c:	e72c      	b.n	8017678 <_svfiprintf_r+0x2c>
 801781e:	ab03      	add	r3, sp, #12
 8017820:	9300      	str	r3, [sp, #0]
 8017822:	462a      	mov	r2, r5
 8017824:	4b05      	ldr	r3, [pc, #20]	@ (801783c <_svfiprintf_r+0x1f0>)
 8017826:	a904      	add	r1, sp, #16
 8017828:	4638      	mov	r0, r7
 801782a:	f000 f879 	bl	8017920 <_printf_i>
 801782e:	e7ed      	b.n	801780c <_svfiprintf_r+0x1c0>
 8017830:	08019068 	.word	0x08019068
 8017834:	08019072 	.word	0x08019072
 8017838:	00000000 	.word	0x00000000
 801783c:	08017597 	.word	0x08017597
 8017840:	0801906e 	.word	0x0801906e

08017844 <_printf_common>:
 8017844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017848:	4616      	mov	r6, r2
 801784a:	4698      	mov	r8, r3
 801784c:	688a      	ldr	r2, [r1, #8]
 801784e:	690b      	ldr	r3, [r1, #16]
 8017850:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017854:	4293      	cmp	r3, r2
 8017856:	bfb8      	it	lt
 8017858:	4613      	movlt	r3, r2
 801785a:	6033      	str	r3, [r6, #0]
 801785c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017860:	4607      	mov	r7, r0
 8017862:	460c      	mov	r4, r1
 8017864:	b10a      	cbz	r2, 801786a <_printf_common+0x26>
 8017866:	3301      	adds	r3, #1
 8017868:	6033      	str	r3, [r6, #0]
 801786a:	6823      	ldr	r3, [r4, #0]
 801786c:	0699      	lsls	r1, r3, #26
 801786e:	bf42      	ittt	mi
 8017870:	6833      	ldrmi	r3, [r6, #0]
 8017872:	3302      	addmi	r3, #2
 8017874:	6033      	strmi	r3, [r6, #0]
 8017876:	6825      	ldr	r5, [r4, #0]
 8017878:	f015 0506 	ands.w	r5, r5, #6
 801787c:	d106      	bne.n	801788c <_printf_common+0x48>
 801787e:	f104 0a19 	add.w	sl, r4, #25
 8017882:	68e3      	ldr	r3, [r4, #12]
 8017884:	6832      	ldr	r2, [r6, #0]
 8017886:	1a9b      	subs	r3, r3, r2
 8017888:	42ab      	cmp	r3, r5
 801788a:	dc26      	bgt.n	80178da <_printf_common+0x96>
 801788c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017890:	6822      	ldr	r2, [r4, #0]
 8017892:	3b00      	subs	r3, #0
 8017894:	bf18      	it	ne
 8017896:	2301      	movne	r3, #1
 8017898:	0692      	lsls	r2, r2, #26
 801789a:	d42b      	bmi.n	80178f4 <_printf_common+0xb0>
 801789c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80178a0:	4641      	mov	r1, r8
 80178a2:	4638      	mov	r0, r7
 80178a4:	47c8      	blx	r9
 80178a6:	3001      	adds	r0, #1
 80178a8:	d01e      	beq.n	80178e8 <_printf_common+0xa4>
 80178aa:	6823      	ldr	r3, [r4, #0]
 80178ac:	6922      	ldr	r2, [r4, #16]
 80178ae:	f003 0306 	and.w	r3, r3, #6
 80178b2:	2b04      	cmp	r3, #4
 80178b4:	bf02      	ittt	eq
 80178b6:	68e5      	ldreq	r5, [r4, #12]
 80178b8:	6833      	ldreq	r3, [r6, #0]
 80178ba:	1aed      	subeq	r5, r5, r3
 80178bc:	68a3      	ldr	r3, [r4, #8]
 80178be:	bf0c      	ite	eq
 80178c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80178c4:	2500      	movne	r5, #0
 80178c6:	4293      	cmp	r3, r2
 80178c8:	bfc4      	itt	gt
 80178ca:	1a9b      	subgt	r3, r3, r2
 80178cc:	18ed      	addgt	r5, r5, r3
 80178ce:	2600      	movs	r6, #0
 80178d0:	341a      	adds	r4, #26
 80178d2:	42b5      	cmp	r5, r6
 80178d4:	d11a      	bne.n	801790c <_printf_common+0xc8>
 80178d6:	2000      	movs	r0, #0
 80178d8:	e008      	b.n	80178ec <_printf_common+0xa8>
 80178da:	2301      	movs	r3, #1
 80178dc:	4652      	mov	r2, sl
 80178de:	4641      	mov	r1, r8
 80178e0:	4638      	mov	r0, r7
 80178e2:	47c8      	blx	r9
 80178e4:	3001      	adds	r0, #1
 80178e6:	d103      	bne.n	80178f0 <_printf_common+0xac>
 80178e8:	f04f 30ff 	mov.w	r0, #4294967295
 80178ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178f0:	3501      	adds	r5, #1
 80178f2:	e7c6      	b.n	8017882 <_printf_common+0x3e>
 80178f4:	18e1      	adds	r1, r4, r3
 80178f6:	1c5a      	adds	r2, r3, #1
 80178f8:	2030      	movs	r0, #48	@ 0x30
 80178fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80178fe:	4422      	add	r2, r4
 8017900:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017904:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017908:	3302      	adds	r3, #2
 801790a:	e7c7      	b.n	801789c <_printf_common+0x58>
 801790c:	2301      	movs	r3, #1
 801790e:	4622      	mov	r2, r4
 8017910:	4641      	mov	r1, r8
 8017912:	4638      	mov	r0, r7
 8017914:	47c8      	blx	r9
 8017916:	3001      	adds	r0, #1
 8017918:	d0e6      	beq.n	80178e8 <_printf_common+0xa4>
 801791a:	3601      	adds	r6, #1
 801791c:	e7d9      	b.n	80178d2 <_printf_common+0x8e>
	...

08017920 <_printf_i>:
 8017920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017924:	7e0f      	ldrb	r7, [r1, #24]
 8017926:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017928:	2f78      	cmp	r7, #120	@ 0x78
 801792a:	4691      	mov	r9, r2
 801792c:	4680      	mov	r8, r0
 801792e:	460c      	mov	r4, r1
 8017930:	469a      	mov	sl, r3
 8017932:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017936:	d807      	bhi.n	8017948 <_printf_i+0x28>
 8017938:	2f62      	cmp	r7, #98	@ 0x62
 801793a:	d80a      	bhi.n	8017952 <_printf_i+0x32>
 801793c:	2f00      	cmp	r7, #0
 801793e:	f000 80d2 	beq.w	8017ae6 <_printf_i+0x1c6>
 8017942:	2f58      	cmp	r7, #88	@ 0x58
 8017944:	f000 80b9 	beq.w	8017aba <_printf_i+0x19a>
 8017948:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801794c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017950:	e03a      	b.n	80179c8 <_printf_i+0xa8>
 8017952:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017956:	2b15      	cmp	r3, #21
 8017958:	d8f6      	bhi.n	8017948 <_printf_i+0x28>
 801795a:	a101      	add	r1, pc, #4	@ (adr r1, 8017960 <_printf_i+0x40>)
 801795c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017960:	080179b9 	.word	0x080179b9
 8017964:	080179cd 	.word	0x080179cd
 8017968:	08017949 	.word	0x08017949
 801796c:	08017949 	.word	0x08017949
 8017970:	08017949 	.word	0x08017949
 8017974:	08017949 	.word	0x08017949
 8017978:	080179cd 	.word	0x080179cd
 801797c:	08017949 	.word	0x08017949
 8017980:	08017949 	.word	0x08017949
 8017984:	08017949 	.word	0x08017949
 8017988:	08017949 	.word	0x08017949
 801798c:	08017acd 	.word	0x08017acd
 8017990:	080179f7 	.word	0x080179f7
 8017994:	08017a87 	.word	0x08017a87
 8017998:	08017949 	.word	0x08017949
 801799c:	08017949 	.word	0x08017949
 80179a0:	08017aef 	.word	0x08017aef
 80179a4:	08017949 	.word	0x08017949
 80179a8:	080179f7 	.word	0x080179f7
 80179ac:	08017949 	.word	0x08017949
 80179b0:	08017949 	.word	0x08017949
 80179b4:	08017a8f 	.word	0x08017a8f
 80179b8:	6833      	ldr	r3, [r6, #0]
 80179ba:	1d1a      	adds	r2, r3, #4
 80179bc:	681b      	ldr	r3, [r3, #0]
 80179be:	6032      	str	r2, [r6, #0]
 80179c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80179c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80179c8:	2301      	movs	r3, #1
 80179ca:	e09d      	b.n	8017b08 <_printf_i+0x1e8>
 80179cc:	6833      	ldr	r3, [r6, #0]
 80179ce:	6820      	ldr	r0, [r4, #0]
 80179d0:	1d19      	adds	r1, r3, #4
 80179d2:	6031      	str	r1, [r6, #0]
 80179d4:	0606      	lsls	r6, r0, #24
 80179d6:	d501      	bpl.n	80179dc <_printf_i+0xbc>
 80179d8:	681d      	ldr	r5, [r3, #0]
 80179da:	e003      	b.n	80179e4 <_printf_i+0xc4>
 80179dc:	0645      	lsls	r5, r0, #25
 80179de:	d5fb      	bpl.n	80179d8 <_printf_i+0xb8>
 80179e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80179e4:	2d00      	cmp	r5, #0
 80179e6:	da03      	bge.n	80179f0 <_printf_i+0xd0>
 80179e8:	232d      	movs	r3, #45	@ 0x2d
 80179ea:	426d      	negs	r5, r5
 80179ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80179f0:	4859      	ldr	r0, [pc, #356]	@ (8017b58 <_printf_i+0x238>)
 80179f2:	230a      	movs	r3, #10
 80179f4:	e011      	b.n	8017a1a <_printf_i+0xfa>
 80179f6:	6821      	ldr	r1, [r4, #0]
 80179f8:	6833      	ldr	r3, [r6, #0]
 80179fa:	0608      	lsls	r0, r1, #24
 80179fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8017a00:	d402      	bmi.n	8017a08 <_printf_i+0xe8>
 8017a02:	0649      	lsls	r1, r1, #25
 8017a04:	bf48      	it	mi
 8017a06:	b2ad      	uxthmi	r5, r5
 8017a08:	2f6f      	cmp	r7, #111	@ 0x6f
 8017a0a:	4853      	ldr	r0, [pc, #332]	@ (8017b58 <_printf_i+0x238>)
 8017a0c:	6033      	str	r3, [r6, #0]
 8017a0e:	bf14      	ite	ne
 8017a10:	230a      	movne	r3, #10
 8017a12:	2308      	moveq	r3, #8
 8017a14:	2100      	movs	r1, #0
 8017a16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017a1a:	6866      	ldr	r6, [r4, #4]
 8017a1c:	60a6      	str	r6, [r4, #8]
 8017a1e:	2e00      	cmp	r6, #0
 8017a20:	bfa2      	ittt	ge
 8017a22:	6821      	ldrge	r1, [r4, #0]
 8017a24:	f021 0104 	bicge.w	r1, r1, #4
 8017a28:	6021      	strge	r1, [r4, #0]
 8017a2a:	b90d      	cbnz	r5, 8017a30 <_printf_i+0x110>
 8017a2c:	2e00      	cmp	r6, #0
 8017a2e:	d04b      	beq.n	8017ac8 <_printf_i+0x1a8>
 8017a30:	4616      	mov	r6, r2
 8017a32:	fbb5 f1f3 	udiv	r1, r5, r3
 8017a36:	fb03 5711 	mls	r7, r3, r1, r5
 8017a3a:	5dc7      	ldrb	r7, [r0, r7]
 8017a3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017a40:	462f      	mov	r7, r5
 8017a42:	42bb      	cmp	r3, r7
 8017a44:	460d      	mov	r5, r1
 8017a46:	d9f4      	bls.n	8017a32 <_printf_i+0x112>
 8017a48:	2b08      	cmp	r3, #8
 8017a4a:	d10b      	bne.n	8017a64 <_printf_i+0x144>
 8017a4c:	6823      	ldr	r3, [r4, #0]
 8017a4e:	07df      	lsls	r7, r3, #31
 8017a50:	d508      	bpl.n	8017a64 <_printf_i+0x144>
 8017a52:	6923      	ldr	r3, [r4, #16]
 8017a54:	6861      	ldr	r1, [r4, #4]
 8017a56:	4299      	cmp	r1, r3
 8017a58:	bfde      	ittt	le
 8017a5a:	2330      	movle	r3, #48	@ 0x30
 8017a5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017a60:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017a64:	1b92      	subs	r2, r2, r6
 8017a66:	6122      	str	r2, [r4, #16]
 8017a68:	f8cd a000 	str.w	sl, [sp]
 8017a6c:	464b      	mov	r3, r9
 8017a6e:	aa03      	add	r2, sp, #12
 8017a70:	4621      	mov	r1, r4
 8017a72:	4640      	mov	r0, r8
 8017a74:	f7ff fee6 	bl	8017844 <_printf_common>
 8017a78:	3001      	adds	r0, #1
 8017a7a:	d14a      	bne.n	8017b12 <_printf_i+0x1f2>
 8017a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8017a80:	b004      	add	sp, #16
 8017a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a86:	6823      	ldr	r3, [r4, #0]
 8017a88:	f043 0320 	orr.w	r3, r3, #32
 8017a8c:	6023      	str	r3, [r4, #0]
 8017a8e:	4833      	ldr	r0, [pc, #204]	@ (8017b5c <_printf_i+0x23c>)
 8017a90:	2778      	movs	r7, #120	@ 0x78
 8017a92:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017a96:	6823      	ldr	r3, [r4, #0]
 8017a98:	6831      	ldr	r1, [r6, #0]
 8017a9a:	061f      	lsls	r7, r3, #24
 8017a9c:	f851 5b04 	ldr.w	r5, [r1], #4
 8017aa0:	d402      	bmi.n	8017aa8 <_printf_i+0x188>
 8017aa2:	065f      	lsls	r7, r3, #25
 8017aa4:	bf48      	it	mi
 8017aa6:	b2ad      	uxthmi	r5, r5
 8017aa8:	6031      	str	r1, [r6, #0]
 8017aaa:	07d9      	lsls	r1, r3, #31
 8017aac:	bf44      	itt	mi
 8017aae:	f043 0320 	orrmi.w	r3, r3, #32
 8017ab2:	6023      	strmi	r3, [r4, #0]
 8017ab4:	b11d      	cbz	r5, 8017abe <_printf_i+0x19e>
 8017ab6:	2310      	movs	r3, #16
 8017ab8:	e7ac      	b.n	8017a14 <_printf_i+0xf4>
 8017aba:	4827      	ldr	r0, [pc, #156]	@ (8017b58 <_printf_i+0x238>)
 8017abc:	e7e9      	b.n	8017a92 <_printf_i+0x172>
 8017abe:	6823      	ldr	r3, [r4, #0]
 8017ac0:	f023 0320 	bic.w	r3, r3, #32
 8017ac4:	6023      	str	r3, [r4, #0]
 8017ac6:	e7f6      	b.n	8017ab6 <_printf_i+0x196>
 8017ac8:	4616      	mov	r6, r2
 8017aca:	e7bd      	b.n	8017a48 <_printf_i+0x128>
 8017acc:	6833      	ldr	r3, [r6, #0]
 8017ace:	6825      	ldr	r5, [r4, #0]
 8017ad0:	6961      	ldr	r1, [r4, #20]
 8017ad2:	1d18      	adds	r0, r3, #4
 8017ad4:	6030      	str	r0, [r6, #0]
 8017ad6:	062e      	lsls	r6, r5, #24
 8017ad8:	681b      	ldr	r3, [r3, #0]
 8017ada:	d501      	bpl.n	8017ae0 <_printf_i+0x1c0>
 8017adc:	6019      	str	r1, [r3, #0]
 8017ade:	e002      	b.n	8017ae6 <_printf_i+0x1c6>
 8017ae0:	0668      	lsls	r0, r5, #25
 8017ae2:	d5fb      	bpl.n	8017adc <_printf_i+0x1bc>
 8017ae4:	8019      	strh	r1, [r3, #0]
 8017ae6:	2300      	movs	r3, #0
 8017ae8:	6123      	str	r3, [r4, #16]
 8017aea:	4616      	mov	r6, r2
 8017aec:	e7bc      	b.n	8017a68 <_printf_i+0x148>
 8017aee:	6833      	ldr	r3, [r6, #0]
 8017af0:	1d1a      	adds	r2, r3, #4
 8017af2:	6032      	str	r2, [r6, #0]
 8017af4:	681e      	ldr	r6, [r3, #0]
 8017af6:	6862      	ldr	r2, [r4, #4]
 8017af8:	2100      	movs	r1, #0
 8017afa:	4630      	mov	r0, r6
 8017afc:	f7e8 fb90 	bl	8000220 <memchr>
 8017b00:	b108      	cbz	r0, 8017b06 <_printf_i+0x1e6>
 8017b02:	1b80      	subs	r0, r0, r6
 8017b04:	6060      	str	r0, [r4, #4]
 8017b06:	6863      	ldr	r3, [r4, #4]
 8017b08:	6123      	str	r3, [r4, #16]
 8017b0a:	2300      	movs	r3, #0
 8017b0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017b10:	e7aa      	b.n	8017a68 <_printf_i+0x148>
 8017b12:	6923      	ldr	r3, [r4, #16]
 8017b14:	4632      	mov	r2, r6
 8017b16:	4649      	mov	r1, r9
 8017b18:	4640      	mov	r0, r8
 8017b1a:	47d0      	blx	sl
 8017b1c:	3001      	adds	r0, #1
 8017b1e:	d0ad      	beq.n	8017a7c <_printf_i+0x15c>
 8017b20:	6823      	ldr	r3, [r4, #0]
 8017b22:	079b      	lsls	r3, r3, #30
 8017b24:	d413      	bmi.n	8017b4e <_printf_i+0x22e>
 8017b26:	68e0      	ldr	r0, [r4, #12]
 8017b28:	9b03      	ldr	r3, [sp, #12]
 8017b2a:	4298      	cmp	r0, r3
 8017b2c:	bfb8      	it	lt
 8017b2e:	4618      	movlt	r0, r3
 8017b30:	e7a6      	b.n	8017a80 <_printf_i+0x160>
 8017b32:	2301      	movs	r3, #1
 8017b34:	4632      	mov	r2, r6
 8017b36:	4649      	mov	r1, r9
 8017b38:	4640      	mov	r0, r8
 8017b3a:	47d0      	blx	sl
 8017b3c:	3001      	adds	r0, #1
 8017b3e:	d09d      	beq.n	8017a7c <_printf_i+0x15c>
 8017b40:	3501      	adds	r5, #1
 8017b42:	68e3      	ldr	r3, [r4, #12]
 8017b44:	9903      	ldr	r1, [sp, #12]
 8017b46:	1a5b      	subs	r3, r3, r1
 8017b48:	42ab      	cmp	r3, r5
 8017b4a:	dcf2      	bgt.n	8017b32 <_printf_i+0x212>
 8017b4c:	e7eb      	b.n	8017b26 <_printf_i+0x206>
 8017b4e:	2500      	movs	r5, #0
 8017b50:	f104 0619 	add.w	r6, r4, #25
 8017b54:	e7f5      	b.n	8017b42 <_printf_i+0x222>
 8017b56:	bf00      	nop
 8017b58:	08019079 	.word	0x08019079
 8017b5c:	0801908a 	.word	0x0801908a

08017b60 <__sflush_r>:
 8017b60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b68:	0716      	lsls	r6, r2, #28
 8017b6a:	4605      	mov	r5, r0
 8017b6c:	460c      	mov	r4, r1
 8017b6e:	d454      	bmi.n	8017c1a <__sflush_r+0xba>
 8017b70:	684b      	ldr	r3, [r1, #4]
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	dc02      	bgt.n	8017b7c <__sflush_r+0x1c>
 8017b76:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	dd48      	ble.n	8017c0e <__sflush_r+0xae>
 8017b7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017b7e:	2e00      	cmp	r6, #0
 8017b80:	d045      	beq.n	8017c0e <__sflush_r+0xae>
 8017b82:	2300      	movs	r3, #0
 8017b84:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017b88:	682f      	ldr	r7, [r5, #0]
 8017b8a:	6a21      	ldr	r1, [r4, #32]
 8017b8c:	602b      	str	r3, [r5, #0]
 8017b8e:	d030      	beq.n	8017bf2 <__sflush_r+0x92>
 8017b90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017b92:	89a3      	ldrh	r3, [r4, #12]
 8017b94:	0759      	lsls	r1, r3, #29
 8017b96:	d505      	bpl.n	8017ba4 <__sflush_r+0x44>
 8017b98:	6863      	ldr	r3, [r4, #4]
 8017b9a:	1ad2      	subs	r2, r2, r3
 8017b9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017b9e:	b10b      	cbz	r3, 8017ba4 <__sflush_r+0x44>
 8017ba0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017ba2:	1ad2      	subs	r2, r2, r3
 8017ba4:	2300      	movs	r3, #0
 8017ba6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017ba8:	6a21      	ldr	r1, [r4, #32]
 8017baa:	4628      	mov	r0, r5
 8017bac:	47b0      	blx	r6
 8017bae:	1c43      	adds	r3, r0, #1
 8017bb0:	89a3      	ldrh	r3, [r4, #12]
 8017bb2:	d106      	bne.n	8017bc2 <__sflush_r+0x62>
 8017bb4:	6829      	ldr	r1, [r5, #0]
 8017bb6:	291d      	cmp	r1, #29
 8017bb8:	d82b      	bhi.n	8017c12 <__sflush_r+0xb2>
 8017bba:	4a2a      	ldr	r2, [pc, #168]	@ (8017c64 <__sflush_r+0x104>)
 8017bbc:	410a      	asrs	r2, r1
 8017bbe:	07d6      	lsls	r6, r2, #31
 8017bc0:	d427      	bmi.n	8017c12 <__sflush_r+0xb2>
 8017bc2:	2200      	movs	r2, #0
 8017bc4:	6062      	str	r2, [r4, #4]
 8017bc6:	04d9      	lsls	r1, r3, #19
 8017bc8:	6922      	ldr	r2, [r4, #16]
 8017bca:	6022      	str	r2, [r4, #0]
 8017bcc:	d504      	bpl.n	8017bd8 <__sflush_r+0x78>
 8017bce:	1c42      	adds	r2, r0, #1
 8017bd0:	d101      	bne.n	8017bd6 <__sflush_r+0x76>
 8017bd2:	682b      	ldr	r3, [r5, #0]
 8017bd4:	b903      	cbnz	r3, 8017bd8 <__sflush_r+0x78>
 8017bd6:	6560      	str	r0, [r4, #84]	@ 0x54
 8017bd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017bda:	602f      	str	r7, [r5, #0]
 8017bdc:	b1b9      	cbz	r1, 8017c0e <__sflush_r+0xae>
 8017bde:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017be2:	4299      	cmp	r1, r3
 8017be4:	d002      	beq.n	8017bec <__sflush_r+0x8c>
 8017be6:	4628      	mov	r0, r5
 8017be8:	f7fe fbd2 	bl	8016390 <_free_r>
 8017bec:	2300      	movs	r3, #0
 8017bee:	6363      	str	r3, [r4, #52]	@ 0x34
 8017bf0:	e00d      	b.n	8017c0e <__sflush_r+0xae>
 8017bf2:	2301      	movs	r3, #1
 8017bf4:	4628      	mov	r0, r5
 8017bf6:	47b0      	blx	r6
 8017bf8:	4602      	mov	r2, r0
 8017bfa:	1c50      	adds	r0, r2, #1
 8017bfc:	d1c9      	bne.n	8017b92 <__sflush_r+0x32>
 8017bfe:	682b      	ldr	r3, [r5, #0]
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	d0c6      	beq.n	8017b92 <__sflush_r+0x32>
 8017c04:	2b1d      	cmp	r3, #29
 8017c06:	d001      	beq.n	8017c0c <__sflush_r+0xac>
 8017c08:	2b16      	cmp	r3, #22
 8017c0a:	d11e      	bne.n	8017c4a <__sflush_r+0xea>
 8017c0c:	602f      	str	r7, [r5, #0]
 8017c0e:	2000      	movs	r0, #0
 8017c10:	e022      	b.n	8017c58 <__sflush_r+0xf8>
 8017c12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017c16:	b21b      	sxth	r3, r3
 8017c18:	e01b      	b.n	8017c52 <__sflush_r+0xf2>
 8017c1a:	690f      	ldr	r7, [r1, #16]
 8017c1c:	2f00      	cmp	r7, #0
 8017c1e:	d0f6      	beq.n	8017c0e <__sflush_r+0xae>
 8017c20:	0793      	lsls	r3, r2, #30
 8017c22:	680e      	ldr	r6, [r1, #0]
 8017c24:	bf08      	it	eq
 8017c26:	694b      	ldreq	r3, [r1, #20]
 8017c28:	600f      	str	r7, [r1, #0]
 8017c2a:	bf18      	it	ne
 8017c2c:	2300      	movne	r3, #0
 8017c2e:	eba6 0807 	sub.w	r8, r6, r7
 8017c32:	608b      	str	r3, [r1, #8]
 8017c34:	f1b8 0f00 	cmp.w	r8, #0
 8017c38:	dde9      	ble.n	8017c0e <__sflush_r+0xae>
 8017c3a:	6a21      	ldr	r1, [r4, #32]
 8017c3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017c3e:	4643      	mov	r3, r8
 8017c40:	463a      	mov	r2, r7
 8017c42:	4628      	mov	r0, r5
 8017c44:	47b0      	blx	r6
 8017c46:	2800      	cmp	r0, #0
 8017c48:	dc08      	bgt.n	8017c5c <__sflush_r+0xfc>
 8017c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017c52:	81a3      	strh	r3, [r4, #12]
 8017c54:	f04f 30ff 	mov.w	r0, #4294967295
 8017c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c5c:	4407      	add	r7, r0
 8017c5e:	eba8 0800 	sub.w	r8, r8, r0
 8017c62:	e7e7      	b.n	8017c34 <__sflush_r+0xd4>
 8017c64:	dfbffffe 	.word	0xdfbffffe

08017c68 <_fflush_r>:
 8017c68:	b538      	push	{r3, r4, r5, lr}
 8017c6a:	690b      	ldr	r3, [r1, #16]
 8017c6c:	4605      	mov	r5, r0
 8017c6e:	460c      	mov	r4, r1
 8017c70:	b913      	cbnz	r3, 8017c78 <_fflush_r+0x10>
 8017c72:	2500      	movs	r5, #0
 8017c74:	4628      	mov	r0, r5
 8017c76:	bd38      	pop	{r3, r4, r5, pc}
 8017c78:	b118      	cbz	r0, 8017c82 <_fflush_r+0x1a>
 8017c7a:	6a03      	ldr	r3, [r0, #32]
 8017c7c:	b90b      	cbnz	r3, 8017c82 <_fflush_r+0x1a>
 8017c7e:	f7fe f9cb 	bl	8016018 <__sinit>
 8017c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	d0f3      	beq.n	8017c72 <_fflush_r+0xa>
 8017c8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017c8c:	07d0      	lsls	r0, r2, #31
 8017c8e:	d404      	bmi.n	8017c9a <_fflush_r+0x32>
 8017c90:	0599      	lsls	r1, r3, #22
 8017c92:	d402      	bmi.n	8017c9a <_fflush_r+0x32>
 8017c94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017c96:	f7fe fb58 	bl	801634a <__retarget_lock_acquire_recursive>
 8017c9a:	4628      	mov	r0, r5
 8017c9c:	4621      	mov	r1, r4
 8017c9e:	f7ff ff5f 	bl	8017b60 <__sflush_r>
 8017ca2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017ca4:	07da      	lsls	r2, r3, #31
 8017ca6:	4605      	mov	r5, r0
 8017ca8:	d4e4      	bmi.n	8017c74 <_fflush_r+0xc>
 8017caa:	89a3      	ldrh	r3, [r4, #12]
 8017cac:	059b      	lsls	r3, r3, #22
 8017cae:	d4e1      	bmi.n	8017c74 <_fflush_r+0xc>
 8017cb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017cb2:	f7fe fb4b 	bl	801634c <__retarget_lock_release_recursive>
 8017cb6:	e7dd      	b.n	8017c74 <_fflush_r+0xc>

08017cb8 <_sbrk_r>:
 8017cb8:	b538      	push	{r3, r4, r5, lr}
 8017cba:	4d06      	ldr	r5, [pc, #24]	@ (8017cd4 <_sbrk_r+0x1c>)
 8017cbc:	2300      	movs	r3, #0
 8017cbe:	4604      	mov	r4, r0
 8017cc0:	4608      	mov	r0, r1
 8017cc2:	602b      	str	r3, [r5, #0]
 8017cc4:	f7ef f812 	bl	8006cec <_sbrk>
 8017cc8:	1c43      	adds	r3, r0, #1
 8017cca:	d102      	bne.n	8017cd2 <_sbrk_r+0x1a>
 8017ccc:	682b      	ldr	r3, [r5, #0]
 8017cce:	b103      	cbz	r3, 8017cd2 <_sbrk_r+0x1a>
 8017cd0:	6023      	str	r3, [r4, #0]
 8017cd2:	bd38      	pop	{r3, r4, r5, pc}
 8017cd4:	2000e6b4 	.word	0x2000e6b4

08017cd8 <__assert_func>:
 8017cd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017cda:	4614      	mov	r4, r2
 8017cdc:	461a      	mov	r2, r3
 8017cde:	4b09      	ldr	r3, [pc, #36]	@ (8017d04 <__assert_func+0x2c>)
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	4605      	mov	r5, r0
 8017ce4:	68d8      	ldr	r0, [r3, #12]
 8017ce6:	b954      	cbnz	r4, 8017cfe <__assert_func+0x26>
 8017ce8:	4b07      	ldr	r3, [pc, #28]	@ (8017d08 <__assert_func+0x30>)
 8017cea:	461c      	mov	r4, r3
 8017cec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017cf0:	9100      	str	r1, [sp, #0]
 8017cf2:	462b      	mov	r3, r5
 8017cf4:	4905      	ldr	r1, [pc, #20]	@ (8017d0c <__assert_func+0x34>)
 8017cf6:	f000 f857 	bl	8017da8 <fiprintf>
 8017cfa:	f000 f867 	bl	8017dcc <abort>
 8017cfe:	4b04      	ldr	r3, [pc, #16]	@ (8017d10 <__assert_func+0x38>)
 8017d00:	e7f4      	b.n	8017cec <__assert_func+0x14>
 8017d02:	bf00      	nop
 8017d04:	200001f4 	.word	0x200001f4
 8017d08:	080190d6 	.word	0x080190d6
 8017d0c:	080190a8 	.word	0x080190a8
 8017d10:	0801909b 	.word	0x0801909b

08017d14 <_calloc_r>:
 8017d14:	b570      	push	{r4, r5, r6, lr}
 8017d16:	fba1 5402 	umull	r5, r4, r1, r2
 8017d1a:	b93c      	cbnz	r4, 8017d2c <_calloc_r+0x18>
 8017d1c:	4629      	mov	r1, r5
 8017d1e:	f7fe fedd 	bl	8016adc <_malloc_r>
 8017d22:	4606      	mov	r6, r0
 8017d24:	b928      	cbnz	r0, 8017d32 <_calloc_r+0x1e>
 8017d26:	2600      	movs	r6, #0
 8017d28:	4630      	mov	r0, r6
 8017d2a:	bd70      	pop	{r4, r5, r6, pc}
 8017d2c:	220c      	movs	r2, #12
 8017d2e:	6002      	str	r2, [r0, #0]
 8017d30:	e7f9      	b.n	8017d26 <_calloc_r+0x12>
 8017d32:	462a      	mov	r2, r5
 8017d34:	4621      	mov	r1, r4
 8017d36:	f7fe fa36 	bl	80161a6 <memset>
 8017d3a:	e7f5      	b.n	8017d28 <_calloc_r+0x14>

08017d3c <malloc>:
 8017d3c:	4b02      	ldr	r3, [pc, #8]	@ (8017d48 <malloc+0xc>)
 8017d3e:	4601      	mov	r1, r0
 8017d40:	6818      	ldr	r0, [r3, #0]
 8017d42:	f7fe becb 	b.w	8016adc <_malloc_r>
 8017d46:	bf00      	nop
 8017d48:	200001f4 	.word	0x200001f4

08017d4c <_realloc_r>:
 8017d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d50:	4680      	mov	r8, r0
 8017d52:	4615      	mov	r5, r2
 8017d54:	460c      	mov	r4, r1
 8017d56:	b921      	cbnz	r1, 8017d62 <_realloc_r+0x16>
 8017d58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d5c:	4611      	mov	r1, r2
 8017d5e:	f7fe bebd 	b.w	8016adc <_malloc_r>
 8017d62:	b92a      	cbnz	r2, 8017d70 <_realloc_r+0x24>
 8017d64:	f7fe fb14 	bl	8016390 <_free_r>
 8017d68:	2400      	movs	r4, #0
 8017d6a:	4620      	mov	r0, r4
 8017d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d70:	f000 f833 	bl	8017dda <_malloc_usable_size_r>
 8017d74:	4285      	cmp	r5, r0
 8017d76:	4606      	mov	r6, r0
 8017d78:	d802      	bhi.n	8017d80 <_realloc_r+0x34>
 8017d7a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017d7e:	d8f4      	bhi.n	8017d6a <_realloc_r+0x1e>
 8017d80:	4629      	mov	r1, r5
 8017d82:	4640      	mov	r0, r8
 8017d84:	f7fe feaa 	bl	8016adc <_malloc_r>
 8017d88:	4607      	mov	r7, r0
 8017d8a:	2800      	cmp	r0, #0
 8017d8c:	d0ec      	beq.n	8017d68 <_realloc_r+0x1c>
 8017d8e:	42b5      	cmp	r5, r6
 8017d90:	462a      	mov	r2, r5
 8017d92:	4621      	mov	r1, r4
 8017d94:	bf28      	it	cs
 8017d96:	4632      	movcs	r2, r6
 8017d98:	f7fe fae1 	bl	801635e <memcpy>
 8017d9c:	4621      	mov	r1, r4
 8017d9e:	4640      	mov	r0, r8
 8017da0:	f7fe faf6 	bl	8016390 <_free_r>
 8017da4:	463c      	mov	r4, r7
 8017da6:	e7e0      	b.n	8017d6a <_realloc_r+0x1e>

08017da8 <fiprintf>:
 8017da8:	b40e      	push	{r1, r2, r3}
 8017daa:	b503      	push	{r0, r1, lr}
 8017dac:	4601      	mov	r1, r0
 8017dae:	ab03      	add	r3, sp, #12
 8017db0:	4805      	ldr	r0, [pc, #20]	@ (8017dc8 <fiprintf+0x20>)
 8017db2:	f853 2b04 	ldr.w	r2, [r3], #4
 8017db6:	6800      	ldr	r0, [r0, #0]
 8017db8:	9301      	str	r3, [sp, #4]
 8017dba:	f000 f83f 	bl	8017e3c <_vfiprintf_r>
 8017dbe:	b002      	add	sp, #8
 8017dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8017dc4:	b003      	add	sp, #12
 8017dc6:	4770      	bx	lr
 8017dc8:	200001f4 	.word	0x200001f4

08017dcc <abort>:
 8017dcc:	b508      	push	{r3, lr}
 8017dce:	2006      	movs	r0, #6
 8017dd0:	f000 fa08 	bl	80181e4 <raise>
 8017dd4:	2001      	movs	r0, #1
 8017dd6:	f7ee ff11 	bl	8006bfc <_exit>

08017dda <_malloc_usable_size_r>:
 8017dda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017dde:	1f18      	subs	r0, r3, #4
 8017de0:	2b00      	cmp	r3, #0
 8017de2:	bfbc      	itt	lt
 8017de4:	580b      	ldrlt	r3, [r1, r0]
 8017de6:	18c0      	addlt	r0, r0, r3
 8017de8:	4770      	bx	lr

08017dea <__sfputc_r>:
 8017dea:	6893      	ldr	r3, [r2, #8]
 8017dec:	3b01      	subs	r3, #1
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	b410      	push	{r4}
 8017df2:	6093      	str	r3, [r2, #8]
 8017df4:	da08      	bge.n	8017e08 <__sfputc_r+0x1e>
 8017df6:	6994      	ldr	r4, [r2, #24]
 8017df8:	42a3      	cmp	r3, r4
 8017dfa:	db01      	blt.n	8017e00 <__sfputc_r+0x16>
 8017dfc:	290a      	cmp	r1, #10
 8017dfe:	d103      	bne.n	8017e08 <__sfputc_r+0x1e>
 8017e00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e04:	f000 b932 	b.w	801806c <__swbuf_r>
 8017e08:	6813      	ldr	r3, [r2, #0]
 8017e0a:	1c58      	adds	r0, r3, #1
 8017e0c:	6010      	str	r0, [r2, #0]
 8017e0e:	7019      	strb	r1, [r3, #0]
 8017e10:	4608      	mov	r0, r1
 8017e12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e16:	4770      	bx	lr

08017e18 <__sfputs_r>:
 8017e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e1a:	4606      	mov	r6, r0
 8017e1c:	460f      	mov	r7, r1
 8017e1e:	4614      	mov	r4, r2
 8017e20:	18d5      	adds	r5, r2, r3
 8017e22:	42ac      	cmp	r4, r5
 8017e24:	d101      	bne.n	8017e2a <__sfputs_r+0x12>
 8017e26:	2000      	movs	r0, #0
 8017e28:	e007      	b.n	8017e3a <__sfputs_r+0x22>
 8017e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e2e:	463a      	mov	r2, r7
 8017e30:	4630      	mov	r0, r6
 8017e32:	f7ff ffda 	bl	8017dea <__sfputc_r>
 8017e36:	1c43      	adds	r3, r0, #1
 8017e38:	d1f3      	bne.n	8017e22 <__sfputs_r+0xa>
 8017e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017e3c <_vfiprintf_r>:
 8017e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e40:	460d      	mov	r5, r1
 8017e42:	b09d      	sub	sp, #116	@ 0x74
 8017e44:	4614      	mov	r4, r2
 8017e46:	4698      	mov	r8, r3
 8017e48:	4606      	mov	r6, r0
 8017e4a:	b118      	cbz	r0, 8017e54 <_vfiprintf_r+0x18>
 8017e4c:	6a03      	ldr	r3, [r0, #32]
 8017e4e:	b90b      	cbnz	r3, 8017e54 <_vfiprintf_r+0x18>
 8017e50:	f7fe f8e2 	bl	8016018 <__sinit>
 8017e54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017e56:	07d9      	lsls	r1, r3, #31
 8017e58:	d405      	bmi.n	8017e66 <_vfiprintf_r+0x2a>
 8017e5a:	89ab      	ldrh	r3, [r5, #12]
 8017e5c:	059a      	lsls	r2, r3, #22
 8017e5e:	d402      	bmi.n	8017e66 <_vfiprintf_r+0x2a>
 8017e60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017e62:	f7fe fa72 	bl	801634a <__retarget_lock_acquire_recursive>
 8017e66:	89ab      	ldrh	r3, [r5, #12]
 8017e68:	071b      	lsls	r3, r3, #28
 8017e6a:	d501      	bpl.n	8017e70 <_vfiprintf_r+0x34>
 8017e6c:	692b      	ldr	r3, [r5, #16]
 8017e6e:	b99b      	cbnz	r3, 8017e98 <_vfiprintf_r+0x5c>
 8017e70:	4629      	mov	r1, r5
 8017e72:	4630      	mov	r0, r6
 8017e74:	f000 f938 	bl	80180e8 <__swsetup_r>
 8017e78:	b170      	cbz	r0, 8017e98 <_vfiprintf_r+0x5c>
 8017e7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017e7c:	07dc      	lsls	r4, r3, #31
 8017e7e:	d504      	bpl.n	8017e8a <_vfiprintf_r+0x4e>
 8017e80:	f04f 30ff 	mov.w	r0, #4294967295
 8017e84:	b01d      	add	sp, #116	@ 0x74
 8017e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e8a:	89ab      	ldrh	r3, [r5, #12]
 8017e8c:	0598      	lsls	r0, r3, #22
 8017e8e:	d4f7      	bmi.n	8017e80 <_vfiprintf_r+0x44>
 8017e90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017e92:	f7fe fa5b 	bl	801634c <__retarget_lock_release_recursive>
 8017e96:	e7f3      	b.n	8017e80 <_vfiprintf_r+0x44>
 8017e98:	2300      	movs	r3, #0
 8017e9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8017e9c:	2320      	movs	r3, #32
 8017e9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017ea2:	f8cd 800c 	str.w	r8, [sp, #12]
 8017ea6:	2330      	movs	r3, #48	@ 0x30
 8017ea8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018058 <_vfiprintf_r+0x21c>
 8017eac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017eb0:	f04f 0901 	mov.w	r9, #1
 8017eb4:	4623      	mov	r3, r4
 8017eb6:	469a      	mov	sl, r3
 8017eb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017ebc:	b10a      	cbz	r2, 8017ec2 <_vfiprintf_r+0x86>
 8017ebe:	2a25      	cmp	r2, #37	@ 0x25
 8017ec0:	d1f9      	bne.n	8017eb6 <_vfiprintf_r+0x7a>
 8017ec2:	ebba 0b04 	subs.w	fp, sl, r4
 8017ec6:	d00b      	beq.n	8017ee0 <_vfiprintf_r+0xa4>
 8017ec8:	465b      	mov	r3, fp
 8017eca:	4622      	mov	r2, r4
 8017ecc:	4629      	mov	r1, r5
 8017ece:	4630      	mov	r0, r6
 8017ed0:	f7ff ffa2 	bl	8017e18 <__sfputs_r>
 8017ed4:	3001      	adds	r0, #1
 8017ed6:	f000 80a7 	beq.w	8018028 <_vfiprintf_r+0x1ec>
 8017eda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017edc:	445a      	add	r2, fp
 8017ede:	9209      	str	r2, [sp, #36]	@ 0x24
 8017ee0:	f89a 3000 	ldrb.w	r3, [sl]
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	f000 809f 	beq.w	8018028 <_vfiprintf_r+0x1ec>
 8017eea:	2300      	movs	r3, #0
 8017eec:	f04f 32ff 	mov.w	r2, #4294967295
 8017ef0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017ef4:	f10a 0a01 	add.w	sl, sl, #1
 8017ef8:	9304      	str	r3, [sp, #16]
 8017efa:	9307      	str	r3, [sp, #28]
 8017efc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017f00:	931a      	str	r3, [sp, #104]	@ 0x68
 8017f02:	4654      	mov	r4, sl
 8017f04:	2205      	movs	r2, #5
 8017f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f0a:	4853      	ldr	r0, [pc, #332]	@ (8018058 <_vfiprintf_r+0x21c>)
 8017f0c:	f7e8 f988 	bl	8000220 <memchr>
 8017f10:	9a04      	ldr	r2, [sp, #16]
 8017f12:	b9d8      	cbnz	r0, 8017f4c <_vfiprintf_r+0x110>
 8017f14:	06d1      	lsls	r1, r2, #27
 8017f16:	bf44      	itt	mi
 8017f18:	2320      	movmi	r3, #32
 8017f1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017f1e:	0713      	lsls	r3, r2, #28
 8017f20:	bf44      	itt	mi
 8017f22:	232b      	movmi	r3, #43	@ 0x2b
 8017f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017f28:	f89a 3000 	ldrb.w	r3, [sl]
 8017f2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8017f2e:	d015      	beq.n	8017f5c <_vfiprintf_r+0x120>
 8017f30:	9a07      	ldr	r2, [sp, #28]
 8017f32:	4654      	mov	r4, sl
 8017f34:	2000      	movs	r0, #0
 8017f36:	f04f 0c0a 	mov.w	ip, #10
 8017f3a:	4621      	mov	r1, r4
 8017f3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017f40:	3b30      	subs	r3, #48	@ 0x30
 8017f42:	2b09      	cmp	r3, #9
 8017f44:	d94b      	bls.n	8017fde <_vfiprintf_r+0x1a2>
 8017f46:	b1b0      	cbz	r0, 8017f76 <_vfiprintf_r+0x13a>
 8017f48:	9207      	str	r2, [sp, #28]
 8017f4a:	e014      	b.n	8017f76 <_vfiprintf_r+0x13a>
 8017f4c:	eba0 0308 	sub.w	r3, r0, r8
 8017f50:	fa09 f303 	lsl.w	r3, r9, r3
 8017f54:	4313      	orrs	r3, r2
 8017f56:	9304      	str	r3, [sp, #16]
 8017f58:	46a2      	mov	sl, r4
 8017f5a:	e7d2      	b.n	8017f02 <_vfiprintf_r+0xc6>
 8017f5c:	9b03      	ldr	r3, [sp, #12]
 8017f5e:	1d19      	adds	r1, r3, #4
 8017f60:	681b      	ldr	r3, [r3, #0]
 8017f62:	9103      	str	r1, [sp, #12]
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	bfbb      	ittet	lt
 8017f68:	425b      	neglt	r3, r3
 8017f6a:	f042 0202 	orrlt.w	r2, r2, #2
 8017f6e:	9307      	strge	r3, [sp, #28]
 8017f70:	9307      	strlt	r3, [sp, #28]
 8017f72:	bfb8      	it	lt
 8017f74:	9204      	strlt	r2, [sp, #16]
 8017f76:	7823      	ldrb	r3, [r4, #0]
 8017f78:	2b2e      	cmp	r3, #46	@ 0x2e
 8017f7a:	d10a      	bne.n	8017f92 <_vfiprintf_r+0x156>
 8017f7c:	7863      	ldrb	r3, [r4, #1]
 8017f7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8017f80:	d132      	bne.n	8017fe8 <_vfiprintf_r+0x1ac>
 8017f82:	9b03      	ldr	r3, [sp, #12]
 8017f84:	1d1a      	adds	r2, r3, #4
 8017f86:	681b      	ldr	r3, [r3, #0]
 8017f88:	9203      	str	r2, [sp, #12]
 8017f8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017f8e:	3402      	adds	r4, #2
 8017f90:	9305      	str	r3, [sp, #20]
 8017f92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018068 <_vfiprintf_r+0x22c>
 8017f96:	7821      	ldrb	r1, [r4, #0]
 8017f98:	2203      	movs	r2, #3
 8017f9a:	4650      	mov	r0, sl
 8017f9c:	f7e8 f940 	bl	8000220 <memchr>
 8017fa0:	b138      	cbz	r0, 8017fb2 <_vfiprintf_r+0x176>
 8017fa2:	9b04      	ldr	r3, [sp, #16]
 8017fa4:	eba0 000a 	sub.w	r0, r0, sl
 8017fa8:	2240      	movs	r2, #64	@ 0x40
 8017faa:	4082      	lsls	r2, r0
 8017fac:	4313      	orrs	r3, r2
 8017fae:	3401      	adds	r4, #1
 8017fb0:	9304      	str	r3, [sp, #16]
 8017fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017fb6:	4829      	ldr	r0, [pc, #164]	@ (801805c <_vfiprintf_r+0x220>)
 8017fb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017fbc:	2206      	movs	r2, #6
 8017fbe:	f7e8 f92f 	bl	8000220 <memchr>
 8017fc2:	2800      	cmp	r0, #0
 8017fc4:	d03f      	beq.n	8018046 <_vfiprintf_r+0x20a>
 8017fc6:	4b26      	ldr	r3, [pc, #152]	@ (8018060 <_vfiprintf_r+0x224>)
 8017fc8:	bb1b      	cbnz	r3, 8018012 <_vfiprintf_r+0x1d6>
 8017fca:	9b03      	ldr	r3, [sp, #12]
 8017fcc:	3307      	adds	r3, #7
 8017fce:	f023 0307 	bic.w	r3, r3, #7
 8017fd2:	3308      	adds	r3, #8
 8017fd4:	9303      	str	r3, [sp, #12]
 8017fd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017fd8:	443b      	add	r3, r7
 8017fda:	9309      	str	r3, [sp, #36]	@ 0x24
 8017fdc:	e76a      	b.n	8017eb4 <_vfiprintf_r+0x78>
 8017fde:	fb0c 3202 	mla	r2, ip, r2, r3
 8017fe2:	460c      	mov	r4, r1
 8017fe4:	2001      	movs	r0, #1
 8017fe6:	e7a8      	b.n	8017f3a <_vfiprintf_r+0xfe>
 8017fe8:	2300      	movs	r3, #0
 8017fea:	3401      	adds	r4, #1
 8017fec:	9305      	str	r3, [sp, #20]
 8017fee:	4619      	mov	r1, r3
 8017ff0:	f04f 0c0a 	mov.w	ip, #10
 8017ff4:	4620      	mov	r0, r4
 8017ff6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017ffa:	3a30      	subs	r2, #48	@ 0x30
 8017ffc:	2a09      	cmp	r2, #9
 8017ffe:	d903      	bls.n	8018008 <_vfiprintf_r+0x1cc>
 8018000:	2b00      	cmp	r3, #0
 8018002:	d0c6      	beq.n	8017f92 <_vfiprintf_r+0x156>
 8018004:	9105      	str	r1, [sp, #20]
 8018006:	e7c4      	b.n	8017f92 <_vfiprintf_r+0x156>
 8018008:	fb0c 2101 	mla	r1, ip, r1, r2
 801800c:	4604      	mov	r4, r0
 801800e:	2301      	movs	r3, #1
 8018010:	e7f0      	b.n	8017ff4 <_vfiprintf_r+0x1b8>
 8018012:	ab03      	add	r3, sp, #12
 8018014:	9300      	str	r3, [sp, #0]
 8018016:	462a      	mov	r2, r5
 8018018:	4b12      	ldr	r3, [pc, #72]	@ (8018064 <_vfiprintf_r+0x228>)
 801801a:	a904      	add	r1, sp, #16
 801801c:	4630      	mov	r0, r6
 801801e:	f3af 8000 	nop.w
 8018022:	4607      	mov	r7, r0
 8018024:	1c78      	adds	r0, r7, #1
 8018026:	d1d6      	bne.n	8017fd6 <_vfiprintf_r+0x19a>
 8018028:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801802a:	07d9      	lsls	r1, r3, #31
 801802c:	d405      	bmi.n	801803a <_vfiprintf_r+0x1fe>
 801802e:	89ab      	ldrh	r3, [r5, #12]
 8018030:	059a      	lsls	r2, r3, #22
 8018032:	d402      	bmi.n	801803a <_vfiprintf_r+0x1fe>
 8018034:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018036:	f7fe f989 	bl	801634c <__retarget_lock_release_recursive>
 801803a:	89ab      	ldrh	r3, [r5, #12]
 801803c:	065b      	lsls	r3, r3, #25
 801803e:	f53f af1f 	bmi.w	8017e80 <_vfiprintf_r+0x44>
 8018042:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018044:	e71e      	b.n	8017e84 <_vfiprintf_r+0x48>
 8018046:	ab03      	add	r3, sp, #12
 8018048:	9300      	str	r3, [sp, #0]
 801804a:	462a      	mov	r2, r5
 801804c:	4b05      	ldr	r3, [pc, #20]	@ (8018064 <_vfiprintf_r+0x228>)
 801804e:	a904      	add	r1, sp, #16
 8018050:	4630      	mov	r0, r6
 8018052:	f7ff fc65 	bl	8017920 <_printf_i>
 8018056:	e7e4      	b.n	8018022 <_vfiprintf_r+0x1e6>
 8018058:	08019068 	.word	0x08019068
 801805c:	08019072 	.word	0x08019072
 8018060:	00000000 	.word	0x00000000
 8018064:	08017e19 	.word	0x08017e19
 8018068:	0801906e 	.word	0x0801906e

0801806c <__swbuf_r>:
 801806c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801806e:	460e      	mov	r6, r1
 8018070:	4614      	mov	r4, r2
 8018072:	4605      	mov	r5, r0
 8018074:	b118      	cbz	r0, 801807e <__swbuf_r+0x12>
 8018076:	6a03      	ldr	r3, [r0, #32]
 8018078:	b90b      	cbnz	r3, 801807e <__swbuf_r+0x12>
 801807a:	f7fd ffcd 	bl	8016018 <__sinit>
 801807e:	69a3      	ldr	r3, [r4, #24]
 8018080:	60a3      	str	r3, [r4, #8]
 8018082:	89a3      	ldrh	r3, [r4, #12]
 8018084:	071a      	lsls	r2, r3, #28
 8018086:	d501      	bpl.n	801808c <__swbuf_r+0x20>
 8018088:	6923      	ldr	r3, [r4, #16]
 801808a:	b943      	cbnz	r3, 801809e <__swbuf_r+0x32>
 801808c:	4621      	mov	r1, r4
 801808e:	4628      	mov	r0, r5
 8018090:	f000 f82a 	bl	80180e8 <__swsetup_r>
 8018094:	b118      	cbz	r0, 801809e <__swbuf_r+0x32>
 8018096:	f04f 37ff 	mov.w	r7, #4294967295
 801809a:	4638      	mov	r0, r7
 801809c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801809e:	6823      	ldr	r3, [r4, #0]
 80180a0:	6922      	ldr	r2, [r4, #16]
 80180a2:	1a98      	subs	r0, r3, r2
 80180a4:	6963      	ldr	r3, [r4, #20]
 80180a6:	b2f6      	uxtb	r6, r6
 80180a8:	4283      	cmp	r3, r0
 80180aa:	4637      	mov	r7, r6
 80180ac:	dc05      	bgt.n	80180ba <__swbuf_r+0x4e>
 80180ae:	4621      	mov	r1, r4
 80180b0:	4628      	mov	r0, r5
 80180b2:	f7ff fdd9 	bl	8017c68 <_fflush_r>
 80180b6:	2800      	cmp	r0, #0
 80180b8:	d1ed      	bne.n	8018096 <__swbuf_r+0x2a>
 80180ba:	68a3      	ldr	r3, [r4, #8]
 80180bc:	3b01      	subs	r3, #1
 80180be:	60a3      	str	r3, [r4, #8]
 80180c0:	6823      	ldr	r3, [r4, #0]
 80180c2:	1c5a      	adds	r2, r3, #1
 80180c4:	6022      	str	r2, [r4, #0]
 80180c6:	701e      	strb	r6, [r3, #0]
 80180c8:	6962      	ldr	r2, [r4, #20]
 80180ca:	1c43      	adds	r3, r0, #1
 80180cc:	429a      	cmp	r2, r3
 80180ce:	d004      	beq.n	80180da <__swbuf_r+0x6e>
 80180d0:	89a3      	ldrh	r3, [r4, #12]
 80180d2:	07db      	lsls	r3, r3, #31
 80180d4:	d5e1      	bpl.n	801809a <__swbuf_r+0x2e>
 80180d6:	2e0a      	cmp	r6, #10
 80180d8:	d1df      	bne.n	801809a <__swbuf_r+0x2e>
 80180da:	4621      	mov	r1, r4
 80180dc:	4628      	mov	r0, r5
 80180de:	f7ff fdc3 	bl	8017c68 <_fflush_r>
 80180e2:	2800      	cmp	r0, #0
 80180e4:	d0d9      	beq.n	801809a <__swbuf_r+0x2e>
 80180e6:	e7d6      	b.n	8018096 <__swbuf_r+0x2a>

080180e8 <__swsetup_r>:
 80180e8:	b538      	push	{r3, r4, r5, lr}
 80180ea:	4b29      	ldr	r3, [pc, #164]	@ (8018190 <__swsetup_r+0xa8>)
 80180ec:	4605      	mov	r5, r0
 80180ee:	6818      	ldr	r0, [r3, #0]
 80180f0:	460c      	mov	r4, r1
 80180f2:	b118      	cbz	r0, 80180fc <__swsetup_r+0x14>
 80180f4:	6a03      	ldr	r3, [r0, #32]
 80180f6:	b90b      	cbnz	r3, 80180fc <__swsetup_r+0x14>
 80180f8:	f7fd ff8e 	bl	8016018 <__sinit>
 80180fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018100:	0719      	lsls	r1, r3, #28
 8018102:	d422      	bmi.n	801814a <__swsetup_r+0x62>
 8018104:	06da      	lsls	r2, r3, #27
 8018106:	d407      	bmi.n	8018118 <__swsetup_r+0x30>
 8018108:	2209      	movs	r2, #9
 801810a:	602a      	str	r2, [r5, #0]
 801810c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018110:	81a3      	strh	r3, [r4, #12]
 8018112:	f04f 30ff 	mov.w	r0, #4294967295
 8018116:	e033      	b.n	8018180 <__swsetup_r+0x98>
 8018118:	0758      	lsls	r0, r3, #29
 801811a:	d512      	bpl.n	8018142 <__swsetup_r+0x5a>
 801811c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801811e:	b141      	cbz	r1, 8018132 <__swsetup_r+0x4a>
 8018120:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018124:	4299      	cmp	r1, r3
 8018126:	d002      	beq.n	801812e <__swsetup_r+0x46>
 8018128:	4628      	mov	r0, r5
 801812a:	f7fe f931 	bl	8016390 <_free_r>
 801812e:	2300      	movs	r3, #0
 8018130:	6363      	str	r3, [r4, #52]	@ 0x34
 8018132:	89a3      	ldrh	r3, [r4, #12]
 8018134:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018138:	81a3      	strh	r3, [r4, #12]
 801813a:	2300      	movs	r3, #0
 801813c:	6063      	str	r3, [r4, #4]
 801813e:	6923      	ldr	r3, [r4, #16]
 8018140:	6023      	str	r3, [r4, #0]
 8018142:	89a3      	ldrh	r3, [r4, #12]
 8018144:	f043 0308 	orr.w	r3, r3, #8
 8018148:	81a3      	strh	r3, [r4, #12]
 801814a:	6923      	ldr	r3, [r4, #16]
 801814c:	b94b      	cbnz	r3, 8018162 <__swsetup_r+0x7a>
 801814e:	89a3      	ldrh	r3, [r4, #12]
 8018150:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018158:	d003      	beq.n	8018162 <__swsetup_r+0x7a>
 801815a:	4621      	mov	r1, r4
 801815c:	4628      	mov	r0, r5
 801815e:	f000 f883 	bl	8018268 <__smakebuf_r>
 8018162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018166:	f013 0201 	ands.w	r2, r3, #1
 801816a:	d00a      	beq.n	8018182 <__swsetup_r+0x9a>
 801816c:	2200      	movs	r2, #0
 801816e:	60a2      	str	r2, [r4, #8]
 8018170:	6962      	ldr	r2, [r4, #20]
 8018172:	4252      	negs	r2, r2
 8018174:	61a2      	str	r2, [r4, #24]
 8018176:	6922      	ldr	r2, [r4, #16]
 8018178:	b942      	cbnz	r2, 801818c <__swsetup_r+0xa4>
 801817a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801817e:	d1c5      	bne.n	801810c <__swsetup_r+0x24>
 8018180:	bd38      	pop	{r3, r4, r5, pc}
 8018182:	0799      	lsls	r1, r3, #30
 8018184:	bf58      	it	pl
 8018186:	6962      	ldrpl	r2, [r4, #20]
 8018188:	60a2      	str	r2, [r4, #8]
 801818a:	e7f4      	b.n	8018176 <__swsetup_r+0x8e>
 801818c:	2000      	movs	r0, #0
 801818e:	e7f7      	b.n	8018180 <__swsetup_r+0x98>
 8018190:	200001f4 	.word	0x200001f4

08018194 <_raise_r>:
 8018194:	291f      	cmp	r1, #31
 8018196:	b538      	push	{r3, r4, r5, lr}
 8018198:	4605      	mov	r5, r0
 801819a:	460c      	mov	r4, r1
 801819c:	d904      	bls.n	80181a8 <_raise_r+0x14>
 801819e:	2316      	movs	r3, #22
 80181a0:	6003      	str	r3, [r0, #0]
 80181a2:	f04f 30ff 	mov.w	r0, #4294967295
 80181a6:	bd38      	pop	{r3, r4, r5, pc}
 80181a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80181aa:	b112      	cbz	r2, 80181b2 <_raise_r+0x1e>
 80181ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80181b0:	b94b      	cbnz	r3, 80181c6 <_raise_r+0x32>
 80181b2:	4628      	mov	r0, r5
 80181b4:	f000 f830 	bl	8018218 <_getpid_r>
 80181b8:	4622      	mov	r2, r4
 80181ba:	4601      	mov	r1, r0
 80181bc:	4628      	mov	r0, r5
 80181be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80181c2:	f000 b817 	b.w	80181f4 <_kill_r>
 80181c6:	2b01      	cmp	r3, #1
 80181c8:	d00a      	beq.n	80181e0 <_raise_r+0x4c>
 80181ca:	1c59      	adds	r1, r3, #1
 80181cc:	d103      	bne.n	80181d6 <_raise_r+0x42>
 80181ce:	2316      	movs	r3, #22
 80181d0:	6003      	str	r3, [r0, #0]
 80181d2:	2001      	movs	r0, #1
 80181d4:	e7e7      	b.n	80181a6 <_raise_r+0x12>
 80181d6:	2100      	movs	r1, #0
 80181d8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80181dc:	4620      	mov	r0, r4
 80181de:	4798      	blx	r3
 80181e0:	2000      	movs	r0, #0
 80181e2:	e7e0      	b.n	80181a6 <_raise_r+0x12>

080181e4 <raise>:
 80181e4:	4b02      	ldr	r3, [pc, #8]	@ (80181f0 <raise+0xc>)
 80181e6:	4601      	mov	r1, r0
 80181e8:	6818      	ldr	r0, [r3, #0]
 80181ea:	f7ff bfd3 	b.w	8018194 <_raise_r>
 80181ee:	bf00      	nop
 80181f0:	200001f4 	.word	0x200001f4

080181f4 <_kill_r>:
 80181f4:	b538      	push	{r3, r4, r5, lr}
 80181f6:	4d07      	ldr	r5, [pc, #28]	@ (8018214 <_kill_r+0x20>)
 80181f8:	2300      	movs	r3, #0
 80181fa:	4604      	mov	r4, r0
 80181fc:	4608      	mov	r0, r1
 80181fe:	4611      	mov	r1, r2
 8018200:	602b      	str	r3, [r5, #0]
 8018202:	f7ee fceb 	bl	8006bdc <_kill>
 8018206:	1c43      	adds	r3, r0, #1
 8018208:	d102      	bne.n	8018210 <_kill_r+0x1c>
 801820a:	682b      	ldr	r3, [r5, #0]
 801820c:	b103      	cbz	r3, 8018210 <_kill_r+0x1c>
 801820e:	6023      	str	r3, [r4, #0]
 8018210:	bd38      	pop	{r3, r4, r5, pc}
 8018212:	bf00      	nop
 8018214:	2000e6b4 	.word	0x2000e6b4

08018218 <_getpid_r>:
 8018218:	f7ee bcd8 	b.w	8006bcc <_getpid>

0801821c <__swhatbuf_r>:
 801821c:	b570      	push	{r4, r5, r6, lr}
 801821e:	460c      	mov	r4, r1
 8018220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018224:	2900      	cmp	r1, #0
 8018226:	b096      	sub	sp, #88	@ 0x58
 8018228:	4615      	mov	r5, r2
 801822a:	461e      	mov	r6, r3
 801822c:	da0d      	bge.n	801824a <__swhatbuf_r+0x2e>
 801822e:	89a3      	ldrh	r3, [r4, #12]
 8018230:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018234:	f04f 0100 	mov.w	r1, #0
 8018238:	bf14      	ite	ne
 801823a:	2340      	movne	r3, #64	@ 0x40
 801823c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018240:	2000      	movs	r0, #0
 8018242:	6031      	str	r1, [r6, #0]
 8018244:	602b      	str	r3, [r5, #0]
 8018246:	b016      	add	sp, #88	@ 0x58
 8018248:	bd70      	pop	{r4, r5, r6, pc}
 801824a:	466a      	mov	r2, sp
 801824c:	f000 f848 	bl	80182e0 <_fstat_r>
 8018250:	2800      	cmp	r0, #0
 8018252:	dbec      	blt.n	801822e <__swhatbuf_r+0x12>
 8018254:	9901      	ldr	r1, [sp, #4]
 8018256:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801825a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801825e:	4259      	negs	r1, r3
 8018260:	4159      	adcs	r1, r3
 8018262:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018266:	e7eb      	b.n	8018240 <__swhatbuf_r+0x24>

08018268 <__smakebuf_r>:
 8018268:	898b      	ldrh	r3, [r1, #12]
 801826a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801826c:	079d      	lsls	r5, r3, #30
 801826e:	4606      	mov	r6, r0
 8018270:	460c      	mov	r4, r1
 8018272:	d507      	bpl.n	8018284 <__smakebuf_r+0x1c>
 8018274:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018278:	6023      	str	r3, [r4, #0]
 801827a:	6123      	str	r3, [r4, #16]
 801827c:	2301      	movs	r3, #1
 801827e:	6163      	str	r3, [r4, #20]
 8018280:	b003      	add	sp, #12
 8018282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018284:	ab01      	add	r3, sp, #4
 8018286:	466a      	mov	r2, sp
 8018288:	f7ff ffc8 	bl	801821c <__swhatbuf_r>
 801828c:	9f00      	ldr	r7, [sp, #0]
 801828e:	4605      	mov	r5, r0
 8018290:	4639      	mov	r1, r7
 8018292:	4630      	mov	r0, r6
 8018294:	f7fe fc22 	bl	8016adc <_malloc_r>
 8018298:	b948      	cbnz	r0, 80182ae <__smakebuf_r+0x46>
 801829a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801829e:	059a      	lsls	r2, r3, #22
 80182a0:	d4ee      	bmi.n	8018280 <__smakebuf_r+0x18>
 80182a2:	f023 0303 	bic.w	r3, r3, #3
 80182a6:	f043 0302 	orr.w	r3, r3, #2
 80182aa:	81a3      	strh	r3, [r4, #12]
 80182ac:	e7e2      	b.n	8018274 <__smakebuf_r+0xc>
 80182ae:	89a3      	ldrh	r3, [r4, #12]
 80182b0:	6020      	str	r0, [r4, #0]
 80182b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80182b6:	81a3      	strh	r3, [r4, #12]
 80182b8:	9b01      	ldr	r3, [sp, #4]
 80182ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80182be:	b15b      	cbz	r3, 80182d8 <__smakebuf_r+0x70>
 80182c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80182c4:	4630      	mov	r0, r6
 80182c6:	f000 f81d 	bl	8018304 <_isatty_r>
 80182ca:	b128      	cbz	r0, 80182d8 <__smakebuf_r+0x70>
 80182cc:	89a3      	ldrh	r3, [r4, #12]
 80182ce:	f023 0303 	bic.w	r3, r3, #3
 80182d2:	f043 0301 	orr.w	r3, r3, #1
 80182d6:	81a3      	strh	r3, [r4, #12]
 80182d8:	89a3      	ldrh	r3, [r4, #12]
 80182da:	431d      	orrs	r5, r3
 80182dc:	81a5      	strh	r5, [r4, #12]
 80182de:	e7cf      	b.n	8018280 <__smakebuf_r+0x18>

080182e0 <_fstat_r>:
 80182e0:	b538      	push	{r3, r4, r5, lr}
 80182e2:	4d07      	ldr	r5, [pc, #28]	@ (8018300 <_fstat_r+0x20>)
 80182e4:	2300      	movs	r3, #0
 80182e6:	4604      	mov	r4, r0
 80182e8:	4608      	mov	r0, r1
 80182ea:	4611      	mov	r1, r2
 80182ec:	602b      	str	r3, [r5, #0]
 80182ee:	f7ee fcd5 	bl	8006c9c <_fstat>
 80182f2:	1c43      	adds	r3, r0, #1
 80182f4:	d102      	bne.n	80182fc <_fstat_r+0x1c>
 80182f6:	682b      	ldr	r3, [r5, #0]
 80182f8:	b103      	cbz	r3, 80182fc <_fstat_r+0x1c>
 80182fa:	6023      	str	r3, [r4, #0]
 80182fc:	bd38      	pop	{r3, r4, r5, pc}
 80182fe:	bf00      	nop
 8018300:	2000e6b4 	.word	0x2000e6b4

08018304 <_isatty_r>:
 8018304:	b538      	push	{r3, r4, r5, lr}
 8018306:	4d06      	ldr	r5, [pc, #24]	@ (8018320 <_isatty_r+0x1c>)
 8018308:	2300      	movs	r3, #0
 801830a:	4604      	mov	r4, r0
 801830c:	4608      	mov	r0, r1
 801830e:	602b      	str	r3, [r5, #0]
 8018310:	f7ee fcd4 	bl	8006cbc <_isatty>
 8018314:	1c43      	adds	r3, r0, #1
 8018316:	d102      	bne.n	801831e <_isatty_r+0x1a>
 8018318:	682b      	ldr	r3, [r5, #0]
 801831a:	b103      	cbz	r3, 801831e <_isatty_r+0x1a>
 801831c:	6023      	str	r3, [r4, #0]
 801831e:	bd38      	pop	{r3, r4, r5, pc}
 8018320:	2000e6b4 	.word	0x2000e6b4

08018324 <fmaxf>:
 8018324:	b508      	push	{r3, lr}
 8018326:	ed2d 8b02 	vpush	{d8}
 801832a:	eeb0 8a40 	vmov.f32	s16, s0
 801832e:	eef0 8a60 	vmov.f32	s17, s1
 8018332:	f000 f831 	bl	8018398 <__fpclassifyf>
 8018336:	b930      	cbnz	r0, 8018346 <fmaxf+0x22>
 8018338:	eeb0 8a68 	vmov.f32	s16, s17
 801833c:	eeb0 0a48 	vmov.f32	s0, s16
 8018340:	ecbd 8b02 	vpop	{d8}
 8018344:	bd08      	pop	{r3, pc}
 8018346:	eeb0 0a68 	vmov.f32	s0, s17
 801834a:	f000 f825 	bl	8018398 <__fpclassifyf>
 801834e:	2800      	cmp	r0, #0
 8018350:	d0f4      	beq.n	801833c <fmaxf+0x18>
 8018352:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8018356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801835a:	dded      	ble.n	8018338 <fmaxf+0x14>
 801835c:	e7ee      	b.n	801833c <fmaxf+0x18>

0801835e <fminf>:
 801835e:	b508      	push	{r3, lr}
 8018360:	ed2d 8b02 	vpush	{d8}
 8018364:	eeb0 8a40 	vmov.f32	s16, s0
 8018368:	eef0 8a60 	vmov.f32	s17, s1
 801836c:	f000 f814 	bl	8018398 <__fpclassifyf>
 8018370:	b930      	cbnz	r0, 8018380 <fminf+0x22>
 8018372:	eeb0 8a68 	vmov.f32	s16, s17
 8018376:	eeb0 0a48 	vmov.f32	s0, s16
 801837a:	ecbd 8b02 	vpop	{d8}
 801837e:	bd08      	pop	{r3, pc}
 8018380:	eeb0 0a68 	vmov.f32	s0, s17
 8018384:	f000 f808 	bl	8018398 <__fpclassifyf>
 8018388:	2800      	cmp	r0, #0
 801838a:	d0f4      	beq.n	8018376 <fminf+0x18>
 801838c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8018390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018394:	d5ed      	bpl.n	8018372 <fminf+0x14>
 8018396:	e7ee      	b.n	8018376 <fminf+0x18>

08018398 <__fpclassifyf>:
 8018398:	ee10 3a10 	vmov	r3, s0
 801839c:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 80183a0:	d00d      	beq.n	80183be <__fpclassifyf+0x26>
 80183a2:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 80183a6:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 80183aa:	d30a      	bcc.n	80183c2 <__fpclassifyf+0x2a>
 80183ac:	4b07      	ldr	r3, [pc, #28]	@ (80183cc <__fpclassifyf+0x34>)
 80183ae:	1e42      	subs	r2, r0, #1
 80183b0:	429a      	cmp	r2, r3
 80183b2:	d908      	bls.n	80183c6 <__fpclassifyf+0x2e>
 80183b4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 80183b8:	4258      	negs	r0, r3
 80183ba:	4158      	adcs	r0, r3
 80183bc:	4770      	bx	lr
 80183be:	2002      	movs	r0, #2
 80183c0:	4770      	bx	lr
 80183c2:	2004      	movs	r0, #4
 80183c4:	4770      	bx	lr
 80183c6:	2003      	movs	r0, #3
 80183c8:	4770      	bx	lr
 80183ca:	bf00      	nop
 80183cc:	007ffffe 	.word	0x007ffffe

080183d0 <_init>:
 80183d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183d2:	bf00      	nop
 80183d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80183d6:	bc08      	pop	{r3}
 80183d8:	469e      	mov	lr, r3
 80183da:	4770      	bx	lr

080183dc <_fini>:
 80183dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183de:	bf00      	nop
 80183e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80183e2:	bc08      	pop	{r3}
 80183e4:	469e      	mov	lr, r3
 80183e6:	4770      	bx	lr
